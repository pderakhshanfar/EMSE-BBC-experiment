/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 01 01:47:23 GMT 2021
 */

package org.apache.commons.jxpath.ri.model.jdom;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
import org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jdom.Attribute;
import org.jdom.CDATA;
import org.jdom.Comment;
import org.jdom.Content;
import org.jdom.DocType;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.EntityRef;
import org.jdom.Namespace;
import org.jdom.ProcessingInstruction;
import org.jdom.Text;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JDOMNodePointer_ESTest extends JDOMNodePointer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Element element0 = new Element("org.apachR.hommonsQjxpth.til.BasicTypeConverter", "org.apachR.hommonsQjxpth.til.BasicTypeConverter", "org.apachR.hommonsQjxpth.til.BasicTypeConverter");
      assertNotNull(element0);
      assertEquals("org.apachR.hommonsQjxpth.til.BasicTypeConverter", element0.getNamespacePrefix());
      assertEquals("org.apachR.hommonsQjxpth.til.BasicTypeConverter", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("org.apachR.hommonsQjxpth.til.BasicTypeConverter", element0.getName());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      CDATA cDATA0 = new CDATA("org.apachR.hommonsQjxpth.til.BasicTypeConverter");
      assertNotNull(cDATA0);
      assertEquals("org.apachR.hommonsQjxpth.til.BasicTypeConverter", cDATA0.getText());
      assertEquals("org.apachR.hommonsQjxpth.til.BasicTypeConverter", cDATA0.getValue());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("org.apachR.hommonsQjxpth.til.BasicTypeConverter", cDATA0.getText());
      assertEquals("org.apachR.hommonsQjxpth.til.BasicTypeConverter", cDATA0.getValue());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("org.apachR.hommonsQjxpth.til.BasicTypeConverter", element0.getNamespacePrefix());
      assertEquals("org.apachR.hommonsQjxpth.til.BasicTypeConverter", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("org.apachR.hommonsQjxpth.til.BasicTypeConverter", element0.getName());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("org.apachR.hommonsQjxpth.til.BasicTypeConverter", cDATA0.getText());
      assertEquals("org.apachR.hommonsQjxpth.til.BasicTypeConverter", cDATA0.getValue());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("org.apachR.hommonsQjxpth.til.BasicTypeConverter", jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      
      String string0 = jDOMNodePointer1.asPath();
      assertEquals("/text()[1]/org.apachR.hommonsQjxpth.til.BasicTypeConverter:org.apachR.hommonsQjxpth.til.BasicTypeConverter[1]", string0);
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotNull(string0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("org.apachR.hommonsQjxpth.til.BasicTypeConverter", element0.getNamespacePrefix());
      assertEquals("org.apachR.hommonsQjxpth.til.BasicTypeConverter", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("org.apachR.hommonsQjxpth.til.BasicTypeConverter", element0.getName());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("org.apachR.hommonsQjxpth.til.BasicTypeConverter", cDATA0.getText());
      assertEquals("org.apachR.hommonsQjxpth.til.BasicTypeConverter", cDATA0.getValue());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("org.apachR.hommonsQjxpth.til.BasicTypeConverter", jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Element element0 = new Element("z4t", "z4t", "<]SGy(vT`");
      assertNotNull(element0);
      assertEquals(0, element0.getContentSize());
      assertEquals("z4t", element0.getName());
      assertEquals("<]SGy(vT`", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("z4t", element0.getNamespacePrefix());
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0, (String) null);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, element0.getContentSize());
      assertEquals("z4t", element0.getName());
      assertEquals("<]SGy(vT`", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("z4t", element0.getNamespacePrefix());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("<]SGy(vT`", jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      
      QName qName0 = jDOMNodePointer0.getName();
      assertNotNull(qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, element0.getContentSize());
      assertEquals("z4t", element0.getName());
      assertEquals("<]SGy(vT`", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("z4t", element0.getNamespacePrefix());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("<]SGy(vT`", jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("z4t", qName0.getName());
      assertEquals("z4t", qName0.getPrefix());
      assertEquals("z4t:z4t", qName0.toString());
      
      NodePointer nodePointer0 = jDOMNodePointer0.createAttribute((JXPathContext) null, qName0);
      assertNotNull(nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, element0.getContentSize());
      assertEquals("z4t", element0.getName());
      assertEquals("<]SGy(vT`", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("z4t", element0.getNamespacePrefix());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("<]SGy(vT`", jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("z4t", qName0.getName());
      assertEquals("z4t", qName0.getPrefix());
      assertEquals("z4t:z4t", qName0.toString());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(nodePointer0.isLeaf());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isCollection());
      assertTrue(nodePointer0.isNode());
      assertTrue(nodePointer0.isActual());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertEquals("<]SGy(vT`", nodePointer0.getNamespaceURI());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Element element0 = new Element("org.apache.commons.jxpath.util.BasiTypeoverter");
      assertNotNull(element0);
      assertFalse(element0.isRootElement());
      assertEquals("org.apache.commons.jxpath.util.BasiTypeoverter", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0, "org.apache.commons.jxpath.util.BasiTypeoverter");
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(element0.isRootElement());
      assertEquals("org.apache.commons.jxpath.util.BasiTypeoverter", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      
      Element element1 = new Element("org.apache.commons.jxpath.util.BasiTypeoverter");
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      assertEquals(0, element1.getContentSize());
      assertEquals("", element1.getNamespaceURI());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertEquals("org.apache.commons.jxpath.util.BasiTypeoverter", element1.getName());
      
      jDOMNodePointer0.setValue(element1);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(element0.isRootElement());
      assertEquals("org.apache.commons.jxpath.util.BasiTypeoverter", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(0, element1.getContentSize());
      assertEquals("", element1.getNamespaceURI());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertEquals("org.apache.commons.jxpath.util.BasiTypeoverter", element1.getName());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CDATA cDATA0 = new CDATA("");
      assertNotNull(cDATA0);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2648));
      assertNotNull(nodeTypeTest0);
      assertEquals((-2648), nodeTypeTest0.getNodeType());
      
      boolean boolean0 = jDOMNodePointer0.testNode((NodeTest) nodeTypeTest0);
      assertFalse(boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals((-2648), nodeTypeTest0.getNodeType());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertNotNull(processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstructionTest0, locale0, "y]8%x");
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", processingInstructionTest0.getTarget());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      
      boolean boolean0 = jDOMNodePointer0.isLanguage("");
      assertTrue(boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", processingInstructionTest0.getTarget());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Element element0 = new Element("org.apache.commons.jxpath.util.BasicTypeConverter");
      assertNotNull(element0);
      assertEquals("org.apache.commons.jxpath.util.BasicTypeConverter", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      
      Locale locale0 = new Locale("org.apache.commons.jxpath.util.BasicTypeConverter", "org.apache.commons.jxpath.util.BasicTypeConverter");
      assertNotNull(locale0);
      assertEquals("org.apache.commons.jxpath.util.basictypeconverter", locale0.getLanguage());
      assertEquals("org.apache.commons.jxpath.util.basictypeconverter_ORG.APACHE.COMMONS.JXPATH.UTIL.BASICTYPECONVERTER", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ORG.APACHE.COMMONS.JXPATH.UTIL.BASICTYPECONVERTER", locale0.getCountry());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0, "org.apache.commons.jxpath.util.BasicTypeConverter");
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("org.apache.commons.jxpath.util.BasicTypeConverter", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("org.apache.commons.jxpath.util.basictypeconverter", locale0.getLanguage());
      assertEquals("org.apache.commons.jxpath.util.basictypeconverter_ORG.APACHE.COMMONS.JXPATH.UTIL.BASICTYPECONVERTER", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ORG.APACHE.COMMONS.JXPATH.UTIL.BASICTYPECONVERTER", locale0.getCountry());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      
      String string0 = jDOMNodePointer0.getNamespaceURI("");
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("org.apache.commons.jxpath.util.BasicTypeConverter", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("org.apache.commons.jxpath.util.basictypeconverter", locale0.getLanguage());
      assertEquals("org.apache.commons.jxpath.util.basictypeconverter_ORG.APACHE.COMMONS.JXPATH.UTIL.BASICTYPECONVERTER", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ORG.APACHE.COMMONS.JXPATH.UTIL.BASICTYPECONVERTER", locale0.getCountry());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Element element0 = new Element("org.apache.commons.jxpath.util.BasicTypeConverter", "org.apache.commons.jxpath.util.BasicTypeConverter");
      assertNotNull(element0);
      assertEquals(0, element0.getContentSize());
      assertEquals("org.apache.commons.jxpath.util.BasicTypeConverter", element0.getName());
      assertEquals("org.apache.commons.jxpath.util.BasicTypeConverter", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0, "org.apache.commons.jxpath.util.BasicTypeConverter");
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, element0.getContentSize());
      assertEquals("org.apache.commons.jxpath.util.BasicTypeConverter", element0.getName());
      assertEquals("org.apache.commons.jxpath.util.BasicTypeConverter", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals("org.apache.commons.jxpath.util.BasicTypeConverter", jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      
      String string0 = jDOMNodePointer0.getNamespaceURI();
      assertEquals("org.apache.commons.jxpath.util.BasicTypeConverter", string0);
      assertNotNull(string0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, element0.getContentSize());
      assertEquals("org.apache.commons.jxpath.util.BasicTypeConverter", element0.getName());
      assertEquals("org.apache.commons.jxpath.util.BasicTypeConverter", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals("org.apache.commons.jxpath.util.BasicTypeConverter", jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      assertNotNull(nodeTypeTest0);
      assertEquals(0, nodeTypeTest0.getNodeType());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodeTypeTest0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, nodeTypeTest0.getNodeType());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      
      String string0 = jDOMNodePointer0.getLanguage();
      assertNull(string0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, nodeTypeTest0.getNodeType());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      
      Object object0 = jDOMNodePointer0.getImmediateNode();
      assertNull(object0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CDATA cDATA0 = new CDATA("%%9");
      assertNotNull(cDATA0);
      assertEquals("%%9", cDATA0.getText());
      assertEquals("%%9", cDATA0.getValue());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, (Locale) null, "WZRWZut");
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("%%9", cDATA0.getText());
      assertEquals("%%9", cDATA0.getValue());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      
      CDATA cDATA1 = (CDATA)jDOMNodePointer0.getImmediateNode();
      assertSame(cDATA0, cDATA1);
      assertSame(cDATA1, cDATA0);
      assertNotNull(cDATA1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("%%9", cDATA0.getText());
      assertEquals("%%9", cDATA0.getValue());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals("%%9", cDATA1.getText());
      assertEquals("%%9", cDATA1.getValue());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      
      Object object0 = jDOMNodePointer0.getBaseValue();
      assertNull(object0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Comment comment0 = new Comment("r#");
      assertNotNull(comment0);
      assertEquals("r#", comment0.getValue());
      assertEquals("r#", comment0.getText());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(comment0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("r#", comment0.getValue());
      assertEquals("r#", comment0.getText());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      assertNotNull(nodeNameTest0);
      assertNull(nodeNameTest0.getNamespaceURI());
      
      NodeIterator nodeIterator0 = jDOMNodePointer0.childIterator(nodeNameTest0, true, jDOMNodePointer0);
      assertNotNull(nodeIterator0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("r#", comment0.getValue());
      assertEquals("r#", comment0.getText());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, nodeIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Element element0 = new Element("z4t");
      assertNotNull(element0);
      assertFalse(element0.isRootElement());
      assertEquals("z4t", element0.getName());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0, "z4t");
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(element0.isRootElement());
      assertEquals("z4t", element0.getName());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      assertNotNull(nodeNameTest0);
      assertNull(nodeNameTest0.getNamespaceURI());
      
      // Undeclared exception!
      try { 
        JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) element0, (NodeTest) nodeNameTest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.NodeNameTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Element element0 = new Element("org.pache.commons.jxpath.util.BasicTypeConverter", "org.pache.commons.jxpath.util.BasicTypeConverter");
      assertNotNull(element0);
      assertEquals("org.pache.commons.jxpath.util.BasicTypeConverter", element0.getName());
      assertEquals("org.pache.commons.jxpath.util.BasicTypeConverter", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0, "y]8%x");
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("org.pache.commons.jxpath.util.BasicTypeConverter", element0.getName());
      assertEquals("org.pache.commons.jxpath.util.BasicTypeConverter", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("org.pache.commons.jxpath.util.BasicTypeConverter", jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      assertNotNull(nodeNameTest0);
      assertNull(nodeNameTest0.getNamespaceURI());
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.testNode((NodeTest) nodeNameTest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.NodeNameTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CDATA cDATA0 = new CDATA("");
      assertNotNull(cDATA0);
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      
      QName qName0 = new QName("http://www.w3.org/2000/xmlns/", "");
      assertNotNull(qName0);
      assertEquals("http://www.w3.org/2000/xmlns/:", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getPrefix());
      assertEquals("", qName0.getName());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("http://www.w3.org/2000/xmlns/:", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.setValue(variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: http://www.w3.org/2000/xmlns/:
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Element element0 = new Element("org.apache.commosQjxpth.util.Bs2cTypeConverter", "org.apache.commosQjxpth.util.Bs2cTypeConverter", "org.apache.commosQjxpth.util.Bs2cTypeConverter");
      assertNotNull(element0);
      assertEquals("org.apache.commosQjxpth.util.Bs2cTypeConverter", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("org.apache.commosQjxpth.util.Bs2cTypeConverter", element0.getNamespaceURI());
      assertEquals("org.apache.commosQjxpth.util.Bs2cTypeConverter", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0, "org.apache.commosQjxpth.util.Bs2cTypeConverter");
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("org.apache.commosQjxpth.util.Bs2cTypeConverter", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("org.apache.commosQjxpth.util.Bs2cTypeConverter", element0.getNamespaceURI());
      assertEquals("org.apache.commosQjxpth.util.Bs2cTypeConverter", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("org.apache.commosQjxpth.util.Bs2cTypeConverter", jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      
      Document document0 = new Document();
      assertNotNull(document0);
      assertEquals(0, document0.getContentSize());
      assertFalse(document0.hasRootElement());
      assertNull(document0.getBaseURI());
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.setValue(document0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root element not set
         //
         verifyException("org.jdom.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.setValue(locale0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Locale cannot be cast to org.jdom.Element
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = new Document();
      assertNotNull(document0);
      assertEquals(0, document0.getContentSize());
      assertNull(document0.getBaseURI());
      assertFalse(document0.hasRootElement());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(document0, (Locale) null);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, document0.getContentSize());
      assertNull(document0.getBaseURI());
      assertFalse(document0.hasRootElement());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.namespaceIterator();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root element not set
         //
         verifyException("org.jdom.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.isLanguage((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.getNamespaceURI((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Element element0 = new Element("h", "h", "h");
      assertNotNull(element0);
      assertEquals("h", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("h", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("h", element0.getNamespaceURI());
      
      // Undeclared exception!
      try { 
        JDOMNodePointer.findEnclosingAttribute(element0, "O", (Namespace) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jdom.AttributeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Element element0 = new Element("org.apahe.commosQjxpth.util.Bs2cTypeConvertr", "org.apahe.commosQjxpth.util.Bs2cTypeConvertr");
      assertNotNull(element0);
      assertEquals("org.apahe.commosQjxpth.util.Bs2cTypeConvertr", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("org.apahe.commosQjxpth.util.Bs2cTypeConvertr", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("org.apahe.commosQjxpth.util.Bs2cTypeConvertr", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("org.apahe.commosQjxpth.util.Bs2cTypeConvertr", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("org.apahe.commosQjxpth.util.Bs2cTypeConvertr", jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("org.apahe.commosQjxpth.util.Bs2cTypeConvertr", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("org.apahe.commosQjxpth.util.Bs2cTypeConvertr", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("org.apahe.commosQjxpth.util.Bs2cTypeConvertr", jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals("org.apahe.commosQjxpth.util.Bs2cTypeConvertr", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(1, jDOMNodePointer1.getLength());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) locale0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      QName qName0 = jDOMNodePointer1.getName();
      assertTrue(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotNull(qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("org.apahe.commosQjxpth.util.Bs2cTypeConvertr", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("org.apahe.commosQjxpth.util.Bs2cTypeConvertr", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("org.apahe.commosQjxpth.util.Bs2cTypeConvertr", jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals("org.apahe.commosQjxpth.util.Bs2cTypeConvertr", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(qName0.getPrefix());
      assertEquals("org.apahe.commosQjxpth.util.Bs2cTypeConvertr", qName0.toString());
      assertEquals("org.apahe.commosQjxpth.util.Bs2cTypeConvertr", qName0.getName());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      jDOMNodePointer1.createChild((JXPathContext) jXPathContextReferenceImpl0, qName0, Integer.MIN_VALUE, object0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Element element0 = new Element("E", "E");
      assertNotNull(element0);
      assertEquals("E", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("E", element0.getNamespaceURI());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("E", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("E", element0.getNamespaceURI());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("E", jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("E", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("E", element0.getNamespaceURI());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("E", jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("E", jDOMNodePointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertTrue(jDOMNodePointer1.isNode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "VT,<5\"Ao2");
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace", "org.apache.commons.jxpath.ri.JXPathCompiledExpression");
      assertNotNull(qName0);
      assertEquals("http://www.w3.org/XML/1998/namespace:org.apache.commons.jxpath.ri.JXPathCompiledExpression", qName0.toString());
      assertEquals("org.apache.commons.jxpath.ri.JXPathCompiledExpression", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      
      // Undeclared exception!
      jDOMNodePointer1.createChild((JXPathContext) jXPathContextReferenceImpl0, qName0, (-660));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Element element0 = new Element("org.apach.commosQjxph.util.Bs2cTypeConverter", "org.apach.commosQjxph.util.Bs2cTypeConverter", "org.apach.commosQjxph.util.Bs2cTypeConverter");
      assertNotNull(element0);
      assertEquals("org.apach.commosQjxph.util.Bs2cTypeConverter", element0.getNamespacePrefix());
      assertEquals("org.apach.commosQjxph.util.Bs2cTypeConverter", element0.getNamespaceURI());
      assertEquals("org.apach.commosQjxph.util.Bs2cTypeConverter", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0, "org.apach.commosQjxph.util.Bs2cTypeConverter");
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("org.apach.commosQjxph.util.Bs2cTypeConverter", element0.getNamespacePrefix());
      assertEquals("org.apach.commosQjxph.util.Bs2cTypeConverter", element0.getNamespaceURI());
      assertEquals("org.apach.commosQjxph.util.Bs2cTypeConverter", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("org.apach.commosQjxph.util.Bs2cTypeConverter", jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      
      QName qName0 = new QName("<<unknown namespace>>");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("<<unknown namespace>>", qName0.toString());
      assertEquals("<<unknown namespace>>", qName0.getName());
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createAttribute((JXPathContext) null, qName0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The name \"<<unknown namespace>>\" is not legal for JDOM/XML attributes: XML names cannot begin with the character \"<\".
         //
         verifyException("org.jdom.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Element element0 = new Element("org.apache.commons.jxpath.util.BasicTypeConverter", "org.apache.commons.jxpath.util.BasicTypeConverter");
      assertNotNull(element0);
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("org.apache.commons.jxpath.util.BasicTypeConverter", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("org.apache.commons.jxpath.util.BasicTypeConverter", element0.getNamespaceURI());
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0, "org.apache.commons.jxpath.util.BasicTypeConverter");
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("org.apache.commons.jxpath.util.BasicTypeConverter", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("org.apache.commons.jxpath.util.BasicTypeConverter", element0.getNamespaceURI());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("org.apache.commons.jxpath.util.BasicTypeConverter", jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createAttribute((JXPathContext) null, (QName) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      VariablePointer variablePointer0 = new VariablePointer((QName) null);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, variablePointer0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.compareChildNodePointers(variablePointer0, variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: null
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de_DE", locale0.toString());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de_DE", locale0.toString());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.compareChildNodePointers((NodePointer) null, (NodePointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      
      QName qName0 = new QName("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", "org.apache.commons.jxpath.util.BasicTypeConverte");
      assertNotNull(qName0);
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer:org.apache.commons.jxpath.util.BasicTypeConverte", qName0.toString());
      assertEquals("org.apache.commons.jxpath.util.BasicTypeConverte", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer:org.apache.commons.jxpath.util.BasicTypeConverte", qName0.toString());
      assertEquals("org.apache.commons.jxpath.util.BasicTypeConverte", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer:org.apache.commons.jxpath.util.BasicTypeConverte", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
      assertNotNull(beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer:org.apache.commons.jxpath.util.BasicTypeConverte", qName0.toString());
      assertEquals("org.apache.commons.jxpath.util.BasicTypeConverte", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer:org.apache.commons.jxpath.util.BasicTypeConverte", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer:org.apache.commons.jxpath.util.BasicTypeConverte", qName0.toString());
      assertEquals("org.apache.commons.jxpath.util.BasicTypeConverte", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", qName0.getPrefix());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      VariablePointer variablePointer1 = (VariablePointer)variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) qName0);
      assertSame(variablePointer0, variablePointer1);
      assertSame(variablePointer1, variablePointer0);
      assertNotNull(variablePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer:org.apache.commons.jxpath.util.BasicTypeConverte", qName0.toString());
      assertEquals("org.apache.commons.jxpath.util.BasicTypeConverte", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", qName0.getPrefix());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(variablePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer1.getIndex());
      assertTrue(variablePointer1.isRoot());
      assertFalse(variablePointer1.isAttribute());
      assertTrue(variablePointer1.isActual());
      assertFalse(variablePointer1.isNode());
      
      LinkedList<ProcessingInstruction> linkedList0 = new LinkedList<ProcessingInstruction>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Document document0 = new Document(linkedList0);
      assertNotNull(document0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, document0.getContentSize());
      assertFalse(document0.hasRootElement());
      assertNull(document0.getBaseURI());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(document0, locale0, "org.apache.commons.jxpath.ri.parser.XPathParser");
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals(0, linkedList0.size());
      assertEquals(0, document0.getContentSize());
      assertFalse(document0.hasRootElement());
      assertNull(document0.getBaseURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.compareChildNodePointers(variablePointer0, beanPointer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root element not set
         //
         verifyException("org.jdom.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = jDOMNodePointer0.getName();
      assertNotNull(qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.compareChildNodePointers(variablePointer0, variablePointer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: 'null'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      assertNotNull(nodeTypeTest0);
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace");
      assertNotNull(qName0);
      assertEquals("http", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.toString());
      assertEquals("//www.w3.org/XML/1998/namespace", qName0.getName());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("http", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.toString());
      assertEquals("//www.w3.org/XML/1998/namespace", qName0.getName());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.childIterator(nodeTypeTest0, false, variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: http://www.w3.org/XML/1998/namespace
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(".");
      assertNotNull(processingInstructionTest0);
      assertEquals(".", processingInstructionTest0.getTarget());
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.childIterator(processingInstructionTest0, false, variablePointer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      QName qName0 = new QName("M3", (String) null);
      assertNotNull(qName0);
      assertEquals("M3:null", qName0.toString());
      assertEquals("M3", qName0.getPrefix());
      assertNull(qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      assertNotNull(nodeNameTest0);
      assertEquals("M3:null", qName0.toString());
      assertEquals("M3", qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("M3:null", nodeNameTest0.toString());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodeNameTest0, locale0, (String) null);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("M3:null", qName0.toString());
      assertEquals("M3", qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("M3:null", nodeNameTest0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, jDOMNodePointer0, locale0);
      assertNotNull(beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("M3:null", qName0.toString());
      assertEquals("M3", qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("M3:null", nodeNameTest0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      
      LinkedList<NodeNameTest> linkedList0 = new LinkedList<NodeNameTest>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(nodeNameTest0));
      assertEquals(0, linkedList0.size());
      
      Document document0 = new Document(linkedList0);
      assertNotNull(document0);
      assertFalse(linkedList0.contains(nodeNameTest0));
      assertEquals(0, linkedList0.size());
      assertNull(document0.getBaseURI());
      assertFalse(document0.hasRootElement());
      assertEquals(0, document0.getContentSize());
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(beanPointer0, document0);
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(linkedList0.contains(nodeNameTest0));
      assertEquals("M3:null", qName0.toString());
      assertEquals("M3", qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("M3:null", nodeNameTest0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertEquals(0, linkedList0.size());
      assertNull(document0.getBaseURI());
      assertFalse(document0.hasRootElement());
      assertEquals(0, document0.getContentSize());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      
      // Undeclared exception!
      try { 
        jDOMNodePointer1.childIterator(nodeNameTest0, false, jDOMNodePointer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root element not set
         //
         verifyException("org.jdom.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Element element0 = new Element("h", "h", "h");
      assertNotNull(element0);
      assertEquals("h", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("h", element0.getNamespacePrefix());
      assertEquals("h", element0.getName());
      assertEquals(0, element0.getContentSize());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0, "$6/A!2i^=");
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("h", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("h", element0.getNamespacePrefix());
      assertEquals("h", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("h", jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.attributeIterator((QName) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMAttributeIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = new Document();
      assertNotNull(document0);
      assertNull(document0.getBaseURI());
      assertFalse(document0.hasRootElement());
      assertEquals(0, document0.getContentSize());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(document0, (Locale) null);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(document0.getBaseURI());
      assertFalse(document0.hasRootElement());
      assertEquals(0, document0.getContentSize());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createChild((JXPathContext) null, (QName) null, (-1973));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      QName qName0 = new QName(">uW)sTCUuZA", ">uW)sTCUuZA");
      assertNotNull(qName0);
      assertEquals(">uW)sTCUuZA", qName0.getName());
      assertEquals(">uW)sTCUuZA", qName0.getPrefix());
      assertEquals(">uW)sTCUuZA:>uW)sTCUuZA", qName0.toString());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) linkedList0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, linkedList0.size());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("xml");
      assertNotNull(processingInstructionTest0);
      assertEquals("xml", processingInstructionTest0.getTarget());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, processingInstructionTest0, locale0);
      assertNotNull(beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(">uW)sTCUuZA", qName0.getName());
      assertEquals(">uW)sTCUuZA", qName0.getPrefix());
      assertEquals(">uW)sTCUuZA:>uW)sTCUuZA", qName0.toString());
      assertEquals("xml", processingInstructionTest0.getTarget());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(beanPointer0, linkedList0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, linkedList0.size());
      assertEquals(">uW)sTCUuZA", qName0.getName());
      assertEquals(">uW)sTCUuZA", qName0.getPrefix());
      assertEquals(">uW)sTCUuZA:>uW)sTCUuZA", qName0.toString());
      assertEquals("xml", processingInstructionTest0.getTarget());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isRoot());
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createChild((JXPathContext) jXPathContextReferenceImpl0, qName0, Integer.MIN_VALUE);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: /
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Element element0 = new Element("org.apache.commons.jxpath.util.BasiTypeoverter");
      assertNotNull(element0);
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("org.apache.commons.jxpath.util.BasiTypeoverter", element0.getName());
      
      String string0 = JDOMNodePointer.getLocalName(element0);
      assertEquals("org.apache.commons.jxpath.util.BasiTypeoverter", string0);
      assertNotNull(string0);
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("org.apache.commons.jxpath.util.BasiTypeoverter", element0.getName());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Element element0 = new Element("node");
      assertNotNull(element0);
      assertEquals("node", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      
      String string0 = JDOMNodePointer.getPrefix(element0);
      assertNull(string0);
      assertEquals("node", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) null, (Object) null, (NodeTest) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      CDATA cDATA0 = new CDATA("<<unknown namespace>>");
      assertNotNull(cDATA0);
      assertEquals("<<unknown namespace>>", cDATA0.getText());
      assertEquals("<<unknown namespace>>", cDATA0.getValue());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("<<unknown namespace>>", cDATA0.getText());
      assertEquals("<<unknown namespace>>", cDATA0.getValue());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      
      Object object0 = jDOMNodePointer0.getValue();
      assertEquals("<<unknown namespace>>", object0);
      assertNotNull(object0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("<<unknown namespace>>", cDATA0.getText());
      assertEquals("<<unknown namespace>>", cDATA0.getValue());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Element element0 = new Element("h", "h", "h");
      assertNotNull(element0);
      assertFalse(element0.isRootElement());
      assertEquals("h", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("h", element0.getNamespaceURI());
      assertEquals("h", element0.getName());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(element0.isRootElement());
      assertEquals("h", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("h", element0.getNamespaceURI());
      assertEquals("h", element0.getName());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("h", jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      
      String string0 = jDOMNodePointer0.getNamespaceURI("h");
      assertEquals("h", string0);
      assertNotNull(string0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(element0.isRootElement());
      assertEquals("h", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("h", element0.getNamespaceURI());
      assertEquals("h", element0.getName());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("h", jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(object0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      
      NamespaceResolver namespaceResolver0 = jDOMNodePointer0.getNamespaceResolver();
      assertNotNull(namespaceResolver0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(namespaceResolver0.isSealed());
      
      NamespaceResolver namespaceResolver1 = jDOMNodePointer0.getNamespaceResolver();
      assertSame(namespaceResolver1, namespaceResolver0);
      assertNotNull(namespaceResolver1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(namespaceResolver1.isSealed());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("GPI<sn4r*x^Zp", "GPI<sn4r*x^Zp");
      assertNotNull(qName0);
      assertEquals("GPI<sn4r*x^Zp", qName0.getPrefix());
      assertEquals("GPI<sn4r*x^Zp:GPI<sn4r*x^Zp", qName0.toString());
      assertEquals("GPI<sn4r*x^Zp", qName0.getName());
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("GPI<sn4r*x^Zp", qName0.getPrefix());
      assertEquals("GPI<sn4r*x^Zp:GPI<sn4r*x^Zp", qName0.toString());
      assertEquals("GPI<sn4r*x^Zp", qName0.getName());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("GPI<sn4r*x^Zp");
      assertNotNull(processingInstructionTest0);
      assertEquals("GPI<sn4r*x^Zp", processingInstructionTest0.getTarget());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, processingInstructionTest0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("GPI<sn4r*x^Zp", qName0.getPrefix());
      assertEquals("GPI<sn4r*x^Zp:GPI<sn4r*x^Zp", qName0.toString());
      assertEquals("GPI<sn4r*x^Zp", qName0.getName());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertEquals("GPI<sn4r*x^Zp", processingInstructionTest0.getTarget());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.childIterator(processingInstructionTest0, true, variablePointer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: 'GPI<sn4r*x^Zp:GPI<sn4r*x^Zp'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Comment comment0 = new Comment("r#");
      assertNotNull(comment0);
      assertEquals("r#", comment0.getText());
      assertEquals("r#", comment0.getValue());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(comment0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("r#", comment0.getText());
      assertEquals("r#", comment0.getValue());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(comment0, locale0, "http://www.w3.org/XML/1998/namespace");
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("r#", comment0.getText());
      assertEquals("r#", comment0.getValue());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertTrue(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      
      boolean boolean0 = jDOMNodePointer0.equals(jDOMNodePointer1);
      assertTrue(boolean0);
      assertTrue(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("r#", comment0.getText());
      assertEquals("r#", comment0.getValue());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertTrue(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      QName qName0 = new QName("%En)Mz", "%En)Mz");
      assertNotNull(qName0);
      assertEquals("%En)Mz", qName0.getName());
      assertEquals("%En)Mz", qName0.getPrefix());
      assertEquals("%En)Mz:%En)Mz", qName0.toString());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("%En)Mz", qName0.getName());
      assertEquals("%En)Mz", qName0.getPrefix());
      assertEquals("%En)Mz:%En)Mz", qName0.toString());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, "%En)Mz");
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("%En)Mz", qName0.getName());
      assertEquals("%En)Mz", qName0.getPrefix());
      assertEquals("%En)Mz:%En)Mz", qName0.toString());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      
      boolean boolean0 = jDOMNodePointer0.equals(qName0);
      assertFalse(boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("%En)Mz", qName0.getName());
      assertEquals("%En)Mz", qName0.getPrefix());
      assertEquals("%En)Mz:%En)Mz", qName0.toString());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      
      boolean boolean0 = jDOMNodePointer0.equals(jDOMNodePointer0);
      assertTrue(boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, locale0, "http://www.w3.org/2000/xmlns/");
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertTrue(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      
      boolean boolean0 = jDOMNodePointer0.equals(jDOMNodePointer1);
      assertFalse(boolean0);
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertTrue(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("z4tv", "z4tv");
      assertNotNull(processingInstruction0);
      assertEquals("z4tv", processingInstruction0.getTarget());
      assertEquals("z4tv", processingInstruction0.getData());
      assertEquals("z4tv", processingInstruction0.getValue());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("z4tv", processingInstruction0.getTarget());
      assertEquals("z4tv", processingInstruction0.getData());
      assertEquals("z4tv", processingInstruction0.getValue());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      
      String string0 = jDOMNodePointer0.asPath();
      assertEquals("/processing-instruction('z4tv')[1]", string0);
      assertNotNull(string0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("z4tv", processingInstruction0.getTarget());
      assertEquals("z4tv", processingInstruction0.getData());
      assertEquals("z4tv", processingInstruction0.getValue());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CDATA cDATA0 = new CDATA("Should see only CDATA, Text, or EntityRef");
      assertNotNull(cDATA0);
      assertEquals("Should see only CDATA, Text, or EntityRef", cDATA0.getValue());
      assertEquals("Should see only CDATA, Text, or EntityRef", cDATA0.getText());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("Should see only CDATA, Text, or EntityRef", cDATA0.getValue());
      assertEquals("Should see only CDATA, Text, or EntityRef", cDATA0.getText());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      
      String string0 = jDOMNodePointer0.asPath();
      assertEquals("/text()[1]", string0);
      assertNotNull(string0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("Should see only CDATA, Text, or EntityRef", cDATA0.getValue());
      assertEquals("Should see only CDATA, Text, or EntityRef", cDATA0.getText());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Element element0 = new Element("h", "h", "h");
      assertNotNull(element0);
      assertEquals(0, element0.getContentSize());
      assertEquals("h", element0.getName());
      assertEquals("h", element0.getNamespaceURI());
      assertEquals("h", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("h", locale0, "h");
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, element0.getContentSize());
      assertEquals("h", element0.getName());
      assertEquals("h", element0.getNamespaceURI());
      assertEquals("h", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals("h", jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      
      String string0 = jDOMNodePointer1.asPath();
      assertEquals("id('h')/h:h[1]", string0);
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotNull(string0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, element0.getContentSize());
      assertEquals("h", element0.getName());
      assertEquals("h", element0.getNamespaceURI());
      assertEquals("h", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals("h", jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Element element0 = new Element("org.apache.commosQjxpth.util.Bs2cTypeConverter");
      assertNotNull(element0);
      assertEquals("", element0.getNamespaceURI());
      assertEquals("org.apache.commosQjxpth.util.Bs2cTypeConverter", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", element0.getNamespaceURI());
      assertEquals("org.apache.commosQjxpth.util.Bs2cTypeConverter", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", element0.getNamespaceURI());
      assertEquals("org.apache.commosQjxpth.util.Bs2cTypeConverter", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isRoot());
      
      String string0 = jDOMNodePointer1.asPath();
      assertEquals("/org.apache.commosQjxpth.util.Bs2cTypeConverter[1]", string0);
      assertTrue(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotNull(string0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", element0.getNamespaceURI());
      assertEquals("org.apache.commosQjxpth.util.Bs2cTypeConverter", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isRoot());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Element element0 = new Element("h", "h");
      assertNotNull(element0);
      assertFalse(element0.isRootElement());
      assertEquals("h", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("h", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("h", locale0, "h");
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(element0.isRootElement());
      assertEquals("h", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("h", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals("h", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isContainer());
      
      // Undeclared exception!
      jDOMNodePointer1.asPath();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Element element0 = new Element("org.apache.commons.jxpath.util.BasicTypeConverter", "org.apache.commons.jxpath.util.BasicTypeConverter");
      assertNotNull(element0);
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("org.apache.commons.jxpath.util.BasicTypeConverter", element0.getName());
      assertEquals("org.apache.commons.jxpath.util.BasicTypeConverter", element0.getNamespaceURI());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("org.apache.commons.jxpath.util.BasicTypeConverter", element0.getName());
      assertEquals("org.apache.commons.jxpath.util.BasicTypeConverter", element0.getNamespaceURI());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("org.apache.commons.jxpath.util.BasicTypeConverter", jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      
      String string0 = jDOMNodePointer0.asPath();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("org.apache.commons.jxpath.util.BasicTypeConverter", element0.getName());
      assertEquals("org.apache.commons.jxpath.util.BasicTypeConverter", element0.getNamespaceURI());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("org.apache.commons.jxpath.util.BasicTypeConverter", jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer((NodePointer) jDOMNodePointer0, (Object) locale0);
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertNotNull(jDOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isRoot());
      
      String string0 = jDOMNodePointer1.asPath();
      assertEquals("", string0);
      assertTrue(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotNull(string0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isRoot());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0, "]/f7dfC[o+1,CICb");
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      
      String string0 = jDOMNodePointer0.asPath();
      assertEquals("id(']/f7dfC[o+1,CICb')", string0);
      assertNotNull(string0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.remove();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot remove root JDOM node
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Element element0 = new Element("org.apache.commosQjxpth.util.Bs2cTypeConverter");
      assertNotNull(element0);
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("org.apache.commosQjxpth.util.Bs2cTypeConverter", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      
      Locale locale0 = Locale.forLanguageTag("org.apache.commosQjxpth.util.Bs2cTypeConverter");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0, "org.apache.commosQjxpth.util.Bs2cTypeConverter");
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("org.apache.commosQjxpth.util.Bs2cTypeConverter", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      
      QName qName0 = jDOMNodePointer0.getName();
      assertNotNull(qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("org.apache.commosQjxpth.util.Bs2cTypeConverter", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("org.apache.commosQjxpth.util.Bs2cTypeConverter", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commosQjxpth.util.Bs2cTypeConverter", qName0.toString());
      
      NodePointer nodePointer0 = jDOMNodePointer0.createAttribute((JXPathContext) null, qName0);
      assertNotNull(nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("org.apache.commosQjxpth.util.Bs2cTypeConverter", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("org.apache.commosQjxpth.util.Bs2cTypeConverter", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commosQjxpth.util.Bs2cTypeConverter", qName0.toString());
      assertFalse(nodePointer0.isContainer());
      assertEquals(1, nodePointer0.getLength());
      assertNull(nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(nodePointer0.isActual());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isRoot());
      assertTrue(nodePointer0.isLeaf());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      
      NodePointer nodePointer1 = jDOMNodePointer0.createAttribute((JXPathContext) null, qName0);
      assertTrue(nodePointer1.equals((Object)nodePointer0));
      assertNotSame(nodePointer1, nodePointer0);
      assertNotNull(nodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("org.apache.commosQjxpth.util.Bs2cTypeConverter", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("org.apache.commosQjxpth.util.Bs2cTypeConverter", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commosQjxpth.util.Bs2cTypeConverter", qName0.toString());
      assertTrue(nodePointer1.isActual());
      assertTrue(nodePointer1.isNode());
      assertFalse(nodePointer1.isRoot());
      assertFalse(nodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, nodePointer1.getIndex());
      assertFalse(nodePointer1.isAttribute());
      assertFalse(nodePointer1.isContainer());
      assertTrue(nodePointer1.isLeaf());
      assertEquals(1, nodePointer1.getLength());
      assertNull(nodePointer1.getNamespaceURI());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Element element0 = new Element("org.apache.commons.jxpath.util.BasicTypeConverter", "org.apache.commons.jxpath.util.BasicTypeConverter", "org.apache.commons.jxpath.util.BasicTypeConverter");
      assertNotNull(element0);
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("org.apache.commons.jxpath.util.BasicTypeConverter", element0.getNamespaceURI());
      assertEquals("org.apache.commons.jxpath.util.BasicTypeConverter", element0.getNamespacePrefix());
      assertEquals("org.apache.commons.jxpath.util.BasicTypeConverter", element0.getName());
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0, "org.apache.commons.jxpath.util.BasicTypeConverter");
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("org.apache.commons.jxpath.util.BasicTypeConverter", element0.getNamespaceURI());
      assertEquals("org.apache.commons.jxpath.util.BasicTypeConverter", element0.getNamespacePrefix());
      assertEquals("org.apache.commons.jxpath.util.BasicTypeConverter", element0.getName());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("org.apache.commons.jxpath.util.BasicTypeConverter", jDOMNodePointer0.getNamespaceURI());
      
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace");
      assertNotNull(qName0);
      assertEquals("http", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.toString());
      assertEquals("//www.w3.org/XML/1998/namespace", qName0.getName());
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createAttribute((JXPathContext) null, qName0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown namespace prefix: http
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "http://www.w3.org/2000/xmlns/");
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createAttribute(jXPathContextReferenceImpl0, (QName) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot create an attribute for path /@null, operation is not allowed for this type of node
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) locale0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createChild((JXPathContext) jXPathContextReferenceImpl0, (QName) null, Integer.MIN_VALUE, (Object) jXPathContextReferenceImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: 
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Comment comment0 = new Comment("m/l='B5_]Vp&, ");
      assertNotNull(comment0);
      assertEquals("m/l='B5_]Vp&, ", comment0.getValue());
      assertEquals("m/l='B5_]Vp&, ", comment0.getText());
      
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      assertNotNull(namespace0);
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      
      String string0 = JDOMNodePointer.findEnclosingAttribute(comment0, "m/l='B5_]Vp&, ", namespace0);
      assertNull(string0);
      assertEquals("m/l='B5_]Vp&, ", comment0.getValue());
      assertEquals("m/l='B5_]Vp&, ", comment0.getText());
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Namespace namespace0 = Namespace.getNamespace("h", "h");
      assertNotNull(namespace0);
      assertEquals("h", namespace0.getPrefix());
      assertEquals("h", namespace0.getURI());
      
      Attribute attribute0 = new Attribute("h", "h", namespace0);
      assertNotNull(attribute0);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals("h", namespace0.getPrefix());
      assertEquals("h", namespace0.getURI());
      assertEquals("h", attribute0.getNamespacePrefix());
      assertEquals("h", attribute0.getNamespaceURI());
      assertEquals("h", attribute0.getValue());
      assertEquals("h", attribute0.getName());
      assertEquals(0, attribute0.getAttributeType());
      
      String string0 = JDOMNodePointer.getLocalName(attribute0);
      assertEquals("h", string0);
      assertNotNull(string0);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals("h", namespace0.getPrefix());
      assertEquals("h", namespace0.getURI());
      assertEquals("h", attribute0.getNamespacePrefix());
      assertEquals("h", attribute0.getNamespaceURI());
      assertEquals("h", attribute0.getValue());
      assertEquals("h", attribute0.getName());
      assertEquals(0, attribute0.getAttributeType());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      
      String string0 = JDOMNodePointer.getLocalName(locale0);
      assertNull(string0);
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Attribute attribute0 = new Attribute("Zfp", "Zfp");
      assertNotNull(attribute0);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals("", attribute0.getNamespacePrefix());
      assertEquals("", attribute0.getNamespaceURI());
      assertEquals("Zfp", attribute0.getValue());
      assertEquals(0, attribute0.getAttributeType());
      assertEquals("Zfp", attribute0.getName());
      
      String string0 = JDOMNodePointer.getPrefix(attribute0);
      assertNull(string0);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals("", attribute0.getNamespacePrefix());
      assertEquals("", attribute0.getNamespaceURI());
      assertEquals("Zfp", attribute0.getValue());
      assertEquals(0, attribute0.getAttributeType());
      assertEquals("Zfp", attribute0.getName());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Namespace namespace0 = Namespace.getNamespace("fp", "fp");
      assertNotNull(namespace0);
      assertEquals("fp", namespace0.getURI());
      assertEquals("fp", namespace0.getPrefix());
      
      Attribute attribute0 = new Attribute("fp", "fp", namespace0);
      assertNotNull(attribute0);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals("fp", namespace0.getURI());
      assertEquals("fp", namespace0.getPrefix());
      assertEquals("fp", attribute0.getNamespaceURI());
      assertEquals(0, attribute0.getAttributeType());
      assertEquals("fp", attribute0.getNamespacePrefix());
      assertEquals("fp", attribute0.getValue());
      assertEquals("fp", attribute0.getName());
      
      String string0 = JDOMNodePointer.getPrefix(attribute0);
      assertEquals("fp", string0);
      assertNotNull(string0);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals("fp", namespace0.getURI());
      assertEquals("fp", namespace0.getPrefix());
      assertEquals("fp", attribute0.getNamespaceURI());
      assertEquals(0, attribute0.getAttributeType());
      assertEquals("fp", attribute0.getNamespacePrefix());
      assertEquals("fp", attribute0.getValue());
      assertEquals("fp", attribute0.getName());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Element element0 = new Element("org.apache.commons.jxpath.JXPathInvalidSyntaxException", "org.apache.commons.jxpath.JXPathInvalidSyntaxException", "org.apache.commons.jxpath.JXPathInvalidSyntaxException");
      assertNotNull(element0);
      assertEquals("org.apache.commons.jxpath.JXPathInvalidSyntaxException", element0.getName());
      assertEquals("org.apache.commons.jxpath.JXPathInvalidSyntaxException", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("org.apache.commons.jxpath.JXPathInvalidSyntaxException", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      
      String string0 = JDOMNodePointer.getPrefix(element0);
      assertEquals("org.apache.commons.jxpath.JXPathInvalidSyntaxException", string0);
      assertNotNull(string0);
      assertEquals("org.apache.commons.jxpath.JXPathInvalidSyntaxException", element0.getName());
      assertEquals("org.apache.commons.jxpath.JXPathInvalidSyntaxException", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("org.apache.commons.jxpath.JXPathInvalidSyntaxException", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      
      String string0 = JDOMNodePointer.getPrefix(locale0);
      assertNull(string0);
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Element element0 = new Element("h", "h", "h");
      assertNotNull(element0);
      assertEquals("h", element0.getNamespacePrefix());
      assertEquals("h", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("h", element0.getName());
      
      QName qName0 = new QName("h");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("h", qName0.toString());
      assertEquals("h", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertEquals("h", qName0.toString());
      assertEquals("h", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("h", nodeNameTest0.toString());
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) null, (Object) element0, (NodeTest) nodeNameTest0);
      assertFalse(boolean0);
      assertEquals("h", element0.getNamespacePrefix());
      assertEquals("h", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("h", element0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("h", qName0.toString());
      assertEquals("h", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("h", nodeNameTest0.toString());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("k", locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("http://www.w3.org/2000/xmlns/");
      assertNotNull(processingInstructionTest0);
      assertEquals("http://www.w3.org/2000/xmlns/", processingInstructionTest0.getTarget());
      
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("k", "k");
      assertNotNull(processingInstruction0);
      assertEquals("k", processingInstruction0.getValue());
      assertEquals("k", processingInstruction0.getTarget());
      assertEquals("k", processingInstruction0.getData());
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) processingInstruction0, (NodeTest) processingInstructionTest0);
      assertFalse(boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("http://www.w3.org/2000/xmlns/", processingInstructionTest0.getTarget());
      assertEquals("k", processingInstruction0.getValue());
      assertEquals("k", processingInstruction0.getTarget());
      assertEquals("k", processingInstruction0.getData());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      assertNotNull(nodeTypeTest0);
      assertEquals(2, nodeTypeTest0.getNodeType());
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) nodeTypeTest0, (NodeTest) nodeTypeTest0);
      assertFalse(boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(2, nodeTypeTest0.getNodeType());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Integer integer0 = new Integer(4);
      assertEquals(4, (int)integer0);
      assertNotNull(integer0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4);
      assertNotNull(nodeTypeTest0);
      assertEquals(4, nodeTypeTest0.getNodeType());
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) null, (Object) integer0, (NodeTest) nodeTypeTest0);
      assertFalse(boolean0);
      assertEquals(4, nodeTypeTest0.getNodeType());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      assertNotNull(nodeTypeTest0);
      assertEquals(3, nodeTypeTest0.getNodeType());
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) null, (Object) nodeTypeTest0, (NodeTest) nodeTypeTest0);
      assertFalse(boolean0);
      assertEquals(3, nodeTypeTest0.getNodeType());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CDATA cDATA0 = new CDATA("E");
      assertNotNull(cDATA0);
      assertEquals("E", cDATA0.getText());
      assertEquals("E", cDATA0.getValue());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      assertNotNull(nodeTypeTest0);
      assertEquals(2, nodeTypeTest0.getNodeType());
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) null, (Object) cDATA0, (NodeTest) nodeTypeTest0);
      assertTrue(boolean0);
      assertEquals("E", cDATA0.getText());
      assertEquals("E", cDATA0.getValue());
      assertEquals(2, nodeTypeTest0.getNodeType());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      assertNotNull(jDOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      assertNotNull(nodeTypeTest0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) jDOMNodePointer0, (NodeTest) nodeTypeTest0);
      assertTrue(boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, nodeTypeTest0.getNodeType());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.JXPathInvalidSyntaxException");
      assertNotNull(processingInstructionTest0);
      assertEquals("org.apache.commons.jxpath.JXPathInvalidSyntaxException", processingInstructionTest0.getTarget());
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) null, (Object) null, (NodeTest) processingInstructionTest0);
      assertFalse(boolean0);
      assertEquals("org.apache.commons.jxpath.JXPathInvalidSyntaxException", processingInstructionTest0.getTarget());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Element element0 = new Element("org.apache.comonsQjxpath.util.BasicTypeConverter");
      Locale locale0 = Locale.KOREAN;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0, "org.apache.comonsQjxpath.util.BasicTypeConverter");
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace", "org.apache.comonsQjxpath.util.BasicTypeConverter");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "http://www.w3.org/2000/xmlns/");
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) element0, (NodeTest) nodeNameTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Element element0 = new Element("org.apache.commonsQjxpath.util.BasicTypeConverter");
      Locale locale0 = new Locale("org.apache.commonsQjxpath.util.BasicTypeConverter", "org.apache.commonsQjxpath.util.BasicTypeConverter");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0, "org.apache.commonsQjxpath.util.BasicTypeConverter");
      QName qName0 = jDOMNodePointer0.getName();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "http://www.w3.org/2000/xmlns/");
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) element0, (NodeTest) nodeNameTest0);
      assertEquals("org.apache.commonsQjxpath.util.BasicTypeConverter", nodeNameTest0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Element element0 = new Element("h", "h", "h");
      Locale locale0 = Locale.FRANCE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      QName qName0 = new QName("<<unknown namespace>>");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) element0, (NodeTest) nodeNameTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      QName qName0 = new QName("*", "*");
      Locale locale0 = Locale.JAPANESE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      Element element0 = new Element("i", "http://www.w3.org/2000/xmlns/");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "http://www.w3.org/XML/1998/namespace");
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) element0, (NodeTest) nodeNameTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      QName qName0 = new QName("*");
      Locale locale0 = Locale.JAPANESE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      Element element0 = new Element("i", "http://www.w3.org/2000/xmlns/");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "http://www.w3.org/XML/1998/namespace");
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) element0, (NodeTest) nodeNameTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      QName qName0 = new QName("<<unknown namespace>>");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) locale0, (NodeTest) nodeNameTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-972));
      Locale locale0 = new Locale("%En)Mz");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodeTypeTest0, locale0);
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) jDOMNodePointer0, (NodeTest) nodeTypeTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Element element0 = new Element("C", "C");
      Locale locale0 = new Locale("C", "C", "C");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0, "C");
      DocType docType0 = new DocType("C");
      Document document0 = new Document(element0, docType0, "http://www.w3.org/XML/1998/namespace");
      jDOMNodePointer0.setValue(document0);
      assertEquals(1, element0.getContentSize());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Element element0 = new Element("h", "h", "h");
      Locale locale0 = Locale.FRANCE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jDOMNodePointer0.setValue(linkedList0);
      assertFalse(linkedList0.contains("h"));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Element element0 = new Element("z4t", "z4t", "z4t");
      Locale locale0 = new Locale("z4t", "z4t", "z4t");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0, "z4t");
      jDOMNodePointer0.setValue((Object) null);
      assertTrue(jDOMNodePointer0.isNode());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Element element0 = new Element("h", "h", "h");
      Locale locale0 = Locale.ROOT;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      Comment comment0 = new Comment("http://www.w3.org/2000/xmlns/");
      jDOMNodePointer0.setValue(comment0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Element element0 = new Element("h", "h", "h");
      Locale locale0 = Locale.FRANCE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      HashMap<Locale.LanguageRange, String> hashMap0 = new HashMap<Locale.LanguageRange, String>();
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("h", hashMap0);
      jDOMNodePointer0.setValue(processingInstruction0);
      assertFalse(jDOMNodePointer0.isContainer());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Element element0 = new Element("org.apache.commons.jxpath.util.BasiTypeoverter", "org.apache.commons.jxpath.util.BasiTypeoverter");
      Locale locale0 = Locale.CANADA_FRENCH;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0, "org.apache.commons.jxpath.util.BasiTypeoverter");
      Text text0 = new Text("http://www.w3.org/2000/xmlns/");
      jDOMNodePointer0.setValue(text0);
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CDATA cDATA0 = new CDATA(".");
      Locale locale0 = Locale.JAPAN;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0, ".");
      jDOMNodePointer0.setValue(".");
      assertEquals(".", cDATA0.getText());
      assertEquals(".", cDATA0.getValue());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CDATA cDATA0 = new CDATA(".");
      Locale locale0 = Locale.GERMAN;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0, ".");
      // Undeclared exception!
      try { 
        jDOMNodePointer0.setValue((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CDATA cDATA0 = new CDATA("");
      Locale locale0 = Locale.JAPAN;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0, "");
      // Undeclared exception!
      try { 
        jDOMNodePointer0.setValue("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("z4tv", "z4tv");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction0, locale0);
      Object object0 = jDOMNodePointer0.getValue();
      assertEquals("z4tv", object0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Comment comment0 = new Comment("r#");
      Locale locale0 = Locale.CHINA;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(comment0, locale0);
      Object object0 = jDOMNodePointer0.getValue();
      assertEquals("r#", object0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Element element0 = new Element("org.apach.commosQjxph.uCil.Bs2cTypeConver0er");
      Locale locale0 = Locale.JAPAN;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0, "org.apach.commosQjxph.uCil.Bs2cTypeConver0er");
      EntityRef entityRef0 = new EntityRef("org.apach.commosQjxph.uCil.Bs2cTypeConver0er", "5q_G");
      element0.setContent((Content) entityRef0);
      Object object0 = jDOMNodePointer0.getValue();
      assertNotNull(object0);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Element element0 = new Element("org.apache.cmmonsQjxpath.util.BasicTypeConverter");
      Document document0 = new Document(element0);
      Locale locale0 = Locale.JAPAN;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      jDOMNodePointer0.setValue(document0);
      jDOMNodePointer0.getValue();
      assertEquals(1, element0.getContentSize());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Element element0 = new Element("z4t", "z4t");
      Locale locale0 = Locale.UK;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0, "z4t");
      jDOMNodePointer0.setValue(locale0);
      Object object0 = jDOMNodePointer0.getValue();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-972));
      Locale locale0 = new Locale("%En)Mz");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodeTypeTest0, locale0);
      Object object0 = jDOMNodePointer0.getValue();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("preserve", "preserve");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction0, locale0);
      QName qName0 = jDOMNodePointer0.getName();
      assertEquals("preserve", qName0.toString());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Element element0 = new Element("org.apache.commons.jxpath.util.BasicTypeConverter", "org.apache.commons.jxpath.util.BasicTypeConverter");
      Document document0 = new Document(element0);
      Locale locale0 = new Locale("org.apache.commons.jxpath.util.BasicTypeConverter");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(document0, locale0, "org.apache.commons.jxpath.util.BasicTypeConverter");
      boolean boolean0 = jDOMNodePointer0.isLeaf();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = new Document();
      Locale locale0 = Locale.ITALIAN;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(document0, locale0, "org.apache.commons.jxpath.util.BasicTypeConverter");
      // Undeclared exception!
      try { 
        jDOMNodePointer0.isLeaf();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root element not set
         //
         verifyException("org.jdom.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Element element0 = new Element("zt", "zt");
      Locale locale0 = Locale.UK;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0, "zt");
      jDOMNodePointer0.setValue(locale0);
      boolean boolean0 = jDOMNodePointer0.isLeaf();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Element element0 = new Element("org.apache.commons.jxpath.util.BasicTypeConverter", "org.apache.commons.jxpath.util.BasicTypeConverter");
      Locale locale0 = Locale.UK;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0, "y]8%x");
      boolean boolean0 = jDOMNodePointer0.isLeaf();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      boolean boolean0 = jDOMNodePointer0.isLeaf();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Element element0 = new Element("org.apachR.hommonsQjxpth.til.BasicTypeConverter", "org.apachR.hommonsQjxpth.til.BasicTypeConverter", "org.apachR.hommonsQjxpth.til.BasicTypeConverter");
      Locale locale0 = Locale.CANADA;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0, "org.apachR.hommonsQjxpth.til.BasicTypeConverter");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(nodeTypeTest0, locale0, "<<unknown namespace>>");
      jDOMNodePointer0.setValue(locale0);
      int int0 = jDOMNodePointer0.compareChildNodePointers(jDOMNodePointer0, jDOMNodePointer1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CDATA cDATA0 = new CDATA(".");
      Locale locale0 = Locale.JAPAN;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0, ".");
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, jDOMNodePointer0);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.compareChildNodePointers(jDOMNodePointer0, jDOMNodePointer1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JXPath internal error: compareChildNodes called for [CDATA: .]
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Element element0 = new Element("org.apache.commons.jxpath.util.BasicTypeConverter");
      Locale locale0 = new Locale("org.apache.commons.jxpath.util.BasicTypeConverter", "org.apache.commons.jxpath.util.BasicTypeConverter");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0, "org.apache.commons.jxpath.util.BasicTypeConverter");
      QName qName0 = jDOMNodePointer0.getName();
      NodePointer nodePointer0 = jDOMNodePointer0.createAttribute((JXPathContext) null, qName0);
      int int0 = jDOMNodePointer0.compareChildNodePointers(jDOMNodePointer0, nodePointer0);
      assertEquals("org.apache.commons.jxpath.util.BasicTypeConverter", qName0.toString());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Element element0 = new Element("org.apache.commonsQjxpath.util.BasicTypeConverter");
      Locale locale0 = new Locale("org.apache.commonsQjxpath.util.BasicTypeConverter", "org.apache.commonsQjxpath.util.BasicTypeConverter");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0, "org.apache.commonsQjxpath.util.BasicTypeConverter");
      QName qName0 = jDOMNodePointer0.getName();
      NodePointer nodePointer0 = jDOMNodePointer0.createAttribute((JXPathContext) null, qName0);
      int int0 = jDOMNodePointer0.compareChildNodePointers(nodePointer0, jDOMNodePointer0);
      assertEquals("org.apache.commonsQjxpath.util.BasicTypeConverter", qName0.toString());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      int int0 = jDOMNodePointer0.compareChildNodePointers(jDOMNodePointer0, jDOMNodePointer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Element element0 = new Element("org.apache.commons.jxpath.util.BasicTypeConverter", "org.apache.commons.jxpath.util.BasicTypeConverter");
      Locale locale0 = new Locale("org.apache.commons.jxpath.util.BasicTypeConverter", "org.apache.commons.jxpath.util.BasicTypeConverter", "org.apache.commons.jxpath.util.BasicTypeConverter");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0, "org.apache.commons.jxpath.util.BasicTypeConverter");
      String string0 = jDOMNodePointer0.getNamespaceURI("org.apache.commons.jxpath.util.BasicTypeConverter");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Locale locale0 = Locale.UK;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      String string0 = jDOMNodePointer0.getNamespaceURI("<<unknown namespace>>");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = new Document();
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(document0, (Locale) null);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.getNamespaceURI("<<unknown namespace>>");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root element not set
         //
         verifyException("org.jdom.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-972));
      Locale locale0 = new Locale("%En)Mz");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodeTypeTest0, locale0);
      String string0 = jDOMNodePointer0.getNamespaceURI("xml");
      assertEquals("http://www.w3.org/XML/1998/namespace", string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Element element0 = new Element("org.apache.commons.jxpath.util.BasicTypeConverter", "org.apache.commons.jxpath.util.BasicTypeConverter", "org.apache.commons.jxpath.util.BasicTypeConverter");
      Locale locale0 = Locale.KOREA;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0, "org.apache.commons.jxpath.util.BasicTypeConverter");
      QName qName0 = jDOMNodePointer0.getName();
      jDOMNodePointer0.createAttribute((JXPathContext) null, qName0);
      jDOMNodePointer0.createAttribute((JXPathContext) null, qName0);
      assertEquals("org.apache.commons.jxpath.util.BasicTypeConverter:org.apache.commons.jxpath.util.BasicTypeConverter", qName0.toString());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Element element0 = new Element("z4t");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      String string0 = jDOMNodePointer0.getNamespaceURI();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Element element0 = new Element("E", "E", "E");
      QName qName0 = new QName("E");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "E");
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) null, (Object) element0, (NodeTest) nodeNameTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createChild((JXPathContext) null, (QName) null, 1896, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Element element0 = new Element("rg.apachR.homonsQjxpth.til.asicTypeConerter", "rg.apachR.homonsQjxpth.til.asicTypeConerter");
      Locale locale0 = new Locale("rg.apachR.homonsQjxpth.til.asicTypeConerter");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0, "rg.apachR.homonsQjxpth.til.asicTypeConerter");
      jDOMNodePointer0.hashCode();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      String string0 = jDOMNodePointer0.getNamespaceURI();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-972));
      Locale locale0 = new Locale("%En)Mz");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodeTypeTest0, locale0);
      QName qName0 = new QName("+cUi=eldf", "z&Sl3I${.wB7mL5btG8");
      NodeIterator nodeIterator0 = jDOMNodePointer0.attributeIterator(qName0);
      assertEquals(0, nodeIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-972));
      Locale locale0 = new Locale("%En)Mz");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodeTypeTest0, locale0);
      Object object0 = jDOMNodePointer0.getBaseValue();
      assertSame(object0, nodeTypeTest0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      boolean boolean0 = jDOMNodePointer0.testNode((NodeTest) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-972));
      Locale locale0 = new Locale("%En)Mz");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodeTypeTest0, locale0);
      int int0 = jDOMNodePointer0.getLength();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-972));
      Locale locale0 = new Locale("%En)Mz");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodeTypeTest0, locale0);
      NodeIterator nodeIterator0 = jDOMNodePointer0.namespaceIterator();
      assertEquals(0, nodeIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      boolean boolean0 = jDOMNodePointer0.isLanguage("http://www.w3.org/2000/xmlns/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0, "zvfU&48IKm");
      NodePointer nodePointer0 = jDOMNodePointer0.namespacePointer("zvfU&48IKm");
      assertTrue(nodePointer0.isNode());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((NodePointer) null, (Object) null);
      boolean boolean0 = jDOMNodePointer0.isCollection();
      assertFalse(boolean0);
  }
}
