/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 04:13:55 GMT 2020
 */

package org.apache.commons.jxpath.ri.model.jdom;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.KeyManager;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.Variables;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
import org.apache.commons.jxpath.ri.model.beans.NullPointer;
import org.apache.commons.jxpath.ri.model.jdom.JDOMAttributePointer;
import org.apache.commons.jxpath.ri.model.jdom.JDOMNamespacePointer;
import org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jdom.Attribute;
import org.jdom.CDATA;
import org.jdom.Comment;
import org.jdom.Content;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;
import org.jdom.ProcessingInstruction;
import org.jdom.Text;
import org.jdom.filter.ContentFilter;
import org.jdom.filter.Filter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JDOMNodePointer_ESTest extends JDOMNodePointer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("#", locale0, "#");
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      Document document0 = new Document();
      assertNull(document0.getBaseURI());
      assertEquals(0, document0.getContentSize());
      assertFalse(document0.hasRootElement());
      assertNotNull(document0);
      
      Element element0 = new Element("osW");
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("osW", element0.getName());
      assertNotNull(element0);
      
      Element element1 = new Element("osW", "&L-.loh@1&@K8`S~3");
      assertFalse(element1.isRootElement());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals("osW", element1.getName());
      assertEquals(0, element1.getContentSize());
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element1);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(element1.isRootElement());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals("osW", element1.getName());
      assertEquals(0, element1.getContentSize());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(element1.equals((Object)element0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      boolean boolean0 = jDOMNodePointer1.isLeaf();
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(element1.isRootElement());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals("osW", element1.getName());
      assertEquals(0, element1.getContentSize());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(element1, element0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertTrue(boolean0);
      
      boolean boolean1 = jDOMNodePointer0.isLanguage("http://www.w3.org/XML/1998/namespace");
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(boolean1 == boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertFalse(boolean1);
      
      // Undeclared exception!
      jDOMNodePointer1.asPath();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("y'", locale0, "y'");
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      Element element0 = new Element("osW");
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("osW", element0.getName());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer("y'", locale0, (String) null);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4);
      assertEquals(4, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer1, (Object) nodeTypeTest0, (NodeTest) nodeTypeTest0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(4, nodeTypeTest0.getNodeType());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertFalse(boolean0);
      
      int int0 = jDOMNodePointer0.getLength();
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("#", locale0, "#");
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      Document document0 = new Document();
      assertNull(document0.getBaseURI());
      assertEquals(0, document0.getContentSize());
      assertFalse(document0.hasRootElement());
      assertNotNull(document0);
      
      Element element0 = new Element("osW");
      assertFalse(element0.isRootElement());
      assertEquals("osW", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("osW", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      Document document1 = document0.getDocument();
      assertNull(document0.getBaseURI());
      assertEquals(0, document0.getContentSize());
      assertFalse(document0.hasRootElement());
      assertEquals(0, document1.getContentSize());
      assertNull(document1.getBaseURI());
      assertFalse(document1.hasRootElement());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) document1);
      assertNull(document0.getBaseURI());
      assertEquals(0, document0.getContentSize());
      assertFalse(document0.hasRootElement());
      assertEquals(0, document1.getContentSize());
      assertNull(document1.getBaseURI());
      assertFalse(document1.hasRootElement());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)jXPathContextReferenceImpl0.getRelativeContext(jDOMNodePointer1);
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertNull(document0.getBaseURI());
      assertEquals(0, document0.getContentSize());
      assertFalse(document0.hasRootElement());
      assertFalse(element0.isRootElement());
      assertEquals("osW", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(0, document1.getContentSize());
      assertNull(document1.getBaseURI());
      assertFalse(document1.hasRootElement());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertSame(document0, document1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertSame(document1, document0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl1, (Object) null);
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertNull(document0.getBaseURI());
      assertEquals(0, document0.getContentSize());
      assertFalse(document0.hasRootElement());
      assertFalse(element0.isRootElement());
      assertEquals("osW", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(0, document1.getContentSize());
      assertNull(document1.getBaseURI());
      assertFalse(document1.hasRootElement());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertSame(document0, document1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertSame(document1, document0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer1.createAttribute(jXPathContextReferenceImpl2, (QName) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Document document0 = new Document();
      assertNull(document0.getBaseURI());
      assertEquals(0, document0.getContentSize());
      assertFalse(document0.hasRootElement());
      assertNotNull(document0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(document0, locale0);
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertNull(document0.getBaseURI());
      assertEquals(0, document0.getContentSize());
      assertFalse(document0.hasRootElement());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      ContentFilter contentFilter0 = new ContentFilter(false);
      assertEquals(0, contentFilter0.getFilterMask());
      assertEquals(128, ContentFilter.DOCTYPE);
      assertEquals(64, ContentFilter.DOCUMENT);
      assertEquals(8, ContentFilter.COMMENT);
      assertEquals(16, ContentFilter.PI);
      assertEquals(32, ContentFilter.ENTITYREF);
      assertEquals(4, ContentFilter.TEXT);
      assertEquals(2, ContentFilter.CDATA);
      assertEquals(1, ContentFilter.ELEMENT);
      assertNotNull(contentFilter0);
      
      List list0 = document0.removeContent((Filter) contentFilter0);
      assertNull(document0.getBaseURI());
      assertEquals(0, document0.getContentSize());
      assertFalse(document0.hasRootElement());
      assertEquals(0, contentFilter0.getFilterMask());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(128, ContentFilter.DOCTYPE);
      assertEquals(64, ContentFilter.DOCUMENT);
      assertEquals(8, ContentFilter.COMMENT);
      assertEquals(16, ContentFilter.PI);
      assertEquals(32, ContentFilter.ENTITYREF);
      assertEquals(4, ContentFilter.TEXT);
      assertEquals(2, ContentFilter.CDATA);
      assertEquals(1, ContentFilter.ELEMENT);
      assertNotNull(list0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, locale0, "6");
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertNull(document0.getBaseURI());
      assertEquals(0, document0.getContentSize());
      assertFalse(document0.hasRootElement());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertTrue(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer(jDOMNodePointer1, locale0, "<<unknown namespace>>");
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertNull(document0.getBaseURI());
      assertEquals(0, document0.getContentSize());
      assertFalse(document0.hasRootElement());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertTrue(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer2.isCollection());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertFalse(jDOMNodePointer2.isContainer());
      assertTrue(jDOMNodePointer2.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer2);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.compareChildNodePointers(jDOMNodePointer2, jDOMNodePointer1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root element not set
         //
         verifyException("org.jdom.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Element element0 = new Element("gL8MrSkNsB.p", "gL8MrSkNsB.p");
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("gL8MrSkNsB.p", element0.getName());
      assertEquals("gL8MrSkNsB.p", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertNotNull(element0);
      
      QName qName0 = new QName("gL8MrSkNsB.p");
      assertEquals("gL8MrSkNsB.p", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("gL8MrSkNsB.p", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "gL8MrSkNsB.p");
      assertEquals("gL8MrSkNsB.p", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("gL8MrSkNsB.p", qName0.toString());
      assertEquals("gL8MrSkNsB.p", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("gL8MrSkNsB.p", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("gL8MrSkNsB.p", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("gL8MrSkNsB.p", qName0.toString());
      assertEquals("gL8MrSkNsB.p", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("gL8MrSkNsB.p", nodeNameTest0.toString());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((NodePointer) beanPointer0, (Object) locale0);
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("gL8MrSkNsB.p", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("gL8MrSkNsB.p", qName0.toString());
      assertEquals("gL8MrSkNsB.p", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("gL8MrSkNsB.p", nodeNameTest0.toString());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("gL8MrSkNsB.p", element0.getName());
      assertEquals("gL8MrSkNsB.p", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("gL8MrSkNsB.p", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("gL8MrSkNsB.p", qName0.toString());
      assertEquals("gL8MrSkNsB.p", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("gL8MrSkNsB.p", nodeNameTest0.toString());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertEquals("gL8MrSkNsB.p", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      Element element1 = element0.setText("http://www.w3.org/2000/xmlns/");
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("gL8MrSkNsB.p", element0.getName());
      assertEquals("gL8MrSkNsB.p", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals(1, element0.getContentSize());
      assertFalse(element1.isRootElement());
      assertEquals("gL8MrSkNsB.p", element1.getNamespaceURI());
      assertEquals("gL8MrSkNsB.p", element1.getName());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals(1, element1.getContentSize());
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer(jDOMNodePointer1, (Object) null);
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("gL8MrSkNsB.p", element0.getName());
      assertEquals("gL8MrSkNsB.p", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals(1, element0.getContentSize());
      assertEquals("gL8MrSkNsB.p", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("gL8MrSkNsB.p", qName0.toString());
      assertEquals("gL8MrSkNsB.p", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("gL8MrSkNsB.p", nodeNameTest0.toString());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertEquals("gL8MrSkNsB.p", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isContainer());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(jDOMNodePointer2.isRoot());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer2);
      
      JXPathContext jXPathContext0 = null;
      // Undeclared exception!
      jDOMNodePointer2.createAttribute((JXPathContext) null, qName0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Attribute attribute0 = new Attribute("v", "v");
      assertEquals("v", attribute0.getValue());
      assertEquals("v", attribute0.getName());
      assertEquals("", attribute0.getNamespacePrefix());
      assertEquals("", attribute0.getNamespaceURI());
      assertEquals(0, attribute0.getAttributeType());
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertNotNull(attribute0);
      
      Namespace namespace0 = Namespace.getNamespace("v", "v");
      assertEquals("v", namespace0.getURI());
      assertEquals("v", namespace0.getPrefix());
      assertNotNull(namespace0);
      
      Attribute attribute1 = attribute0.setNamespace(namespace0);
      assertEquals("v", attribute0.getNamespacePrefix());
      assertEquals("v", attribute0.getNamespaceURI());
      assertEquals("v", attribute0.getValue());
      assertEquals("v", attribute0.getName());
      assertEquals(0, attribute0.getAttributeType());
      assertEquals("v", namespace0.getURI());
      assertEquals("v", namespace0.getPrefix());
      assertEquals("v", attribute1.getValue());
      assertEquals("v", attribute1.getName());
      assertEquals(0, attribute1.getAttributeType());
      assertEquals("v", attribute1.getNamespacePrefix());
      assertEquals("v", attribute1.getNamespaceURI());
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertNotNull(attribute1);
      assertSame(attribute0, attribute1);
      assertSame(attribute1, attribute0);
      
      Attribute attribute2 = new Attribute("v", "v", namespace0);
      assertEquals("v", namespace0.getURI());
      assertEquals("v", namespace0.getPrefix());
      assertEquals("v", attribute2.getNamespacePrefix());
      assertEquals("v", attribute2.getNamespaceURI());
      assertEquals(0, attribute2.getAttributeType());
      assertEquals("v", attribute2.getName());
      assertEquals("v", attribute2.getValue());
      assertFalse(attribute2.equals((Object)attribute1));
      assertFalse(attribute2.equals((Object)attribute0));
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertNotNull(attribute2);
      
      String string0 = JDOMNodePointer.getPrefix(attribute2);
      assertEquals("v", namespace0.getURI());
      assertEquals("v", namespace0.getPrefix());
      assertEquals("v", attribute2.getNamespacePrefix());
      assertEquals("v", attribute2.getNamespaceURI());
      assertEquals(0, attribute2.getAttributeType());
      assertEquals("v", attribute2.getName());
      assertEquals("v", attribute2.getValue());
      assertFalse(attribute2.equals((Object)attribute1));
      assertFalse(attribute2.equals((Object)attribute0));
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertNotNull(string0);
      assertNotSame(attribute2, attribute1);
      assertNotSame(attribute2, attribute0);
      assertEquals("v", string0);
      
      QName qName0 = new QName("v");
      assertNull(qName0.getPrefix());
      assertEquals("v", qName0.getName());
      assertEquals("v", qName0.toString());
      assertNotNull(qName0);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      NullPointer nullPointer0 = (NullPointer)NodePointer.newNodePointer(qName0, (Object) null, locale0);
      assertNull(qName0.getPrefix());
      assertEquals("v", qName0.getName());
      assertEquals("v", qName0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isCollection());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nullPointer0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      assertEquals(3, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) nullPointer0, (Object) null, (NodeTest) nodeTypeTest0);
      assertNull(qName0.getPrefix());
      assertEquals("v", qName0.getName());
      assertEquals("v", qName0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isCollection());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertEquals(3, nodeTypeTest0.getNodeType());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Attribute attribute0 = new Attribute("v", "v");
      assertEquals("v", attribute0.getValue());
      assertEquals(0, attribute0.getAttributeType());
      assertEquals("", attribute0.getNamespacePrefix());
      assertEquals("", attribute0.getNamespaceURI());
      assertEquals("v", attribute0.getName());
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertNotNull(attribute0);
      
      Namespace namespace0 = Namespace.getNamespace("v", "v");
      assertEquals("v", namespace0.getPrefix());
      assertEquals("v", namespace0.getURI());
      assertNotNull(namespace0);
      
      Attribute attribute1 = attribute0.setNamespace(namespace0);
      assertEquals("v", attribute0.getValue());
      assertEquals("v", attribute0.getNamespacePrefix());
      assertEquals("v", attribute0.getNamespaceURI());
      assertEquals(0, attribute0.getAttributeType());
      assertEquals("v", attribute0.getName());
      assertEquals("v", namespace0.getPrefix());
      assertEquals("v", namespace0.getURI());
      assertEquals("v", attribute1.getNamespacePrefix());
      assertEquals("v", attribute1.getNamespaceURI());
      assertEquals(0, attribute1.getAttributeType());
      assertEquals("v", attribute1.getName());
      assertEquals("v", attribute1.getValue());
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertNotNull(attribute1);
      assertSame(attribute0, attribute1);
      assertSame(attribute1, attribute0);
      
      String string0 = JDOMNodePointer.XML_NAMESPACE_URI;
      assertNotNull(string0);
      assertEquals("http://www.w3.org/XML/1998/namespace", string0);
      
      QName qName0 = new QName("v");
      assertNull(qName0.getPrefix());
      assertEquals("v", qName0.toString());
      assertEquals("v", qName0.getName());
      assertNotNull(qName0);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(locale0);
      
      NullPointer nullPointer0 = (NullPointer)NodePointer.newNodePointer(qName0, (Object) null, locale0);
      assertNull(qName0.getPrefix());
      assertEquals("v", qName0.toString());
      assertEquals("v", qName0.getName());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isNode());
      assertTrue(nullPointer0.isLeaf());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isActual());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nullPointer0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      assertEquals(3, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) nullPointer0, (Object) null, (NodeTest) nodeTypeTest0);
      assertNull(qName0.getPrefix());
      assertEquals("v", qName0.toString());
      assertEquals("v", qName0.getName());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isNode());
      assertTrue(nullPointer0.isLeaf());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isActual());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isCollection());
      assertEquals(3, nodeTypeTest0.getNodeType());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Element element0 = new Element("q", "q", "q");
      assertEquals("q", element0.getNamespaceURI());
      assertEquals("q", element0.getName());
      assertEquals("q", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((NodePointer) null, element0);
      assertEquals("q", element0.getNamespaceURI());
      assertEquals("q", element0.getName());
      assertEquals("q", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("q", jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) jDOMNodePointer0);
      assertEquals("q", element0.getNamespaceURI());
      assertEquals("q", element0.getName());
      assertEquals("q", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("q", jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName0 = jDOMNodePointer0.getName();
      assertEquals("q", element0.getNamespaceURI());
      assertEquals("q", element0.getName());
      assertEquals("q", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("q", jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("q:q", qName0.toString());
      assertEquals("q", qName0.getPrefix());
      assertEquals("q", qName0.getName());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      
      JDOMAttributePointer jDOMAttributePointer0 = (JDOMAttributePointer)jDOMNodePointer0.createAttribute(jXPathContextReferenceImpl0, qName0);
      assertEquals("q", element0.getNamespaceURI());
      assertEquals("q", element0.getName());
      assertEquals("q", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("q", jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("q:q", qName0.toString());
      assertEquals("q", qName0.getPrefix());
      assertEquals("q", qName0.getName());
      assertEquals(1, jDOMAttributePointer0.getLength());
      assertFalse(jDOMAttributePointer0.isContainer());
      assertEquals("q", jDOMAttributePointer0.getNamespaceURI());
      assertTrue(jDOMAttributePointer0.isLeaf());
      assertEquals(Integer.MIN_VALUE, jDOMAttributePointer0.getIndex());
      assertFalse(jDOMAttributePointer0.isRoot());
      assertFalse(jDOMAttributePointer0.isCollection());
      assertFalse(jDOMAttributePointer0.isAttribute());
      assertTrue(jDOMAttributePointer0.isActual());
      assertTrue(jDOMAttributePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMAttributePointer0);
      
      JDOMAttributePointer jDOMAttributePointer1 = (JDOMAttributePointer)jDOMNodePointer0.createAttribute(jXPathContextReferenceImpl0, qName0);
      assertEquals("q", element0.getNamespaceURI());
      assertEquals("q", element0.getName());
      assertEquals("q", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("q", jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("q:q", qName0.toString());
      assertEquals("q", qName0.getPrefix());
      assertEquals("q", qName0.getName());
      assertTrue(jDOMAttributePointer1.isActual());
      assertTrue(jDOMAttributePointer1.isNode());
      assertFalse(jDOMAttributePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMAttributePointer1.getIndex());
      assertFalse(jDOMAttributePointer1.isCollection());
      assertEquals("q", jDOMAttributePointer1.getNamespaceURI());
      assertTrue(jDOMAttributePointer1.isLeaf());
      assertFalse(jDOMAttributePointer1.isAttribute());
      assertFalse(jDOMAttributePointer1.isContainer());
      assertEquals(1, jDOMAttributePointer1.getLength());
      assertTrue(jDOMAttributePointer1.equals((Object)jDOMAttributePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMAttributePointer1);
      assertNotSame(jDOMAttributePointer1, jDOMAttributePointer0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createChild((JXPathContext) jXPathContextReferenceImpl0, qName0, Integer.MIN_VALUE);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: 
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Comment comment0 = new Comment("eJ4.^");
      assertEquals("eJ4.^", comment0.getText());
      assertEquals("eJ4.^", comment0.getValue());
      assertNotNull(comment0);
      
      CDATA cDATA0 = new CDATA("org.jdom.Element@0000000002");
      assertNotNull(cDATA0);
      
      cDATA0.append(")o");
      QName qName0 = new QName((String) null, "UO,DSFk5_ltd");
      assertEquals("UO,DSFk5_ltd", qName0.toString());
      assertEquals("UO,DSFk5_ltd", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertEquals("UO,DSFk5_ltd", qName0.toString());
      assertEquals("UO,DSFk5_ltd", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      Text text0 = cDATA0.setText((String) null);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      assertEquals("", text0.getText());
      assertEquals("", text0.getValue());
      assertNotNull(text0);
      assertSame(cDATA0, text0);
      assertSame(text0, cDATA0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, text0);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      assertEquals("UO,DSFk5_ltd", qName0.toString());
      assertEquals("UO,DSFk5_ltd", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertEquals("", text0.getText());
      assertEquals("", text0.getValue());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.setValue(variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: UO,DSFk5_ltd
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = new Document();
      assertFalse(document0.hasRootElement());
      assertEquals(0, document0.getContentSize());
      assertNull(document0.getBaseURI());
      assertNotNull(document0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(document0, locale0);
      assertFalse(document0.hasRootElement());
      assertEquals(0, document0.getContentSize());
      assertNull(document0.getBaseURI());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      String string0 = jDOMNodePointer0.asPath();
      assertFalse(document0.hasRootElement());
      assertEquals(0, document0.getContentSize());
      assertNull(document0.getBaseURI());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = jDOMNodePointer0.asPath();
      assertFalse(document0.hasRootElement());
      assertEquals(0, document0.getContentSize());
      assertNull(document0.getBaseURI());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(string1.equals((Object)string0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(string1);
      assertEquals("", string1);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.namespaceIterator();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root element not set
         //
         verifyException("org.jdom.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory", "DMlk8<;xpZDt$ax=j~9");
      assertEquals("DMlk8<;xpZDt$ax=j~9", processingInstruction0.getValue());
      assertEquals("DMlk8<;xpZDt$ax=j~9", processingInstruction0.getData());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory", processingInstruction0.getTarget());
      assertNotNull(processingInstruction0);
      
      ProcessingInstruction processingInstruction1 = new ProcessingInstruction("org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory", "org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory");
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory", processingInstruction1.getValue());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory", processingInstruction1.getTarget());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory", processingInstruction1.getData());
      assertFalse(processingInstruction1.equals((Object)processingInstruction0));
      assertNotNull(processingInstruction1);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction1, locale0);
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory", processingInstruction1.getValue());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory", processingInstruction1.getTarget());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory", processingInstruction1.getData());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(processingInstruction1.equals((Object)processingInstruction0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      QName qName0 = new QName("<<unknown namespace>>");
      assertEquals("<<unknown namespace>>", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertNotNull(qName0);
      
      QName qName1 = new QName("bmk");
      assertEquals("bmk", qName1.toString());
      assertEquals("bmk", qName1.getName());
      assertNull(qName1.getPrefix());
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      
      CDATA cDATA0 = new CDATA("u|");
      assertEquals("u|", cDATA0.getValue());
      assertEquals("u|", cDATA0.getText());
      assertNotNull(cDATA0);
      
      CDATA cDATA1 = new CDATA((String) null);
      assertEquals("", cDATA1.getText());
      assertEquals("", cDATA1.getValue());
      assertFalse(cDATA1.equals((Object)cDATA0));
      assertNotNull(cDATA1);
      
      Text text0 = cDATA1.setText("java.lang.Integer@0000000003");
      assertFalse(cDATA1.equals((Object)cDATA0));
      assertFalse(text0.equals((Object)cDATA0));
      assertNotNull(text0);
      assertSame(cDATA1, text0);
      assertNotSame(cDATA1, cDATA0);
      assertSame(text0, cDATA1);
      assertNotSame(text0, cDATA0);
      
      String string0 = jDOMNodePointer0.asPath();
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory", processingInstruction1.getValue());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory", processingInstruction1.getTarget());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory", processingInstruction1.getData());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(processingInstruction1.equals((Object)processingInstruction0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(string0);
      assertNotSame(processingInstruction1, processingInstruction0);
      assertEquals("/processing-instruction('org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory')[1]", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Namespace namespace0 = Namespace.getNamespace("v", "v");
      assertEquals("v", namespace0.getPrefix());
      assertEquals("v", namespace0.getURI());
      assertNotNull(namespace0);
      
      Attribute attribute0 = new Attribute("v", "v", namespace0);
      assertEquals("v", namespace0.getPrefix());
      assertEquals("v", namespace0.getURI());
      assertEquals("v", attribute0.getName());
      assertEquals(0, attribute0.getAttributeType());
      assertEquals("v", attribute0.getValue());
      assertEquals("v", attribute0.getNamespacePrefix());
      assertEquals("v", attribute0.getNamespaceURI());
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertNotNull(attribute0);
      
      String string0 = JDOMNodePointer.getPrefix(attribute0);
      assertEquals("v", namespace0.getPrefix());
      assertEquals("v", namespace0.getURI());
      assertEquals("v", attribute0.getName());
      assertEquals(0, attribute0.getAttributeType());
      assertEquals("v", attribute0.getValue());
      assertEquals("v", attribute0.getNamespacePrefix());
      assertEquals("v", attribute0.getNamespaceURI());
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertNotNull(string0);
      assertEquals("v", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Attribute attribute0 = new Attribute("q", "q");
      assertEquals("", attribute0.getNamespaceURI());
      assertEquals("", attribute0.getNamespacePrefix());
      assertEquals("q", attribute0.getValue());
      assertEquals(0, attribute0.getAttributeType());
      assertEquals("q", attribute0.getName());
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertNotNull(attribute0);
      
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      assertEquals("xml", namespace0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertNotNull(namespace0);
      
      Namespace namespace1 = Namespace.getNamespace("jxpath.properties");
      assertEquals("", namespace1.getPrefix());
      assertEquals("jxpath.properties", namespace1.getURI());
      assertFalse(namespace1.equals((Object)namespace0));
      assertNotNull(namespace1);
      assertNotSame(namespace1, namespace0);
      
      Attribute attribute1 = attribute0.setNamespace(namespace0);
      assertEquals("xml", attribute0.getNamespacePrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", attribute0.getNamespaceURI());
      assertEquals("q", attribute0.getValue());
      assertEquals(0, attribute0.getAttributeType());
      assertEquals("q", attribute0.getName());
      assertEquals("xml", namespace0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("q", attribute1.getValue());
      assertEquals("q", attribute1.getName());
      assertEquals(0, attribute1.getAttributeType());
      assertEquals("http://www.w3.org/XML/1998/namespace", attribute1.getNamespaceURI());
      assertEquals("xml", attribute1.getNamespacePrefix());
      assertFalse(namespace0.equals((Object)namespace1));
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertNotNull(attribute1);
      assertSame(attribute0, attribute1);
      assertNotSame(namespace0, namespace1);
      assertSame(attribute1, attribute0);
      
      Attribute attribute2 = attribute0.setValue("q");
      assertEquals("xml", attribute0.getNamespacePrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", attribute0.getNamespaceURI());
      assertEquals("q", attribute0.getValue());
      assertEquals(0, attribute0.getAttributeType());
      assertEquals("q", attribute0.getName());
      assertEquals("q", attribute2.getName());
      assertEquals(0, attribute2.getAttributeType());
      assertEquals("q", attribute2.getValue());
      assertEquals("http://www.w3.org/XML/1998/namespace", attribute2.getNamespaceURI());
      assertEquals("xml", attribute2.getNamespacePrefix());
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertNotNull(attribute2);
      assertSame(attribute0, attribute1);
      assertSame(attribute0, attribute2);
      assertSame(attribute2, attribute1);
      assertSame(attribute2, attribute0);
      
      String string0 = JDOMNodePointer.getPrefix(attribute2);
      assertEquals("xml", attribute0.getNamespacePrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", attribute0.getNamespaceURI());
      assertEquals("q", attribute0.getValue());
      assertEquals(0, attribute0.getAttributeType());
      assertEquals("q", attribute0.getName());
      assertEquals("q", attribute2.getName());
      assertEquals(0, attribute2.getAttributeType());
      assertEquals("q", attribute2.getValue());
      assertEquals("http://www.w3.org/XML/1998/namespace", attribute2.getNamespaceURI());
      assertEquals("xml", attribute2.getNamespacePrefix());
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertNotNull(string0);
      assertSame(attribute0, attribute1);
      assertSame(attribute0, attribute2);
      assertSame(attribute2, attribute1);
      assertSame(attribute2, attribute0);
      assertEquals("xml", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory", "org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory");
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory", processingInstruction0.getValue());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory", processingInstruction0.getTarget());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory", processingInstruction0.getData());
      assertNotNull(processingInstruction0);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction0, locale0);
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory", processingInstruction0.getValue());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory", processingInstruction0.getTarget());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory", processingInstruction0.getData());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      String string0 = jDOMNodePointer0.asPath();
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory", processingInstruction0.getValue());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory", processingInstruction0.getTarget());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory", processingInstruction0.getData());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(string0);
      assertEquals("/processing-instruction('org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory')[1]", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory", "DMlk8<;xpZDt$ax=j~9");
      assertEquals("DMlk8<;xpZDt$ax=j~9", processingInstruction0.getData());
      assertEquals("DMlk8<;xpZDt$ax=j~9", processingInstruction0.getValue());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory", processingInstruction0.getTarget());
      assertNotNull(processingInstruction0);
      
      ProcessingInstruction processingInstruction1 = processingInstruction0.setData("org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory");
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory", processingInstruction0.getValue());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory", processingInstruction0.getTarget());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory", processingInstruction0.getData());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory", processingInstruction1.getTarget());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory", processingInstruction1.getData());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory", processingInstruction1.getValue());
      assertNotNull(processingInstruction1);
      assertSame(processingInstruction0, processingInstruction1);
      assertSame(processingInstruction1, processingInstruction0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction1, locale0);
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory", processingInstruction0.getValue());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory", processingInstruction0.getTarget());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory", processingInstruction0.getData());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory", processingInstruction1.getTarget());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory", processingInstruction1.getData());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory", processingInstruction1.getValue());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName0 = new QName("<<unknown namespace>>", "7vRuH;");
      assertEquals("<<unknown namespace>>", qName0.getPrefix());
      assertEquals("7vRuH;", qName0.getName());
      assertEquals("<<unknown namespace>>:7vRuH;", qName0.toString());
      assertNotNull(qName0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createChild((JXPathContext) jXPathContextReferenceImpl0, qName0, (-2098697634));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: /processing-instruction('org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory')[1]
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Attribute attribute0 = new Attribute("xml", "xml");
      assertEquals("", attribute0.getNamespacePrefix());
      assertEquals("", attribute0.getNamespaceURI());
      assertEquals("xml", attribute0.getValue());
      assertEquals("xml", attribute0.getName());
      assertEquals(0, attribute0.getAttributeType());
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertNotNull(attribute0);
      
      String string0 = JDOMNodePointer.getPrefix(attribute0);
      assertEquals("", attribute0.getNamespacePrefix());
      assertEquals("", attribute0.getNamespaceURI());
      assertEquals("xml", attribute0.getValue());
      assertEquals("xml", attribute0.getName());
      assertEquals(0, attribute0.getAttributeType());
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Locale locale0 = Locale.UK;
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("lnbg", locale0, "lnbg");
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      boolean boolean0 = jDOMNodePointer0.isLeaf();
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(boolean0);
      
      Element element0 = new Element("lnbg");
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("lnbg", element0.getName());
      assertNotNull(element0);
      
      QName qName0 = new QName("lnbg");
      assertEquals("lnbg", qName0.getName());
      assertEquals("lnbg", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "http://www.w3.org/XML/1998/namespace");
      assertEquals("lnbg", qName0.getName());
      assertEquals("lnbg", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("lnbg", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("http://www.w3.org/XML/1998/namespace", nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      boolean boolean1 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) element0, (NodeTest) nodeNameTest0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("lnbg", element0.getName());
      assertEquals("lnbg", qName0.getName());
      assertEquals("lnbg", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("lnbg", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("http://www.w3.org/XML/1998/namespace", nodeNameTest0.getNamespaceURI());
      assertTrue(boolean1 == boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        JDOMNodePointer.findEnclosingAttribute(element0, "http://www.w3.org/XML/1998/namespace", (Namespace) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jdom.AttributeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Element element0 = new Element("gL8MrSkNsB.p");
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("gL8MrSkNsB.p", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertNotNull(element0);
      
      QName qName0 = new QName("!Ot%7J#XA06s,'");
      assertNull(qName0.getPrefix());
      assertEquals("!Ot%7J#XA06s,'", qName0.toString());
      assertEquals("!Ot%7J#XA06s,'", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "gL8MrSkNsB.p");
      assertNull(qName0.getPrefix());
      assertEquals("!Ot%7J#XA06s,'", qName0.toString());
      assertEquals("!Ot%7J#XA06s,'", qName0.getName());
      assertEquals("!Ot%7J#XA06s,'", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("gL8MrSkNsB.p", nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertNull(qName0.getPrefix());
      assertEquals("!Ot%7J#XA06s,'", qName0.toString());
      assertEquals("!Ot%7J#XA06s,'", qName0.getName());
      assertEquals("!Ot%7J#XA06s,'", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("gL8MrSkNsB.p", nodeNameTest0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((NodePointer) beanPointer0, (Object) locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertNull(qName0.getPrefix());
      assertEquals("!Ot%7J#XA06s,'", qName0.toString());
      assertEquals("!Ot%7J#XA06s,'", qName0.getName());
      assertEquals("!Ot%7J#XA06s,'", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("gL8MrSkNsB.p", nodeNameTest0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("gL8MrSkNsB.p", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertNull(qName0.getPrefix());
      assertEquals("!Ot%7J#XA06s,'", qName0.toString());
      assertEquals("!Ot%7J#XA06s,'", qName0.getName());
      assertEquals("!Ot%7J#XA06s,'", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("gL8MrSkNsB.p", nodeNameTest0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      Element element1 = element0.setText("http://www.w3.org/2000/xmlns/");
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("gL8MrSkNsB.p", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(1, element0.getContentSize());
      assertEquals("gL8MrSkNsB.p", element1.getName());
      assertEquals(1, element1.getContentSize());
      assertEquals("", element1.getNamespaceURI());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      CDATA cDATA0 = new CDATA("space");
      assertEquals("space", cDATA0.getText());
      assertEquals("space", cDATA0.getValue());
      assertNotNull(cDATA0);
      
      CDATA cDATA1 = new CDATA("http://www.w3.org/XML/1998/namespace");
      assertEquals("http://www.w3.org/XML/1998/namespace", cDATA1.getValue());
      assertEquals("http://www.w3.org/XML/1998/namespace", cDATA1.getText());
      assertFalse(cDATA1.equals((Object)cDATA0));
      assertNotNull(cDATA1);
      
      Document document0 = cDATA1.getDocument();
      assertEquals("http://www.w3.org/XML/1998/namespace", cDATA1.getValue());
      assertEquals("http://www.w3.org/XML/1998/namespace", cDATA1.getText());
      assertFalse(cDATA1.equals((Object)cDATA0));
      assertNull(document0);
      assertNotSame(cDATA1, cDATA0);
      
      LinkedList<Text> linkedList0 = new LinkedList<Text>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains("space"));
      assertNotNull(linkedList1);
      
      Document document1 = new Document(linkedList1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertNull(document1.getBaseURI());
      assertEquals(0, document1.getContentSize());
      assertFalse(document1.hasRootElement());
      assertFalse(linkedList1.contains("space"));
      assertNotNull(document1);
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer(jDOMNodePointer1, document1);
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("gL8MrSkNsB.p", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(1, element0.getContentSize());
      assertNull(qName0.getPrefix());
      assertEquals("!Ot%7J#XA06s,'", qName0.toString());
      assertEquals("!Ot%7J#XA06s,'", qName0.getName());
      assertEquals("!Ot%7J#XA06s,'", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("gL8MrSkNsB.p", nodeNameTest0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertNull(document1.getBaseURI());
      assertEquals(0, document1.getContentSize());
      assertFalse(document1.hasRootElement());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(jDOMNodePointer2.isRoot());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(linkedList1.contains("space"));
      assertNotNull(jDOMNodePointer2);
      
      String string0 = jDOMNodePointer1.asPath();
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("gL8MrSkNsB.p", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(1, element0.getContentSize());
      assertNull(qName0.getPrefix());
      assertEquals("!Ot%7J#XA06s,'", qName0.toString());
      assertEquals("!Ot%7J#XA06s,'", qName0.getName());
      assertEquals("!Ot%7J#XA06s,'", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("gL8MrSkNsB.p", nodeNameTest0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(string0);
      assertSame(element0, element1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals("/gL8MrSkNsB.p[1]", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Element element0 = new Element("gL8MrSkNsB.p", "gL8MrSkNsB.p");
      assertEquals("gL8MrSkNsB.p", element0.getName());
      assertEquals("gL8MrSkNsB.p", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertNotNull(element0);
      
      QName qName0 = new QName("gL8MrSkNsB.p", "gL8MrSkNsB.p");
      assertEquals("gL8MrSkNsB.p:gL8MrSkNsB.p", qName0.toString());
      assertEquals("gL8MrSkNsB.p", qName0.getPrefix());
      assertEquals("gL8MrSkNsB.p", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "gL8MrSkNsB.p");
      assertEquals("gL8MrSkNsB.p:gL8MrSkNsB.p", qName0.toString());
      assertEquals("gL8MrSkNsB.p", qName0.getPrefix());
      assertEquals("gL8MrSkNsB.p", qName0.getName());
      assertEquals("gL8MrSkNsB.p", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("gL8MrSkNsB.p:gL8MrSkNsB.p", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("gL8MrSkNsB.p:gL8MrSkNsB.p", qName0.toString());
      assertEquals("gL8MrSkNsB.p", qName0.getPrefix());
      assertEquals("gL8MrSkNsB.p", qName0.getName());
      assertEquals("gL8MrSkNsB.p", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("gL8MrSkNsB.p:gL8MrSkNsB.p", nodeNameTest0.toString());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((NodePointer) beanPointer0, (Object) locale0);
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("gL8MrSkNsB.p:gL8MrSkNsB.p", qName0.toString());
      assertEquals("gL8MrSkNsB.p", qName0.getPrefix());
      assertEquals("gL8MrSkNsB.p", qName0.getName());
      assertEquals("gL8MrSkNsB.p", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("gL8MrSkNsB.p:gL8MrSkNsB.p", nodeNameTest0.toString());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("gL8MrSkNsB.p", element0.getName());
      assertEquals("gL8MrSkNsB.p", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("gL8MrSkNsB.p:gL8MrSkNsB.p", qName0.toString());
      assertEquals("gL8MrSkNsB.p", qName0.getPrefix());
      assertEquals("gL8MrSkNsB.p", qName0.getName());
      assertEquals("gL8MrSkNsB.p", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("gL8MrSkNsB.p:gL8MrSkNsB.p", nodeNameTest0.toString());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals("gL8MrSkNsB.p", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      Element element1 = element0.setText("http://www.w3.org/2000/xmlns/");
      assertEquals("gL8MrSkNsB.p", element0.getName());
      assertEquals(1, element0.getContentSize());
      assertEquals("gL8MrSkNsB.p", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("gL8MrSkNsB.p", element1.getNamespaceURI());
      assertEquals("gL8MrSkNsB.p", element1.getName());
      assertEquals(1, element1.getContentSize());
      assertFalse(element1.isRootElement());
      assertEquals("", element1.getNamespacePrefix());
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      // Undeclared exception!
      jDOMNodePointer1.asPath();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertNotNull(locale0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(locale0));
      assertNotNull(linkedList1);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(linkedList1.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertNotNull(list0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("6Zn(", locale0, "6Zn(");
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      Element element0 = new Element("osW");
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("osW", element0.getName());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("osW", element0.getName());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer((Object) jDOMNodePointer1, locale0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("osW", element0.getName());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertTrue(jDOMNodePointer2.isRoot());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer2);
      
      jDOMNodePointer1.setValue("http://www.w3.org/XML/1998/namespace");
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("osW", element0.getName());
      assertEquals(1, element0.getContentSize());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1731);
      assertEquals(1731, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      boolean boolean0 = jDOMNodePointer0.isLanguage("http://www.w3.org/XML/1998/namespace");
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertFalse(boolean0);
      
      JDOMNodePointer jDOMNodePointer3 = new JDOMNodePointer(nodeTypeTest0, locale0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals(1731, nodeTypeTest0.getNodeType());
      assertTrue(jDOMNodePointer3.isNode());
      assertFalse(jDOMNodePointer3.isCollection());
      assertNull(jDOMNodePointer3.getNamespaceURI());
      assertEquals(1, jDOMNodePointer3.getLength());
      assertFalse(jDOMNodePointer3.isAttribute());
      assertTrue(jDOMNodePointer3.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer3.getIndex());
      assertFalse(jDOMNodePointer3.isContainer());
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer3);
      
      Object object0 = jDOMNodePointer1.getValue();
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("osW", element0.getName());
      assertEquals(1, element0.getContentSize());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer3));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer3));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(object0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer3);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer3);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertEquals("http://www.w3.org/XML/1998/namespace", object0);
      
      NodeIterator nodeIterator0 = jDOMNodePointer2.namespaceIterator();
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("osW", element0.getName());
      assertEquals(1, element0.getContentSize());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertTrue(jDOMNodePointer2.isRoot());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertEquals(0, nodeIterator0.getPosition());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer3));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer3));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer3));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodeIterator0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer3);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer3);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer3);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      
      boolean boolean1 = jDOMNodePointer2.isCollection();
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("osW", element0.getName());
      assertEquals(1, element0.getContentSize());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertTrue(jDOMNodePointer2.isRoot());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer3));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer3));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer3));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertTrue(boolean1 == boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer3);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer3);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer3);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      assertFalse(boolean1);
      
      int int0 = jDOMNodePointer1.compareChildNodePointers(jDOMNodePointer2, jDOMNodePointer0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("osW", element0.getName());
      assertEquals(1, element0.getContentSize());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertTrue(jDOMNodePointer2.isRoot());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer3));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer3));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer3));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer3);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer3);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer3);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("y'", locale0, "y'");
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      Element element0 = new Element("osW");
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("osW", element0.getName());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("osW", element0.getName());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      jDOMNodePointer1.setValue("http://www.w3.org/XML/1998/namespace");
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("osW", element0.getName());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      
      int int0 = jDOMNodePointer1.compareChildNodePointers(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("osW", element0.getName());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(".h(?ls:N|qEV9*0j\"V", locale0, ".h(?ls:N|qEV9*0j\"V");
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      assertEquals(2, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      String string0 = jDOMNodePointer0.asPath();
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(string0);
      assertEquals("id('.h(?ls:N|qEV9*0j&quot;V')", string0);
      
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(4);
      assertEquals(4, nodeTypeTest1.getNodeType());
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertNotNull(nodeTypeTest1);
      
      String string1 = nodeTypeTest1.toString();
      assertEquals(4, nodeTypeTest1.getNodeType());
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(nodeTypeTest1, nodeTypeTest0);
      assertEquals("processing-instruction()", string1);
      
      boolean boolean0 = jDOMNodePointer0.testNode((NodeTest) nodeTypeTest1);
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(4, nodeTypeTest1.getNodeType());
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(nodeTypeTest1, nodeTypeTest0);
      assertFalse(boolean0);
      
      String string2 = jDOMNodePointer0.getNamespaceURI();
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("//www.w3.org/2000/xmlns/", locale0);
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("http://www.w3.org/2000/xmlns/");
      assertEquals("http://www.w3.org/2000/xmlns/", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("J", "//www.w3.org/2000/xmlns/");
      assertEquals("J", processingInstruction0.getTarget());
      assertEquals("//www.w3.org/2000/xmlns/", processingInstruction0.getData());
      assertEquals("//www.w3.org/2000/xmlns/", processingInstruction0.getValue());
      assertNotNull(processingInstruction0);
      
      // Undeclared exception!
      try { 
        processingInstruction0.setPseudoAttribute("\"A(z<>5e>/\u0000p", "&<A+S1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The data \"\"A(z<>5e>/\u0000p\" is not legal for a JDOM 0x0 is not a legal XML character.
         //
         verifyException("org.jdom.ProcessingInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("6Zn(", locale0, "6Zn(");
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      Document document0 = new Document();
      assertEquals(0, document0.getContentSize());
      assertNull(document0.getBaseURI());
      assertFalse(document0.hasRootElement());
      assertNotNull(document0);
      
      Element element0 = new Element("osW");
      assertFalse(element0.isRootElement());
      assertEquals("osW", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(element0.isRootElement());
      assertEquals("osW", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer((Object) jDOMNodePointer1, locale0);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(element0.isRootElement());
      assertEquals("osW", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer2.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertFalse(jDOMNodePointer2.isContainer());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer2);
      
      String string0 = JDOMNodePointer.XMLNS_NAMESPACE_URI;
      assertNotNull(string0);
      assertEquals("http://www.w3.org/2000/xmlns/", string0);
      
      jDOMNodePointer1.setValue("http://www.w3.org/2000/xmlns/");
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(element0.isRootElement());
      assertEquals(1, element0.getContentSize());
      assertEquals("osW", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1731);
      assertEquals(1731, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      boolean boolean0 = jDOMNodePointer0.isLanguage("http://www.w3.org/XML/1998/namespace");
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertFalse(boolean0);
      
      JDOMNodePointer jDOMNodePointer3 = new JDOMNodePointer(nodeTypeTest0, locale0);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(1731, nodeTypeTest0.getNodeType());
      assertNull(jDOMNodePointer3.getNamespaceURI());
      assertFalse(jDOMNodePointer3.isContainer());
      assertFalse(jDOMNodePointer3.isAttribute());
      assertTrue(jDOMNodePointer3.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer3.getIndex());
      assertFalse(jDOMNodePointer3.isCollection());
      assertTrue(jDOMNodePointer3.isNode());
      assertEquals(1, jDOMNodePointer3.getLength());
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer2));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer3);
      
      Object object0 = jDOMNodePointer1.getValue();
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(element0.isRootElement());
      assertEquals(1, element0.getContentSize());
      assertEquals("osW", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer3));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer3));
      assertTrue(object0.equals((Object)string0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(object0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer3);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer3);
      assertEquals("http://www.w3.org/2000/xmlns/", object0);
      
      NodeIterator nodeIterator0 = jDOMNodePointer1.namespaceIterator();
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(element0.isRootElement());
      assertEquals(1, element0.getContentSize());
      assertEquals("osW", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertEquals(0, nodeIterator0.getPosition());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer3));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer3));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodeIterator0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer3);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer3);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("y'", locale0, "y'");
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      Element element0 = new Element("osW");
      assertEquals("osW", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("osW", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertTrue(jDOMNodePointer1.isNode());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      jDOMNodePointer1.setValue("http://www.w3.org/XML/1998/namespace");
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("osW", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(1, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertTrue(jDOMNodePointer1.isNode());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      
      Object object0 = jDOMNodePointer1.getValue();
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("osW", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(1, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertTrue(jDOMNodePointer1.isNode());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(object0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals("http://www.w3.org/XML/1998/namespace", object0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertNotNull(locale0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("j\"T", locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      assertEquals(2, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      boolean boolean1 = jDOMNodePointer0.testNode((NodeTest) nodeTypeTest0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(2, nodeTypeTest0.getNodeType());
      assertTrue(boolean1 == boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean1);
      
      QName qName0 = new QName("f^85&3n7 /abVw?2P\"");
      assertEquals("f^85&3n7 /abVw?2P\"", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("f^85&3n7 /abVw?2P\"", qName0.toString());
      assertNotNull(qName0);
      
      NodeIterator nodeIterator0 = jDOMNodePointer0.attributeIterator(qName0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals("f^85&3n7 /abVw?2P\"", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("f^85&3n7 /abVw?2P\"", qName0.toString());
      assertEquals(0, nodeIterator0.getPosition());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodeIterator0);
      
      CDATA cDATA0 = new CDATA("j\"T");
      assertEquals("j\"T", cDATA0.getText());
      assertEquals("j\"T", cDATA0.getValue());
      assertNotNull(cDATA0);
      
      boolean boolean2 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) cDATA0, (NodeTest) nodeTypeTest0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(2, nodeTypeTest0.getNodeType());
      assertEquals("j\"T", cDATA0.getText());
      assertEquals("j\"T", cDATA0.getValue());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CDATA cDATA0 = new CDATA((String) null);
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      assertNotNull(cDATA0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      assertEquals(2, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      boolean boolean0 = jDOMNodePointer0.testNode((NodeTest) nodeTypeTest0);
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(2, nodeTypeTest0.getNodeType());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("3.>qI.|C WRNz'", locale0, "3.>qI.|C WRNz'");
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      Element element0 = new Element("F", "F");
      assertEquals("F", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("F", element0.getNamespaceURI());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("F", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("F", element0.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      String string0 = JDOMNodePointer.XML_NAMESPACE_URI;
      assertNotNull(string0);
      assertEquals("http://www.w3.org/XML/1998/namespace", string0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer(locale0, locale0, "http://www.w3.org/2000/xmlns/");
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(jDOMNodePointer2.isContainer());
      assertTrue(jDOMNodePointer2.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertFalse(jDOMNodePointer2.isCollection());
      assertTrue(jDOMNodePointer2.isNode());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer2);
      
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(5);
      assertEquals(5, nodeTypeTest1.getNodeType());
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertNotNull(nodeTypeTest1);
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer2, (Object) jDOMNodePointer2, (NodeTest) nodeTypeTest1);
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(jDOMNodePointer2.isContainer());
      assertTrue(jDOMNodePointer2.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertFalse(jDOMNodePointer2.isCollection());
      assertTrue(jDOMNodePointer2.isNode());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertEquals(5, nodeTypeTest1.getNodeType());
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      assertNotSame(nodeTypeTest1, nodeTypeTest0);
      assertFalse(boolean0);
      
      QName qName0 = jDOMNodePointer0.getName();
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      
      String string1 = JDOMNodePointer.getPrefix(element0);
      assertEquals("F", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("F", element0.getNamespaceURI());
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("6Zn(", locale0, "6Zn(");
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      String string0 = NodePointer.UNKNOWN_NAMESPACE;
      assertNotNull(string0);
      assertEquals("<<unknown namespace>>", string0);
      
      Document document0 = new Document();
      assertEquals(0, document0.getContentSize());
      assertNull(document0.getBaseURI());
      assertFalse(document0.hasRootElement());
      assertNotNull(document0);
      
      Element element0 = new Element("osW");
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("osW", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("osW", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer((Object) jDOMNodePointer1, locale0);
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("osW", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertTrue(jDOMNodePointer2.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertTrue(jDOMNodePointer2.isRoot());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer2);
      
      String string1 = jDOMNodePointer1.getNamespaceURI("osW");
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("osW", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(string1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      
      Object object0 = jDOMNodePointer1.getValue();
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("osW", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(object0.equals((Object)string0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(object0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertEquals("", object0);
      
      boolean boolean0 = jDOMNodePointer1.isLeaf();
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("osW", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertTrue(boolean0);
      
      Document document1 = new Document();
      assertEquals(0, document1.getContentSize());
      assertNull(document1.getBaseURI());
      assertFalse(document1.hasRootElement());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer1.setValue(document1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root element not set
         //
         verifyException("org.jdom.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("Zn", locale0, "Zn");
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      Document document0 = new Document();
      assertFalse(document0.hasRootElement());
      assertEquals(0, document0.getContentSize());
      assertNull(document0.getBaseURI());
      assertNotNull(document0);
      
      Element element0 = new Element("osW");
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("osW", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespaceURI());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("osW", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer1.setValue(document0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root element not set
         //
         verifyException("org.jdom.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("j\"T", locale0);
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      assertEquals(2, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      String string0 = nodeTypeTest0.toString();
      assertEquals(2, nodeTypeTest0.getNodeType());
      assertNotNull(string0);
      assertEquals("text()", string0);
      
      QName qName0 = new QName("/text()", "http://www.w3.org/XML/1998/namespace");
      assertEquals("/text()", qName0.getPrefix());
      assertEquals("/text():http://www.w3.org/XML/1998/namespace", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("/text()", qName0.getPrefix());
      assertEquals("/text():http://www.w3.org/XML/1998/namespace", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("/text():http://www.w3.org/XML/1998/namespace", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) "/text()", (NodeTest) nodeTypeTest0);
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(2, nodeTypeTest0.getNodeType());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Document document0 = new Document();
      assertEquals(0, document0.getContentSize());
      assertFalse(document0.hasRootElement());
      assertNull(document0.getBaseURI());
      assertNotNull(document0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(document0, locale0);
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(0, document0.getContentSize());
      assertFalse(document0.hasRootElement());
      assertNull(document0.getBaseURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(document0, locale0);
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(0, document0.getContentSize());
      assertFalse(document0.hasRootElement());
      assertNull(document0.getBaseURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertTrue(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      int int0 = jDOMNodePointer1.compareChildNodePointers(jDOMNodePointer0, jDOMNodePointer0);
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(0, document0.getContentSize());
      assertFalse(document0.hasRootElement());
      assertNull(document0.getBaseURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertTrue(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(0, int0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-998));
      assertEquals((-998), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.childIterator(nodeTypeTest0, true, jDOMNodePointer1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root element not set
         //
         verifyException("org.jdom.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("lnbg", locale0, "lnbg");
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      VariablePointer variablePointer0 = new VariablePointer((QName) null);
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      Comment comment0 = new Comment("s");
      assertEquals("s", comment0.getValue());
      assertEquals("s", comment0.getText());
      assertNotNull(comment0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(variablePointer0, comment0);
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals("s", comment0.getValue());
      assertEquals("s", comment0.getText());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      NodePointer nodePointer0 = jDOMNodePointer1.namespacePointer("http://www.w3.org/XML/1998/namespace");
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals("s", comment0.getValue());
      assertEquals("s", comment0.getText());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isContainer());
      assertTrue(nodePointer0.isNode());
      assertTrue(nodePointer0.isLeaf());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isRoot());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      
      String string0 = JDOMNodePointer.XML_NAMESPACE_URI;
      assertNotNull(string0);
      assertEquals("http://www.w3.org/XML/1998/namespace", string0);
      
      Document document0 = new Document();
      assertFalse(document0.hasRootElement());
      assertEquals(0, document0.getContentSize());
      assertNull(document0.getBaseURI());
      assertNotNull(document0);
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer(document0, locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertFalse(document0.hasRootElement());
      assertEquals(0, document0.getContentSize());
      assertNull(document0.getBaseURI());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertFalse(jDOMNodePointer2.isContainer());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer2.isRoot());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertFalse(jDOMNodePointer2.isCollection());
      assertTrue(jDOMNodePointer2.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer2);
      
      Object object0 = jDOMNodePointer2.getValue();
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertFalse(document0.hasRootElement());
      assertEquals(0, document0.getContentSize());
      assertNull(document0.getBaseURI());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertFalse(jDOMNodePointer2.isContainer());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer2.isRoot());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertFalse(jDOMNodePointer2.isCollection());
      assertTrue(jDOMNodePointer2.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(object0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer2.isLeaf();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root element not set
         //
         verifyException("org.jdom.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Document document0 = new Document();
      assertEquals(0, document0.getContentSize());
      assertNull(document0.getBaseURI());
      assertFalse(document0.hasRootElement());
      assertNotNull(document0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(document0, locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, document0.getContentSize());
      assertNull(document0.getBaseURI());
      assertFalse(document0.hasRootElement());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.isLeaf();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root element not set
         //
         verifyException("org.jdom.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("lnbg", locale0, "lnbg");
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      boolean boolean0 = jDOMNodePointer0.isLanguage("lnbg");
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean0);
      
      boolean boolean1 = jDOMNodePointer0.isAttribute();
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(boolean1 == boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean1);
      
      Element element0 = new Element("lnbg");
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("lnbg", element0.getName());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertNotNull(element0);
      
      boolean boolean2 = jDOMNodePointer0.isLanguage("http://www.w3.org/2000/xmlns/");
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean2);
      
      boolean boolean3 = jDOMNodePointer0.isLanguage("<<unknown namespace>>");
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean3);
      
      QName qName0 = new QName("lnbg");
      assertEquals("lnbg", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("lnbg", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "http://www.w3.org/XML/1998/namespace");
      assertEquals("lnbg", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("lnbg", qName0.getName());
      assertEquals("lnbg", nodeNameTest0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains("lnbg"));
      assertNotNull(set0);
      
      Element element1 = element0.setContent((Collection) set0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("lnbg", element0.getName());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(element1.isRootElement());
      assertEquals(0, element1.getContentSize());
      assertEquals("lnbg", element1.getName());
      assertEquals("", element1.getNamespaceURI());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(set0.contains("lnbg"));
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      boolean boolean4 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) element1, (NodeTest) nodeNameTest0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("lnbg", element0.getName());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("lnbg", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("lnbg", qName0.getName());
      assertEquals("lnbg", nodeNameTest0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(element1.isRootElement());
      assertEquals(0, element1.getContentSize());
      assertEquals("lnbg", element1.getName());
      assertEquals("", element1.getNamespaceURI());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(set0.contains("lnbg"));
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertTrue(boolean4);
      
      boolean boolean5 = jDOMNodePointer0.testNode((NodeTest) nodeNameTest0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("lnbg", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("lnbg", qName0.getName());
      assertEquals("lnbg", nodeNameTest0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean5);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      QName qName0 = new QName("3.qI|C WRNz'");
      assertEquals("3.qI|C WRNz'", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("3.qI|C WRNz'", qName0.getName());
      assertNotNull(qName0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(qName0, locale0);
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("3.qI|C WRNz'", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("3.qI|C WRNz'", qName0.getName());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      QName qName1 = (QName)jDOMNodePointer0.getImmediateNode();
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("3.qI|C WRNz'", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("3.qI|C WRNz'", qName0.getName());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("3.qI|C WRNz'", qName1.toString());
      assertEquals("3.qI|C WRNz'", qName1.getName());
      assertNull(qName1.getPrefix());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName1);
      assertSame(qName0, qName1);
      assertSame(qName1, qName0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("3.qI|C WRNz'"));
      assertNotNull(linkedList0);
      
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      assertEquals(0, linkedList2.size());
      assertFalse(linkedList2.contains(locale0));
      assertNotNull(linkedList2);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      assertEquals(2, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      String string0 = nodeTypeTest0.toString();
      assertEquals(2, nodeTypeTest0.getNodeType());
      assertNotNull(string0);
      assertEquals("text()", string0);
      
      boolean boolean0 = jDOMNodePointer0.testNode((NodeTest) nodeTypeTest0);
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("3.qI|C WRNz'", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("3.qI|C WRNz'", qName0.getName());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(2, nodeTypeTest0.getNodeType());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertSame(qName0, qName1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0, "xml");
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      Element element0 = new Element("q", "xml");
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("xml", element0.getNamespaceURI());
      assertEquals("q", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertNotNull(element0);
      
      CDATA cDATA0 = new CDATA("http://www.w3.org/XML/1998/namespace");
      assertEquals("http://www.w3.org/XML/1998/namespace", cDATA0.getValue());
      assertEquals("http://www.w3.org/XML/1998/namespace", cDATA0.getText());
      assertNotNull(cDATA0);
      
      CDATA cDATA1 = (CDATA)cDATA0.detach();
      assertEquals("http://www.w3.org/XML/1998/namespace", cDATA0.getValue());
      assertEquals("http://www.w3.org/XML/1998/namespace", cDATA0.getText());
      assertEquals("http://www.w3.org/XML/1998/namespace", cDATA1.getValue());
      assertEquals("http://www.w3.org/XML/1998/namespace", cDATA1.getText());
      assertNotNull(cDATA1);
      assertSame(cDATA0, cDATA1);
      assertSame(cDATA1, cDATA0);
      
      Element element1 = element0.addContent((Content) cDATA1);
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("xml", element0.getNamespaceURI());
      assertEquals("q", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(1, element0.getContentSize());
      assertEquals("http://www.w3.org/XML/1998/namespace", cDATA0.getValue());
      assertEquals("http://www.w3.org/XML/1998/namespace", cDATA0.getText());
      assertEquals("http://www.w3.org/XML/1998/namespace", cDATA1.getValue());
      assertEquals("http://www.w3.org/XML/1998/namespace", cDATA1.getText());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals("xml", element1.getNamespaceURI());
      assertEquals(1, element1.getContentSize());
      assertFalse(element1.isRootElement());
      assertEquals("q", element1.getName());
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(cDATA0, cDATA1);
      assertSame(cDATA1, cDATA0);
      assertSame(element1, element0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element1);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("xml", element0.getNamespaceURI());
      assertEquals("q", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(1, element0.getContentSize());
      assertEquals("http://www.w3.org/XML/1998/namespace", cDATA0.getValue());
      assertEquals("http://www.w3.org/XML/1998/namespace", cDATA0.getText());
      assertEquals("http://www.w3.org/XML/1998/namespace", cDATA1.getValue());
      assertEquals("http://www.w3.org/XML/1998/namespace", cDATA1.getText());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals("xml", element1.getNamespaceURI());
      assertEquals(1, element1.getContentSize());
      assertFalse(element1.isRootElement());
      assertEquals("q", element1.getName());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals("xml", jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      boolean boolean0 = jDOMNodePointer1.isLeaf();
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("xml", element0.getNamespaceURI());
      assertEquals("q", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(1, element0.getContentSize());
      assertEquals("http://www.w3.org/XML/1998/namespace", cDATA0.getValue());
      assertEquals("http://www.w3.org/XML/1998/namespace", cDATA0.getText());
      assertEquals("http://www.w3.org/XML/1998/namespace", cDATA1.getValue());
      assertEquals("http://www.w3.org/XML/1998/namespace", cDATA1.getText());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals("xml", element1.getNamespaceURI());
      assertEquals(1, element1.getContentSize());
      assertFalse(element1.isRootElement());
      assertEquals("q", element1.getName());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals("xml", jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertSame(element0, element1);
      assertSame(cDATA0, cDATA1);
      assertSame(cDATA1, cDATA0);
      assertSame(element1, element0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(".h(?ls:N|qEV9*0j\"V", locale0, ".h(?ls:N|qEV9*0j\"V");
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      Element element0 = new Element("F", "F");
      assertEquals("F", element0.getName());
      assertEquals("F", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("F", element0.getName());
      assertEquals("F", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      boolean boolean0 = jDOMNodePointer1.isLanguage("http://www.w3.org/2000/xmlns/");
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("F", element0.getName());
      assertEquals("F", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertFalse(boolean0);
      
      QName qName0 = jDOMNodePointer1.getName();
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("F", element0.getName());
      assertEquals("F", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals("F", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("F", qName0.getName());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) jDOMNodePointer0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      
      JXPathContext jXPathContext0 = jXPathContextReferenceImpl0.getParentContext();
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNull(jXPathContext0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      
      // Undeclared exception!
      jDOMNodePointer1.createChild((JXPathContext) jXPathContextReferenceImpl0, qName0, (-522));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("lnbg", locale0, "lnbg");
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      Element element0 = new Element("lnbg");
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("lnbg", element0.getName());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("lnbg", element0.getName());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      String string0 = jDOMNodePointer1.getNamespaceURI("");
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("lnbg", element0.getName());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(string0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals("", string0);
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer("lnbg", locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer2.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertFalse(jDOMNodePointer2.isCollection());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer2);
      
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("http://www.w3.org/2000/xmlns/", "lnbg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The name \"http://www.w3.org/2000/xmlns/\" is not legal for JDOM/XML attributes: XML names cannot contain the character \"/\".
         //
         verifyException("org.jdom.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("lnbg", locale0, "lnbg");
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "http://www.w3.org/2000/xmlns/");
      assertFalse(boolean0);
      
      boolean boolean1 = jDOMNodePointer0.isAttribute();
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(boolean1 == boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean1);
      
      Element element0 = new Element("lnbg");
      assertEquals("lnbg", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("lnbg", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      boolean boolean2 = jDOMNodePointer1.isLanguage("http://www.w3.org/2000/xmlns/");
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("lnbg", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertFalse(boolean2);
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer(element0, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("lnbg", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertTrue(jDOMNodePointer2.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isContainer());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer2.isNode());
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer2);
      
      boolean boolean3 = jDOMNodePointer1.isLanguage("preserve");
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("lnbg", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertFalse(boolean3);
      
      QName qName0 = new QName("lnbg");
      assertNull(qName0.getPrefix());
      assertEquals("lnbg", qName0.getName());
      assertEquals("lnbg", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("lnbg", qName0.getName());
      assertEquals("lnbg", qName0.toString());
      assertEquals("lnbg", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains("lnbg"));
      assertNotNull(set0);
      
      Element element1 = element0.setContent((Collection) set0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("lnbg", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals("", element1.getNamespaceURI());
      assertEquals("lnbg", element1.getName());
      assertEquals(0, element1.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertFalse(set0.contains("lnbg"));
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      boolean boolean4 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) element1, (NodeTest) nodeNameTest0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("lnbg", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertNull(qName0.getPrefix());
      assertEquals("lnbg", qName0.getName());
      assertEquals("lnbg", qName0.toString());
      assertEquals("lnbg", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals("", element1.getNamespaceURI());
      assertEquals("lnbg", element1.getName());
      assertEquals(0, element1.getContentSize());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(set0.contains("lnbg"));
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertTrue(boolean4);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.setValue("preserve");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.jdom.Element
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("lang", locale0, "lang");
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.272.b10-0.fc31.x86_64/jre/lib/jxpath.properties");
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "java.lang.Integer@0000000014");
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Element element0 = new Element("lang");
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("lang", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("lang", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer(element0, locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("lang", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isCollection());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer2.isRoot());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer2);
      
      QName qName0 = jDOMNodePointer2.getName();
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("lang", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isCollection());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer2.isRoot());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertEquals("lang", qName0.getName());
      assertEquals("lang", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "java.lang.Integer@0000000014");
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      JDOMAttributePointer jDOMAttributePointer0 = (JDOMAttributePointer)jDOMNodePointer1.createAttribute(jXPathContextReferenceImpl0, qName0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("lang", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isContainer());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isCollection());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer2.isRoot());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertEquals("lang", qName0.getName());
      assertEquals("lang", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(jDOMAttributePointer0.getNamespaceURI());
      assertFalse(jDOMAttributePointer0.isContainer());
      assertTrue(jDOMAttributePointer0.isLeaf());
      assertFalse(jDOMAttributePointer0.isAttribute());
      assertEquals(1, jDOMAttributePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMAttributePointer0.getIndex());
      assertFalse(jDOMAttributePointer0.isRoot());
      assertTrue(jDOMAttributePointer0.isActual());
      assertTrue(jDOMAttributePointer0.isNode());
      assertFalse(jDOMAttributePointer0.isCollection());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMAttributePointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      
      JDOMAttributePointer jDOMAttributePointer1 = (JDOMAttributePointer)jDOMNodePointer1.createAttribute(jXPathContextReferenceImpl0, qName0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("lang", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isContainer());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isCollection());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer2.isRoot());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertEquals("lang", qName0.getName());
      assertEquals("lang", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(jDOMAttributePointer1.getNamespaceURI());
      assertFalse(jDOMAttributePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMAttributePointer1.getIndex());
      assertFalse(jDOMAttributePointer1.isCollection());
      assertTrue(jDOMAttributePointer1.isLeaf());
      assertEquals(1, jDOMAttributePointer1.getLength());
      assertTrue(jDOMAttributePointer1.isNode());
      assertTrue(jDOMAttributePointer1.isActual());
      assertFalse(jDOMAttributePointer1.isAttribute());
      assertFalse(jDOMAttributePointer1.isRoot());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertTrue(jDOMAttributePointer1.equals((Object)jDOMAttributePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMAttributePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      assertNotSame(jDOMAttributePointer1, jDOMAttributePointer0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("lang", locale0, "lang");
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      Element element0 = new Element("lang");
      assertEquals("lang", element0.getName());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("lang", element0.getName());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer(element0, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("lang", element0.getName());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertFalse(jDOMNodePointer2.isContainer());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertTrue(jDOMNodePointer2.isNode());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer2.isRoot());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer2);
      
      QName qName0 = jDOMNodePointer2.getName();
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("lang", element0.getName());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertFalse(jDOMNodePointer2.isContainer());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertTrue(jDOMNodePointer2.isNode());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer2.isRoot());
      assertFalse(jDOMNodePointer2.isCollection());
      assertNull(qName0.getPrefix());
      assertEquals("lang", qName0.getName());
      assertEquals("lang", qName0.toString());
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "lang");
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      JDOMAttributePointer jDOMAttributePointer0 = (JDOMAttributePointer)jDOMNodePointer1.createAttribute(jXPathContextReferenceImpl0, qName0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("lang", element0.getName());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer2.isContainer());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertTrue(jDOMNodePointer2.isNode());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer2.isRoot());
      assertFalse(jDOMNodePointer2.isCollection());
      assertNull(qName0.getPrefix());
      assertEquals("lang", qName0.getName());
      assertEquals("lang", qName0.toString());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(jDOMAttributePointer0.isNode());
      assertFalse(jDOMAttributePointer0.isRoot());
      assertTrue(jDOMAttributePointer0.isLeaf());
      assertEquals(Integer.MIN_VALUE, jDOMAttributePointer0.getIndex());
      assertFalse(jDOMAttributePointer0.isContainer());
      assertEquals(1, jDOMAttributePointer0.getLength());
      assertNull(jDOMAttributePointer0.getNamespaceURI());
      assertFalse(jDOMAttributePointer0.isCollection());
      assertFalse(jDOMAttributePointer0.isAttribute());
      assertTrue(jDOMAttributePointer0.isActual());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMAttributePointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      
      JDOMAttributePointer jDOMAttributePointer1 = (JDOMAttributePointer)jDOMNodePointer1.createAttribute(jXPathContextReferenceImpl0, qName0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("lang", element0.getName());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer2.isContainer());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertTrue(jDOMNodePointer2.isNode());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer2.isRoot());
      assertFalse(jDOMNodePointer2.isCollection());
      assertNull(qName0.getPrefix());
      assertEquals("lang", qName0.getName());
      assertEquals("lang", qName0.toString());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jDOMAttributePointer1.isRoot());
      assertEquals(1, jDOMAttributePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMAttributePointer1.getIndex());
      assertFalse(jDOMAttributePointer1.isContainer());
      assertTrue(jDOMAttributePointer1.isLeaf());
      assertFalse(jDOMAttributePointer1.isAttribute());
      assertFalse(jDOMAttributePointer1.isCollection());
      assertNull(jDOMAttributePointer1.getNamespaceURI());
      assertTrue(jDOMAttributePointer1.isNode());
      assertTrue(jDOMAttributePointer1.isActual());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertTrue(jDOMAttributePointer1.equals((Object)jDOMAttributePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMAttributePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      assertNotSame(jDOMAttributePointer1, jDOMAttributePointer0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Element element0 = new Element("q", "q", "q");
      assertEquals("q", element0.getNamespacePrefix());
      assertEquals("q", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("q", element0.getName());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((NodePointer) null, element0);
      assertEquals("q", element0.getNamespacePrefix());
      assertEquals("q", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("q", element0.getName());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("q", jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) jDOMNodePointer0);
      assertEquals("q", element0.getNamespacePrefix());
      assertEquals("q", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("q", element0.getName());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("q", jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName0 = new QName("<<unknown namespace>>");
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("<<unknown namespace>>", qName0.toString());
      assertNotNull(qName0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createAttribute(jXPathContextReferenceImpl0, qName0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The name \"<<unknown namespace>>\" is not legal for JDOM/XML attributes: XML names cannot begin with the character \"<\".
         //
         verifyException("org.jdom.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Element element0 = new Element("F", (String) null);
      assertEquals("F", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertNotNull(element0);
      
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      assertEquals("xml", namespace0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertNotNull(namespace0);
      
      Element element1 = element0.setNamespace(namespace0);
      assertEquals("F", element0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", element0.getNamespaceURI());
      assertEquals("xml", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("xml", namespace0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("F", element1.getName());
      assertFalse(element1.isRootElement());
      assertEquals("http://www.w3.org/XML/1998/namespace", element1.getNamespaceURI());
      assertEquals("xml", element1.getNamespacePrefix());
      assertEquals(0, element1.getContentSize());
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element1, locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("F", element0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", element0.getNamespaceURI());
      assertEquals("xml", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("xml", namespace0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("F", element1.getName());
      assertFalse(element1.isRootElement());
      assertEquals("http://www.w3.org/XML/1998/namespace", element1.getNamespaceURI());
      assertEquals("xml", element1.getNamespacePrefix());
      assertEquals(0, element1.getContentSize());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("http://www.w3.org/XML/1998/namespace", jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, jDOMNodePointer0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("F", element0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", element0.getNamespaceURI());
      assertEquals("xml", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("xml", namespace0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("F", element1.getName());
      assertFalse(element1.isRootElement());
      assertEquals("http://www.w3.org/XML/1998/namespace", element1.getNamespaceURI());
      assertEquals("xml", element1.getNamespacePrefix());
      assertEquals(0, element1.getContentSize());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("http://www.w3.org/XML/1998/namespace", jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      boolean boolean0 = jDOMNodePointer1.isNode();
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("F", element0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", element0.getNamespaceURI());
      assertEquals("xml", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("xml", namespace0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("F", element1.getName());
      assertFalse(element1.isRootElement());
      assertEquals("http://www.w3.org/XML/1998/namespace", element1.getNamespaceURI());
      assertEquals("xml", element1.getNamespacePrefix());
      assertEquals(0, element1.getContentSize());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("http://www.w3.org/XML/1998/namespace", jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertTrue(boolean0);
      
      NodePointer nodePointer0 = jDOMNodePointer0.namespacePointer("<<unknown namespace>>");
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("F", element0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", element0.getNamespaceURI());
      assertEquals("xml", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("xml", namespace0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("F", element1.getName());
      assertFalse(element1.isRootElement());
      assertEquals("http://www.w3.org/XML/1998/namespace", element1.getNamespaceURI());
      assertEquals("xml", element1.getNamespacePrefix());
      assertEquals(0, element1.getContentSize());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("http://www.w3.org/XML/1998/namespace", jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(nodePointer0.isLeaf());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isContainer());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodePointer0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      
      Object object0 = jDOMNodePointer1.getValue();
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("F", element0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", element0.getNamespaceURI());
      assertEquals("xml", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("xml", namespace0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertEquals("F", element1.getName());
      assertFalse(element1.isRootElement());
      assertEquals("http://www.w3.org/XML/1998/namespace", element1.getNamespaceURI());
      assertEquals("xml", element1.getNamespacePrefix());
      assertEquals(0, element1.getContentSize());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals("http://www.w3.org/XML/1998/namespace", jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(object0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      assertFalse(namespaceResolver0.isSealed());
      assertNotNull(namespaceResolver0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(object1);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      // Undeclared exception!
      try { 
        jXPathContextReferenceImpl0.getRelativeContext(nodePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot create a relative context for a non-existent node: /namespace::<<unknown namespace>>
         //
         verifyException("org.apache.commons.jxpath.ri.JXPathContextReferenceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Integer integer0 = new Integer(59);
      assertNotNull(integer0);
      assertEquals(59, (int)integer0);
      
      HashMap<Integer, NodeTypeTest> hashMap0 = new HashMap<Integer, NodeTypeTest>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("E8ZM_vK__H5", hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("", processingInstruction0.getValue());
      assertEquals("E8ZM_vK__H5", processingInstruction0.getTarget());
      assertEquals("", processingInstruction0.getData());
      assertNotNull(processingInstruction0);
      
      ProcessingInstruction processingInstruction1 = processingInstruction0.setData((Map) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("", processingInstruction0.getValue());
      assertEquals("E8ZM_vK__H5", processingInstruction0.getTarget());
      assertEquals("", processingInstruction0.getData());
      assertEquals("E8ZM_vK__H5", processingInstruction1.getTarget());
      assertEquals("", processingInstruction1.getValue());
      assertEquals("", processingInstruction1.getData());
      assertNotNull(processingInstruction1);
      assertSame(processingInstruction0, processingInstruction1);
      assertSame(processingInstruction1, processingInstruction0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction1, locale0, "java.util.Locale@0000000007");
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("", processingInstruction0.getValue());
      assertEquals("E8ZM_vK__H5", processingInstruction0.getTarget());
      assertEquals("", processingInstruction0.getData());
      assertEquals("E8ZM_vK__H5", processingInstruction1.getTarget());
      assertEquals("", processingInstruction1.getValue());
      assertEquals("", processingInstruction1.getData());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      CDATA cDATA0 = new CDATA("*2F i%Pu|[");
      assertEquals("*2F i%Pu|[", cDATA0.getText());
      assertEquals("*2F i%Pu|[", cDATA0.getValue());
      assertNotNull(cDATA0);
      
      CDATA cDATA1 = (CDATA)cDATA0.detach();
      assertEquals("*2F i%Pu|[", cDATA0.getText());
      assertEquals("*2F i%Pu|[", cDATA0.getValue());
      assertEquals("*2F i%Pu|[", cDATA1.getText());
      assertEquals("*2F i%Pu|[", cDATA1.getValue());
      assertNotNull(cDATA1);
      assertSame(cDATA0, cDATA1);
      assertSame(cDATA1, cDATA0);
      
      QName qName0 = jDOMNodePointer0.getName();
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("", processingInstruction0.getValue());
      assertEquals("E8ZM_vK__H5", processingInstruction0.getTarget());
      assertEquals("", processingInstruction0.getData());
      assertEquals("E8ZM_vK__H5", processingInstruction1.getTarget());
      assertEquals("", processingInstruction1.getValue());
      assertEquals("", processingInstruction1.getData());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(qName0.getPrefix());
      assertEquals("E8ZM_vK__H5", qName0.getName());
      assertEquals("E8ZM_vK__H5", qName0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      assertSame(processingInstruction0, processingInstruction1);
      assertSame(processingInstruction1, processingInstruction0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "lang");
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("", processingInstruction0.getValue());
      assertEquals("E8ZM_vK__H5", processingInstruction0.getTarget());
      assertEquals("", processingInstruction0.getData());
      assertEquals("E8ZM_vK__H5", processingInstruction1.getTarget());
      assertEquals("", processingInstruction1.getValue());
      assertEquals("", processingInstruction1.getData());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(qName0.getPrefix());
      assertEquals("E8ZM_vK__H5", qName0.getName());
      assertEquals("E8ZM_vK__H5", qName0.toString());
      assertEquals("lang", nodeNameTest0.getNamespaceURI());
      assertEquals("E8ZM_vK__H5", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodeNameTest0);
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) locale0, (NodeTest) nodeNameTest0);
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("", processingInstruction0.getValue());
      assertEquals("E8ZM_vK__H5", processingInstruction0.getTarget());
      assertEquals("", processingInstruction0.getData());
      assertEquals("E8ZM_vK__H5", processingInstruction1.getTarget());
      assertEquals("", processingInstruction1.getValue());
      assertEquals("", processingInstruction1.getData());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(qName0.getPrefix());
      assertEquals("E8ZM_vK__H5", qName0.getName());
      assertEquals("E8ZM_vK__H5", qName0.toString());
      assertEquals("lang", nodeNameTest0.getNamespaceURI());
      assertEquals("E8ZM_vK__H5", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertSame(processingInstruction0, processingInstruction1);
      assertSame(processingInstruction1, processingInstruction0);
      assertFalse(boolean0);
      
      boolean boolean1 = jDOMNodePointer0.isLeaf();
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("", processingInstruction0.getValue());
      assertEquals("E8ZM_vK__H5", processingInstruction0.getTarget());
      assertEquals("", processingInstruction0.getData());
      assertEquals("E8ZM_vK__H5", processingInstruction1.getTarget());
      assertEquals("", processingInstruction1.getValue());
      assertEquals("", processingInstruction1.getData());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(boolean1 == boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertSame(processingInstruction0, processingInstruction1);
      assertSame(processingInstruction1, processingInstruction0);
      assertTrue(boolean1);
      
      boolean boolean2 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) qName0, (NodeTest) nodeNameTest0);
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("", processingInstruction0.getValue());
      assertEquals("E8ZM_vK__H5", processingInstruction0.getTarget());
      assertEquals("", processingInstruction0.getData());
      assertEquals("E8ZM_vK__H5", processingInstruction1.getTarget());
      assertEquals("", processingInstruction1.getValue());
      assertEquals("", processingInstruction1.getData());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(qName0.getPrefix());
      assertEquals("E8ZM_vK__H5", qName0.getName());
      assertEquals("E8ZM_vK__H5", qName0.toString());
      assertEquals("lang", nodeNameTest0.getNamespaceURI());
      assertEquals("E8ZM_vK__H5", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertSame(processingInstruction0, processingInstruction1);
      assertSame(processingInstruction1, processingInstruction0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("org.apache.commons.jxpath.ri.moqel.jdom.JDOMPointerFactory", "org.apache.commons.jxpath.ri.moqel.jdom.JDOMPointerFactory");
      assertEquals("org.apache.commons.jxpath.ri.moqel.jdom.JDOMPointerFactory", processingInstruction0.getValue());
      assertEquals("org.apache.commons.jxpath.ri.moqel.jdom.JDOMPointerFactory", processingInstruction0.getTarget());
      assertEquals("org.apache.commons.jxpath.ri.moqel.jdom.JDOMPointerFactory", processingInstruction0.getData());
      assertNotNull(processingInstruction0);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction0, locale0);
      assertEquals("org.apache.commons.jxpath.ri.moqel.jdom.JDOMPointerFactory", processingInstruction0.getValue());
      assertEquals("org.apache.commons.jxpath.ri.moqel.jdom.JDOMPointerFactory", processingInstruction0.getTarget());
      assertEquals("org.apache.commons.jxpath.ri.moqel.jdom.JDOMPointerFactory", processingInstruction0.getData());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      String string0 = jDOMNodePointer0.asPath();
      assertEquals("org.apache.commons.jxpath.ri.moqel.jdom.JDOMPointerFactory", processingInstruction0.getValue());
      assertEquals("org.apache.commons.jxpath.ri.moqel.jdom.JDOMPointerFactory", processingInstruction0.getTarget());
      assertEquals("org.apache.commons.jxpath.ri.moqel.jdom.JDOMPointerFactory", processingInstruction0.getData());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(string0);
      assertEquals("/processing-instruction('org.apache.commons.jxpath.ri.moqel.jdom.JDOMPointerFactory')[1]", string0);
      
      QName qName0 = jDOMNodePointer0.getName();
      assertEquals("org.apache.commons.jxpath.ri.moqel.jdom.JDOMPointerFactory", processingInstruction0.getValue());
      assertEquals("org.apache.commons.jxpath.ri.moqel.jdom.JDOMPointerFactory", processingInstruction0.getTarget());
      assertEquals("org.apache.commons.jxpath.ri.moqel.jdom.JDOMPointerFactory", processingInstruction0.getData());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals("org.apache.commons.jxpath.ri.moqel.jdom.JDOMPointerFactory", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.moqel.jdom.JDOMPointerFactory", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("lnbg", locale0, "lnbg");
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.272.b10-0.fc31.x86_64/jre/lib/jxpath.properties");
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "http://www.w3.org/2000/xmlns/");
      assertTrue(boolean0);
      
      boolean boolean1 = jDOMNodePointer0.isAttribute();
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(boolean1 == boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean1);
      
      Element element0 = new Element("lnbg");
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("lnbg", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("lnbg", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      boolean boolean2 = jDOMNodePointer1.isLanguage("http://www.w3.org/2000/xmlns/");
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("lnbg", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertFalse(boolean2);
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer(element0, locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("lnbg", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(jDOMNodePointer2.isContainer());
      assertTrue(jDOMNodePointer2.isRoot());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertFalse(jDOMNodePointer2.isCollection());
      assertTrue(jDOMNodePointer2.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer2);
      
      boolean boolean3 = jDOMNodePointer0.isLanguage("/");
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertFalse(boolean3);
      
      QName qName0 = new QName("C");
      assertEquals("C", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("C", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("C", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("C", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("C", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      boolean boolean4 = jDOMNodePointer1.testNode((NodeTest) nodeNameTest0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("lnbg", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals("C", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("C", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("C", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertFalse(boolean4);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("JXPah internal error: comparehildNodes called for ");
      assertEquals("JXPah internal error: comparehildNodes called for ", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      assertEquals(0, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) nodeTypeTest0);
      assertEquals(0, nodeTypeTest0.getNodeType());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      Text text0 = new Text("SyDB*ZQ$&>'H#R");
      assertEquals("SyDB*ZQ$&>'H#R", text0.getValue());
      assertEquals("SyDB*ZQ$&>'H#R", text0.getText());
      assertNotNull(text0);
      
      Text text1 = text0.setText("Sc0i`d$] ");
      assertEquals("Sc0i`d$] ", text0.getValue());
      assertEquals("Sc0i`d$] ", text0.getText());
      assertEquals("Sc0i`d$] ", text1.getValue());
      assertEquals("Sc0i`d$] ", text1.getText());
      assertNotNull(text1);
      assertSame(text0, text1);
      assertSame(text1, text0);
      
      jDOMNodePointer2.setValue(text1);
      assertEquals("Sc0i`d$] ", text0.getValue());
      assertEquals("Sc0i`d$] ", text0.getText());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("Sc0i`d$] ", text1.getValue());
      assertEquals("Sc0i`d$] ", text1.getText());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("lnbg", element0.getName());
      assertEquals(1, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(jDOMNodePointer2.isContainer());
      assertTrue(jDOMNodePointer2.isRoot());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertFalse(jDOMNodePointer2.isCollection());
      assertTrue(jDOMNodePointer2.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertSame(text0, text1);
      assertSame(text1, text0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Element element0 = new Element("q", "q", "q");
      assertFalse(element0.isRootElement());
      assertEquals("q", element0.getNamespaceURI());
      assertEquals("q", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("q", element0.getName());
      assertNotNull(element0);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      assertFalse(element0.isRootElement());
      assertEquals("q", element0.getNamespaceURI());
      assertEquals("q", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("q", element0.getName());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("q", jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      CDATA cDATA0 = new CDATA("q");
      assertEquals("q", cDATA0.getValue());
      assertEquals("q", cDATA0.getText());
      assertNotNull(cDATA0);
      
      cDATA0.append("(@NpXgat=?<oyRFtgJ$");
      assertEquals("q(@NpXgat=?<oyRFtgJ$", cDATA0.getValue());
      assertEquals("q(@NpXgat=?<oyRFtgJ$", cDATA0.getText());
      
      jDOMNodePointer0.setValue(cDATA0);
      assertFalse(element0.isRootElement());
      assertEquals("q", element0.getNamespaceURI());
      assertEquals("q", element0.getNamespacePrefix());
      assertEquals(1, element0.getContentSize());
      assertEquals("q", element0.getName());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("q", jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("q(@NpXgat=?<oyRFtgJ$", cDATA0.getValue());
      assertEquals("q(@NpXgat=?<oyRFtgJ$", cDATA0.getText());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("lnbg", locale0, "lnbg");
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.272.b10-0.fc31.x86_64/jre/lib/jxpath.properties");
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "http://www.w3.org/2000/xmlns/");
      assertTrue(boolean0);
      
      boolean boolean1 = jDOMNodePointer0.isAttribute();
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(boolean1 == boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean1);
      
      Element element0 = new Element("lnbg");
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("lnbg", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("lnbg", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      boolean boolean2 = jDOMNodePointer1.isLanguage("http://www.w3.org/2000/xmlns/");
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("lnbg", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertFalse(boolean2);
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer(element0, locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("lnbg", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertFalse(jDOMNodePointer2.isContainer());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertTrue(jDOMNodePointer2.isRoot());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertFalse(jDOMNodePointer2.isCollection());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer2);
      
      boolean boolean3 = jDOMNodePointer0.isLanguage("");
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertTrue(boolean3);
      
      QName qName0 = new QName("C");
      assertNull(qName0.getPrefix());
      assertEquals("C", qName0.toString());
      assertEquals("C", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      assertNull(qName0.getPrefix());
      assertEquals("C", qName0.toString());
      assertEquals("C", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("C", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      boolean boolean4 = jDOMNodePointer0.testNode((NodeTest) nodeNameTest0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(qName0.getPrefix());
      assertEquals("C", qName0.toString());
      assertEquals("C", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("C", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertFalse(boolean4);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("JXPath internal error: compareChildNodes called for ");
      assertEquals("JXPath internal error: compareChildNodes called for ", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) jDOMNodePointer1);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("lnbg", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      
      HashMap<CDATA, CDATA> hashMap0 = new HashMap<CDATA, CDATA>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("lnbg", hashMap0);
      assertEquals("lnbg", processingInstruction0.getTarget());
      assertEquals("", processingInstruction0.getData());
      assertEquals("", processingInstruction0.getValue());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(processingInstruction0);
      
      ProcessingInstruction processingInstruction1 = processingInstruction0.setData((Map) hashMap0);
      assertEquals("lnbg", processingInstruction0.getTarget());
      assertEquals("", processingInstruction0.getData());
      assertEquals("", processingInstruction0.getValue());
      assertEquals("lnbg", processingInstruction1.getTarget());
      assertEquals("", processingInstruction1.getData());
      assertEquals("", processingInstruction1.getValue());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(processingInstruction1);
      assertSame(processingInstruction0, processingInstruction1);
      assertSame(processingInstruction1, processingInstruction0);
      
      jDOMNodePointer2.setValue(processingInstruction1);
      assertEquals("lnbg", processingInstruction0.getTarget());
      assertEquals("", processingInstruction0.getData());
      assertEquals("", processingInstruction0.getValue());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("lnbg", processingInstruction1.getTarget());
      assertEquals("", processingInstruction1.getData());
      assertEquals("", processingInstruction1.getValue());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("lnbg", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(1, element0.getContentSize());
      assertFalse(jDOMNodePointer2.isContainer());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertTrue(jDOMNodePointer2.isRoot());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertFalse(jDOMNodePointer2.isCollection());
      assertTrue(jDOMNodePointer2.isNode());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertSame(processingInstruction0, processingInstruction1);
      assertSame(processingInstruction1, processingInstruction0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("org.apache.commons.jxpath.ri.moqel.jdom.JDOMPointerFactory", "org.apache.commons.jxpath.ri.moqel.jdom.JDOMPointerFactory");
      assertEquals("org.apache.commons.jxpath.ri.moqel.jdom.JDOMPointerFactory", processingInstruction0.getValue());
      assertEquals("org.apache.commons.jxpath.ri.moqel.jdom.JDOMPointerFactory", processingInstruction0.getData());
      assertEquals("org.apache.commons.jxpath.ri.moqel.jdom.JDOMPointerFactory", processingInstruction0.getTarget());
      assertNotNull(processingInstruction0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(object0, (Locale) null);
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, (Locale) null, "<<unknown namespace>>");
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertTrue(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      Element element0 = new Element("org.apache.commons.jxpath.JXPathAbstractFactoryException");
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("org.apache.commons.jxpath.JXPathAbstractFactoryException", element0.getName());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer(jDOMNodePointer1, element0);
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertTrue(jDOMNodePointer1.isRoot());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("org.apache.commons.jxpath.JXPathAbstractFactoryException", element0.getName());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isContainer());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(jDOMNodePointer2.isRoot());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer2);
      
      jDOMNodePointer2.setValue(processingInstruction0);
      assertEquals("org.apache.commons.jxpath.ri.moqel.jdom.JDOMPointerFactory", processingInstruction0.getValue());
      assertEquals("org.apache.commons.jxpath.ri.moqel.jdom.JDOMPointerFactory", processingInstruction0.getData());
      assertEquals("org.apache.commons.jxpath.ri.moqel.jdom.JDOMPointerFactory", processingInstruction0.getTarget());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertTrue(jDOMNodePointer1.isRoot());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("org.apache.commons.jxpath.JXPathAbstractFactoryException", element0.getName());
      assertEquals(1, element0.getContentSize());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isContainer());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(jDOMNodePointer2.isRoot());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.compareChildNodePointers((NodePointer) null, jDOMNodePointer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("lnbg", locale0, "lnbg");
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      Element element0 = new Element("lnbg");
      assertEquals("lnbg", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertNotNull(element0);
      
      QName qName0 = jDOMNodePointer0.getName();
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNull(nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodeNameTest0);
      
      // Undeclared exception!
      try { 
        JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) element0, (NodeTest) nodeNameTest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.NodeNameTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("lang", locale0, "lang");
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.272.b10-0.fc31.x86_64/jre/lib/jxpath.properties");
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "http://www.w3.org/2000/xmlns/");
      assertTrue(boolean0);
      
      boolean boolean1 = jDOMNodePointer0.isAttribute();
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(boolean1 == boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean1);
      
      Element element0 = new Element("lang");
      assertEquals(0, element0.getContentSize());
      assertEquals("lang", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(0, element0.getContentSize());
      assertEquals("lang", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isRoot());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      boolean boolean2 = jDOMNodePointer1.isLanguage("http://www.w3.org/2000/xmlns/");
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(0, element0.getContentSize());
      assertEquals("lang", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isRoot());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertFalse(boolean2);
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer(element0, locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals(0, element0.getContentSize());
      assertEquals("lang", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertTrue(jDOMNodePointer2.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer2);
      
      QName qName0 = jDOMNodePointer1.getName();
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(0, element0.getContentSize());
      assertEquals("lang", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isRoot());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals("lang", qName0.toString());
      assertEquals("lang", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "floor");
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(0, element0.getContentSize());
      assertEquals("lang", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isRoot());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals("lang", qName0.toString());
      assertEquals("lang", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("lang", nodeNameTest0.toString());
      assertEquals("floor", nodeNameTest0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodeNameTest0);
      
      boolean boolean3 = jDOMNodePointer2.testNode((NodeTest) nodeNameTest0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(0, element0.getContentSize());
      assertEquals("lang", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isRoot());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertTrue(jDOMNodePointer2.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertEquals("lang", qName0.toString());
      assertEquals("lang", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("lang", nodeNameTest0.toString());
      assertEquals("floor", nodeNameTest0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      assertTrue(boolean3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(object0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      JXPathContext jXPathContext0 = jXPathContextReferenceImpl0.getParentContext();
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNull(jXPathContext0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer2.createChild((JXPathContext) jXPathContextReferenceImpl0, qName0, (-1), object1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: 
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("3.>qI.|C WRNz'", locale0, "3.>qI.|C WRNz'");
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      Element element0 = new Element("w", "w");
      assertEquals("w", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("w", element0.getName());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("w", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("w", element0.getName());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals("w", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      NodePointer nodePointer0 = jDOMNodePointer0.namespacePointer("http://www.w3.org/2000/xmlns/");
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(nodePointer0.isNode());
      assertEquals(1, nodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(nodePointer0.isLeaf());
      assertFalse(nodePointer0.isContainer());
      assertFalse(nodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodePointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      
      String string0 = JDOMNodePointer.XML_NAMESPACE_URI;
      assertNotNull(string0);
      assertEquals("http://www.w3.org/XML/1998/namespace", string0);
      
      Object object0 = jDOMNodePointer1.getValue();
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("w", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("w", element0.getName());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals("w", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(object0.equals((Object)string0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(object0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals("", object0);
      
      NodePointer nodePointer1 = jDOMNodePointer1.namespacePointer("");
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("w", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("w", element0.getName());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals("w", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(nodePointer1.isRoot());
      assertTrue(nodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, nodePointer1.getIndex());
      assertEquals(1, nodePointer1.getLength());
      assertTrue(nodePointer1.isLeaf());
      assertFalse(nodePointer1.isContainer());
      assertFalse(nodePointer1.isCollection());
      assertFalse(nodePointer1.isAttribute());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(nodePointer1.equals((Object)nodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(nodePointer1, nodePointer0);
      
      String string1 = "o\\u^!~";
      String string2 = JDOMNodePointer.XMLNS_NAMESPACE_URI;
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)object0));
      assertNotNull(string2);
      assertEquals("http://www.w3.org/2000/xmlns/", string2);
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer(string1, locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(jDOMNodePointer2.isNode());
      assertTrue(jDOMNodePointer2.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)object0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer2);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(object1);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)jXPathContextReferenceImpl0.getRelativeContext(nodePointer1);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("w", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("w", element0.getName());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals("w", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(nodePointer1.isRoot());
      assertTrue(nodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, nodePointer1.getIndex());
      assertEquals(1, nodePointer1.getLength());
      assertTrue(nodePointer1.isLeaf());
      assertFalse(nodePointer1.isContainer());
      assertFalse(nodePointer1.isCollection());
      assertFalse(nodePointer1.isAttribute());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(nodePointer1.equals((Object)nodePointer0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(nodePointer1, nodePointer0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer2.getNodeSetByKey(jXPathContextReferenceImpl1, "qq=!J?07/!k>?", "3.>qI.|C WRNz'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot find an element by key - no KeyManager has been specified
         //
         verifyException("org.apache.commons.jxpath.JXPathContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("lang", locale0, "lang");
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.272.b10-0.fc31.x86_64/jre/lib/jxpath.properties");
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "java.lang.Integer@0000000014");
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Element element0 = new Element("lang");
      assertEquals("lang", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("lang", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      boolean boolean2 = jDOMNodePointer0.isLanguage("http://www.w3.org/2000/xmlns/");
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertFalse(boolean2);
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer(element0, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("lang", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertTrue(jDOMNodePointer2.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isContainer());
      assertTrue(jDOMNodePointer2.isRoot());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer2);
      
      QName qName0 = jDOMNodePointer2.getName();
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("lang", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertTrue(jDOMNodePointer2.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isContainer());
      assertTrue(jDOMNodePointer2.isRoot());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertFalse(jDOMNodePointer2.isCollection());
      assertEquals("lang", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("lang", qName0.getName());
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "java.lang.Integer@0000000014");
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      JDOMNodePointer jDOMNodePointer3 = new JDOMNodePointer(element0, locale0, "<<unknown namespace>>");
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("lang", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertTrue(jDOMNodePointer3.isNode());
      assertFalse(jDOMNodePointer3.isCollection());
      assertTrue(jDOMNodePointer3.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer3.getIndex());
      assertNull(jDOMNodePointer3.getNamespaceURI());
      assertFalse(jDOMNodePointer3.isContainer());
      assertEquals(1, jDOMNodePointer3.getLength());
      assertFalse(jDOMNodePointer3.isAttribute());
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer3.equals((Object)jDOMNodePointer1));
      assertTrue(jDOMNodePointer3.equals((Object)jDOMNodePointer2));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer3);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "http://www.w3.org/XML/1998/namespace");
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("lang", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertTrue(jDOMNodePointer2.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isContainer());
      assertTrue(jDOMNodePointer2.isRoot());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertFalse(jDOMNodePointer2.isCollection());
      assertEquals("lang", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("lang", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", nodeNameTest0.getNamespaceURI());
      assertEquals("lang", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer3));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodeNameTest0);
      
      boolean boolean3 = jDOMNodePointer3.testNode((NodeTest) nodeNameTest0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("lang", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertTrue(jDOMNodePointer2.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isContainer());
      assertTrue(jDOMNodePointer2.isRoot());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertFalse(jDOMNodePointer2.isCollection());
      assertEquals("lang", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("lang", qName0.getName());
      assertTrue(jDOMNodePointer3.isNode());
      assertFalse(jDOMNodePointer3.isCollection());
      assertTrue(jDOMNodePointer3.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer3.getIndex());
      assertNull(jDOMNodePointer3.getNamespaceURI());
      assertFalse(jDOMNodePointer3.isContainer());
      assertEquals(1, jDOMNodePointer3.getLength());
      assertFalse(jDOMNodePointer3.isAttribute());
      assertEquals("http://www.w3.org/XML/1998/namespace", nodeNameTest0.getNamespaceURI());
      assertEquals("lang", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer3));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer3.equals((Object)jDOMNodePointer1));
      assertTrue(jDOMNodePointer3.equals((Object)jDOMNodePointer2));
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer3);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer3, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer3, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer3, jDOMNodePointer0);
      assertTrue(boolean3);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("http://www.w3.org/XML/1998/namespace");
      assertEquals("http://www.w3.org/XML/1998/namespace", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      String string0 = processingInstructionTest0.toString();
      assertEquals("http://www.w3.org/XML/1998/namespace", processingInstructionTest0.getTarget());
      assertNotNull(string0);
      assertEquals("processing-instruction('http://www.w3.org/XML/1998/namespace')", string0);
      
      CDATA cDATA0 = new CDATA("http://www.w3.org/2000/xmlns/");
      assertEquals("http://www.w3.org/2000/xmlns/", cDATA0.getText());
      assertEquals("http://www.w3.org/2000/xmlns/", cDATA0.getValue());
      assertNotNull(cDATA0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) cDATA0);
      assertEquals("http://www.w3.org/2000/xmlns/", cDATA0.getText());
      assertEquals("http://www.w3.org/2000/xmlns/", cDATA0.getValue());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.setValue(processingInstructionTest0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.jdom.Element
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Element element0 = new Element("gL8MrSkNsB.p", "gL8MrSkNsB.p");
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("gL8MrSkNsB.p", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("gL8MrSkNsB.p", element0.getName());
      assertNotNull(element0);
      
      QName qName0 = new QName("gL8MrSkNsB.p");
      assertEquals("gL8MrSkNsB.p", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("gL8MrSkNsB.p", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "gL8MrSkNsB.p");
      assertEquals("gL8MrSkNsB.p", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("gL8MrSkNsB.p", qName0.toString());
      assertEquals("gL8MrSkNsB.p", nodeNameTest0.getNamespaceURI());
      assertEquals("gL8MrSkNsB.p", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("gL8MrSkNsB.p", locale0);
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) element0, (NodeTest) nodeNameTest0);
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("gL8MrSkNsB.p", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("gL8MrSkNsB.p", element0.getName());
      assertEquals("gL8MrSkNsB.p", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("gL8MrSkNsB.p", qName0.toString());
      assertEquals("gL8MrSkNsB.p", nodeNameTest0.getNamespaceURI());
      assertEquals("gL8MrSkNsB.p", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Element element0 = new Element("F", "F");
      assertEquals("F", element0.getName());
      assertEquals("F", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertNotNull(element0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(5);
      assertEquals(5, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      String string0 = JDOMNodePointer.getPrefix(element0);
      assertEquals("F", element0.getName());
      assertEquals("F", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("3.>qI.|C WRNz'", locale0, "3.>qI.|C WRNz'");
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      Element element0 = new Element("F", "F");
      assertEquals("F", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("F", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals("F", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("F", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      boolean boolean0 = jDOMNodePointer1.isContainer();
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals("F", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("F", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertFalse(boolean0);
      
      NodePointer nodePointer0 = jDOMNodePointer0.namespacePointer(" reported success creating object for path: ");
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isCollection());
      assertTrue(nodePointer0.isNode());
      assertTrue(nodePointer0.isLeaf());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isContainer());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodePointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      String string0 = jDOMNodePointer1.getNamespaceURI("http://www.w3.org/XML/1998/namespace");
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals("F", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("F", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(string0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      
      Object object0 = jDOMNodePointer0.getValue();
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(object0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      
      boolean boolean1 = jDOMNodePointer1.isLeaf();
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals("F", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("F", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(boolean1 == boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertTrue(boolean1);
      
      Comment comment0 = new Comment("rweYoI-q^");
      assertEquals("rweYoI-q^", comment0.getText());
      assertEquals("rweYoI-q^", comment0.getValue());
      assertNotNull(comment0);
      
      Comment comment1 = comment0.setText("C");
      assertEquals("C", comment0.getValue());
      assertEquals("C", comment0.getText());
      assertEquals("C", comment1.getText());
      assertEquals("C", comment1.getValue());
      assertNotNull(comment1);
      assertSame(comment0, comment1);
      assertSame(comment1, comment0);
      
      jDOMNodePointer1.setValue(comment1);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals("F", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("F", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(1, element0.getContentSize());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isRoot());
      assertEquals("C", comment0.getValue());
      assertEquals("C", comment0.getText());
      assertEquals("C", comment1.getText());
      assertEquals("C", comment1.getValue());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertSame(comment0, comment1);
      assertSame(comment1, comment0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createChild((JXPathContext) null, (QName) null, (-1), (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("3.>qI.|C WRNz'", locale0, "3.>qI.|C WRNz'");
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      Element element0 = new Element("q", "q");
      assertFalse(element0.isRootElement());
      assertEquals("q", element0.getName());
      assertEquals("q", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(element0.isRootElement());
      assertEquals("q", element0.getName());
      assertEquals("q", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("q", jDOMNodePointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      Comment comment0 = new Comment("<<unknown namespace>>");
      assertEquals("<<unknown namespace>>", comment0.getValue());
      assertEquals("<<unknown namespace>>", comment0.getText());
      assertNotNull(comment0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("k/rU4\"F^{");
      assertEquals("k/rU4\"F^{", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      boolean boolean0 = jDOMNodePointer1.testNode((NodeTest) processingInstructionTest0);
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(element0.isRootElement());
      assertEquals("q", element0.getName());
      assertEquals("q", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("q", jDOMNodePointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals("k/rU4\"F^{", processingInstructionTest0.getTarget());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertFalse(boolean0);
      
      Comment comment1 = comment0.setText("http://www.w3.org/2000/xmlns/");
      assertEquals("http://www.w3.org/2000/xmlns/", comment0.getValue());
      assertEquals("http://www.w3.org/2000/xmlns/", comment0.getText());
      assertEquals("http://www.w3.org/2000/xmlns/", comment1.getText());
      assertEquals("http://www.w3.org/2000/xmlns/", comment1.getValue());
      assertNotNull(comment1);
      assertSame(comment0, comment1);
      assertSame(comment1, comment0);
      
      jDOMNodePointer1.setValue(comment1);
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(element0.isRootElement());
      assertEquals("q", element0.getName());
      assertEquals(1, element0.getContentSize());
      assertEquals("q", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("q", jDOMNodePointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals("http://www.w3.org/2000/xmlns/", comment0.getValue());
      assertEquals("http://www.w3.org/2000/xmlns/", comment0.getText());
      assertEquals("http://www.w3.org/2000/xmlns/", comment1.getText());
      assertEquals("http://www.w3.org/2000/xmlns/", comment1.getValue());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertSame(comment0, comment1);
      assertSame(comment1, comment0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(".h(?ls:N|qEV9*0j\"V", locale0, ".h(?ls:N|qEV9*0j\"V");
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      Element element0 = new Element("F", "F");
      assertEquals("F", element0.getNamespaceURI());
      assertEquals("F", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("F", element0.getNamespaceURI());
      assertEquals("F", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      // Undeclared exception!
      jDOMNodePointer1.asPath();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("3>qI.|C WRNz'", locale0, "3>qI.|C WRNz'");
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      Element element0 = new Element("F", "F");
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("F", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("F", element0.getName());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("F", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("F", element0.getName());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer(jDOMNodePointer1, locale0, "canEncode");
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("F", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("F", element0.getName());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertTrue(jDOMNodePointer2.isRoot());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertFalse(jDOMNodePointer2.isCollection());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer2);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      JDOMNodePointer jDOMNodePointer3 = new JDOMNodePointer(nodeTypeTest0, locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      assertFalse(jDOMNodePointer3.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer3.getIndex());
      assertFalse(jDOMNodePointer3.isContainer());
      assertTrue(jDOMNodePointer3.isRoot());
      assertFalse(jDOMNodePointer3.isCollection());
      assertTrue(jDOMNodePointer3.isNode());
      assertEquals(1, jDOMNodePointer3.getLength());
      assertNull(jDOMNodePointer3.getNamespaceURI());
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer3);
      
      String string0 = jDOMNodePointer2.getNamespaceURI("<<unknown namespace>>");
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("F", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("F", element0.getName());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertTrue(jDOMNodePointer2.isRoot());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertFalse(jDOMNodePointer2.isCollection());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer3));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer3));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer3));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(string0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer3);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer3);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer3);
      
      Object object0 = jDOMNodePointer1.getValue();
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("F", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("F", element0.getName());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer3));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer3));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(object0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer3);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer3);
      assertEquals("", object0);
      
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(Integer.MIN_VALUE);
      assertEquals(Integer.MIN_VALUE, nodeTypeTest1.getNodeType());
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertNotNull(nodeTypeTest1);
      
      String string1 = nodeTypeTest1.toString();
      assertEquals(Integer.MIN_VALUE, nodeTypeTest1.getNodeType());
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertFalse(string1.equals((Object)object0));
      assertNotNull(string1);
      assertNotSame(nodeTypeTest1, nodeTypeTest0);
      assertEquals("UNKNOWN()", string1);
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) null, (Object) "F", (NodeTest) nodeTypeTest1);
      assertEquals(Integer.MIN_VALUE, nodeTypeTest1.getNodeType());
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertNotSame(nodeTypeTest1, nodeTypeTest0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      jDOMNodePointer1.asPath();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("3.>qI.|C WRNz'", locale0, "3.>qI.|C WRNz'");
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      Element element0 = new Element("F", "F");
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("F", element0.getNamespaceURI());
      assertEquals("F", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("F", element0.getNamespaceURI());
      assertEquals("F", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      QName qName0 = jDOMNodePointer0.getName();
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNull(nodeNameTest0.toString());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodeNameTest0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer1.testNode((NodeTest) nodeNameTest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.NodeNameTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Integer integer0 = new Integer(59);
      assertNotNull(integer0);
      assertEquals(59, (int)integer0);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("r5S");
      assertEquals("r5S", qName0.getName());
      assertEquals("r5S", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals("r5S", qName0.getName());
      assertEquals("r5S", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      Comment comment0 = new Comment("<<unknown namespace>>");
      assertEquals("<<unknown namespace>>", comment0.getValue());
      assertEquals("<<unknown namespace>>", comment0.getText());
      assertNotNull(comment0);
      
      Comment comment1 = comment0.setText("/text()");
      assertEquals("/text()", comment0.getValue());
      assertEquals("/text()", comment0.getText());
      assertEquals("/text()", comment1.getText());
      assertEquals("/text()", comment1.getValue());
      assertNotNull(comment1);
      assertSame(comment0, comment1);
      assertSame(comment1, comment0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, comment1);
      assertEquals("r5S", qName0.getName());
      assertEquals("r5S", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals("/text()", comment0.getValue());
      assertEquals("/text()", comment0.getText());
      assertEquals("/text()", comment1.getText());
      assertEquals("/text()", comment1.getValue());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      QName qName1 = jDOMNodePointer0.getName();
      assertEquals("r5S", qName0.getName());
      assertEquals("r5S", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals("/text()", comment0.getValue());
      assertEquals("/text()", comment0.getText());
      assertEquals("/text()", comment1.getText());
      assertEquals("/text()", comment1.getValue());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(qName1.toString());
      assertNull(qName1.getName());
      assertNull(qName1.getPrefix());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName1);
      assertNotSame(qName0, qName1);
      assertSame(comment0, comment1);
      assertSame(comment1, comment0);
      assertNotSame(qName1, qName0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName1, variablePointer0, locale0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("r5S", qName0.getName());
      assertEquals("r5S", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals("/text()", comment0.getValue());
      assertEquals("/text()", comment0.getText());
      assertEquals("/text()", comment1.getText());
      assertEquals("/text()", comment1.getValue());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(qName1.toString());
      assertNull(qName1.getName());
      assertNull(qName1.getPrefix());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertFalse(qName0.equals((Object)qName1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      assertNotSame(qName0, qName1);
      assertSame(comment0, comment1);
      assertSame(comment1, comment0);
      assertNotSame(qName1, qName0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(beanPointer0, comment1);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("r5S", qName0.getName());
      assertEquals("r5S", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals("/text()", comment0.getValue());
      assertEquals("/text()", comment0.getText());
      assertEquals("/text()", comment1.getText());
      assertEquals("/text()", comment1.getValue());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(qName1.toString());
      assertNull(qName1.getName());
      assertNull(qName1.getPrefix());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(qName0.equals((Object)qName1));
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      boolean boolean0 = jDOMNodePointer0.isNode();
      assertEquals("r5S", qName0.getName());
      assertEquals("r5S", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals("/text()", comment0.getValue());
      assertEquals("/text()", comment0.getText());
      assertEquals("/text()", comment1.getText());
      assertEquals("/text()", comment1.getValue());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(qName0.equals((Object)qName1));
      assertTrue(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(qName0, qName1);
      assertSame(comment0, comment1);
      assertSame(comment1, comment0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertTrue(boolean0);
      
      JDOMNamespacePointer jDOMNamespacePointer0 = (JDOMNamespacePointer)jDOMNodePointer1.namespacePointer("<<unknown namespace>>");
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("r5S", qName0.getName());
      assertEquals("r5S", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals("/text()", comment0.getValue());
      assertEquals("/text()", comment0.getText());
      assertEquals("/text()", comment1.getText());
      assertEquals("/text()", comment1.getValue());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(qName1.toString());
      assertNull(qName1.getName());
      assertNull(qName1.getPrefix());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNamespacePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNamespacePointer0.getIndex());
      assertFalse(jDOMNamespacePointer0.isCollection());
      assertTrue(jDOMNamespacePointer0.isNode());
      assertTrue(jDOMNamespacePointer0.isLeaf());
      assertEquals(1, jDOMNamespacePointer0.getLength());
      assertFalse(jDOMNamespacePointer0.isContainer());
      assertFalse(jDOMNamespacePointer0.isRoot());
      assertFalse(qName0.equals((Object)qName1));
      assertTrue(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNamespacePointer0);
      assertNotSame(qName0, qName1);
      assertSame(comment0, comment1);
      assertSame(comment1, comment0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(qName1, qName0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      
      String string0 = jDOMNodePointer0.getNamespaceURI("@(#) $RCSfile: Text.java,v $ $Revision: 1.24 $ $Date: 2004/02/27 11:32:57 $ $Name: jdom_1_0 $");
      assertEquals("r5S", qName0.getName());
      assertEquals("r5S", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals("/text()", comment0.getValue());
      assertEquals("/text()", comment0.getText());
      assertEquals("/text()", comment1.getText());
      assertEquals("/text()", comment1.getValue());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(qName0.equals((Object)qName1));
      assertTrue(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(string0);
      assertNotSame(qName0, qName1);
      assertSame(comment0, comment1);
      assertSame(comment1, comment0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      
      String string1 = (String)jDOMNodePointer1.getValue();
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("r5S", qName0.getName());
      assertEquals("r5S", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals("/text()", comment0.getValue());
      assertEquals("/text()", comment0.getText());
      assertEquals("/text()", comment1.getText());
      assertEquals("/text()", comment1.getValue());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(qName1.toString());
      assertNull(qName1.getName());
      assertNull(qName1.getPrefix());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(qName0.equals((Object)qName1));
      assertTrue(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(string1);
      assertNotSame(qName0, qName1);
      assertSame(comment0, comment1);
      assertSame(comment1, comment0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(qName1, qName0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals("/text()", string1);
      
      JDOMNamespacePointer jDOMNamespacePointer1 = (JDOMNamespacePointer)jDOMNodePointer0.namespacePointer("");
      assertEquals(Integer.MIN_VALUE, jDOMNamespacePointer1.getIndex());
      assertFalse(jDOMNamespacePointer1.isCollection());
      assertFalse(jDOMNamespacePointer1.isAttribute());
      assertTrue(jDOMNamespacePointer1.isLeaf());
      assertTrue(jDOMNamespacePointer1.isNode());
      assertEquals(1, jDOMNamespacePointer1.getLength());
      assertFalse(jDOMNamespacePointer1.isRoot());
      assertFalse(jDOMNamespacePointer1.isContainer());
      assertEquals("r5S", qName0.getName());
      assertEquals("r5S", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals("/text()", comment0.getValue());
      assertEquals("/text()", comment0.getText());
      assertEquals("/text()", comment1.getText());
      assertEquals("/text()", comment1.getValue());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNamespacePointer1.equals((Object)jDOMNamespacePointer0));
      assertFalse(qName0.equals((Object)qName1));
      assertTrue(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNamespacePointer1);
      assertNotSame(jDOMNamespacePointer1, jDOMNamespacePointer0);
      assertNotSame(qName0, qName1);
      assertSame(comment0, comment1);
      assertSame(comment1, comment0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      assertNull(nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("r5S", qName0.getName());
      assertEquals("r5S", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals("/text()", comment0.getValue());
      assertEquals("/text()", comment0.getText());
      assertEquals("/text()", comment1.getText());
      assertEquals("/text()", comment1.getValue());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(qName1.toString());
      assertNull(qName1.getName());
      assertNull(qName1.getPrefix());
      assertFalse(qName0.equals((Object)qName1));
      assertTrue(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodeNameTest0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("<<unknown namespace>>");
      assertEquals("<<unknown namespace>>", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer1.setValue(processingInstructionTest0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jdom.Comment cannot be cast to org.jdom.Element
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Comment comment0 = new Comment("Z");
      assertEquals("Z", comment0.getText());
      assertEquals("Z", comment0.getValue());
      assertNotNull(comment0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((NodePointer) null, comment0);
      assertEquals("Z", comment0.getText());
      assertEquals("Z", comment0.getValue());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      Object object0 = jDOMNodePointer0.getValue();
      assertEquals("Z", comment0.getText());
      assertEquals("Z", comment0.getValue());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(object0);
      assertEquals("Z", object0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("lang", locale0, "lang");
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.272.b10-0.fc31.x86_64/jre/lib/jxpath.properties");
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "http://www.w3.org/2000/xmlns/");
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Element element0 = new Element("lang");
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("lang", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("lang", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      boolean boolean2 = jDOMNodePointer1.isLanguage("lang");
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("lang", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertFalse(boolean2);
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer(element0, locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("lang", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(jDOMNodePointer2.isCollection());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertTrue(jDOMNodePointer2.isRoot());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer2);
      
      QName qName0 = jDOMNodePointer1.getName();
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("lang", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("lang", qName0.getName());
      assertEquals("lang", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode1);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertFalse(list0.contains("lang"));
      assertNotNull(list0);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list1.equals((Object)list0));
      assertFalse(list1.contains("lang"));
      assertNotNull(list1);
      assertNotSame(list1, list0);
      
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      assertEquals(0, linkedList0.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertFalse(list2.contains("lang"));
      assertNotNull(list2);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      
      jDOMNodePointer1.setValue(evoSuiteFile0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("lang", element0.getName());
      assertEquals(1, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("lang", locale0, "lang");
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.272.b10-0.fc31.x86_64/jre/lib/jxpath.properties");
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "http://www.w3.org/2000/xmlns/");
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Element element0 = new Element("lang");
      assertEquals("lang", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespaceURI());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("lang", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      boolean boolean2 = jDOMNodePointer1.isLanguage("http://www.w3.org/2000/xmlns/");
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("lang", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertFalse(boolean2);
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer(element0, locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("lang", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(jDOMNodePointer2.isContainer());
      assertTrue(jDOMNodePointer2.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertFalse(jDOMNodePointer2.isCollection());
      assertTrue(jDOMNodePointer2.isNode());
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer2);
      
      QName qName0 = jDOMNodePointer2.getName();
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("lang", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(jDOMNodePointer2.isContainer());
      assertTrue(jDOMNodePointer2.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertFalse(jDOMNodePointer2.isCollection());
      assertTrue(jDOMNodePointer2.isNode());
      assertNull(qName0.getPrefix());
      assertEquals("lang", qName0.toString());
      assertEquals("lang", qName0.getName());
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(locale0));
      assertNotNull(linkedList1);
      
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      assertEquals(0, linkedList2.size());
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertFalse(linkedList2.contains(locale0));
      assertNotNull(linkedList2);
      
      CDATA cDATA0 = new CDATA("");
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      assertNotNull(cDATA0);
      
      cDATA0.append("http://www.w3.org/2000/xmlns/");
      assertEquals("http://www.w3.org/2000/xmlns/", cDATA0.getValue());
      assertEquals("http://www.w3.org/2000/xmlns/", cDATA0.getText());
      
      jDOMNodePointer2.setValue(linkedList1);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("lang", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(jDOMNodePointer2.isContainer());
      assertTrue(jDOMNodePointer2.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertFalse(jDOMNodePointer2.isCollection());
      assertTrue(jDOMNodePointer2.isNode());
      assertEquals(0, linkedList1.size());
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertTrue(linkedList1.equals((Object)linkedList2));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(linkedList1.contains(locale0));
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      assertNotSame(linkedList1, linkedList2);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Element element0 = new Element("q", "q", "q");
      assertEquals("q", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("q", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("q", element0.getNamespaceURI());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((NodePointer) null, element0);
      assertEquals("q", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("q", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("q", element0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("q", jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) jDOMNodePointer0);
      assertEquals("q", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("q", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("q", element0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("q", jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      jDOMNodePointer0.setValue("q");
      assertEquals("q", element0.getNamespacePrefix());
      assertEquals("q", element0.getName());
      assertEquals(1, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("q", element0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("q", jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Element element0 = new Element("q", "q", "q");
      assertFalse(element0.isRootElement());
      assertEquals("q", element0.getNamespacePrefix());
      assertEquals("q", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("q", element0.getName());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((NodePointer) null, element0);
      assertFalse(element0.isRootElement());
      assertEquals("q", element0.getNamespacePrefix());
      assertEquals("q", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("q", element0.getName());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals("q", jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Element element1 = element0.setAttributes(linkedList0);
      assertFalse(element0.isRootElement());
      assertEquals("q", element0.getNamespacePrefix());
      assertEquals("q", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("q", element0.getName());
      assertEquals(0, linkedList0.size());
      assertEquals("q", element1.getName());
      assertEquals("q", element1.getNamespacePrefix());
      assertEquals(0, element1.getContentSize());
      assertFalse(element1.isRootElement());
      assertEquals("q", element1.getNamespaceURI());
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element1);
      assertFalse(element0.isRootElement());
      assertEquals("q", element0.getNamespacePrefix());
      assertEquals("q", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("q", element0.getName());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals("q", jDOMNodePointer0.getNamespaceURI());
      assertEquals(0, linkedList0.size());
      assertEquals("q", element1.getName());
      assertEquals("q", element1.getNamespacePrefix());
      assertEquals(0, element1.getContentSize());
      assertFalse(element1.isRootElement());
      assertEquals("q", element1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals("q", jDOMNodePointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      jDOMNodePointer0.setValue(jDOMNodePointer1);
      assertFalse(element0.isRootElement());
      assertEquals("q", element0.getNamespacePrefix());
      assertEquals("q", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("q", element0.getName());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals("q", jDOMNodePointer0.getNamespaceURI());
      assertEquals(0, linkedList0.size());
      assertEquals("q", element1.getName());
      assertEquals("q", element1.getNamespacePrefix());
      assertEquals(0, element1.getContentSize());
      assertFalse(element1.isRootElement());
      assertEquals("q", element1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals("q", jDOMNodePointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertTrue(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertSame(element0, element1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertSame(element1, element0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      
      String string0 = JDOMNodePointer.XMLNS_NAMESPACE_URI;
      assertNotNull(string0);
      assertEquals("http://www.w3.org/2000/xmlns/", string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("lang", locale0, "lang");
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.272.b10-0.fc31.x86_64/jre/lib/jxpath.properties");
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "java.lang.Integer@0000000014");
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Element element0 = new Element("lang");
      assertEquals("lang", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals("lang", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      boolean boolean2 = jDOMNodePointer1.isLanguage("http://www.w3.org/2000/xmlns/");
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals("lang", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertFalse(boolean2);
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer(element0, locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("lang", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertFalse(jDOMNodePointer2.isCollection());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertTrue(jDOMNodePointer2.isRoot());
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer2);
      
      QName qName0 = jDOMNodePointer2.getName();
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("lang", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertFalse(jDOMNodePointer2.isCollection());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertTrue(jDOMNodePointer2.isRoot());
      assertNull(qName0.getPrefix());
      assertEquals("lang", qName0.toString());
      assertEquals("lang", qName0.getName());
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "java.lang.Integer@0000000014");
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      JDOMAttributePointer jDOMAttributePointer0 = (JDOMAttributePointer)jDOMNodePointer1.createAttribute(jXPathContextReferenceImpl0, qName0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals("lang", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertFalse(jDOMNodePointer2.isCollection());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertTrue(jDOMNodePointer2.isRoot());
      assertNull(qName0.getPrefix());
      assertEquals("lang", qName0.toString());
      assertEquals("lang", qName0.getName());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(1, jDOMAttributePointer0.getLength());
      assertNull(jDOMAttributePointer0.getNamespaceURI());
      assertFalse(jDOMAttributePointer0.isAttribute());
      assertFalse(jDOMAttributePointer0.isCollection());
      assertTrue(jDOMAttributePointer0.isActual());
      assertTrue(jDOMAttributePointer0.isNode());
      assertFalse(jDOMAttributePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMAttributePointer0.getIndex());
      assertTrue(jDOMAttributePointer0.isLeaf());
      assertFalse(jDOMAttributePointer0.isContainer());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMAttributePointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      
      String string0 = jDOMNodePointer1.asPath();
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals("lang", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(string0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals("id('lang')/lang[1]", string0);
      
      int int0 = jDOMNodePointer2.compareChildNodePointers(jDOMAttributePointer0, jDOMAttributePointer0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals("lang", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertFalse(jDOMNodePointer2.isCollection());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertTrue(jDOMNodePointer2.isRoot());
      assertNull(qName0.getPrefix());
      assertEquals("lang", qName0.toString());
      assertEquals("lang", qName0.getName());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(1, jDOMAttributePointer0.getLength());
      assertNull(jDOMAttributePointer0.getNamespaceURI());
      assertFalse(jDOMAttributePointer0.isAttribute());
      assertFalse(jDOMAttributePointer0.isCollection());
      assertTrue(jDOMAttributePointer0.isActual());
      assertTrue(jDOMAttributePointer0.isNode());
      assertFalse(jDOMAttributePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMAttributePointer0.getIndex());
      assertTrue(jDOMAttributePointer0.isLeaf());
      assertFalse(jDOMAttributePointer0.isContainer());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("lnbg", locale0, "lnbg");
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      Element element0 = new Element("lnbg");
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("lnbg", element0.getName());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("lnbg", element0.getName());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      jDOMNodePointer1.setValue(jDOMNodePointer0);
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("lnbg", element0.getName());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("lang", locale0, "lang");
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.272.b10-0.fc31.x86_64/jre/lib/jxpath.properties");
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "java.lang.Integer@0000000014");
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Element element0 = new Element("lang");
      assertEquals("lang", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("lang", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      boolean boolean2 = jDOMNodePointer1.isLanguage("http://www.w3.org/2000/xmlns/");
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("lang", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertFalse(boolean2);
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer(element0, locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("lang", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(jDOMNodePointer2.isCollection());
      assertTrue(jDOMNodePointer2.isNode());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer2.isRoot());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer2);
      
      QName qName0 = jDOMNodePointer2.getName();
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("lang", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(jDOMNodePointer2.isCollection());
      assertTrue(jDOMNodePointer2.isNode());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer2.isRoot());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertEquals("lang", qName0.toString());
      assertEquals("lang", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains("lang"));
      assertNotNull(list0);
      
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.equals((Object)list0));
      assertFalse(list0.contains("lang"));
      assertFalse(list1.contains("lang"));
      assertNotNull(list1);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1, locale_FilteringMode0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertFalse(list0.contains("lang"));
      assertFalse(list1.contains("lang"));
      assertFalse(list2.contains("lang"));
      assertNotNull(list2);
      assertNotSame(list0, list1);
      assertNotSame(list0, list2);
      assertNotSame(list1, list0);
      assertNotSame(list1, list2);
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      
      jDOMNodePointer1.setValue(element0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("lang", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      
      QName qName1 = jDOMNodePointer0.getName();
      assertNull(qName1.toString());
      assertNull(qName1.getName());
      assertNull(qName1.getPrefix());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName1);
      assertNotSame(qName1, qName0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("olang", locale0, "olang");
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      Element element0 = new Element("olang");
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("olang", element0.getName());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("olang", element0.getName());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      jDOMNodePointer1.setValue(element0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("olang", element0.getName());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("3.>qI.|C WRNz'", locale0, "3.>qI.|C WRNz'");
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      Element element0 = new Element("F", "F");
      assertEquals("F", element0.getNamespaceURI());
      assertEquals("F", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("F", element0.getNamespaceURI());
      assertEquals("F", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.isRoot());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      boolean boolean0 = jDOMNodePointer0.isNode();
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertTrue(boolean0);
      
      NodePointer nodePointer0 = jDOMNodePointer0.namespacePointer("http://www.w3.org/2000/xmlns/");
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(nodePointer0.isLeaf());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isContainer());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isRoot());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodePointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      
      String string0 = jDOMNodePointer1.getNamespaceURI("http://www.w3.org/XML/1998/namespace");
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("F", element0.getNamespaceURI());
      assertEquals("F", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.isRoot());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(string0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      
      Object object0 = jDOMNodePointer1.getValue();
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("F", element0.getNamespaceURI());
      assertEquals("F", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.isRoot());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(object0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals("", object0);
      
      NodePointer nodePointer1 = jDOMNodePointer1.namespacePointer("");
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("F", element0.getNamespaceURI());
      assertEquals("F", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.isRoot());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(nodePointer1.isContainer());
      assertTrue(nodePointer1.isLeaf());
      assertEquals(1, nodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, nodePointer1.getIndex());
      assertFalse(nodePointer1.isRoot());
      assertFalse(nodePointer1.isCollection());
      assertFalse(nodePointer1.isAttribute());
      assertTrue(nodePointer1.isNode());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(nodePointer1.equals((Object)nodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(nodePointer1, nodePointer0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      String string1 = "o\\u^!~";
      String string2 = jDOMNodePointer1.getNamespaceURI(string1);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("F", element0.getNamespaceURI());
      assertEquals("F", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.isRoot());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(string1.equals((Object)object0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(string2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer(string1, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertFalse(jDOMNodePointer2.isContainer());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer2.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(string1.equals((Object)object0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer2);
      
      Object object1 = jDOMNodePointer2.getValue();
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertFalse(jDOMNodePointer2.isContainer());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer2.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(string1.equals((Object)object0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(object1);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      
      int int0 = jDOMNodePointer1.compareChildNodePointers(nodePointer1, jDOMNodePointer2);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("F", element0.getNamespaceURI());
      assertEquals("F", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.isRoot());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(nodePointer1.isContainer());
      assertTrue(nodePointer1.isLeaf());
      assertEquals(1, nodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, nodePointer1.getIndex());
      assertFalse(nodePointer1.isRoot());
      assertFalse(nodePointer1.isCollection());
      assertFalse(nodePointer1.isAttribute());
      assertTrue(nodePointer1.isNode());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertFalse(jDOMNodePointer2.isContainer());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer2.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(nodePointer1.equals((Object)nodePointer0));
      assertFalse(string1.equals((Object)object0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(nodePointer1, nodePointer0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("lnbg", locale0, "lnbg");
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      Element element0 = new Element("lnbg");
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("lnbg", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("lnbg", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      NodePointer nodePointer0 = jDOMNodePointer0.namespacePointer("lnbg");
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(nodePointer0.isRoot());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isCollection());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(nodePointer0.isLeaf());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodePointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      
      int int0 = jDOMNodePointer1.compareChildNodePointers(jDOMNodePointer1, nodePointer0);
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("lnbg", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(nodePointer0.isRoot());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isCollection());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(nodePointer0.isLeaf());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Element element0 = new Element("q");
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("q", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((NodePointer) null, element0);
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("q", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) jDOMNodePointer0);
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("q", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName0 = jDOMNodePointer0.getName();
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("q", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("q", qName0.toString());
      assertEquals("q", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      
      JDOMAttributePointer jDOMAttributePointer0 = (JDOMAttributePointer)jDOMNodePointer0.createAttribute(jXPathContextReferenceImpl0, qName0);
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("q", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("q", qName0.toString());
      assertEquals("q", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals(1, jDOMAttributePointer0.getLength());
      assertFalse(jDOMAttributePointer0.isContainer());
      assertNull(jDOMAttributePointer0.getNamespaceURI());
      assertTrue(jDOMAttributePointer0.isLeaf());
      assertFalse(jDOMAttributePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMAttributePointer0.getIndex());
      assertFalse(jDOMAttributePointer0.isRoot());
      assertTrue(jDOMAttributePointer0.isNode());
      assertTrue(jDOMAttributePointer0.isActual());
      assertFalse(jDOMAttributePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMAttributePointer0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("3.>qI.|C WRNz'", locale0, "3.>qI.|C WRNz'");
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      Element element0 = new Element("F", "F");
      assertEquals("F", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("F", element0.getNamespaceURI());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("F", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("F", element0.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      boolean boolean0 = jDOMNodePointer0.isNode();
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertTrue(boolean0);
      
      NodePointer nodePointer0 = jDOMNodePointer0.namespacePointer("http://www.w3.org/2000/xmlns/");
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(nodePointer0.isRoot());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isContainer());
      assertTrue(nodePointer0.isLeaf());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(nodePointer0.isNode());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodePointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      
      String string0 = JDOMNodePointer.XMLNS_NAMESPACE_URI;
      assertNotNull(string0);
      assertEquals("http://www.w3.org/2000/xmlns/", string0);
      
      Object object0 = jDOMNodePointer1.getValue();
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("F", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("F", element0.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(object0.equals((Object)string0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(object0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals("", object0);
      
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      assertFalse(namespaceResolver0.isSealed());
      assertNotNull(namespaceResolver0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) jDOMNodePointer1);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("F", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("F", element0.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)jXPathContextReferenceImpl0.getRelativeContext(jDOMNodePointer1);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("F", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("F", element0.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = (JXPathContextReferenceImpl)jXPathContextReferenceImpl1.getParentContext();
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("F", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("F", element0.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      
      String string1 = "Ws!M`{$I!\\4}l5_M";
      CDATA cDATA0 = null;
      try {
        cDATA0 = new CDATA("Ws!M`{$I!\u0004}l5_M");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The data \"Ws!M`{$I!\u0004}l5_M\" is not legal for a JDOM CDATA section: 0x4 is not a legal XML character.
         //
         verifyException("org.jdom.CDATA", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("zt$7g(fHL7MRNk` ", locale0, "zt$7g(fHL7MRNk` ");
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      Element element0 = new Element("F", "F");
      assertEquals("F", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("F", element0.getNamespaceURI());
      assertNotNull(element0);
      
      QName qName0 = new QName("http://www.w3.org/2000/xmlns/");
      assertEquals("//www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http", qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("//www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) null, (Object) element0, (NodeTest) nodeNameTest0);
      assertEquals("F", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("F", element0.getNamespaceURI());
      assertEquals("//www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http", qName0.getPrefix());
      assertEquals("http://www.w3.org/2000/xmlns/", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("3.>qI.|C WRNz'", locale0, "3.>qI.|C WRNz'");
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      Element element0 = new Element("F", "F");
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("F", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("F", element0.getName());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("F", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("F", element0.getName());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      boolean boolean0 = jDOMNodePointer1.isLanguage("http://www.w3.org/2000/xmlns/");
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("F", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("F", element0.getName());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertFalse(boolean0);
      
      NodePointer nodePointer0 = jDOMNodePointer0.namespacePointer("http://www.w3.org/2000/xmlns/");
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(nodePointer0.isLeaf());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isCollection());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodePointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      
      String string0 = jDOMNodePointer1.getNamespaceURI("http://www.w3.org/XML/1998/namespace");
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("F", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("F", element0.getName());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(string0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      
      Object object0 = jDOMNodePointer1.getValue();
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("F", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("F", element0.getName());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(object0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals("", object0);
      
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      assertFalse(namespaceResolver0.isSealed());
      assertNotNull(namespaceResolver0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) jDOMNodePointer1);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("F", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("F", element0.getName());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)jXPathContextReferenceImpl0.getRelativeContext(jDOMNodePointer1);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("F", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("F", element0.getName());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = (JXPathContextReferenceImpl)jXPathContextReferenceImpl1.getParentContext();
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("F", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("F", element0.getName());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      
      CDATA cDATA0 = null;
      try {
        cDATA0 = new CDATA("Ws!M`{$I!\u0004}l5_M");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The data \"Ws!M`{$I!\u0004}l5_M\" is not legal for a JDOM CDATA section: 0x4 is not a legal XML character.
         //
         verifyException("org.jdom.CDATA", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Element element0 = new Element("q", "q", "q");
      assertFalse(element0.isRootElement());
      assertEquals("q", element0.getNamespaceURI());
      assertEquals("q", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("q", element0.getName());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((NodePointer) null, element0);
      assertFalse(element0.isRootElement());
      assertEquals("q", element0.getNamespaceURI());
      assertEquals("q", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("q", element0.getName());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals("q", jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      boolean boolean0 = jDOMNodePointer0.isLeaf();
      assertFalse(element0.isRootElement());
      assertEquals("q", element0.getNamespaceURI());
      assertEquals("q", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("q", element0.getName());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals("q", jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(locale0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("3.qI|C WRNz'");
      assertEquals("3.qI|C WRNz'", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("r5S", "http://www.w3.org/XML/1998/namespace");
      assertEquals("r5S", processingInstruction0.getTarget());
      assertEquals("http://www.w3.org/XML/1998/namespace", processingInstruction0.getData());
      assertEquals("http://www.w3.org/XML/1998/namespace", processingInstruction0.getValue());
      assertNotNull(processingInstruction0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(processingInstruction0, locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("r5S", processingInstruction0.getTarget());
      assertEquals("http://www.w3.org/XML/1998/namespace", processingInstruction0.getData());
      assertEquals("http://www.w3.org/XML/1998/namespace", processingInstruction0.getValue());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertTrue(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      boolean boolean1 = jDOMNodePointer1.testNode((NodeTest) processingInstructionTest0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("3.qI|C WRNz'", processingInstructionTest0.getTarget());
      assertEquals("r5S", processingInstruction0.getTarget());
      assertEquals("http://www.w3.org/XML/1998/namespace", processingInstruction0.getData());
      assertEquals("http://www.w3.org/XML/1998/namespace", processingInstruction0.getValue());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertTrue(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(boolean1 == boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertNotNull(locale0);
      
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext", "org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext");
      assertEquals("org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext", processingInstruction0.getData());
      assertEquals("org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext", processingInstruction0.getValue());
      assertEquals("org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext", processingInstruction0.getTarget());
      assertNotNull(processingInstruction0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction0, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext", processingInstruction0.getData());
      assertEquals("org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext", processingInstruction0.getValue());
      assertEquals("org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext", processingInstruction0.getTarget());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.JXPathAbstractFactoryException");
      assertEquals("org.apache.commons.jxpath.JXPathAbstractFactoryException", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      boolean boolean0 = jDOMNodePointer0.testNode((NodeTest) processingInstructionTest0);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext", processingInstruction0.getData());
      assertEquals("org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext", processingInstruction0.getValue());
      assertEquals("org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext", processingInstruction0.getTarget());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals("org.apache.commons.jxpath.JXPathAbstractFactoryException", processingInstructionTest0.getTarget());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("3.>qI.|C WRNz'", locale0, "3.>qI.|C WRNz'");
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      Element element0 = new Element("F", "F");
      assertEquals(0, element0.getContentSize());
      assertEquals("F", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("F", element0.getName());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(0, element0.getContentSize());
      assertEquals("F", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("F", element0.getName());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      boolean boolean0 = jDOMNodePointer1.isLanguage("http://www.w3.org/2000/xmlns/");
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(0, element0.getContentSize());
      assertEquals("F", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("F", element0.getName());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertFalse(boolean0);
      
      NodePointer nodePointer0 = jDOMNodePointer0.namespacePointer("F");
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isCollection());
      assertTrue(nodePointer0.isNode());
      assertTrue(nodePointer0.isLeaf());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isContainer());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodePointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      
      String string0 = jDOMNodePointer1.getNamespaceURI("F");
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(0, element0.getContentSize());
      assertEquals("F", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("F", element0.getName());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(string0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      
      Set<Character> set0 = locale0.getExtensionKeys();
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Object object0 = jDOMNodePointer1.getValue();
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(0, element0.getContentSize());
      assertEquals("F", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("F", element0.getName());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(object0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals("", object0);
      
      String string1 = jDOMNodePointer0.getNamespaceURI("4=P");
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(string1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("3.>qI.|C WRNz'", locale0, "3.>qI.|C WRNz'");
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      Element element0 = new Element("F", "F");
      assertFalse(element0.isRootElement());
      assertEquals("F", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("F", element0.getName());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(element0.isRootElement());
      assertEquals("F", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("F", element0.getName());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      boolean boolean0 = jDOMNodePointer1.isLanguage("http://www.w3.org/2000/xmlns/");
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(element0.isRootElement());
      assertEquals("F", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("F", element0.getName());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertFalse(boolean0);
      
      NodePointer nodePointer0 = jDOMNodePointer0.namespacePointer(" reported success creating object for path: ");
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isContainer());
      assertTrue(nodePointer0.isLeaf());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isCollection());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodePointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      String string0 = jDOMNodePointer1.getNamespaceURI("http://www.w3.org/XML/1998/namespace");
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(element0.isRootElement());
      assertEquals("F", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("F", element0.getName());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(string0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("http://www.w3.org/XML/1998/namespace"));
      assertNotNull(linkedList0);
      
      Element element1 = element0.setAttributes(linkedList0);
      assertFalse(element0.isRootElement());
      assertEquals("F", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("F", element0.getName());
      assertEquals(0, linkedList0.size());
      assertEquals("F", element1.getNamespaceURI());
      assertFalse(element1.isRootElement());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals(0, element1.getContentSize());
      assertEquals("F", element1.getName());
      assertFalse(linkedList0.contains("http://www.w3.org/XML/1998/namespace"));
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      String string1 = JDOMNodePointer.getLocalName(element1);
      assertFalse(element0.isRootElement());
      assertEquals("F", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("F", element0.getName());
      assertEquals(0, linkedList0.size());
      assertEquals("F", element1.getNamespaceURI());
      assertFalse(element1.isRootElement());
      assertEquals("", element1.getNamespacePrefix());
      assertEquals(0, element1.getContentSize());
      assertEquals("F", element1.getName());
      assertFalse(linkedList0.contains("F"));
      assertNotNull(string1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("F", string1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Element element0 = new Element("q", "q");
      assertEquals("q", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("q", element0.getName());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((NodePointer) null, element0);
      assertEquals("q", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("q", element0.getName());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals("q", jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/2000/xmlns/");
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertNotNull(qName0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createAttribute((JXPathContext) null, qName0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown namespace prefix: http://www.w3.org/XML/1998/namespace
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Element element0 = new Element("q", "q", "q");
      assertEquals("q", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("q", element0.getNamespacePrefix());
      assertEquals("q", element0.getNamespaceURI());
      assertNotNull(element0);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0, "q");
      assertEquals("q", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("q", element0.getNamespacePrefix());
      assertEquals("q", element0.getNamespaceURI());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("q", jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      String string0 = jDOMNodePointer0.getNamespaceURI("q");
      assertEquals("q", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("q", element0.getNamespacePrefix());
      assertEquals("q", element0.getNamespaceURI());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals("q", jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(string0);
      assertEquals("q", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("3.>qI.|C WRNz'", locale0, "3.>qI.|C WRNz'");
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      Element element0 = new Element("F", "F");
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("F", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("F", element0.getName());
      assertNotNull(element0);
      
      Locale locale1 = Locale.forLanguageTag("http://www.w3.org/XML/1998/namespace");
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("F", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("F", element0.getName());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      boolean boolean0 = jDOMNodePointer1.isLanguage("http://www.w3.org/2000/xmlns/");
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("F", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("F", element0.getName());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(locale0, locale1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertFalse(boolean0);
      
      QName qName0 = jDOMNodePointer1.getName();
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("F", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("F", element0.getName());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals("F", qName0.getName());
      assertEquals("F", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      assertNotSame(locale0, locale1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertNotSame(locale0, locale1);
      
      JXPathContext jXPathContext0 = jXPathContextReferenceImpl0.getParentContext();
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNull(jXPathContext0);
      assertNotSame(locale0, locale1);
      
      int int0 = jDOMNodePointer1.compareChildNodePointers(jDOMNodePointer0, jDOMNodePointer0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("F", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("F", element0.getName());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(locale0, locale1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(0, int0);
      
      String string0 = jDOMNodePointer1.getNamespaceURI();
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("F", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("F", element0.getName());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(string0);
      assertNotSame(locale0, locale1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals("F", string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("3.>qI.|C WRNz'", locale0, "3.>qI.|C WRNz'");
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      Element element0 = new Element("F", "F");
      assertEquals("F", element0.getNamespaceURI());
      assertEquals("F", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals("F", element0.getNamespaceURI());
      assertEquals("F", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      boolean boolean0 = jDOMNodePointer1.isLanguage("http://www.w3.org/2000/xmlns/");
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals("F", element0.getNamespaceURI());
      assertEquals("F", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertFalse(boolean0);
      
      QName qName0 = new QName("<<unknown namespace>>");
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertEquals("<<unknown namespace>>", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "http://www.w3.org/XML/1998/namespace");
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertEquals("<<unknown namespace>>", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("<<unknown namespace>>", nodeNameTest0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      boolean boolean1 = jDOMNodePointer1.testNode((NodeTest) nodeNameTest0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals("F", element0.getNamespaceURI());
      assertEquals("F", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertEquals("<<unknown namespace>>", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("<<unknown namespace>>", nodeNameTest0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", nodeNameTest0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(boolean1 == boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertFalse(boolean1);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      JXPathContext jXPathContext0 = jXPathContextReferenceImpl0.getParentContext();
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNull(jXPathContext0);
      
      // Undeclared exception!
      jDOMNodePointer1.createChild((JXPathContext) jXPathContextReferenceImpl0, qName0, Integer.MIN_VALUE, (Object) "F");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("lnbg", locale0, "lnbg");
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      Element element0 = new Element("lnbg");
      assertFalse(element0.isRootElement());
      assertEquals("lnbg", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertNotNull(element0);
      
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace", "<<unknown namespace>>");
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace:<<unknown namespace>>", qName0.toString());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace:<<unknown namespace>>", qName0.toString());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("http://www.w3.org/XML/1998/namespace:<<unknown namespace>>", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) element0, (NodeTest) nodeNameTest0);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(element0.isRootElement());
      assertEquals("lnbg", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace:<<unknown namespace>>", qName0.toString());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("http://www.w3.org/XML/1998/namespace:<<unknown namespace>>", nodeNameTest0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = new Document();
      assertEquals(0, document0.getContentSize());
      assertNull(document0.getBaseURI());
      assertFalse(document0.hasRootElement());
      assertNotNull(document0);
      
      Locale locale0 = Locale.PRC;
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(document0, locale0);
      assertEquals(0, document0.getContentSize());
      assertNull(document0.getBaseURI());
      assertFalse(document0.hasRootElement());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.getNamespaceURI("GTutX#}@j5x");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root element not set
         //
         verifyException("org.jdom.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(".h(?ls:N|qEV9*0j\"V", locale0, ".h(?ls:N|qEV9*0j\"V");
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      Element element0 = new Element("F", "F");
      assertEquals("F", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("F", element0.getNamespaceURI());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("F", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("F", element0.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      boolean boolean0 = jDOMNodePointer1.isLanguage("http://www.w3.org/2000/xmlns/");
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("F", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("F", element0.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertFalse(boolean0);
      
      QName qName0 = jDOMNodePointer1.getName();
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("F", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals("F", element0.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(qName0.getPrefix());
      assertEquals("F", qName0.toString());
      assertEquals("F", qName0.getName());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) jDOMNodePointer0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      
      JXPathContext jXPathContext0 = jXPathContextReferenceImpl0.getParentContext();
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNull(jXPathContext0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      
      // Undeclared exception!
      jDOMNodePointer1.createChild((JXPathContext) jXPathContextReferenceImpl0, qName0, Integer.MIN_VALUE, (Object) jDOMNodePointer0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Element element0 = new Element("q", "q", "q");
      assertEquals("q", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("q", element0.getNamespacePrefix());
      assertEquals("q", element0.getName());
      assertNotNull(element0);
      
      Locale locale0 = Locale.US;
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("q", locale0);
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertEquals("q", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("q", element0.getNamespacePrefix());
      assertEquals("q", element0.getName());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals("q", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      String string0 = jDOMNodePointer1.toString();
      assertEquals("q", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("q", element0.getNamespacePrefix());
      assertEquals("q", element0.getName());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertEquals("q", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(string0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals("/q:q[1]", string0);
      
      String string1 = JDOMNodePointer.getPrefix("/q:q[1]");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("3.>qI.|C WRNz'", locale0, "3.>qI.|C WRNz'");
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      Element element0 = new Element("F", "F");
      assertFalse(element0.isRootElement());
      assertEquals("F", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("F", element0.getName());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(element0.isRootElement());
      assertEquals("F", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("F", element0.getName());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      boolean boolean0 = jDOMNodePointer1.isLanguage("http://www.w3.org/2000/xmlns/");
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(element0.isRootElement());
      assertEquals("F", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("F", element0.getName());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertFalse(boolean0);
      
      QName qName0 = jDOMNodePointer1.getName();
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(element0.isRootElement());
      assertEquals("F", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("F", element0.getName());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals("F", qName0.toString());
      assertEquals("F", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(element0.isRootElement());
      assertEquals("F", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("F", element0.getName());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals("F", qName0.toString());
      assertEquals("F", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("F", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodeNameTest0);
      
      boolean boolean1 = jDOMNodePointer1.testNode((NodeTest) nodeNameTest0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(element0.isRootElement());
      assertEquals("F", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("F", element0.getName());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals("F", qName0.toString());
      assertEquals("F", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("F", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(boolean1 == boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertFalse(boolean1);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) jDOMNodePointer0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      
      JXPathContext jXPathContext0 = jXPathContextReferenceImpl0.getParentContext();
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNull(jXPathContext0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      
      // Undeclared exception!
      jDOMNodePointer1.createChild((JXPathContext) jXPathContextReferenceImpl0, qName0, Integer.MIN_VALUE, (Object) jDOMNodePointer0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      Element element0 = new Element("q", "q");
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("q", element0.getNamespaceURI());
      assertEquals("q", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("q", element0.getNamespaceURI());
      assertEquals("q", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals("q", jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      String string0 = jDOMNodePointer0.asPath();
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("q", element0.getNamespaceURI());
      assertEquals("q", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals("q", jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("olang", locale0, "olang");
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      Element element0 = new Element("olang");
      assertEquals("olang", element0.getName());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("olang", element0.getName());
      assertEquals("", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      Element element1 = element0.setText("http://www.w3.org/2000/xmlns/");
      assertEquals(1, element0.getContentSize());
      assertEquals("olang", element0.getName());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertEquals(1, element1.getContentSize());
      assertEquals("olang", element1.getName());
      assertEquals("", element1.getNamespacePrefix());
      assertFalse(element1.isRootElement());
      assertEquals("", element1.getNamespaceURI());
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      String string0 = jDOMNodePointer1.asPath();
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, element0.getContentSize());
      assertEquals("olang", element0.getName());
      assertEquals("", element0.getNamespaceURI());
      assertEquals("", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(string0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertSame(element0, element1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals("id('olang')/olang[1]", string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("http://www.w3.org/2000/xmlns/");
      assertEquals("http://www.w3.org/2000/xmlns/", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) processingInstructionTest0);
      assertEquals("http://www.w3.org/2000/xmlns/", processingInstructionTest0.getTarget());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      Document document0 = new Document();
      assertFalse(document0.hasRootElement());
      assertEquals(0, document0.getContentSize());
      assertNull(document0.getBaseURI());
      assertNotNull(document0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) document0);
      assertEquals("http://www.w3.org/2000/xmlns/", processingInstructionTest0.getTarget());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(document0.hasRootElement());
      assertEquals(0, document0.getContentSize());
      assertNull(document0.getBaseURI());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      
      BasicVariables basicVariables0 = (BasicVariables)jXPathContextReferenceImpl1.getVariables();
      assertEquals("http://www.w3.org/2000/xmlns/", processingInstructionTest0.getTarget());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(document0.hasRootElement());
      assertEquals(0, document0.getContentSize());
      assertNull(document0.getBaseURI());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(basicVariables0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace");
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.toString());
      assertEquals("//www.w3.org/XML/1998/namespace", qName0.getName());
      assertEquals("http", qName0.getPrefix());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals("http://www.w3.org/2000/xmlns/", processingInstructionTest0.getTarget());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(document0.hasRootElement());
      assertEquals(0, document0.getContentSize());
      assertNull(document0.getBaseURI());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.toString());
      assertEquals("//www.w3.org/XML/1998/namespace", qName0.getName());
      assertEquals("http", qName0.getPrefix());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.childIterator(processingInstructionTest0, false, variablePointer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: 'http://www.w3.org/XML/1998/namespace'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("3.>qI.|C WRNz'");
      assertEquals("3.>qI.|C WRNz'", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer((NodePointer) jDOMNodePointer0, (Object) locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      QName qName0 = jDOMNodePointer0.getName();
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNull(nodeNameTest0.toString());
      assertTrue(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodeNameTest0);
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer1, (Object) "3.>qI.|C WRNz'", (NodeTest) null);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertTrue(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("3.>qI.|C WRNz'", locale0, "3.>qI.|C WRNz'");
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      Element element0 = new Element("F", "F");
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("F", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("F", element0.getNamespaceURI());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("F", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("F", element0.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      boolean boolean0 = jDOMNodePointer1.isLanguage("http://www.w3.org/2000/xmlns/");
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("F", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("F", element0.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertFalse(boolean0);
      
      QName qName0 = jDOMNodePointer1.getName();
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("F", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("F", element0.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertNull(qName0.getPrefix());
      assertEquals("F", qName0.getName());
      assertEquals("F", qName0.toString());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "http://www.w3.org/XML/1998/namespace");
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("F", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("F", element0.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertNull(qName0.getPrefix());
      assertEquals("F", qName0.getName());
      assertEquals("F", qName0.toString());
      assertEquals("F", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("http://www.w3.org/XML/1998/namespace", nodeNameTest0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodeNameTest0);
      
      boolean boolean1 = jDOMNodePointer1.testNode((NodeTest) nodeNameTest0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("F", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("F", element0.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertNull(qName0.getPrefix());
      assertEquals("F", qName0.getName());
      assertEquals("F", qName0.toString());
      assertEquals("F", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("http://www.w3.org/XML/1998/namespace", nodeNameTest0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(boolean1 == boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertFalse(boolean1);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) jDOMNodePointer0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      
      JXPathContext jXPathContext0 = jXPathContextReferenceImpl0.getParentContext();
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNull(jXPathContext0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      
      // Undeclared exception!
      jDOMNodePointer1.createChild((JXPathContext) jXPathContextReferenceImpl0, qName0, Integer.MIN_VALUE, (Object) jDOMNodePointer0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("3.>qI.|C WRNz'");
      assertEquals("3.>qI.|C WRNz'", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("3.>qI.|C WRNz'", locale0, "3.>qI.|C WRNz'");
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      Element element0 = new Element("F", "F");
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("F", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("F", element0.getNamespaceURI());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("F", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("F", element0.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      boolean boolean0 = jDOMNodePointer1.isLanguage("http://www.w3.org/2000/xmlns/");
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("F", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("F", element0.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertFalse(boolean0);
      
      QName qName0 = jDOMNodePointer1.getName();
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("F", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("F", element0.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(qName0.getPrefix());
      assertEquals("F", qName0.toString());
      assertEquals("F", qName0.getName());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("F", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("F", element0.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(qName0.getPrefix());
      assertEquals("F", qName0.toString());
      assertEquals("F", qName0.getName());
      assertEquals("F", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodeNameTest0);
      
      boolean boolean1 = jDOMNodePointer1.testNode((NodeTest) nodeNameTest0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("F", element0.getName());
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("F", element0.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("F", jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(qName0.getPrefix());
      assertEquals("F", qName0.toString());
      assertEquals("F", qName0.getName());
      assertEquals("F", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(boolean1 == boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertFalse(boolean1);
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer(locale0, locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(jDOMNodePointer2.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isContainer());
      assertTrue(jDOMNodePointer2.isRoot());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer2);
      
      NamespaceResolver namespaceResolver0 = jDOMNodePointer2.getNamespaceResolver();
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(jDOMNodePointer2.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isContainer());
      assertTrue(jDOMNodePointer2.isRoot());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(namespaceResolver0.isSealed());
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(namespaceResolver0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Element element0 = new Element("gL8MrSkNsB.p", "gL8MrSkNsB.p");
      assertFalse(element0.isRootElement());
      assertEquals("gL8MrSkNsB.p", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("gL8MrSkNsB.p", element0.getNamespaceURI());
      assertNotNull(element0);
      
      QName qName0 = new QName("gL8MrSkNsB.p", "gL8MrSkNsB.p");
      assertEquals("gL8MrSkNsB.p", qName0.getPrefix());
      assertEquals("gL8MrSkNsB.p", qName0.getName());
      assertEquals("gL8MrSkNsB.p:gL8MrSkNsB.p", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("gL8MrSkNsB.p", qName0.getPrefix());
      assertEquals("gL8MrSkNsB.p", qName0.getName());
      assertEquals("gL8MrSkNsB.p:gL8MrSkNsB.p", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("gL8MrSkNsB.p:gL8MrSkNsB.p", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("gL8MrSkNsB.p", qName0.getPrefix());
      assertEquals("gL8MrSkNsB.p", qName0.getName());
      assertEquals("gL8MrSkNsB.p:gL8MrSkNsB.p", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("gL8MrSkNsB.p:gL8MrSkNsB.p", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) beanPointer0, (Object) element0, (NodeTest) nodeNameTest0);
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertFalse(element0.isRootElement());
      assertEquals("gL8MrSkNsB.p", element0.getName());
      assertEquals("", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertEquals("gL8MrSkNsB.p", element0.getNamespaceURI());
      assertEquals("gL8MrSkNsB.p", qName0.getPrefix());
      assertEquals("gL8MrSkNsB.p", qName0.getName());
      assertEquals("gL8MrSkNsB.p:gL8MrSkNsB.p", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("gL8MrSkNsB.p:gL8MrSkNsB.p", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Element element0 = new Element("q");
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("q", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((NodePointer) null, element0);
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("q", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      QName qName0 = jDOMNodePointer0.getName();
      assertEquals("", element0.getNamespacePrefix());
      assertEquals("", element0.getNamespaceURI());
      assertFalse(element0.isRootElement());
      assertEquals("q", element0.getName());
      assertEquals(0, element0.getContentSize());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(qName0.getPrefix());
      assertEquals("q", qName0.getName());
      assertEquals("q", qName0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Element element0 = new Element("q", "q", "q");
      assertEquals("q", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("q", element0.getName());
      assertEquals("q", element0.getNamespaceURI());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((NodePointer) null, element0);
      assertEquals("q", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("q", element0.getName());
      assertEquals("q", element0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals("q", jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      QName qName0 = jDOMNodePointer0.getName();
      assertEquals("q", element0.getNamespacePrefix());
      assertEquals(0, element0.getContentSize());
      assertFalse(element0.isRootElement());
      assertEquals("q", element0.getName());
      assertEquals("q", element0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals("q", jDOMNodePointer0.getNamespaceURI());
      assertEquals("q", qName0.getName());
      assertEquals("q", qName0.getPrefix());
      assertEquals("q:q", qName0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Element element0 = new Element("q", "q", "q");
      assertEquals("q", element0.getName());
      assertEquals("q", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("q", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((NodePointer) null, element0);
      assertEquals("q", element0.getName());
      assertEquals("q", element0.getNamespaceURI());
      assertEquals(0, element0.getContentSize());
      assertEquals("q", element0.getNamespacePrefix());
      assertFalse(element0.isRootElement());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals("q", jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.remove();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot remove root JDOM node
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Element element0 = new Element("q", "q", "q");
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("q", element0.getNamespacePrefix());
      assertEquals("q", element0.getNamespaceURI());
      assertEquals("q", element0.getName());
      assertNotNull(element0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((NodePointer) null, element0);
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("q", element0.getNamespacePrefix());
      assertEquals("q", element0.getNamespaceURI());
      assertEquals("q", element0.getName());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals("q", jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) jDOMNodePointer0);
      assertFalse(element0.isRootElement());
      assertEquals(0, element0.getContentSize());
      assertEquals("q", element0.getNamespacePrefix());
      assertEquals("q", element0.getNamespaceURI());
      assertEquals("q", element0.getName());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals("q", jDOMNodePointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.isLanguage("q");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)3;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)93;
      byteArray0[7] = (byte)47;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-48), (byte) (-42), (byte)3, (byte) (-85), (byte)92, (byte)5, (byte)93, (byte)47}, byteArray0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.JAPAN;
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("ja_JP", locale1.toString());
      assertEquals("JP", locale1.getCountry());
      assertEquals("ja", locale1.getLanguage());
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      
      String string0 = locale0.getDisplayVariant(locale1);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("ja_JP", locale1.toString());
      assertEquals("JP", locale1.getCountry());
      assertEquals("ja", locale1.getLanguage());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(string0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", string0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(locale0.equals((Object)locale1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      QName qName0 = jDOMNodePointer0.getName();
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(locale0.equals((Object)locale1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      assertNotSame(locale0, locale1);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest@0000000006");
      assertNull(nodeNameTest0.toString());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(locale0.equals((Object)locale1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodeNameTest0);
      
      boolean boolean2 = jDOMNodePointer0.testNode((NodeTest) nodeNameTest0);
      assertNull(nodeNameTest0.toString());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(locale0.equals((Object)locale1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(locale0, locale1);
      assertFalse(boolean2);
      
      Object object0 = jDOMNodePointer0.getNode();
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(locale0.equals((Object)locale1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(object0);
      assertNotSame(locale0, locale1);
      
      String string1 = jDOMNodePointer0.getNamespaceURI("xml");
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(string1.equals((Object)string0));
      assertFalse(locale0.equals((Object)locale1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(string1);
      assertNotSame(locale0, locale1);
      assertEquals("http://www.w3.org/XML/1998/namespace", string1);
      
      NodeIterator nodeIterator0 = jDOMNodePointer0.attributeIterator(qName0);
      assertEquals(0, nodeIterator0.getPosition());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(locale0.equals((Object)locale1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodeIterator0);
      assertNotSame(locale0, locale1);
      
      int int0 = jDOMNodePointer0.getLength();
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(locale0.equals((Object)locale1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(locale0, locale1);
      assertEquals(1, int0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.setValue(qName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertNotNull(locale0);
      
      Integer integer0 = new Integer(34);
      assertNotNull(integer0);
      assertEquals(34, (int)integer0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(integer0, locale0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      String string0 = jDOMNodePointer0.getNamespaceURI("xml");
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(string0);
      assertEquals("http://www.w3.org/XML/1998/namespace", string0);
      
      String string1 = jDOMNodePointer0.asPath();
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(string1.equals((Object)string0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      CDATA cDATA0 = new CDATA("_oNm?eMBlpxC9aOn");
      assertEquals("_oNm?eMBlpxC9aOn", cDATA0.getText());
      assertEquals("_oNm?eMBlpxC9aOn", cDATA0.getValue());
      assertNotNull(cDATA0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0, "_oNm?eMBlpxC9aOn");
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("_oNm?eMBlpxC9aOn", cDATA0.getText());
      assertEquals("_oNm?eMBlpxC9aOn", cDATA0.getValue());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      String string0 = jDOMNodePointer0.getNamespaceURI("_oNm?eMBlpxC9aOn");
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("_oNm?eMBlpxC9aOn", cDATA0.getText());
      assertEquals("_oNm?eMBlpxC9aOn", cDATA0.getValue());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.setValue((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CDATA cDATA0 = new CDATA((String) null);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      assertNotNull(cDATA0);
      
      String string0 = cDATA0.getTextTrim();
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Text text0 = cDATA0.setText((String) null);
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      assertEquals("", text0.getText());
      assertEquals("", text0.getValue());
      assertNotNull(text0);
      assertSame(cDATA0, text0);
      assertSame(text0, cDATA0);
      
      String string1 = Text.normalizeString((String) null);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = text0.toString();
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      assertEquals("", text0.getText());
      assertEquals("", text0.getValue());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertSame(cDATA0, text0);
      assertSame(text0, cDATA0);
      assertEquals("[CDATA: ]", string2);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2202);
      assertEquals(2202, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodeTypeTest0, locale0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals(2202, nodeTypeTest0.getNodeType());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertEquals("", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      CDATA cDATA1 = new CDATA("0h");
      assertEquals("0h", cDATA1.getValue());
      assertEquals("0h", cDATA1.getText());
      assertFalse(cDATA1.equals((Object)cDATA0));
      assertFalse(cDATA1.equals((Object)text0));
      assertNotNull(cDATA1);
      
      Comment comment0 = new Comment("");
      assertEquals("", comment0.getText());
      assertEquals("", comment0.getValue());
      assertNotNull(comment0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, comment0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals(2202, nodeTypeTest0.getNodeType());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("", comment0.getText());
      assertEquals("", comment0.getValue());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest((-2118850530));
      assertEquals((-2118850530), nodeTypeTest1.getNodeType());
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertNotNull(nodeTypeTest1);
      
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertNotNull(namespace0);
      
      Attribute attribute0 = new Attribute("org.apache.commons.jxpath.JXPathException", "0h", namespace0);
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals(0, attribute0.getAttributeType());
      assertEquals("org.apache.commons.jxpath.JXPathException", attribute0.getName());
      assertEquals("0h", attribute0.getValue());
      assertEquals("", attribute0.getNamespacePrefix());
      assertEquals("", attribute0.getNamespaceURI());
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertNotNull(attribute0);
      
      boolean boolean0 = jDOMNodePointer0.equals(attribute0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals(2202, nodeTypeTest0.getNodeType());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals("", namespace0.getURI());
      assertEquals("", namespace0.getPrefix());
      assertEquals(0, attribute0.getAttributeType());
      assertEquals("org.apache.commons.jxpath.JXPathException", attribute0.getName());
      assertEquals("0h", attribute0.getValue());
      assertEquals("", attribute0.getNamespacePrefix());
      assertEquals("", attribute0.getNamespaceURI());
      assertFalse(nodeTypeTest0.equals((Object)nodeTypeTest1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertNotSame(nodeTypeTest0, nodeTypeTest1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertFalse(boolean0);
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer(cDATA1, locale0, "s[92_&`U[(SBW6");
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer2.isNode());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertFalse(jDOMNodePointer2.isCollection());
      assertTrue(jDOMNodePointer2.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("0h", cDATA1.getValue());
      assertEquals("0h", cDATA1.getText());
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertFalse(cDATA1.equals((Object)cDATA0));
      assertFalse(cDATA1.equals((Object)text0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer2);
      
      String string3 = jDOMNodePointer2.asPath();
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer2.isNode());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertFalse(jDOMNodePointer2.isCollection());
      assertTrue(jDOMNodePointer2.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("0h", cDATA1.getValue());
      assertEquals("0h", cDATA1.getText());
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(cDATA1.equals((Object)cDATA0));
      assertFalse(cDATA1.equals((Object)text0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(string3);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      assertNotSame(cDATA1, cDATA0);
      assertNotSame(cDATA1, text0);
      assertEquals("id('s[92_&`U[(SBW6')", string3);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer2.setValue((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, locale0, "http://www.w3.org/2000/xmlns/");
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertTrue(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer((Object) jDOMNodePointer1, locale0);
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertTrue(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer2.isContainer());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertFalse(jDOMNodePointer2.isCollection());
      assertTrue(jDOMNodePointer2.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertTrue(jDOMNodePointer2.isRoot());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer2);
      
      QName qName0 = jDOMNodePointer0.getName();
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      
      int int0 = jDOMNodePointer1.getLength();
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertTrue(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(1, int0);
      
      Object object0 = jDOMNodePointer0.getImmediateNode();
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(object0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("http://www.w3.org/2000/xmlns/"));
      assertNotNull(linkedList0);
      
      String string0 = JDOMNodePointer.XMLNS_NAMESPACE_URI;
      assertNotNull(string0);
      assertEquals("http://www.w3.org/2000/xmlns/", string0);
      
      CDATA cDATA0 = new CDATA("http://www.w3.org/XML/1998/namespace");
      assertEquals("http://www.w3.org/XML/1998/namespace", cDATA0.getText());
      assertEquals("http://www.w3.org/XML/1998/namespace", cDATA0.getValue());
      assertNotNull(cDATA0);
      
      String string1 = cDATA0.toString();
      assertEquals("http://www.w3.org/XML/1998/namespace", cDATA0.getText());
      assertEquals("http://www.w3.org/XML/1998/namespace", cDATA0.getValue());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("[CDATA: http://www.w3.org/XML/1998/namespace]", string1);
      
      JDOMNodePointer jDOMNodePointer3 = (JDOMNodePointer)jDOMNodePointer2.clone();
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isContainer());
      assertTrue(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer2.isContainer());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertFalse(jDOMNodePointer2.isCollection());
      assertTrue(jDOMNodePointer2.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertTrue(jDOMNodePointer2.isRoot());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertFalse(jDOMNodePointer3.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer3.getIndex());
      assertFalse(jDOMNodePointer3.isAttribute());
      assertFalse(jDOMNodePointer3.isCollection());
      assertTrue(jDOMNodePointer3.isNode());
      assertTrue(jDOMNodePointer3.isRoot());
      assertNull(jDOMNodePointer3.getNamespaceURI());
      assertEquals(1, jDOMNodePointer3.getLength());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer0));
      assertTrue(jDOMNodePointer3.equals((Object)jDOMNodePointer2));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer3);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer3);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer3);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer3);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer3, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer3, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer3, jDOMNodePointer0);
      
      cDATA0.append("http://www.w3.org/XML/1998/namespace");
      assertEquals("http://www.w3.org/XML/1998/namespacehttp://www.w3.org/XML/1998/namespace", cDATA0.getValue());
      assertEquals("http://www.w3.org/XML/1998/namespacehttp://www.w3.org/XML/1998/namespace", cDATA0.getText());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "http://www.w3.org/2000/xmlns/");
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(nodeNameTest0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", nodeNameTest0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer3));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodeNameTest0);
      
      CDATA cDATA1 = new CDATA("");
      assertEquals("", cDATA1.getText());
      assertEquals("", cDATA1.getValue());
      assertFalse(cDATA1.equals((Object)cDATA0));
      assertNotNull(cDATA1);
      
      JDOMNodePointer jDOMNodePointer4 = new JDOMNodePointer(cDATA1, locale0, "mGAW`+U&");
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", cDATA1.getText());
      assertEquals("", cDATA1.getValue());
      assertFalse(jDOMNodePointer4.isContainer());
      assertEquals(1, jDOMNodePointer4.getLength());
      assertNull(jDOMNodePointer4.getNamespaceURI());
      assertTrue(jDOMNodePointer4.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer4.getIndex());
      assertTrue(jDOMNodePointer4.isNode());
      assertFalse(jDOMNodePointer4.isAttribute());
      assertFalse(jDOMNodePointer4.isCollection());
      assertFalse(cDATA1.equals((Object)cDATA0));
      assertFalse(jDOMNodePointer4.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer4.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer4.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer4.equals((Object)jDOMNodePointer3));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer4);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer4.setValue("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      QName qName0 = new QName("3.q|C Nz");
      assertEquals("3.q|C Nz", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("3.q|C Nz", qName0.toString());
      assertNotNull(qName0);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(qName0, locale0, "3.q|C Nz");
      assertEquals("3.q|C Nz", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("3.q|C Nz", qName0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) "3.q|C Nz");
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName1 = jDOMNodePointer0.getName();
      assertEquals("3.q|C Nz", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("3.q|C Nz", qName0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(qName1.toString());
      assertNull(qName1.getName());
      assertNull(qName1.getPrefix());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName1);
      assertNotSame(qName0, qName1);
      assertNotSame(qName1, qName0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createChild((JXPathContext) null, qName1, 2, (Object) "3.q|C Nz");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory", "org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory");
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory", processingInstruction0.getValue());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory", processingInstruction0.getTarget());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory", processingInstruction0.getData());
      assertNotNull(processingInstruction0);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction0, locale0);
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory", processingInstruction0.getValue());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory", processingInstruction0.getTarget());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory", processingInstruction0.getData());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      Object object0 = jDOMNodePointer0.getValue();
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory", processingInstruction0.getValue());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory", processingInstruction0.getTarget());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory", processingInstruction0.getData());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(object0);
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory", object0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      boolean boolean0 = jDOMNodePointer0.testNode((NodeTest) null);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("", locale0, "");
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer("", locale0, "");
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertTrue(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer(locale0, locale0);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isCollection());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer2.isRoot());
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer2);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("_XIzoK??g;h9*tm^");
      assertEquals("_XIzoK??g;h9*tm^", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Integer integer0 = new Integer(Integer.MIN_VALUE);
      assertNotNull(integer0);
      assertEquals(Integer.MIN_VALUE, (int)integer0);
      
      CDATA cDATA0 = new CDATA("<<unknown namespace>>");
      assertEquals("<<unknown namespace>>", cDATA0.getValue());
      assertEquals("<<unknown namespace>>", cDATA0.getText());
      assertNotNull(cDATA0);
      
      JDOMNodePointer jDOMNodePointer3 = new JDOMNodePointer(jDOMNodePointer1, "");
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertTrue(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertNull(jDOMNodePointer3.getNamespaceURI());
      assertEquals(1, jDOMNodePointer3.getLength());
      assertFalse(jDOMNodePointer3.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer3.getIndex());
      assertTrue(jDOMNodePointer3.isNode());
      assertFalse(jDOMNodePointer3.isRoot());
      assertFalse(jDOMNodePointer3.isAttribute());
      assertFalse(jDOMNodePointer3.isCollection());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer3);
      
      Object object1 = jDOMNodePointer0.getValue();
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer3));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(object1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer3);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1911870082));
      assertEquals((-1911870082), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      boolean boolean0 = jDOMNodePointer0.equals(jDOMNodePointer3);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertNull(jDOMNodePointer3.getNamespaceURI());
      assertEquals(1, jDOMNodePointer3.getLength());
      assertFalse(jDOMNodePointer3.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer3.getIndex());
      assertTrue(jDOMNodePointer3.isNode());
      assertFalse(jDOMNodePointer3.isRoot());
      assertFalse(jDOMNodePointer3.isAttribute());
      assertFalse(jDOMNodePointer3.isCollection());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer3));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer3));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer3);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer3);
      assertNotSame(jDOMNodePointer3, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer3, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer3, jDOMNodePointer0);
      assertFalse(boolean0);
      
      ProcessingInstruction processingInstruction0 = null;
      try {
        processingInstruction0 = new ProcessingInstruction("_XIzoK??g;h9*tm^", (Map) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The target \"_XIzoK??g;h9*tm^\" is not legal for JDOM/XML Processing Instructions: XML names cannot contain the character \"?\".
         //
         verifyException("org.jdom.ProcessingInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CDATA cDATA0 = new CDATA("mGAW`+U&");
      assertEquals("mGAW`+U&", cDATA0.getText());
      assertEquals("mGAW`+U&", cDATA0.getValue());
      assertNotNull(cDATA0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Integer integer0 = new Integer(58);
      assertNotNull(integer0);
      assertEquals(58, (int)integer0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(integer0, locale0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1868));
      assertEquals((-1868), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      String string0 = nodeTypeTest0.toString();
      assertEquals((-1868), nodeTypeTest0.getNodeType());
      assertNotNull(string0);
      assertEquals("UNKNOWN()", string0);
      
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(91);
      assertEquals(91, nodeTypeTest1.getNodeType());
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertNotNull(nodeTypeTest1);
      
      Locale locale1 = Locale.CANADA_FRENCH;
      assertEquals("CA", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(nodeTypeTest1, locale1, "::Wo");
      assertEquals(91, nodeTypeTest1.getNodeType());
      assertEquals("CA", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      boolean boolean0 = jDOMNodePointer0.isLanguage("substring-after");
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(locale0, locale1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertFalse(boolean0);
      
      Document document0 = new Document();
      assertFalse(document0.hasRootElement());
      assertEquals(0, document0.getContentSize());
      assertNull(document0.getBaseURI());
      assertNotNull(document0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Attribute attribute0 = new Attribute("GJDIZlayTXZy", "org.apache.commons.jxpath.ri.compiler.NodeNameTest@0000000005");
      assertEquals("", attribute0.getNamespacePrefix());
      assertEquals("", attribute0.getNamespaceURI());
      assertEquals("GJDIZlayTXZy", attribute0.getName());
      assertEquals(0, attribute0.getAttributeType());
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertNotNull(attribute0);
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer(attribute0, (Locale) null, "&&QVb~X]@9");
      assertEquals("", attribute0.getNamespacePrefix());
      assertEquals("", attribute0.getNamespaceURI());
      assertEquals("GJDIZlayTXZy", attribute0.getName());
      assertEquals(0, attribute0.getAttributeType());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertTrue(jDOMNodePointer2.isRoot());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer2);
      
      Namespace namespace0 = Namespace.getNamespace("vD");
      assertEquals("", namespace0.getPrefix());
      assertEquals("vD", namespace0.getURI());
      assertNotNull(namespace0);
      
      String string1 = JDOMNodePointer.findEnclosingAttribute("GJDIZlayTXZy", ",1]-%j(;", namespace0);
      assertEquals("", namespace0.getPrefix());
      assertEquals("vD", namespace0.getURI());
      assertNull(string1);
      
      Text text0 = cDATA0.setText("http://www.w3.org/2000/xmlns/");
      assertEquals("http://www.w3.org/2000/xmlns/", text0.getText());
      assertEquals("http://www.w3.org/2000/xmlns/", text0.getValue());
      assertEquals("http://www.w3.org/2000/xmlns/", cDATA0.getText());
      assertEquals("http://www.w3.org/2000/xmlns/", cDATA0.getValue());
      assertNotNull(text0);
      assertSame(text0, cDATA0);
      assertSame(cDATA0, text0);
      
      JDOMNodePointer jDOMNodePointer3 = new JDOMNodePointer(jDOMNodePointer2, text0);
      assertEquals("http://www.w3.org/2000/xmlns/", text0.getText());
      assertEquals("http://www.w3.org/2000/xmlns/", text0.getValue());
      assertEquals("http://www.w3.org/2000/xmlns/", cDATA0.getText());
      assertEquals("http://www.w3.org/2000/xmlns/", cDATA0.getValue());
      assertEquals(1, jDOMNodePointer3.getLength());
      assertNull(jDOMNodePointer3.getNamespaceURI());
      assertFalse(jDOMNodePointer3.isAttribute());
      assertTrue(jDOMNodePointer3.isNode());
      assertFalse(jDOMNodePointer3.isCollection());
      assertFalse(jDOMNodePointer3.isRoot());
      assertFalse(jDOMNodePointer3.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer3.getIndex());
      assertEquals("", attribute0.getNamespacePrefix());
      assertEquals("", attribute0.getNamespaceURI());
      assertEquals("GJDIZlayTXZy", attribute0.getName());
      assertEquals(0, attribute0.getAttributeType());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertTrue(jDOMNodePointer2.isRoot());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer3);
      
      JDOMNodePointer jDOMNodePointer4 = new JDOMNodePointer(jDOMNodePointer1, jDOMNodePointer3);
      assertEquals("http://www.w3.org/2000/xmlns/", text0.getText());
      assertEquals("http://www.w3.org/2000/xmlns/", text0.getValue());
      assertEquals("http://www.w3.org/2000/xmlns/", cDATA0.getText());
      assertEquals("http://www.w3.org/2000/xmlns/", cDATA0.getValue());
      assertEquals(1, jDOMNodePointer3.getLength());
      assertNull(jDOMNodePointer3.getNamespaceURI());
      assertFalse(jDOMNodePointer3.isAttribute());
      assertTrue(jDOMNodePointer3.isNode());
      assertFalse(jDOMNodePointer3.isCollection());
      assertFalse(jDOMNodePointer3.isRoot());
      assertFalse(jDOMNodePointer3.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer3.getIndex());
      assertFalse(jDOMNodePointer4.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer4.getIndex());
      assertNull(jDOMNodePointer4.getNamespaceURI());
      assertEquals(1, jDOMNodePointer4.getLength());
      assertFalse(jDOMNodePointer4.isCollection());
      assertTrue(jDOMNodePointer4.isNode());
      assertFalse(jDOMNodePointer4.isAttribute());
      assertFalse(jDOMNodePointer4.isRoot());
      assertEquals(91, nodeTypeTest1.getNodeType());
      assertEquals("CA", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals("", attribute0.getNamespacePrefix());
      assertEquals("", attribute0.getNamespaceURI());
      assertEquals("GJDIZlayTXZy", attribute0.getName());
      assertEquals(0, attribute0.getAttributeType());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertTrue(jDOMNodePointer2.isRoot());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer4.equals((Object)jDOMNodePointer3));
      assertFalse(jDOMNodePointer4.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer4.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer4.equals((Object)jDOMNodePointer1));
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer3));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer3));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer4);
      
      int int0 = jDOMNodePointer0.compareChildNodePointers(jDOMNodePointer1, jDOMNodePointer2);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(91, nodeTypeTest1.getNodeType());
      assertEquals("CA", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals("", attribute0.getNamespacePrefix());
      assertEquals("", attribute0.getNamespaceURI());
      assertEquals("GJDIZlayTXZy", attribute0.getName());
      assertEquals(0, attribute0.getAttributeType());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertTrue(jDOMNodePointer2.isRoot());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer4));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer3));
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer4));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer3));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer3));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer4));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(locale0, locale1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer4);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer3);
      assertNotSame(nodeTypeTest1, nodeTypeTest0);
      assertNotSame(locale1, locale0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer4);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer3);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer3);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer4);
      assertEquals(1, int0);
      
      JDOMNodePointer jDOMNodePointer5 = (JDOMNodePointer)jDOMNodePointer4.getImmediateNode();
      assertEquals("http://www.w3.org/2000/xmlns/", text0.getText());
      assertEquals("http://www.w3.org/2000/xmlns/", text0.getValue());
      assertEquals("http://www.w3.org/2000/xmlns/", cDATA0.getText());
      assertEquals("http://www.w3.org/2000/xmlns/", cDATA0.getValue());
      assertEquals(1, jDOMNodePointer3.getLength());
      assertNull(jDOMNodePointer3.getNamespaceURI());
      assertFalse(jDOMNodePointer3.isAttribute());
      assertTrue(jDOMNodePointer3.isNode());
      assertFalse(jDOMNodePointer3.isCollection());
      assertFalse(jDOMNodePointer3.isRoot());
      assertFalse(jDOMNodePointer3.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer3.getIndex());
      assertFalse(jDOMNodePointer4.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer4.getIndex());
      assertNull(jDOMNodePointer4.getNamespaceURI());
      assertEquals(1, jDOMNodePointer4.getLength());
      assertFalse(jDOMNodePointer4.isCollection());
      assertTrue(jDOMNodePointer4.isNode());
      assertFalse(jDOMNodePointer4.isAttribute());
      assertFalse(jDOMNodePointer4.isRoot());
      assertFalse(jDOMNodePointer5.isAttribute());
      assertFalse(jDOMNodePointer5.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer5.getIndex());
      assertEquals(1, jDOMNodePointer5.getLength());
      assertNull(jDOMNodePointer5.getNamespaceURI());
      assertTrue(jDOMNodePointer5.isNode());
      assertFalse(jDOMNodePointer5.isCollection());
      assertFalse(jDOMNodePointer5.isRoot());
      assertEquals(91, nodeTypeTest1.getNodeType());
      assertEquals("CA", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals("", attribute0.getNamespacePrefix());
      assertEquals("", attribute0.getNamespaceURI());
      assertEquals("GJDIZlayTXZy", attribute0.getName());
      assertEquals(0, attribute0.getAttributeType());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertTrue(jDOMNodePointer2.isRoot());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer4));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer4.equals((Object)jDOMNodePointer3));
      assertFalse(jDOMNodePointer4.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer4.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer4.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer5.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer5.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer5.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer5.equals((Object)jDOMNodePointer4));
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer4));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer3));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer3));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer4));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer5);
      assertSame(text0, cDATA0);
      assertSame(cDATA0, text0);
      assertNotSame(jDOMNodePointer3, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer3, jDOMNodePointer4);
      assertSame(jDOMNodePointer3, jDOMNodePointer5);
      assertNotSame(jDOMNodePointer3, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer3, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer4, jDOMNodePointer3);
      assertNotSame(jDOMNodePointer4, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer4, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer4, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer4, jDOMNodePointer5);
      assertNotSame(jDOMNodePointer5, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer5, jDOMNodePointer2);
      assertSame(jDOMNodePointer5, jDOMNodePointer3);
      assertNotSame(jDOMNodePointer5, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer5, jDOMNodePointer4);
      assertNotSame(nodeTypeTest1, nodeTypeTest0);
      assertNotSame(locale1, locale0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer4);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer5);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer3);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer5);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer3);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer4);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Integer integer0 = new Integer(62);
      assertNotNull(integer0);
      assertEquals(62, (int)integer0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(integer0, locale0);
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Locale locale1 = Locale.CANADA_FRENCH;
      assertEquals("fr_CA", locale1.toString());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("CA", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(nodeTypeTest0, locale1, "<<unknown namespace>>");
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("CA", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertTrue(jDOMNodePointer1.isRoot());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      Attribute attribute0 = new Attribute("GJDIZayTXZy", "GJDIZayTXZy");
      assertEquals(0, attribute0.getAttributeType());
      assertEquals("GJDIZayTXZy", attribute0.getValue());
      assertEquals("", attribute0.getNamespacePrefix());
      assertEquals("", attribute0.getNamespaceURI());
      assertEquals("GJDIZayTXZy", attribute0.getName());
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertNotNull(attribute0);
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer(attribute0, locale1, "http://www.w3.org/XML/1998/namespace");
      assertEquals("fr_CA", locale1.toString());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("CA", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals(0, attribute0.getAttributeType());
      assertEquals("GJDIZayTXZy", attribute0.getValue());
      assertEquals("", attribute0.getNamespacePrefix());
      assertEquals("", attribute0.getNamespaceURI());
      assertEquals("GJDIZayTXZy", attribute0.getName());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isContainer());
      assertTrue(jDOMNodePointer2.isRoot());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer2);
      
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(6);
      assertEquals(6, nodeTypeTest1.getNodeType());
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertNotNull(nodeTypeTest1);
      
      int int0 = jDOMNodePointer1.compareChildNodePointers(jDOMNodePointer0, jDOMNodePointer2);
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("CA", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertTrue(jDOMNodePointer1.isRoot());
      assertEquals(0, attribute0.getAttributeType());
      assertEquals("GJDIZayTXZy", attribute0.getValue());
      assertEquals("", attribute0.getNamespacePrefix());
      assertEquals("", attribute0.getNamespaceURI());
      assertEquals("GJDIZayTXZy", attribute0.getName());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isContainer());
      assertTrue(jDOMNodePointer2.isRoot());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(nodeTypeTest0.equals((Object)nodeTypeTest1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(locale0, locale1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(nodeTypeTest0, nodeTypeTest1);
      assertNotSame(locale1, locale0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      assertEquals(1, int0);
      
      String string0 = JDOMNodePointer.findEnclosingAttribute(locale1, (String) null, (Namespace) null);
      assertEquals("fr_CA", locale1.toString());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("CA", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertFalse(locale1.equals((Object)locale0));
      assertNull(string0);
      assertNotSame(locale1, locale0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.UK;
      assertEquals("", locale1.getVariant());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("en_GB", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertEquals("GB", locale1.getCountry());
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("", locale1, "");
      assertEquals("", locale1.getVariant());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("en_GB", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertEquals("GB", locale1.getCountry());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(locale1.equals((Object)locale0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      Object object0 = jDOMNodePointer0.getBaseValue();
      assertEquals("", locale1.getVariant());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("en_GB", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertEquals("GB", locale1.getCountry());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(locale1.equals((Object)locale0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(object0);
      assertNotSame(locale1, locale0);
      assertEquals("", object0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(locale1, locale1);
      assertEquals("", locale1.getVariant());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("en_GB", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertEquals("GB", locale1.getCountry());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertTrue(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      NamespaceResolver namespaceResolver0 = jDOMNodePointer1.getNamespaceResolver();
      assertEquals("", locale1.getVariant());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("en_GB", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertEquals("GB", locale1.getCountry());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertTrue(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(namespaceResolver0.isSealed());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(namespaceResolver0);
      assertNotSame(locale1, locale0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "");
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      boolean boolean0 = jDOMNodePointer1.isLeaf();
      assertEquals("", locale1.getVariant());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("en_GB", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertEquals("GB", locale1.getCountry());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertTrue(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(locale1, locale0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertTrue(boolean0);
      
      int int0 = jDOMNodePointer1.compareChildNodePointers(jDOMNodePointer0, jDOMNodePointer0);
      assertEquals("", locale1.getVariant());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("en_GB", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertEquals("GB", locale1.getCountry());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertTrue(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(locale1, locale0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals(0, int0);
      
      String string0 = jDOMNodePointer1.getNamespaceURI(":H{2EXRGo*s|G9>LO");
      assertEquals("", locale1.getVariant());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("en_GB", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertEquals("GB", locale1.getCountry());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertTrue(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(string0);
      assertNotSame(locale1, locale0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      
      boolean boolean1 = jDOMNodePointer1.isLanguage("");
      assertEquals("", locale1.getVariant());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("en_GB", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertEquals("GB", locale1.getCountry());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertTrue(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertTrue(boolean1 == boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(locale1, locale0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertNotNull(locale0);
      
      Integer integer0 = new Integer(59);
      assertNotNull(integer0);
      assertEquals(59, (int)integer0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(integer0, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      Attribute attribute0 = new Attribute("GJDIZayTXZy", "GJDIZayTXZy");
      assertEquals(0, attribute0.getAttributeType());
      assertEquals("GJDIZayTXZy", attribute0.getName());
      assertEquals("", attribute0.getNamespacePrefix());
      assertEquals("", attribute0.getNamespaceURI());
      assertEquals("GJDIZayTXZy", attribute0.getValue());
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertNotNull(attribute0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(attribute0, locale0, "http://www.w3.org/XML/1998/namespace");
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals(0, attribute0.getAttributeType());
      assertEquals("GJDIZayTXZy", attribute0.getName());
      assertEquals("", attribute0.getNamespacePrefix());
      assertEquals("", attribute0.getNamespaceURI());
      assertEquals("GJDIZayTXZy", attribute0.getValue());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      int int0 = jDOMNodePointer0.compareChildNodePointers(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(0, attribute0.getAttributeType());
      assertEquals("GJDIZayTXZy", attribute0.getName());
      assertEquals("", attribute0.getNamespacePrefix());
      assertEquals("", attribute0.getNamespaceURI());
      assertEquals("GJDIZayTXZy", attribute0.getValue());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CDATA cDATA0 = new CDATA("mGAW`+U&");
      assertEquals("mGAW`+U&", cDATA0.getText());
      assertEquals("mGAW`+U&", cDATA0.getValue());
      assertNotNull(cDATA0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Integer integer0 = new Integer(58);
      assertNotNull(integer0);
      assertEquals(58, (int)integer0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(integer0, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1868));
      assertEquals((-1868), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      String string0 = nodeTypeTest0.toString();
      assertEquals((-1868), nodeTypeTest0.getNodeType());
      assertNotNull(string0);
      assertEquals("UNKNOWN()", string0);
      
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(91);
      assertEquals(91, nodeTypeTest1.getNodeType());
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertNotNull(nodeTypeTest1);
      
      Locale locale1 = Locale.CANADA_FRENCH;
      assertEquals("fr_CA", locale1.toString());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("CA", locale1.getCountry());
      assertEquals("fra", locale1.getISO3Language());
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(nodeTypeTest1, locale1, "::Wo");
      assertEquals(91, nodeTypeTest1.getNodeType());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("CA", locale1.getCountry());
      assertEquals("fra", locale1.getISO3Language());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.isContainer());
      assertTrue(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      boolean boolean0 = jDOMNodePointer0.isLanguage("substring-after");
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(locale0, locale1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertFalse(boolean0);
      
      Document document0 = new Document();
      assertEquals(0, document0.getContentSize());
      assertFalse(document0.hasRootElement());
      assertNull(document0.getBaseURI());
      assertNotNull(document0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Attribute attribute0 = new Attribute("GJDIZlayTXZy", "org.apache.commons.jxpath.ri.compiler.NodeNameTest@0000000005");
      assertEquals("", attribute0.getNamespacePrefix());
      assertEquals("", attribute0.getNamespaceURI());
      assertEquals("GJDIZlayTXZy", attribute0.getName());
      assertEquals(0, attribute0.getAttributeType());
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertNotNull(attribute0);
      
      Attribute attribute1 = attribute0.setValue(".:W[Dp1&!Lc.29W+Kw");
      assertEquals("", attribute0.getNamespacePrefix());
      assertEquals("", attribute0.getNamespaceURI());
      assertEquals("GJDIZlayTXZy", attribute0.getName());
      assertEquals(0, attribute0.getAttributeType());
      assertEquals(".:W[Dp1&!Lc.29W+Kw", attribute0.getValue());
      assertEquals(0, attribute1.getAttributeType());
      assertEquals(".:W[Dp1&!Lc.29W+Kw", attribute1.getValue());
      assertEquals("", attribute1.getNamespacePrefix());
      assertEquals("", attribute1.getNamespaceURI());
      assertEquals("GJDIZlayTXZy", attribute1.getName());
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertNotNull(attribute1);
      assertSame(attribute0, attribute1);
      assertSame(attribute1, attribute0);
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer(attribute1, (Locale) null, "&&QVb~X]@9");
      assertEquals("", attribute0.getNamespacePrefix());
      assertEquals("", attribute0.getNamespaceURI());
      assertEquals("GJDIZlayTXZy", attribute0.getName());
      assertEquals(0, attribute0.getAttributeType());
      assertEquals(".:W[Dp1&!Lc.29W+Kw", attribute0.getValue());
      assertEquals(0, attribute1.getAttributeType());
      assertEquals(".:W[Dp1&!Lc.29W+Kw", attribute1.getValue());
      assertEquals("", attribute1.getNamespacePrefix());
      assertEquals("", attribute1.getNamespaceURI());
      assertEquals("GJDIZlayTXZy", attribute1.getName());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertFalse(jDOMNodePointer2.isCollection());
      assertTrue(jDOMNodePointer2.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer2);
      
      QName qName0 = new QName("http://www.w3.org/2000/xmlns/", "http://www.w3.org/XML/1998/namespace");
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getName());
      assertEquals("http://www.w3.org/2000/xmlns/:http://www.w3.org/XML/1998/namespace", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getPrefix());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getName());
      assertEquals("http://www.w3.org/2000/xmlns/:http://www.w3.org/XML/1998/namespace", qName0.toString());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("<<unknown namespace>>");
      assertEquals("<<unknown namespace>>", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("::Wo");
      assertEquals("::Wo", processingInstructionTest1.getTarget());
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
      assertNotNull(processingInstructionTest1);
      
      JDOMNodePointer jDOMNodePointer3 = new JDOMNodePointer(jDOMNodePointer0, processingInstructionTest1);
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("::Wo", processingInstructionTest1.getTarget());
      assertFalse(jDOMNodePointer3.isCollection());
      assertFalse(jDOMNodePointer3.isRoot());
      assertFalse(jDOMNodePointer3.isAttribute());
      assertTrue(jDOMNodePointer3.isNode());
      assertEquals(1, jDOMNodePointer3.getLength());
      assertNull(jDOMNodePointer3.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer3.getIndex());
      assertFalse(jDOMNodePointer3.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer3);
      
      JDOMNodePointer jDOMNodePointer4 = new JDOMNodePointer(locale0, locale0, "http://www.w3.org/2000/xmlns/");
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertFalse(jDOMNodePointer4.isContainer());
      assertTrue(jDOMNodePointer4.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer4.getIndex());
      assertFalse(jDOMNodePointer4.isAttribute());
      assertFalse(jDOMNodePointer4.isCollection());
      assertTrue(jDOMNodePointer4.isNode());
      assertEquals(1, jDOMNodePointer4.getLength());
      assertNull(jDOMNodePointer4.getNamespaceURI());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(jDOMNodePointer4.equals((Object)jDOMNodePointer3));
      assertFalse(jDOMNodePointer4.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer4.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer4.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer4);
      
      int int0 = jDOMNodePointer0.compareChildNodePointers(jDOMNodePointer2, jDOMNodePointer3);
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("::Wo", processingInstructionTest1.getTarget());
      assertFalse(jDOMNodePointer3.isCollection());
      assertFalse(jDOMNodePointer3.isRoot());
      assertFalse(jDOMNodePointer3.isAttribute());
      assertTrue(jDOMNodePointer3.isNode());
      assertEquals(1, jDOMNodePointer3.getLength());
      assertNull(jDOMNodePointer3.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer3.getIndex());
      assertFalse(jDOMNodePointer3.isContainer());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals("", attribute0.getNamespacePrefix());
      assertEquals("", attribute0.getNamespaceURI());
      assertEquals("GJDIZlayTXZy", attribute0.getName());
      assertEquals(0, attribute0.getAttributeType());
      assertEquals(".:W[Dp1&!Lc.29W+Kw", attribute0.getValue());
      assertEquals(0, attribute1.getAttributeType());
      assertEquals(".:W[Dp1&!Lc.29W+Kw", attribute1.getValue());
      assertEquals("", attribute1.getNamespacePrefix());
      assertEquals("", attribute1.getNamespaceURI());
      assertEquals("GJDIZlayTXZy", attribute1.getName());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertFalse(jDOMNodePointer2.isCollection());
      assertTrue(jDOMNodePointer2.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer4));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer3));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer4));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer3));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer4));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(0, Attribute.UNDECLARED_TYPE);
      assertEquals(2, Attribute.ID_TYPE);
      assertEquals(6, Attribute.ENTITIES_TYPE);
      assertEquals(4, Attribute.IDREFS_TYPE);
      assertEquals(5, Attribute.ENTITY_TYPE);
      assertEquals(10, Attribute.ENUMERATED_TYPE);
      assertEquals(7, Attribute.NMTOKEN_TYPE);
      assertEquals(1, Attribute.CDATA_TYPE);
      assertEquals(8, Attribute.NMTOKENS_TYPE);
      assertEquals(3, Attribute.IDREF_TYPE);
      assertEquals(9, Attribute.NOTATION_TYPE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(locale0, locale1);
      assertNotSame(processingInstructionTest1, processingInstructionTest0);
      assertNotSame(jDOMNodePointer3, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer3, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer3, jDOMNodePointer4);
      assertNotSame(jDOMNodePointer3, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer3);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer4);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertSame(attribute0, attribute1);
      assertSame(attribute1, attribute0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer3);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer4);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.KOREAN;
      assertEquals("", locale1.getCountry());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("ko", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale1, locale0, (String) null);
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("ko", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.getNamespaceURI((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0, "");
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, locale0, "http://www.w3.org/2000/xmlns/");
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      Object object0 = jDOMNodePointer0.getBaseValue();
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(object0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer((Object) jDOMNodePointer0, locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer2.isRoot());
      assertFalse(jDOMNodePointer2.isCollection());
      assertTrue(jDOMNodePointer2.isNode());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertTrue(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer2);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("lang");
      assertEquals("lang", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Integer integer0 = new Integer(1145);
      assertNotNull(integer0);
      assertEquals(1145, (int)integer0);
      
      CDATA cDATA0 = new CDATA("");
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      assertNotNull(cDATA0);
      
      JDOMNodePointer jDOMNodePointer3 = new JDOMNodePointer(jDOMNodePointer0, cDATA0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      assertTrue(jDOMNodePointer3.isNode());
      assertFalse(jDOMNodePointer3.isCollection());
      assertFalse(jDOMNodePointer3.isRoot());
      assertFalse(jDOMNodePointer3.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer3.getIndex());
      assertFalse(jDOMNodePointer3.isContainer());
      assertEquals(1, jDOMNodePointer3.getLength());
      assertNull(jDOMNodePointer3.getNamespaceURI());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer3);
      
      Object object1 = jDOMNodePointer1.getValue();
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer3));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer3));
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(object1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer3);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer3);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2213));
      assertEquals((-2213), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      boolean boolean0 = jDOMNodePointer1.equals(jDOMNodePointer0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer3));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer3));
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer3);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer3);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertFalse(boolean0);
      
      JDOMNodePointer jDOMNodePointer4 = new JDOMNodePointer(jDOMNodePointer3, jDOMNodePointer1);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      assertTrue(jDOMNodePointer3.isNode());
      assertFalse(jDOMNodePointer3.isCollection());
      assertFalse(jDOMNodePointer3.isRoot());
      assertFalse(jDOMNodePointer3.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer3.getIndex());
      assertFalse(jDOMNodePointer3.isContainer());
      assertEquals(1, jDOMNodePointer3.getLength());
      assertNull(jDOMNodePointer3.getNamespaceURI());
      assertFalse(jDOMNodePointer4.isCollection());
      assertFalse(jDOMNodePointer4.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer4.getIndex());
      assertFalse(jDOMNodePointer4.isContainer());
      assertEquals(1, jDOMNodePointer4.getLength());
      assertNull(jDOMNodePointer4.getNamespaceURI());
      assertFalse(jDOMNodePointer4.isAttribute());
      assertTrue(jDOMNodePointer4.isNode());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer3));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer3));
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer4.equals((Object)jDOMNodePointer3));
      assertFalse(jDOMNodePointer4.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer4.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer4.equals((Object)jDOMNodePointer2));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer4);
      
      NamespaceResolver namespaceResolver0 = jDOMNodePointer4.getNamespaceResolver();
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      assertTrue(jDOMNodePointer3.isNode());
      assertFalse(jDOMNodePointer3.isCollection());
      assertFalse(jDOMNodePointer3.isRoot());
      assertFalse(jDOMNodePointer3.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer3.getIndex());
      assertFalse(jDOMNodePointer3.isContainer());
      assertEquals(1, jDOMNodePointer3.getLength());
      assertNull(jDOMNodePointer3.getNamespaceURI());
      assertFalse(jDOMNodePointer4.isCollection());
      assertFalse(jDOMNodePointer4.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer4.getIndex());
      assertFalse(jDOMNodePointer4.isContainer());
      assertEquals(1, jDOMNodePointer4.getLength());
      assertNull(jDOMNodePointer4.getNamespaceURI());
      assertFalse(jDOMNodePointer4.isAttribute());
      assertTrue(jDOMNodePointer4.isNode());
      assertFalse(namespaceResolver0.isSealed());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer3));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer4));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer3));
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer4));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer4));
      assertFalse(jDOMNodePointer4.equals((Object)jDOMNodePointer3));
      assertFalse(jDOMNodePointer4.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer4.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer4.equals((Object)jDOMNodePointer2));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(namespaceResolver0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer3);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer4);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer3);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer4);
      assertNotSame(jDOMNodePointer3, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer3, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer3, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer3, jDOMNodePointer4);
      assertNotSame(jDOMNodePointer4, jDOMNodePointer3);
      assertNotSame(jDOMNodePointer4, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer4, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer4, jDOMNodePointer2);
      
      String string0 = jDOMNodePointer3.asPath();
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals("", cDATA0.getValue());
      assertEquals("", cDATA0.getText());
      assertTrue(jDOMNodePointer3.isNode());
      assertFalse(jDOMNodePointer3.isCollection());
      assertFalse(jDOMNodePointer3.isRoot());
      assertFalse(jDOMNodePointer3.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer3.getIndex());
      assertFalse(jDOMNodePointer3.isContainer());
      assertEquals(1, jDOMNodePointer3.getLength());
      assertNull(jDOMNodePointer3.getNamespaceURI());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer3));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer4));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer4));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(string0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer3);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer4);
      assertNotSame(jDOMNodePointer3, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer3, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer3, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer3, jDOMNodePointer4);
      assertEquals("id('')/text()[1]", string0);
      
      jDOMNodePointer3.setValue(cDATA0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer3.isNode());
      assertFalse(jDOMNodePointer3.isCollection());
      assertFalse(jDOMNodePointer3.isRoot());
      assertFalse(jDOMNodePointer3.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer3.getIndex());
      assertFalse(jDOMNodePointer3.isContainer());
      assertEquals(1, jDOMNodePointer3.getLength());
      assertNull(jDOMNodePointer3.getNamespaceURI());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer3));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer4));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer4));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer3);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer4);
      assertNotSame(jDOMNodePointer3, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer3, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer3, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer3, jDOMNodePointer4);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CDATA cDATA0 = new CDATA((String) null);
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      assertNotNull(cDATA0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      String string0 = jDOMNodePointer0.asPath();
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isContainer());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(string0);
      assertEquals("/text()[1]", string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodeTypeTest0, locale0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      String string0 = nodeTypeTest0.toString();
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertNotNull(string0);
      assertEquals("node()", string0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(nodeTypeTest0, (Locale) null, "<<unknown namespace>>");
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertFalse(jDOMNodePointer1.isContainer());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isRoot());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      NamespaceResolver namespaceResolver0 = jDOMNodePointer1.getNamespaceResolver();
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertFalse(jDOMNodePointer1.isContainer());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.isRoot());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(namespaceResolver0.isSealed());
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(namespaceResolver0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer(locale0, locale0, "node()");
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertFalse(jDOMNodePointer2.isCollection());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertTrue(jDOMNodePointer2.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isContainer());
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer2);
      
      String string1 = jDOMNodePointer0.getNamespaceURI();
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertTrue(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(string1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(Integer.MIN_VALUE);
      assertEquals(Integer.MIN_VALUE, nodeTypeTest1.getNodeType());
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertNotNull(nodeTypeTest1);
      
      boolean boolean0 = jDOMNodePointer0.testNode((NodeTest) nodeTypeTest0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(nodeTypeTest0.equals((Object)nodeTypeTest1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertTrue(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(nodeTypeTest0, nodeTypeTest1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertTrue(boolean0);
      
      NamespaceResolver namespaceResolver1 = jDOMNodePointer2.getNamespaceResolver();
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertFalse(jDOMNodePointer2.isCollection());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertTrue(jDOMNodePointer2.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isContainer());
      assertFalse(namespaceResolver1.isSealed());
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(namespaceResolver1.equals((Object)namespaceResolver0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(namespaceResolver1);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      assertNotSame(namespaceResolver1, namespaceResolver0);
      
      String string2 = jDOMNodePointer0.asPath();
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(nodeTypeTest0.equals((Object)nodeTypeTest1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertTrue(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(string2);
      assertNotSame(nodeTypeTest0, nodeTypeTest1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertEquals("", string2);
      
      Comment comment0 = new Comment("");
      assertEquals("", comment0.getValue());
      assertEquals("", comment0.getText());
      assertNotNull(comment0);
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.setValue("F'hgsm!rd@7");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.jxpath.ri.compiler.NodeTypeTest cannot be cast to org.jdom.Element
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      assertEquals(2, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) nodeTypeTest0, (NodeTest) nodeTypeTest0);
      assertEquals(2, nodeTypeTest0.getNodeType());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodeTypeTest0, locale0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(locale0, locale0, "http://www.w3.org/XML/1998/namespace");
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertTrue(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      boolean boolean0 = jDOMNodePointer0.testNode((NodeTest) nodeTypeTest0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertFalse(jDOMNodePointer0.isCollection());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isContainer());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertNotNull(locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodeTypeTest0, locale0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      String string0 = nodeTypeTest0.toString();
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertNotNull(string0);
      assertEquals("node()", string0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(nodeTypeTest0, (Locale) null, "<<unknown namespace>>");
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertTrue(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      boolean boolean0 = jDOMNodePointer0.isLanguage("http://www.w3.org/XML/1998/namespace");
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertFalse(boolean0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) "node()");
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      JXPathContext jXPathContext0 = jXPathContextReferenceImpl0.getParentContext();
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNull(jXPathContext0);
      
      Document document0 = new Document();
      assertFalse(document0.hasRootElement());
      assertNull(document0.getBaseURI());
      assertEquals(0, document0.getContentSize());
      assertNotNull(document0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer(object0, (Locale) null, "<<unknown namespace>>");
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer2.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer2);
      
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/XML/1998/namespace");
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/XML/1998/namespace", qName0.toString());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/XML/1998/namespace", qName0.toString());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      boolean boolean1 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) "node()", (NodeTest) nodeTypeTest0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(boolean1 == boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertTrue(boolean1);
      
      QName qName1 = new QName("Unknown namespace prefix: ");
      assertEquals("Unknown namespace prefix", qName1.getPrefix());
      assertEquals("Unknown namespace prefix: ", qName1.toString());
      assertEquals(" ", qName1.getName());
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      
      QName qName2 = jDOMNodePointer1.getName();
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertTrue(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertNull(qName2.getPrefix());
      assertNull(qName2.getName());
      assertNull(qName2.toString());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName2);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(qName2, qName1);
      assertNotSame(qName2, qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName2, "http://www.w3.org/2000/xmlns/");
      assertEquals("http://www.w3.org/2000/xmlns/", nodeNameTest0.getNamespaceURI());
      assertNull(nodeNameTest0.toString());
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertTrue(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertNull(qName2.getPrefix());
      assertNull(qName2.getName());
      assertNull(qName2.toString());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodeNameTest0);
      
      boolean boolean2 = jDOMNodePointer0.isLeaf();
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertTrue(boolean2);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName1, jDOMNodePointer0, locale0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals("Unknown namespace prefix", qName1.getPrefix());
      assertEquals("Unknown namespace prefix: ", qName1.toString());
      assertEquals(" ", qName1.getName());
      assertTrue(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(qName1.equals((Object)qName2));
      assertFalse(qName1.equals((Object)qName0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(qName1, qName2);
      assertNotSame(qName1, qName0);
      
      int int0 = jDOMNodePointer2.compareChildNodePointers(jDOMNodePointer1, jDOMNodePointer1);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertTrue(jDOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertFalse(jDOMNodePointer1.isContainer());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertTrue(jDOMNodePointer2.isRoot());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer2));
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CDATA cDATA0 = new CDATA("mGAW`+U&");
      assertEquals("mGAW`+U&", cDATA0.getText());
      assertEquals("mGAW`+U&", cDATA0.getValue());
      assertNotNull(cDATA0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("JP", locale1.getCountry());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja", locale1.getLanguage());
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0, "mGAW`+U&");
      assertEquals("mGAW`+U&", cDATA0.getText());
      assertEquals("mGAW`+U&", cDATA0.getValue());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      QName qName0 = jDOMNodePointer0.getName();
      assertEquals("mGAW`+U&", cDATA0.getText());
      assertEquals("mGAW`+U&", cDATA0.getValue());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      assertSame(locale0, locale1);
      
      String string0 = Text.normalizeString("http://www.w3.org/XML/1998/namespace");
      assertNotNull(string0);
      assertEquals("http://www.w3.org/XML/1998/namespace", string0);
      
      QName qName1 = jDOMNodePointer0.getName();
      assertEquals("mGAW`+U&", cDATA0.getText());
      assertEquals("mGAW`+U&", cDATA0.getValue());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNull(qName1.toString());
      assertNull(qName1.getName());
      assertNull(qName1.getPrefix());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName1);
      assertSame(locale0, locale1);
      assertNotSame(qName1, qName0);
      
      int int0 = jDOMNodePointer0.getLength();
      assertEquals("mGAW`+U&", cDATA0.getText());
      assertEquals("mGAW`+U&", cDATA0.getValue());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertSame(locale0, locale1);
      assertEquals(1, int0);
      
      Integer integer0 = new Integer(744);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(744, (int)integer0);
      
      CDATA cDATA1 = new CDATA((String) null);
      assertEquals("", cDATA1.getText());
      assertEquals("", cDATA1.getValue());
      assertFalse(cDATA1.equals((Object)cDATA0));
      assertNotNull(cDATA1);
      
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("normalize-space", "mGAW`+U&");
      assertEquals("mGAW`+U&", processingInstruction0.getData());
      assertEquals("mGAW`+U&", processingInstruction0.getValue());
      assertEquals("normalize-space", processingInstruction0.getTarget());
      assertNotNull(processingInstruction0);
      
      HashMap<Attribute, Element> hashMap0 = new HashMap<Attribute, Element>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      ProcessingInstruction processingInstruction1 = processingInstruction0.setData((Map) hashMap0);
      assertEquals("normalize-space", processingInstruction0.getTarget());
      assertEquals("", processingInstruction0.getData());
      assertEquals("", processingInstruction0.getValue());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("", processingInstruction1.getData());
      assertEquals("", processingInstruction1.getValue());
      assertEquals("normalize-space", processingInstruction1.getTarget());
      assertNotNull(processingInstruction1);
      assertSame(processingInstruction0, processingInstruction1);
      assertSame(processingInstruction1, processingInstruction0);
      
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, processingInstruction1);
      assertEquals("mGAW`+U&", cDATA0.getText());
      assertEquals("mGAW`+U&", cDATA0.getValue());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals("normalize-space", processingInstruction0.getTarget());
      assertEquals("", processingInstruction0.getData());
      assertEquals("", processingInstruction0.getValue());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("", processingInstruction1.getData());
      assertEquals("", processingInstruction1.getValue());
      assertEquals("normalize-space", processingInstruction1.getTarget());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(cDATA0.equals((Object)cDATA1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      
      Object object0 = jDOMNodePointer1.getValue();
      assertEquals("mGAW`+U&", cDATA0.getText());
      assertEquals("mGAW`+U&", cDATA0.getValue());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals("normalize-space", processingInstruction0.getTarget());
      assertEquals("", processingInstruction0.getData());
      assertEquals("", processingInstruction0.getValue());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("", processingInstruction1.getData());
      assertEquals("", processingInstruction1.getValue());
      assertEquals("normalize-space", processingInstruction1.getTarget());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertFalse(jDOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertTrue(jDOMNodePointer1.isNode());
      assertFalse(jDOMNodePointer1.isRoot());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isCollection());
      assertFalse(cDATA0.equals((Object)cDATA1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertFalse(object0.equals((Object)string0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(object0);
      assertNotSame(cDATA0, cDATA1);
      assertSame(locale0, locale1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertSame(processingInstruction0, processingInstruction1);
      assertSame(processingInstruction1, processingInstruction0);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      assertEquals("", object0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(515);
      assertEquals(515, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      boolean boolean0 = jDOMNodePointer0.equals(qName0);
      assertEquals("mGAW`+U&", cDATA0.getText());
      assertEquals("mGAW`+U&", cDATA0.getValue());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertFalse(cDATA0.equals((Object)cDATA1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(cDATA0, cDATA1);
      assertSame(locale0, locale1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(qName0, qName1);
      assertFalse(boolean0);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals("mGAW`+U&", cDATA0.getText());
      assertEquals("mGAW`+U&", cDATA0.getValue());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertFalse(cDATA0.equals((Object)cDATA1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer(variablePointer0, "normalize-space");
      assertEquals("mGAW`+U&", cDATA0.getText());
      assertEquals("mGAW`+U&", cDATA0.getValue());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(jDOMNodePointer2.isRoot());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertFalse(cDATA0.equals((Object)cDATA1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer2);
      
      NamespaceResolver namespaceResolver0 = jDOMNodePointer0.getNamespaceResolver();
      assertEquals("mGAW`+U&", cDATA0.getText());
      assertEquals("mGAW`+U&", cDATA0.getValue());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(namespaceResolver0.isSealed());
      assertFalse(cDATA0.equals((Object)cDATA1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(namespaceResolver0);
      assertNotSame(cDATA0, cDATA1);
      assertSame(locale0, locale1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      
      JDOMNodePointer jDOMNodePointer3 = new JDOMNodePointer(jDOMNodePointer2, "mGAW`+U&");
      assertEquals("mGAW`+U&", cDATA0.getText());
      assertEquals("mGAW`+U&", cDATA0.getValue());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(jDOMNodePointer2.isRoot());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertFalse(jDOMNodePointer3.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer3.getIndex());
      assertEquals(1, jDOMNodePointer3.getLength());
      assertNull(jDOMNodePointer3.getNamespaceURI());
      assertFalse(jDOMNodePointer3.isCollection());
      assertTrue(jDOMNodePointer3.isNode());
      assertFalse(jDOMNodePointer3.isRoot());
      assertFalse(jDOMNodePointer3.isContainer());
      assertFalse(cDATA0.equals((Object)cDATA1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer2));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer3);
      
      String string1 = jDOMNodePointer3.asPath();
      assertEquals("mGAW`+U&", cDATA0.getText());
      assertEquals("mGAW`+U&", cDATA0.getValue());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(jDOMNodePointer2.isCollection());
      assertFalse(jDOMNodePointer2.isRoot());
      assertTrue(jDOMNodePointer2.isNode());
      assertFalse(jDOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer2.getIndex());
      assertFalse(jDOMNodePointer2.isContainer());
      assertEquals(1, jDOMNodePointer2.getLength());
      assertNull(jDOMNodePointer2.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertFalse(jDOMNodePointer3.isAttribute());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer3.getIndex());
      assertEquals(1, jDOMNodePointer3.getLength());
      assertNull(jDOMNodePointer3.getNamespaceURI());
      assertFalse(jDOMNodePointer3.isCollection());
      assertTrue(jDOMNodePointer3.isNode());
      assertFalse(jDOMNodePointer3.isRoot());
      assertFalse(jDOMNodePointer3.isContainer());
      assertFalse(cDATA0.equals((Object)cDATA1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer2.equals((Object)jDOMNodePointer3));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer3));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer0));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer1));
      assertFalse(jDOMNodePointer3.equals((Object)jDOMNodePointer2));
      assertFalse(string1.equals((Object)object0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(string1);
      assertNotSame(cDATA0, cDATA1);
      assertSame(locale0, locale1);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer2, jDOMNodePointer3);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer3);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(qName0, qName1);
      assertNotSame(jDOMNodePointer3, jDOMNodePointer0);
      assertNotSame(jDOMNodePointer3, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer3, jDOMNodePointer2);
      assertEquals("$null", string1);
      
      jDOMNodePointer0.setValue(integer0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(cDATA0.equals((Object)cDATA1));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer3));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer2));
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(integer0.equals((Object)int0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(cDATA0, cDATA1);
      assertSame(locale0, locale1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer3);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer2);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      CDATA cDATA0 = new CDATA("");
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      assertNotNull(cDATA0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", cDATA0.getText());
      assertEquals("", cDATA0.getValue());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      jDOMNodePointer0.setValue(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertFalse(jDOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer0.isCollection());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertTrue(jDOMNodePointer0.isNode());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CDATA cDATA0 = new CDATA("mGAW`+U&");
      assertEquals("mGAW`+U&", cDATA0.getText());
      assertEquals("mGAW`+U&", cDATA0.getValue());
      assertNotNull(cDATA0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("JP", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("ja_JP", locale1.toString());
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0, "mGAW`+U&");
      assertEquals("mGAW`+U&", cDATA0.getText());
      assertEquals("mGAW`+U&", cDATA0.getValue());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertSame(locale0, locale1);
      
      QName qName0 = jDOMNodePointer0.getName();
      assertEquals("mGAW`+U&", cDATA0.getText());
      assertEquals("mGAW`+U&", cDATA0.getValue());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      assertSame(locale0, locale1);
      
      String string0 = Text.normalizeString("http://www.w3.org/XML/1998/namespace");
      assertNotNull(string0);
      assertEquals("http://www.w3.org/XML/1998/namespace", string0);
      
      QName qName1 = jDOMNodePointer0.getName();
      assertEquals("mGAW`+U&", cDATA0.getText());
      assertEquals("mGAW`+U&", cDATA0.getValue());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNull(qName1.toString());
      assertNull(qName1.getPrefix());
      assertNull(qName1.getName());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName1);
      assertSame(locale0, locale1);
      assertNotSame(qName1, qName0);
      
      int int0 = jDOMNodePointer0.getLength();
      assertEquals("mGAW`+U&", cDATA0.getText());
      assertEquals("mGAW`+U&", cDATA0.getValue());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertSame(locale0, locale1);
      assertEquals(1, int0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      CDATA cDATA1 = (CDATA)jDOMNodePointer0.getImmediateNode();
      assertEquals("mGAW`+U&", cDATA0.getText());
      assertEquals("mGAW`+U&", cDATA0.getValue());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertEquals("mGAW`+U&", cDATA1.getValue());
      assertEquals("mGAW`+U&", cDATA1.getText());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(cDATA1);
      assertSame(cDATA0, cDATA1);
      assertSame(locale0, locale1);
      assertSame(cDATA1, cDATA0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains("mGAW`+U&"));
      assertNotNull(linkedList1);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertFalse(list0.contains("mGAW`+U&"));
      assertFalse(linkedList1.contains("mGAW`+U&"));
      assertNotNull(list0);
      
      String string1 = locale0.getDisplayVariant();
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertSame(locale0, locale1);
      assertEquals("", string1);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("xml");
      assertEquals("xml", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      String string2 = cDATA0.toString();
      assertEquals("mGAW`+U&", cDATA0.getText());
      assertEquals("mGAW`+U&", cDATA0.getValue());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertSame(cDATA0, cDATA1);
      assertEquals("[CDATA: mGAW`+U&]", string2);
      
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) qName0, (NodeTest) processingInstructionTest0);
      assertEquals("mGAW`+U&", cDATA0.getText());
      assertEquals("mGAW`+U&", cDATA0.getValue());
      assertEquals("xml", processingInstructionTest0.getTarget());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertSame(cDATA0, cDATA1);
      assertSame(locale0, locale1);
      assertNotSame(qName0, qName1);
      assertFalse(boolean0);
      
      JDOMNodePointer jDOMNodePointer1 = (JDOMNodePointer)jDOMNodePointer0.clone();
      assertEquals("mGAW`+U&", cDATA0.getText());
      assertEquals("mGAW`+U&", cDATA0.getValue());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jDOMNodePointer1.isCollection());
      assertTrue(jDOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer1.getIndex());
      assertFalse(jDOMNodePointer1.isAttribute());
      assertFalse(jDOMNodePointer1.isContainer());
      assertTrue(jDOMNodePointer1.isRoot());
      assertEquals(1, jDOMNodePointer1.getLength());
      assertNull(jDOMNodePointer1.getNamespaceURI());
      assertTrue(jDOMNodePointer1.equals((Object)jDOMNodePointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jDOMNodePointer1);
      assertSame(cDATA0, cDATA1);
      assertSame(locale0, locale1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(jDOMNodePointer1, jDOMNodePointer0);
      
      String string3 = jDOMNodePointer0.getLanguage();
      assertEquals("mGAW`+U&", cDATA0.getText());
      assertEquals("mGAW`+U&", cDATA0.getValue());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(string3);
      assertSame(cDATA0, cDATA1);
      assertSame(locale0, locale1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      
      cDATA0.append("http://www.w3.org/XML/1998/namespace");
      assertEquals("mGAW`+U&http://www.w3.org/XML/1998/namespace", cDATA0.getValue());
      assertEquals("mGAW`+U&http://www.w3.org/XML/1998/namespace", cDATA0.getText());
      assertSame(cDATA0, cDATA1);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      assertEquals("mGAW`+U&http://www.w3.org/XML/1998/namespace", cDATA0.getValue());
      assertEquals("mGAW`+U&http://www.w3.org/XML/1998/namespace", cDATA0.getText());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNull(nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNull(qName1.toString());
      assertNull(qName1.getPrefix());
      assertNull(qName1.getName());
      assertTrue(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodeNameTest0);
      
      jDOMNodePointer0.setValue(nodeNameTest0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNull(nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNull(qName1.toString());
      assertNull(qName1.getPrefix());
      assertNull(qName1.getName());
      assertTrue(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertSame(cDATA0, cDATA1);
      assertSame(locale0, locale1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(qName1, qName0);
      
      String string4 = jDOMNodePointer0.getNamespaceURI();
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(string4);
      assertSame(cDATA0, cDATA1);
      assertSame(locale0, locale1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      
      String string5 = (String)jDOMNodePointer0.getValue();
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(string5);
      assertSame(cDATA0, cDATA1);
      assertSame(locale0, locale1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      
      boolean boolean1 = jDOMNodePointer0.isCollection();
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertTrue(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertTrue(boolean1 == boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertSame(cDATA0, cDATA1);
      assertSame(locale0, locale1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertFalse(boolean1);
      
      boolean boolean2 = jDOMNodePointer0.testNode((NodeTest) nodeNameTest0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertNull(nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNull(qName1.toString());
      assertNull(qName1.getPrefix());
      assertNull(qName1.getName());
      assertTrue(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertSame(cDATA0, cDATA1);
      assertSame(locale0, locale1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertNotSame(qName1, qName0);
      assertFalse(boolean2);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) cDATA1);
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertSame(cDATA0, cDATA1);
      assertSame(locale0, locale1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertSame(cDATA1, cDATA0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) jDOMNodePointer0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(jDOMNodePointer0.isNode());
      assertFalse(jDOMNodePointer0.isAttribute());
      assertFalse(jDOMNodePointer0.isCollection());
      assertEquals(1, jDOMNodePointer0.getLength());
      assertNull(jDOMNodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
      assertFalse(jDOMNodePointer0.isContainer());
      assertTrue(jDOMNodePointer0.isRoot());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      assertSame(cDATA0, cDATA1);
      assertSame(locale0, locale1);
      assertNotSame(jDOMNodePointer0, jDOMNodePointer1);
      assertSame(cDATA1, cDATA0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      
      // Undeclared exception!
      try { 
        jXPathContextReferenceImpl1.getRelativeContext((Pointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.JXPathContextReferenceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("3.>qI.|C WRNz'", locale0, "3.>qI.|C WRNz'");
      Element element0 = new Element("F", "F");
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      jDOMNodePointer0.isNode();
      NodePointer nodePointer0 = jDOMNodePointer0.namespacePointer("http://www.w3.org/2000/xmlns/");
      jDOMNodePointer1.getNamespaceURI("http://www.w3.org/XML/1998/namespace");
      Object object0 = jDOMNodePointer1.getValue();
      assertNotNull(object0);
      
      NodePointer nodePointer1 = jDOMNodePointer1.namespacePointer("");
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      jDOMNodePointer1.setValue(nodePointer0);
      assertFalse(nodePointer0.equals((Object)nodePointer1));
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CDATA cDATA0 = new CDATA((String) null);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.setValue(jDOMNodePointer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((NodePointer) null, (Object) null);
      assertFalse(jDOMNodePointer0.isContainer());
      
      // Undeclared exception!
      try { 
        jDOMNodePointer0.isLanguage("<<unknown namespace>>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Locale locale0 = Locale.UK;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0, "TRIM");
      jDOMNodePointer0.getNamespaceResolver();
      int int0 = jDOMNodePointer0.getLength();
      assertEquals(1, int0);
      
      jDOMNodePointer0.getNamespaceResolver();
      assertEquals(1, jDOMNodePointer0.getLength());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Comment comment0 = new Comment("org.apache.commons.jxpath.util.TypeUtils");
      comment0.setText("[");
      Locale locale0 = Locale.GERMAN;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2083);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodeTypeTest0, locale0);
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "http://www.w3.org/2000/xmlns/");
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, nodeNameTest0);
      Text text0 = new Text("http://www.w3.org/2000/xmlns/");
      boolean boolean0 = jDOMNodePointer0.equals((Object) null);
      assertFalse(boolean0);
      
      jDOMNodePointer0.namespaceIterator();
      assertFalse(jDOMNodePointer0.equals((Object)jDOMNodePointer1));
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Locale locale1 = Locale.UK;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("", locale1, "");
      jDOMNodePointer0.getBaseValue();
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(locale1, locale1);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Integer integer0 = new Integer(Integer.MIN_VALUE);
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer(jDOMNodePointer1, integer0);
      jDOMNodePointer2.getValue();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      jDOMNodePointer2.equals(jDOMNodePointer1);
      jDOMNodePointer0.getNamespaceResolver();
      jDOMNodePointer2.asPath();
      // Undeclared exception!
      try { 
        jDOMNodePointer1.setValue("@(#) $RCSfile: NegateFilter.java,v $ $Revision: 1.3 $ $Date: 2004/02/06 09:28:31 $");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Locale cannot be cast to org.jdom.Element
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((NodePointer) null, (Object) locale0);
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(locale0, locale0);
      boolean boolean0 = jDOMNodePointer1.equals(jDOMNodePointer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((NodePointer) null, "Z");
      Locale locale0 = Locale.FRENCH;
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer((Object) jDOMNodePointer0, locale0);
      boolean boolean0 = jDOMNodePointer0.equals(jDOMNodePointer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CDATA cDATA0 = new CDATA((String) null);
      cDATA0.getTextTrim();
      Text text0 = cDATA0.setText((String) null);
      Text.normalizeString((String) null);
      text0.toString();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("\"Sd-*%WM$$");
      Locale locale0 = Locale.GERMANY;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstructionTest0, locale0, "xml");
      jDOMNodePointer0.isLanguage(";XfLZfZywivg");
      JXPathContext jXPathContext0 = JXPathContext.newContext((JXPathContext) null, (Object) processingInstructionTest0);
      jXPathContext0.getParentContext();
      Document document0 = new Document();
      Object object0 = new Object();
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(cDATA0, locale0, "[CDATA: ]");
      QName qName0 = new QName("[NegateFilter: ", "~j,u=dWSj79c:u&&cb");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      variablePointer0.getImmediateValuePointer();
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("");
      Element element0 = new Element("xml", "");
      // Undeclared exception!
      try { 
        element0.setName("I3BQTfZ .k*e@q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The name \"I3BQTfZ .k*e@q\" is not legal for JDOM/XML elements: XML names cannot contain the character \" \".
         //
         verifyException("org.jdom.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode0);
      Locale locale1 = Locale.KOREA;
      locale1.getDisplayName(locale0);
      Locale locale2 = Locale.TAIWAN;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale1, locale2, (String) null);
      jDOMNodePointer0.getNamespaceURI();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("@(#) $RCSfile: NegateFilter.java,v $ $Revision: 1.3 $ $Date: 2004/02/06 09:28:31 $");
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, processingInstructionTest0);
      jDOMNodePointer0.getValue();
      jDOMNodePointer1.testNode((NodeTest) processingInstructionTest0);
      jDOMNodePointer1.getNamespaceResolver();
      jDOMNodePointer1.asPath();
      // Undeclared exception!
      try { 
        jDOMNodePointer0.setValue(locale2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Locale cannot be cast to org.jdom.Element
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CDATA cDATA0 = new CDATA((String) null);
      cDATA0.getTextTrim();
      Text text0 = cDATA0.setText((String) null);
      Text.normalizeString((String) null);
      text0.toString();
      JDOMNodePointer.getLocalName(text0);
      Locale locale0 = Locale.CANADA;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("", locale0, "");
      QName qName0 = new QName("xml", "");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      variablePointer0.getImmediateValuePointer();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("+nJ)RJ-c");
      jDOMNodePointer0.getBaseValue();
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) variablePointer0, (Object) variablePointer0, (NodeTest) processingInstructionTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      jDOMNodePointer0.getValue();
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("x=Pv$i)H?8|3");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.compareChildNodePointers(variablePointer0, variablePointer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: 'x=Pv$i)H?8|3'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("3.>qI.|C WRNz'", locale0, "3.>qI.|C WRNz'");
      Element element0 = new Element("F", "F");
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      jDOMNodePointer1.isLanguage("http://www.w3.org/2000/xmlns/");
      jDOMNodePointer0.namespacePointer(" reported success creating object for path: ");
      jDOMNodePointer1.getNamespaceURI("http://www.w3.org/XML/1998/namespace");
      jDOMNodePointer1.getValue();
      String string0 = jDOMNodePointer0.getLanguage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((NodePointer) null, (Object) null);
      Object object0 = jDOMNodePointer0.getValue();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BasicVariables basicVariables0 = new BasicVariables();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.272.b10-0.fc31.x86_64/jre/lib/jxpath.properties");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      basicVariables0.declareVariable("node()", (Object) null);
      JXPathContext.newContext((Object) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1799);
      JDOMNodePointer.testNode((NodePointer) null, (Object) basicVariables0, (NodeTest) nodeTypeTest0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0, " is not an attribute");
      locale0.getExtensionKeys();
      jDOMNodePointer0.equals((Object) null);
      Object object0 = jDOMNodePointer0.getValue();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Comment comment0 = new Comment("org.apache.commons.jxpath.util.TypeUtils");
      Comment comment1 = comment0.setText("");
      Locale locale0 = Locale.GERMANY;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(comment1, locale0);
      Locale locale1 = Locale.GERMAN;
      locale0.getDisplayName(locale1);
      comment1.detach();
      Integer integer0 = new Integer((-1794668441));
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(integer0, locale1, "<<unknown namespace>>");
      jDOMNodePointer0.getNamespaceURI();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      jDOMNodePointer1.testNode((NodeTest) processingInstructionTest0);
      jDOMNodePointer1.getNamespaceResolver();
      jDOMNodePointer1.asPath();
      // Undeclared exception!
      try { 
        jDOMNodePointer1.setValue(integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to org.jdom.Element
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("http://www.w3.org/XML/1998/namespace");
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) processingInstructionTest0, (NodeTest) processingInstructionTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Comment comment0 = new Comment("org.apache.commons.jxpath.util.TypeUtils");
      Comment comment1 = comment0.setText("");
      Locale locale0 = Locale.GERMANY;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(comment1, locale0);
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, nodeNameTest0);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.remove();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot remove root JDOM node
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Comment comment0 = new Comment("lang");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(comment0, locale0, "lang");
      String string0 = jDOMNodePointer0.getLanguage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      Object object0 = new Object();
      Locale locale0 = Locale.PRC;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(object0, locale0);
      jDOMNodePointer0.equals(jDOMNodePointer0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.lookupTag(linkedList0, set0);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.getNamespaceURI((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      boolean boolean0 = jDOMNodePointer0.equals(locale0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BasicVariables basicVariables0 = new BasicVariables();
      basicVariables0.declareVariable("node()", (Object) null);
      JXPathContext.newContext((Object) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1799);
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) null, (Object) basicVariables0, (NodeTest) nodeTypeTest0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0, " is not an attribute");
      boolean boolean1 = jDOMNodePointer0.equals((Object) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Locale locale0 = Locale.US;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.setValue((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      CDATA cDATA0 = new CDATA((String) null);
      cDATA0.getTextTrim();
      Text text0 = cDATA0.setText((String) null);
      Text.normalizeString((String) null);
      text0.toString();
      JDOMNodePointer.getLocalName(text0);
      JDOMNodePointer.getPrefix((Object) null);
      Locale locale0 = Locale.TAIWAN;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0, (String) null);
      jDOMNodePointer0.getBaseValue();
      jDOMNodePointer0.getNamespaceResolver();
      Namespace namespace0 = Namespace.getNamespace("j15P} T-5PRmr[EjRC1");
      JDOMNodePointer.findEnclosingAttribute((Object) null, (String) null, namespace0);
      jDOMNodePointer0.isCollection();
      // Undeclared exception!
      try { 
        jDOMNodePointer0.setValue((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      QName qName0 = jDOMNodePointer0.getName();
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.compareChildNodePointers(variablePointer0, variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: null
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      CDATA cDATA0 = new CDATA((String) null);
      cDATA0.getTextTrim();
      Text text0 = cDATA0.setText((String) null);
      Text.normalizeString((String) null);
      text0.toString();
      JDOMNodePointer.getLocalName(text0);
      Locale locale0 = Locale.CANADA;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("", locale0, "");
      QName qName0 = new QName("xml", "");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("+nJ)RJ-c");
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(variablePointer0, processingInstructionTest0);
      // Undeclared exception!
      try { 
        jDOMNodePointer1.compareChildNodePointers(jDOMNodePointer0, nodePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JXPath internal error: compareChildNodes called for processing-instruction('+nJ)RJ-c')
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      Locale locale0 = Locale.JAPANESE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodeTypeTest0, locale0);
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(locale0, locale0, "http://www.w3.org/XML/1998/namespace");
      // Undeclared exception!
      try { 
        jDOMNodePointer0.compareChildNodePointers(jDOMNodePointer1, jDOMNodePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JXPath internal error: compareChildNodes called for node()
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      Locale.forLanguageTag("I_&rfF/$/\"im^U4");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      linkedList0.pollLast();
      linkedList0.pollLast();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("javax.servlet.ServletException");
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("I_&rfF/$/\"im^U4", locale0, "I_&rfF/$/\"im^U4");
      jDOMNodePointer0.toString();
      jDOMNodePointer0.isLeaf();
      Object object0 = new Object();
      JDOMNodePointer.getLocalName(object0);
      jDOMNodePointer0.hashCode();
      jDOMNodePointer0.hashCode();
      jDOMNodePointer0.getNamespaceResolver();
      jDOMNodePointer0.isCollection();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      JXPathContext jXPathContext1 = jXPathContext0.getRelativeContext(jDOMNodePointer0);
      jXPathContext0.getKeyManager();
      jXPathContext0.setKeyManager((KeyManager) null);
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace");
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createChild(jXPathContext1, qName0, 599, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: id('I_&rfF/$/&quot;im^U4')
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(764);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodeTypeTest0, locale0, (String) null);
      QName qName0 = new QName("jhV].lYrCH}", (String) null);
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
      int int0 = jDOMNodePointer0.compareChildNodePointers(nodePointer0, nodePointer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((NodePointer) null, (Object) locale0);
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer((NodePointer) jDOMNodePointer0, (Object) locale0);
      String string0 = jDOMNodePointer1.asPath();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((NodePointer) null, (Object) null);
      QName qName0 = jDOMNodePointer0.getName();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createChild(jXPathContext0, qName0, Integer.MIN_VALUE, (Object) qName0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: 
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(58);
      Locale locale0 = Locale.ENGLISH;
      Locale locale1 = Locale.CANADA_FRENCH;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      locale0.getDisplayName(locale1);
      Locale locale2 = Locale.CHINA;
      Set<String> set0 = locale2.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1, locale_FilteringMode0);
      locale0.getDisplayName(locale1);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodeTypeTest0, locale0, (String) null);
      jDOMNodePointer0.getNamespaceURI();
      jDOMNodePointer0.testNode((NodeTest) nodeTypeTest0);
      jDOMNodePointer0.getNamespaceResolver();
      jDOMNodePointer0.asPath();
      // Undeclared exception!
      try { 
        jDOMNodePointer0.setValue("anglais");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.jxpath.ri.compiler.NodeTypeTest cannot be cast to org.jdom.Element
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      Element element0 = new Element("position");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("position", locale0);
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      jDOMNodePointer1.toString();
      element0.setText((String) null);
      jDOMNodePointer0.asPath();
      // Undeclared exception!
      try { 
        jDOMNodePointer0.remove();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot remove root JDOM node
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      String string0 = jDOMNodePointer0.asPath();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((NodePointer) null, (Object) null);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.compareChildNodePointers((NodePointer) null, (NodePointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      CDATA cDATA0 = new CDATA("l):\"");
      Text text0 = cDATA0.setText("l):\"");
      Locale locale0 = Locale.CANADA;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(text0, locale0, "N8/T]4AVo");
      jDOMNodePointer0.hashCode();
      jDOMNodePointer0.isCollection();
      Locale locale1 = Locale.CANADA;
      locale1.getDisplayLanguage(locale0);
      locale1.getExtension('F');
      locale0.hasExtensions();
      locale0.getDisplayCountry(locale1);
      QName qName0 = jDOMNodePointer0.getName();
      String string0 = "";
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      jDOMNodePointer0.testNode((NodeTest) nodeNameTest0);
      jDOMNodePointer0.getLanguage();
      locale0.getDisplayCountry();
      jDOMNodePointer0.asPath();
      locale0.toLanguageTag();
      JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) "", (NodeTest) nodeNameTest0);
      text0.append("");
      cDATA0.clone();
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      variablePointer0.namespacePointer("<<unknown namespace>>");
      // Undeclared exception!
      try { 
        jDOMNodePointer0.compareChildNodePointers((NodePointer) null, variablePointer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      VariablePointer variablePointer0 = new VariablePointer((QName) null);
      NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodePointer0, nodePointer0);
      jDOMNodePointer0.getLength();
      jDOMNodePointer0.printPointerChain();
      // Undeclared exception!
      try { 
        jDOMNodePointer0.childIterator((NodeTest) null, true, nodePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: null
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      String string0 = JDOMNodePointer.getPrefix(locale0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      Attribute attribute0 = new Attribute("xml", "xml");
      String string0 = JDOMNodePointer.getPrefix(attribute0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      CDATA cDATA0 = new CDATA((String) null);
      cDATA0.getTextTrim();
      Text text0 = cDATA0.setText((String) null);
      Text.normalizeString((String) null);
      text0.toString();
      JDOMNodePointer.getLocalName(text0);
      JDOMNodePointer.getPrefix((Object) null);
      Locale locale0 = Locale.TAIWAN;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0, (String) null);
      jDOMNodePointer0.getBaseValue();
      jDOMNodePointer0.getNamespaceResolver();
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "");
      VariablePointer variablePointer0 = new VariablePointer((QName) null);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.childIterator(nodeNameTest0, true, variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: null
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "id('");
      Locale locale0 = Locale.UK;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(".h(?ls:N|qEV9*0j\"V", locale0, ".h(?ls:N|qEV9*0j\"V");
      Element element0 = new Element("F", "F");
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      jDOMNodePointer1.isLanguage("http://www.w3.org/2000/xmlns/");
      jDOMNodePointer0.getName();
      JXPathContext.newContext((Object) jDOMNodePointer0);
      jDOMNodePointer1.setValue(locale0);
      boolean boolean0 = jDOMNodePointer1.isLeaf();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("lang", locale0, "lang");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.272.b10-0.fc31.x86_64/jre/lib/jxpath.properties");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "java.lang.Integer@0000000014");
      Element element0 = new Element("F", "F");
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      jDOMNodePointer1.isLanguage("http://www.w3.org/2000/xmlns/");
      QName qName0 = new QName("<<unknown namespace>>");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "http://www.w3.org/XML/1998/namespace");
      jDOMNodePointer1.testNode((NodeTest) nodeNameTest0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) locale0);
      jXPathContext0.getParentContext();
      jDOMNodePointer1.isLeaf();
      // Undeclared exception!
      jDOMNodePointer1.createChild(jXPathContext0, qName0, Integer.MIN_VALUE, (Object) "java.lang.Integer@0000000014");
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Locale locale0 = Locale.US;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      boolean boolean0 = jDOMNodePointer0.isLeaf();
      assertTrue(boolean0);
      
      boolean boolean1 = jDOMNodePointer0.isCollection();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Locale locale0 = new Locale("", "");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodeTypeTest0, locale0);
      locale0.clone();
      jDOMNodePointer0.getLength();
      jDOMNodePointer0.isLeaf();
      // Undeclared exception!
      try { 
        locale0.getUnicodeLocaleType("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: 
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Element element0 = new Element("q", "q", "q");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((NodePointer) null, element0);
      QName qName0 = jDOMNodePointer0.getName();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "java.lang.Object@0000000012");
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) element0, (NodeTest) nodeNameTest0);
      assertEquals("q", jDOMNodePointer0.getNamespaceURI());
      assertFalse(boolean0);
      assertEquals("q:q", nodeNameTest0.toString());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      QName qName0 = jDOMNodePointer0.getName();
      assertNull(qName0.getName());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("3.>qI.|C WRNz'");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("3.>qI.|C WRNz'", locale0, "3.>qI.|C WRNz'");
      Element element0 = new Element("F", "F");
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      jDOMNodePointer1.isLanguage("http://www.w3.org/2000/xmlns/");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      nodeTypeTest0.toString();
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer(jDOMNodePointer0, locale0, "q");
      QName qName0 = jDOMNodePointer1.getName();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      jDOMNodePointer2.testNode((NodeTest) nodeNameTest0);
      JDOMNodePointer jDOMNodePointer3 = new JDOMNodePointer(locale0, locale0);
      NamespaceResolver namespaceResolver0 = jDOMNodePointer3.getNamespaceResolver();
      assertFalse(namespaceResolver0.isSealed());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("olang", locale0, "olang");
      Element element0 = new Element("olang");
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      jDOMNodePointer1.compareTo(jDOMNodePointer0);
      jDOMNodePointer1.setValue(element0);
      assertEquals(0, element0.getContentSize());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      CDATA cDATA0 = new CDATA((String) null);
      Text text0 = cDATA0.setText("`bxg_Ci");
      Locale locale0 = Locale.CANADA;
      text0.setText(">Bul/@{\";^9I'&0p^gD");
      text0.detach();
      locale0.getDisplayCountry();
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(text0, locale0, "");
      text0.append((Text) cDATA0);
      Text text1 = text0.setText("org.jdom.IllegalNameException");
      jDOMNodePointer0.toString();
      jDOMNodePointer0.getNode();
      QName qName0 = jDOMNodePointer0.getName();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      text0.append(text1);
      jDOMNodePointer0.testNode((NodeTest) nodeNameTest0);
      jDOMNodePointer0.hashCode();
      Object object0 = new Object();
      JDOMNodePointer.getLocalName(object0);
      NodePointer nodePointer0 = jDOMNodePointer0.namespacePointer("JXPath internal error: compareChildNodes called for ");
      assertFalse(nodePointer0.isAttribute());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      jDOMNodePointer0.getValue();
      QName qName0 = jDOMNodePointer0.getName();
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createChild((JXPathContext) null, qName0, (-1920));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      QName qName0 = new QName("", "");
      Comment comment0 = new Comment("org.apache.commons.jxpath.AbstractFactory");
      Comment comment1 = comment0.setText("W{?fIh#/`AV4");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, comment1, (Locale) null);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodePointer0, "");
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("org.apache.commons.jxpath.AbstractFactory", "http://www.w3.org/XML/1998/namespace");
      ProcessingInstruction processingInstruction1 = processingInstruction0.setData("org.apache.commons.jxpath.ri.QName");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) processingInstruction1);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) "W{?fIh#/`AV4");
      JXPathContext jXPathContext2 = jXPathContext1.getRelativeContext(nodePointer0);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createChild(jXPathContext2, qName0, Integer.MIN_VALUE);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: /
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = JDOMNodePointer.getLocalName(fileSystemHandling0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0, "z");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "z");
      QName qName0 = jDOMNodePointer0.getName();
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createChild(jXPathContext0, qName0, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: id('z')
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = "|";
      CDATA cDATA0 = new CDATA("|");
      Text text0 = cDATA0.setText("|");
      Text text1 = text0.setText("|");
      Locale locale0 = Locale.FRANCE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(text1, locale0, "xe$>8;ra6XI?([n=a\"2");
      cDATA0.toString();
      Text.normalizeString("78RE");
      text1.clone();
      text1.getTextTrim();
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, (Object) null);
      jDOMNodePointer0.childIterator((NodeTest) null, false, jDOMNodePointer1);
      jDOMNodePointer1.getLength();
      jDOMNodePointer0.asPath();
      jDOMNodePointer0.getBaseValue();
      jDOMNodePointer1.getLanguage();
      jDOMNodePointer0.getImmediateNode();
      JDOMNodePointer.getLocalName("|");
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace");
      text1.detach();
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createChild((JXPathContext) null, qName0, 93);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.remove();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot remove root JDOM node
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Comment comment0 = new Comment("org.apache.commons.jxpath.util.TypeUtils");
      Comment comment1 = comment0.setText("");
      Locale locale0 = Locale.GERMANY;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(comment1, locale0);
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, nodeNameTest0);
      // Undeclared exception!
      try { 
        jDOMNodePointer1.remove();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot remove root JDOM node
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = "1?R|5:=Upa[";
      CDATA cDATA0 = new CDATA("1?R|5:=Upa[");
      cDATA0.toString();
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      JDOMNodePointer.findEnclosingAttribute(cDATA0, "The CDATA \"", namespace0);
      Locale locale0 = Locale.ROOT;
      List<Locale.LanguageRange> list0 = null;
      locale0.getExtensionKeys();
      // Undeclared exception!
      try { 
        locale0.getDisplayName((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      CDATA cDATA0 = new CDATA((String) null);
      Locale locale0 = Locale.KOREAN;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0, (String) null);
      Object object0 = jDOMNodePointer0.getValue();
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Element element0 = new Element("q", "q", "q");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((NodePointer) null, element0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) jDOMNodePointer0);
      QName qName0 = jDOMNodePointer0.getName();
      jDOMNodePointer0.createAttribute(jXPathContext0, qName0);
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, qName0);
      QName qName1 = jDOMNodePointer1.getName();
      // Undeclared exception!
      try { 
        jDOMNodePointer0.attributeIterator(qName1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMAttributeIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      QName qName0 = new QName("B$GfN]go");
      VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((JXPathContext) null, (Object) variablePointer0);
      NodePointer nodePointer0 = variablePointer0.createPath(jXPathContext0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodePointer0, (Object) null);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.childIterator((NodeTest) null, false, nodePointer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      CDATA cDATA0 = new CDATA("M:!_W");
      Locale locale0 = Locale.ITALY;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
      QName qName0 = new QName("<<unknown namespace>>");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "M:!_W");
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) jDOMNodePointer0);
      NodePointer nodePointer0 = variablePointer0.createPath(jXPathContext1);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.childIterator(nodeNameTest0, true, nodePointer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Element element0 = new Element("q", "q", "q");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((NodePointer) null, element0);
      Object object0 = jDOMNodePointer0.getValue();
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName((String) null, " is not an attribute");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) qName0);
      variablePointer0.createPath(jXPathContext1);
      Integer integer0 = new Integer((-1277));
      Locale locale0 = Locale.CHINA;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(integer0, locale0, "<<unknown namespace>>");
      jDOMNodePointer0.getNamespaceURI();
      boolean boolean0 = jDOMNodePointer0.testNode((NodeTest) null);
      assertTrue(boolean0);
      
      jDOMNodePointer0.getNamespaceResolver();
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest(" is not an attribute");
      processingInstructionTest1.toString();
      Text text0 = new Text("<<unknown namespace>>");
      boolean boolean1 = JDOMNodePointer.testNode((NodePointer) variablePointer0, (Object) text0, (NodeTest) processingInstructionTest0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = new Document();
      Locale locale0 = Locale.forLanguageTag("/e=Z{5wO");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(document0, locale0, "/e=Z{5wO");
      // Undeclared exception!
      try { 
        jDOMNodePointer0.getNamespaceURI("/e=Z{5wO");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root element not set
         //
         verifyException("org.jdom.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Locale locale0 = Locale.UK;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("lnbg", locale0, "lnbg");
      locale0.hasExtensions();
      boolean boolean0 = jDOMNodePointer0.isLeaf();
      Element element0 = new Element("lnbg");
      QName qName0 = new QName("<<unknown namespace>>", "lnbg");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "http://www.w3.org/XML/1998/namespace");
      boolean boolean1 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) element0, (NodeTest) nodeNameTest0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) null, (Object) null, (NodeTest) nodeNameTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("3.>qI.|C WRNz'", locale0, "3.>qI.|C WRNz'");
      Element element0 = new Element("F", "F");
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      jDOMNodePointer1.isLanguage("http://www.w3.org/2000/xmlns/");
      jDOMNodePointer0.namespacePointer(" reported success creating object for path: ");
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      jDOMNodePointer1.getNamespaceURI("http://www.w3.org/XML/1998/namespace");
      Object object0 = jDOMNodePointer0.getValue();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      int int0 = jDOMNodePointer0.getLength();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      int int0 = jDOMNodePointer0.compareChildNodePointers(jDOMNodePointer0, jDOMNodePointer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Object object0 = new Object();
      Locale locale0 = Locale.forLanguageTag(":");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(object0, locale0);
      jDOMNodePointer0.getNode();
      jDOMNodePointer0.getLength();
      locale0.toLanguageTag();
      jDOMNodePointer0.getNamespaceURI(":");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1465));
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      NamespaceResolver namespaceResolver1 = new NamespaceResolver(namespaceResolver0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      namespaceResolver0.registerNamespace("http://www.w3.org/XML/1998/namespace", "p\"@$1D9FTz");
      nodeTypeTest0.toString();
      namespaceResolver0.registerNamespace("http://www.w3.org/2000/xmlns/", "]6NIivN$8R\"#8FeZ$");
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode0);
      nodeTypeTest0.toString();
      jDOMNodePointer0.setNamespaceResolver(namespaceResolver1);
      JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) locale0, (NodeTest) nodeTypeTest0);
      jDOMNodePointer0.testNode((NodeTest) nodeTypeTest0);
      jDOMNodePointer0.getBaseValue();
      jDOMNodePointer0.isCollection();
      // Undeclared exception!
      try { 
        jDOMNodePointer0.setValue(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to org.jdom.Element
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      boolean boolean0 = jDOMNodePointer0.testNode((NodeTest) nodeTypeTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("3R>qI[|3 WRNv'", locale0, "3R>qI[|3 WRNv'");
      String string0 = jDOMNodePointer0.getNamespaceURI("3R>qI[|3 WRNv'");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      NodePointer nodePointer0 = jDOMNodePointer0.namespacePointer("nUh6([g68V{B~SP\"");
      assertFalse(nodePointer0.isRoot());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      String string0 = jDOMNodePointer0.getNamespaceURI();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      QName qName0 = new QName("", "");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      Object object0 = new Object();
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, object0);
      jDOMNodePointer0.getNamespaceURI();
      jDOMNodePointer0.namespacePointer("");
      QName qName1 = new QName("http://www.w3.org/2000/xmlns/");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.setValue(nodeNameTest0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to org.jdom.Element
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Locale locale1 = Locale.UK;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("", locale1, "");
      jDOMNodePointer0.getBaseValue();
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(locale1, locale1);
      jDOMNodePointer1.getNamespaceResolver();
      JDOMNodePointer jDOMNodePointer2 = new JDOMNodePointer(jDOMNodePointer0, locale1, "id(");
      jDOMNodePointer1.getNamespaceURI();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      jDOMNodePointer2.testNode((NodeTest) nodeTypeTest0);
      jDOMNodePointer1.getNamespaceResolver();
      jDOMNodePointer1.asPath();
      Comment comment0 = new Comment("mGAW`+U&");
      // Undeclared exception!
      try { 
        jDOMNodePointer0.setValue(comment0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.jdom.Element
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Element element0 = new Element("q", "q", "q");
      Locale locale0 = Locale.US;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("q", locale0);
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      jDOMNodePointer1.toString();
      element0.setText("<<unknown namespace>>");
      jDOMNodePointer1.asPath();
      // Undeclared exception!
      try { 
        jDOMNodePointer1.remove();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot remove root JDOM node
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((NodePointer) null, (Object) null);
      QName qName0 = jDOMNodePointer0.getName();
      NodeIterator nodeIterator0 = jDOMNodePointer0.attributeIterator(qName0);
      assertEquals(0, nodeIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0, "BT7nar]CL2DrZ$");
      assertEquals(1, jDOMNodePointer0.getLength());
      
      NamespaceResolver namespaceResolver0 = jDOMNodePointer0.getNamespaceResolver();
      assertFalse(namespaceResolver0.isSealed());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      NodeIterator nodeIterator0 = jDOMNodePointer0.namespaceIterator();
      assertEquals(0, nodeIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = "";
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Locale locale0 = Locale.CHINESE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstructionTest0, locale0, "");
      jDOMNodePointer0.getNodeValue();
      jDOMNodePointer0.setAttribute(true);
      processingInstructionTest0.toString();
      QName qName0 = new QName("s6Whi;O$VMA[?");
      processingInstructionTest0.toString();
      jDOMNodePointer0.attributeIterator(qName0);
      jDOMNodePointer0.isCollection();
      jDOMNodePointer0.asPath();
      jDOMNodePointer0.getNamespaceResolver();
      processingInstructionTest0.toString();
      JXPathContext jXPathContext0 = null;
      QName qName1 = new QName("<<unknown namespace>>", "http://www.w3.org/XML/1998/namespace");
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createAttribute((JXPathContext) null, qName1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot create an attribute for path id('')/@<<unknown namespace>>:http://www.w3.org/XML/1998/namespace, operation is not allowed for this type of node
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("3.>qI.|C WRNz'");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("::Wo", locale0, "::Wo");
      Element element0 = new Element("F", "[");
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      jDOMNodePointer1.isLanguage("http://www.w3.org/2000/xmlns/");
      Document document0 = new Document();
      Object object0 = new Object();
      String string0 = "Factory could not create a child node for path: ";
      String string1 = "M";
      String string2 = "substring-after";
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("M", "substring-after");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The name \"M\" is not legal for JDOM/XML attributes: XML names cannot begin with the character \"\".
         //
         verifyException("org.jdom.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.setValue(locale0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Locale cannot be cast to org.jdom.Element
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      boolean boolean0 = jDOMNodePointer0.isLanguage("http://www.w3.org/XML/1998/namespace");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      Locale locale0 = Locale.JAPANESE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodeTypeTest0, locale0);
      boolean boolean0 = true;
      nodeTypeTest0.toString();
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(nodeTypeTest0, (Locale) null, "<<unknown namespace>>");
      jDOMNodePointer0.isLanguage("http://www.w3.org/XML/1998/namespace");
      JXPathContext jXPathContext0 = JXPathContext.newContext((JXPathContext) null, (Object) "node()");
      jXPathContext0.getParentContext();
      Document document0 = new Document();
      // Undeclared exception!
      try { 
        jDOMNodePointer1.createPath((JXPathContext) null, (Object) document0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.jxpath.ri.compiler.NodeTypeTest cannot be cast to org.jdom.Element
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Element element0 = new Element("q", "q", "q");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((NodePointer) null, element0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) jDOMNodePointer0);
      QName qName0 = jDOMNodePointer0.getName();
      jDOMNodePointer0.createAttribute(jXPathContext0, qName0);
      assertEquals("q:q", qName0.toString());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("lnbg", locale0, "lnbg");
      String string0 = jDOMNodePointer0.asPath();
      assertEquals("id('lnbg')", string0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0, "BT7nar]CL2DrZ$");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) locale0);
      QName qName0 = jDOMNodePointer0.getName();
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createAttribute(jXPathContext0, qName0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot create an attribute for path id('BT7nar]CL2DrZ$')/@null, operation is not allowed for this type of node
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      String string0 = "";
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0, "");
      jDOMNodePointer0.isCollection();
      String string1 = "";
      QName qName0 = new QName("");
      jDOMNodePointer0.clone();
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createAttribute((JXPathContext) null, qName0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot create an attribute for path id('')/@, operation is not allowed for this type of node
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((NodePointer) null, (Object) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      String string0 = "U5JJ%I^] ";
      // Undeclared exception!
      try { 
        jDOMNodePointer0.getPointerByID(jXPathContext0, "U5JJ%I^] ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot find an element by ID - no IdentityManager has been specified
         //
         verifyException("org.apache.commons.jxpath.JXPathContext", e);
      }
  }
}
