/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 00:23:57 GMT 2021
 */

package org.apache.commons.jxpath.ri.model.jdom;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Variables;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jdom.Attribute;
import org.jdom.CDATA;
import org.jdom.Comment;
import org.jdom.Content;
import org.jdom.DocType;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;
import org.jdom.ProcessingInstruction;
import org.jdom.Text;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JDOMNodePointer_ESTest extends JDOMNodePointer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Element element0 = new Element("org.apache.commons.jxpath.ri.axes.AncestorContext");
      Locale locale0 = Locale.TAIWAN;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      boolean boolean0 = jDOMNodePointer0.isLanguage("<<unknown namespace>>");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      QName qName0 = new QName("ufigE+)", "ufigE+)");
      VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
      Element element0 = new Element("spacEe", "ufigE+)");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, element0);
      String string0 = jDOMNodePointer0.getNamespaceURI();
      assertEquals("ufigE+)", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, (Locale) null);
      NamespaceResolver namespaceResolver0 = jDOMNodePointer0.getNamespaceResolver();
      namespaceResolver0.seal();
      NamespaceResolver namespaceResolver1 = jDOMNodePointer0.getNamespaceResolver();
      assertSame(namespaceResolver1, namespaceResolver0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      QName qName0 = new QName("ufigE+F)", "ufigE+F)");
      VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
      Element element0 = new Element("space");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, element0);
      String string0 = jDOMNodePointer0.getLanguage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CDATA cDATA0 = new CDATA("&j!F,l3");
      Locale locale0 = Locale.TAIWAN;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
      Object object0 = jDOMNodePointer0.getImmediateNode();
      assertSame(object0, cDATA0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Locale locale0 = new Locale("`YA#QoZ,e%[LO4GS");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0, "http://www.w3.org/2000/xmlns/");
      Object object0 = jDOMNodePointer0.getBaseValue();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(446);
      Integer integer0 = new Integer(1);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(integer0, locale0);
      NodePointer nodePointer0 = jDOMNodePointer0.namespacePointer("");
      NodeIterator nodeIterator0 = jDOMNodePointer0.childIterator(nodeTypeTest0, true, nodePointer0);
      assertEquals(0, nodeIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Element element0 = new Element("c", "c", "c");
      Locale locale0 = Locale.ENGLISH;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      // Undeclared exception!
      try { 
        JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) element0, (NodeTest) nodeNameTest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.NodeNameTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      QName qName0 = new QName("spacE6");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      Element element0 = new Element("spacE6", "spacE6", "spacE6");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, element0);
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.testNode((NodeTest) nodeNameTest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.NodeNameTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      QName qName0 = new QName("[", "[");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      Element element0 = new Element("spacEe", "[");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, element0);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.setValue(variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: [:[
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      Element element0 = new Element("xml", "xml");
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Document document0 = new Document(linkedList0);
      // Undeclared exception!
      try { 
        jDOMNodePointer1.setValue(document0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root element not set
         //
         verifyException("org.jdom.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Locale locale0 = new Locale("`YA#QoZ,e%[LO4GS");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("`YA#QoZ,e%[LO4GS", locale0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("<<unknown namespace>>");
      // Undeclared exception!
      try { 
        jDOMNodePointer0.setValue(processingInstructionTest0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.jdom.Element
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = new Document();
      Locale locale0 = Locale.ITALIAN;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(document0, locale0, "q^OQGr9#E=9[iWJf>3r");
      // Undeclared exception!
      try { 
        jDOMNodePointer0.namespaceIterator();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root element not set
         //
         verifyException("org.jdom.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      QName qName0 = new QName("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      CDATA cDATA0 = new CDATA("<<unknown namespace>>");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, cDATA0);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.isLanguage("spacEe");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("space");
      Locale locale0 = Locale.ITALIAN;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstructionTest0, locale0);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.getNamespaceURI((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Element element0 = new Element("E", "E", "E");
      // Undeclared exception!
      try { 
        JDOMNodePointer.findEnclosingAttribute(element0, "F3I9P9&2vZTL?'", (Namespace) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jdom.AttributeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2));
      Locale locale0 = Locale.CHINESE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodeTypeTest0, locale0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) nodeTypeTest0);
      QName qName0 = jDOMNodePointer0.getName();
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createChild(jXPathContext0, qName0, (-2632), (Object) jXPathContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: 
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Element element0 = new Element("t", "t");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((NodePointer) null, element0);
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) jDOMNodePointer0);
      QName qName0 = jDOMNodePointer0.getName();
      // Undeclared exception!
      jDOMNodePointer1.createChild(jXPathContext0, qName0, Integer.MIN_VALUE);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      Integer integer0 = new Integer(1);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(integer0, locale0);
      QName qName0 = jDOMNodePointer0.getName();
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createChild((JXPathContext) null, qName0, 4462);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      QName qName0 = new QName("[", "[");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      Element element0 = new Element("spaEe", "[");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, element0);
      QName qName1 = new QName("R=?9\"dA");
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createAttribute((JXPathContext) null, qName1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The name \"R=?9\"dA\" is not legal for JDOM/XML attributes: XML names cannot contain the character \"=\".
         //
         verifyException("org.jdom.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      QName qName0 = new QName("spcEe");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      Element element0 = new Element("spcEe", "spcEe");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, element0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) element0);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createAttribute(jXPathContext0, (QName) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("^^");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) linkedList0);
      variablePointer0.setIndex((byte)122);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, (Object) null);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createAttribute(jXPathContext0, qName0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: '^^'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      QName qName0 = new QName("", "");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      Element element0 = new Element("spacEe", "");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, element0);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.compareChildNodePointers(variablePointer0, variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: :
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, (Locale) null);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.compareChildNodePointers((NodePointer) null, (NodePointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      LinkedList<NodeTypeTest> linkedList0 = new LinkedList<NodeTypeTest>();
      Document document0 = new Document(linkedList0);
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(document0, locale0, "<<unknown namespace>>");
      // Undeclared exception!
      try { 
        jDOMNodePointer1.compareChildNodePointers(jDOMNodePointer0, jDOMNodePointer1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root element not set
         //
         verifyException("org.jdom.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Locale locale0 = new Locale("&j!F,l", "&j!F,l", "&j!F,l");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "&j!F,l");
      QName qName0 = new QName("Ck-(c");
      Variables variables0 = jXPathContext0.getVariables();
      VariablePointer variablePointer0 = new VariablePointer(variables0, qName0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) variablePointer0, locale0);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.compareChildNodePointers(variablePointer0, variablePointer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: 'Ck-(c'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      QName qName0 = new QName("spacEe", "spacEe");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      Element element0 = new Element("spacEe", "spacEe", "spacEe");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, element0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      // Undeclared exception!
      try { 
        jDOMNodePointer0.childIterator(processingInstructionTest0, false, variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: spacEe:spacEe
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      QName qName0 = new QName("ufigE+)", "ufigE+)");
      VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
      Element element0 = new Element("spacEe", "ufigE+)");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, element0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.childIterator(nodeNameTest0, false, variablePointer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Comment comment0 = new Comment("rX ~H5!7b!bX");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(comment0, (Locale) null);
      QName qName0 = new QName("preserve", "4}%kT!,*FQSi.X");
      Document document0 = new Document();
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(document0, (Locale) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      // Undeclared exception!
      try { 
        jDOMNodePointer1.childIterator(nodeNameTest0, false, jDOMNodePointer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root element not set
         //
         verifyException("org.jdom.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      QName qName0 = new QName("[", "[");
      VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
      Element element0 = new Element("spacEe", "[");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, element0);
      Locale locale0 = Locale.FRENCH;
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer("space", locale0, "space");
      QName qName1 = jDOMNodePointer1.getName();
      // Undeclared exception!
      try { 
        jDOMNodePointer0.attributeIterator(qName1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMAttributeIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      QName qName0 = new QName("[", "[");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      Element element0 = new Element("spacEe", "[");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, element0);
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      // Undeclared exception!
      jDOMNodePointer1.asPath();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      QName qName0 = new QName("ufigE+F)", "ufigE+F)");
      VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
      Element element0 = new Element("space");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, element0);
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("space", "ufigE+F)");
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, processingInstruction0);
      String string0 = jDOMNodePointer1.asPath();
      assertEquals("$ufigE+F):ufigE+F)/processing-instruction('space')[1]", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      QName qName0 = new QName("");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      Element element0 = new Element("spaNe", "spaNe", "spaNe");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, element0);
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      String string0 = jDOMNodePointer1.asPath();
      assertEquals("$/spaNe:spaNe[1]", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Element element0 = new Element("org.apache.commons.jxpath.ri.axes.AncestorContext");
      Locale locale0 = Locale.TAIWAN;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      jDOMNodePointer0.printPointerChain();
      assertNull(jDOMNodePointer0.getNamespaceURI());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Locale locale0 = new Locale("space");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("`YA#QoZ,e[Lq4GS", locale0, "space");
      String string0 = jDOMNodePointer0.asPath();
      assertEquals("id('space')", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      QName qName0 = new QName("\"_PIPPnm%V>2'Cg8$(", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "Unknown namespace prefix: ");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodeNameTest0, (Locale) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "");
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createChild(jXPathContext0, qName0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: 
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Element element0 = new Element("spacEe", "ufigE+)");
      String string0 = JDOMNodePointer.getLocalName(element0);
      assertEquals("spacEe", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Element element0 = new Element("spacEe", "spacEe");
      String string0 = JDOMNodePointer.getPrefix(element0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      QName qName0 = new QName("spcE6", "spcE6");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      Element element0 = new Element("spcE6", "spcE6", "spcE6");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, element0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("<<unknown namespace>>");
      HashMap<Object, NodeNameTest> hashMap0 = new HashMap<Object, NodeNameTest>();
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("spcE6", hashMap0);
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) processingInstruction0, (NodeTest) processingInstructionTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      QName qName0 = new QName("E");
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("E");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) variablePointer0, (Object) variablePointer0, (NodeTest) processingInstructionTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      QName qName0 = new QName("spacEe", "spacEe");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      Element element0 = new Element("spacEe", "spacEe", "spacEe");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, element0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "http://www.w3.org/XML/1998/namespace");
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) element0, (NodeTest) nodeNameTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      QName qName0 = new QName("space", "space");
      VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
      Element element0 = new Element("space");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, element0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) element0, (NodeTest) nodeNameTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      QName qName0 = new QName("[", "[");
      VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
      Element element0 = new Element("spacEe", "[");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, element0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) element0, (NodeTest) nodeNameTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Locale locale0 = new Locale("space");
      CDATA cDATA0 = new CDATA("s5/c[");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) locale0, (NodeTest) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      QName qName0 = new QName("", "");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      Element element0 = new Element("spacEe", "");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, element0);
      String string0 = jDOMNodePointer0.getNamespaceURI("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Locale locale0 = new Locale("`YA#QoZ,e[Lq4GS");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      Object object0 = jDOMNodePointer0.getImmediateNode();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Object object0 = new Object();
      Locale locale0 = Locale.JAPANESE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(object0, locale0);
      Object object1 = jDOMNodePointer0.getBaseValue();
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      QName qName0 = new QName("ufigE+F)", "ufigE+F)");
      VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
      Element element0 = new Element("space");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, element0);
      NodeIterator nodeIterator0 = jDOMNodePointer0.attributeIterator(qName0);
      assertEquals(0, nodeIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      QName qName0 = new QName("\"_PIPPnm%V>2'Cg8$(", "&E");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "Unknown namespace prefix: ");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodeNameTest0, (Locale) null);
      CDATA cDATA0 = new CDATA("$#ZB[VWe");
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(cDATA0, (Locale) null);
      boolean boolean0 = jDOMNodePointer0.equals(jDOMNodePointer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      QName qName0 = new QName("\"_PIPPnm%V>2'Cg8$(", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "Unknown namespace prefix: ");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(nodeNameTest0, (Locale) null);
      boolean boolean0 = jDOMNodePointer0.equals("Unknown namespace prefix: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      Locale locale0 = jXPathContext0.getLocale();
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0, "");
      boolean boolean0 = jDOMNodePointer0.equals(jDOMNodePointer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(locale0, locale0, "<<unknown namespace>>");
      boolean boolean0 = jDOMNodePointer1.equals(jDOMNodePointer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("xol", "xol");
      Element element0 = new Element("xol");
      Locale locale0 = Locale.JAPANESE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction0, locale0);
      element0.addContent((Content) processingInstruction0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) processingInstruction0);
      QName qName0 = new QName("/5>B\"q4tqYDV,++Nk");
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createAttribute(jXPathContext0, qName0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot create an attribute for path /processing-instruction('xol')[1]/@/5>B\"q4tqYDV,++Nk, operation is not allowed for this type of node
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      QName qName0 = new QName("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", "org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      Element element0 = new Element("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", "org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer");
      CDATA cDATA0 = new CDATA("<<unknown namespace>>");
      element0.addContent("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, cDATA0);
      element0.addContent((Content) cDATA0);
      String string0 = jDOMNodePointer0.asPath();
      assertEquals("$org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer:org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer/text()[2]", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Element element0 = new Element("a");
      Locale locale0 = Locale.KOREA;
      Element element1 = new Element("a");
      element1.addContent("%p&)?mZ),");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element1, locale0);
      element1.addContent((Content) element0);
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      String string0 = jDOMNodePointer1.asPath();
      assertEquals("/a[1]", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Locale locale0 = new Locale("space");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("space", locale0);
      String string0 = jDOMNodePointer0.asPath();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      QName qName0 = new QName("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", "org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      CDATA cDATA0 = new CDATA("<<unknown namespace>>");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, cDATA0);
      String string0 = jDOMNodePointer0.asPath();
      assertEquals("$org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer:org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer/text()[1]", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Element element0 = new Element("xbt3", "xbt3");
      Locale locale0 = Locale.GERMANY;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0, "xbt3");
      CDATA cDATA0 = new CDATA(" (xq|fw6");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) cDATA0);
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      QName qName0 = new QName("http://www.w3.org/2000/xmlns/");
      // Undeclared exception!
      jDOMNodePointer1.createChild(jXPathContext0, qName0, 127, (Object) element0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.remove();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot remove root JDOM node
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      QName qName0 = new QName("spacEe", "spacEe");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      Element element0 = new Element("spacEe", "spacEe", "spacEe");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, element0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) qName0);
      jDOMNodePointer0.createAttribute(jXPathContext0, qName0);
      NodePointer nodePointer0 = jDOMNodePointer0.createAttribute(jXPathContext0, qName0);
      assertFalse(nodePointer0.isCollection());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      QName qName0 = new QName("[", "[");
      VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
      Element element0 = new Element("spacEe", "[");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, element0);
      Locale locale0 = Locale.FRENCH;
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) locale0);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createAttribute(jXPathContext0, qName0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown namespace prefix: [
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      QName qName0 = new QName("spacEe");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      Element element0 = new Element("spacEe", "spacEe", "spacEe");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, element0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) qName0);
      jDOMNodePointer0.createAttribute(jXPathContext0, qName0);
      NodePointer nodePointer0 = jDOMNodePointer0.createAttribute(jXPathContext0, qName0);
      assertFalse(nodePointer0.isRoot());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      Comment comment0 = new Comment("div");
      String string0 = JDOMNodePointer.findEnclosingAttribute(comment0, (String) null, namespace0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Element element0 = new Element("a");
      Locale locale0 = Locale.KOREA;
      Element element1 = new Element("a");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element1, locale0);
      element1.addContent((Content) element0);
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      jDOMNodePointer1.remove();
      assertEquals(0, element1.getContentSize());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Element element0 = new Element("i", "i", "i");
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      element0.setAttribute("i", "i", namespace0);
      String string0 = JDOMNodePointer.findEnclosingAttribute(element0, "i", namespace0);
      assertNotNull(string0);
      assertEquals("i", string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Attribute attribute0 = new Attribute("E", "E");
      String string0 = JDOMNodePointer.getLocalName(attribute0);
      assertEquals("E", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Locale locale0 = new Locale("space");
      String string0 = JDOMNodePointer.getLocalName(locale0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      Attribute attribute0 = new Attribute("spacEe", "Hg ", namespace0);
      String string0 = JDOMNodePointer.getPrefix(attribute0);
      assertNotNull(string0);
      assertEquals("xml", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = JDOMNodePointer.getPrefix((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Element element0 = new Element("spacE6", "spacE6", "spacE6");
      String string0 = JDOMNodePointer.getPrefix(element0);
      assertNotNull(string0);
      assertEquals("spacE6", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Attribute attribute0 = new Attribute("spacE6", "spacE6");
      String string0 = JDOMNodePointer.getPrefix(attribute0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("spEcEL", "YW2)l}mvPKo`|l9");
      Locale locale0 = Locale.GERMANY;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction0, locale0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("<<unknown namespace>>");
      boolean boolean0 = jDOMNodePointer0.testNode((NodeTest) processingInstructionTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) "Italian", (NodeTest) nodeTypeTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "&j!F,l");
      QName qName0 = new QName("Ck-(c");
      Variables variables0 = jXPathContext0.getVariables();
      VariablePointer variablePointer0 = new VariablePointer(variables0, qName0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(58);
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) variablePointer0, (Object) nodeTypeTest0, (NodeTest) nodeTypeTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((NodePointer) null, (Object) locale0);
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) "B%?u=1oU&U]U}7", (NodeTest) nodeTypeTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      CDATA cDATA0 = new CDATA("<<unknown namespace>>");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) cDATA0, (NodeTest) nodeTypeTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Locale locale0 = new Locale("&j!F,l3", "&j!F,l3", "&j!F,l3");
      QName qName0 = new QName("node()");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, nodeTypeTest0, locale0);
      boolean boolean0 = JDOMNodePointer.testNode(nodePointer0, (Object) nodeTypeTest0, (NodeTest) nodeTypeTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      VariablePointer variablePointer0 = new VariablePointer((QName) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4);
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) variablePointer0, (Object) nodeTypeTest0, (NodeTest) nodeTypeTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      QName qName0 = new QName("Aspace");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      Element element0 = new Element("Aspace");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "http://www.w3.org/XML/1998/namespace");
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) variablePointer0, (Object) element0, (NodeTest) nodeNameTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      QName qName0 = new QName("ufigE+F)", "ufigE+F)");
      VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
      Element element0 = new Element("spacEe", "ufigE+F)");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, element0);
      QName qName1 = jDOMNodePointer0.getName();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      boolean boolean0 = jDOMNodePointer0.testNode((NodeTest) nodeNameTest0);
      assertFalse(boolean0);
      assertEquals("spacEe", nodeNameTest0.toString());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      QName qName0 = new QName("ufigE+F)", "ufigE+F)");
      VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
      Element element0 = new Element("space");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, element0);
      QName qName1 = jDOMNodePointer0.getName();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      boolean boolean0 = jDOMNodePointer0.testNode((NodeTest) nodeNameTest0);
      assertEquals("space", nodeNameTest0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Locale locale0 = new Locale("`YA#QoZ,e[Lq4GS");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0);
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) jDOMNodePointer0, (Object) "H6/&Dr4P'", (NodeTest) nodeNameTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Element element0 = new Element("c", "c");
      Element element1 = new Element("c");
      Locale locale0 = new Locale("' and '");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element1, locale0);
      Element element2 = element0.addContent("c");
      jDOMNodePointer0.setValue(element2);
      assertEquals(1, element1.getContentSize());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Element element0 = new Element("s", "s");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((NodePointer) null, element0);
      Document document0 = new Document(element0);
      DocType docType0 = new DocType("uvf", "http://www.w3.org/2000/xmlns/", "j-~zJ<N6hnf-^Qo+cqW");
      document0.setDocType(docType0);
      jDOMNodePointer0.setValue(document0);
      assertEquals(1, element0.getContentSize());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      QName qName0 = new QName("");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      Element element0 = new Element("spaNe", "spaNe", "spaNe");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, element0);
      jDOMNodePointer0.setValue("$/spaNe:spaNe[1]");
      assertFalse(jDOMNodePointer0.isContainer());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      QName qName0 = new QName("[", "[");
      VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
      Element element0 = new Element("spacEe", "[");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, element0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, processingInstructionTest0);
      jDOMNodePointer0.setValue(jDOMNodePointer1);
      assertFalse(jDOMNodePointer0.isContainer());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      QName qName0 = new QName("@a{vuj8=Y4W{zpv*", "@a{vuj8=Y4W{zpv*");
      VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
      Element element0 = new Element("space");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, element0);
      Comment comment0 = new Comment("space");
      jDOMNodePointer0.setValue(comment0);
      assertFalse(jDOMNodePointer0.isRoot());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      QName qName0 = new QName("spacE6", "spacE6");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      Element element0 = new Element("spacE6", "spacE6", "spacE6");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, element0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) element0);
      HashMap<Document, List<String>> hashMap0 = new HashMap<Document, List<String>>();
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest", hashMap0);
      NodePointer nodePointer0 = jDOMNodePointer0.createPath(jXPathContext0, (Object) processingInstruction0);
      assertFalse(nodePointer0.isContainer());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      QName qName0 = new QName("[", "[");
      VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
      Element element0 = new Element("spacEe", "[");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, element0);
      CDATA cDATA0 = new CDATA("<<unknown namespace>>");
      jDOMNodePointer0.setValue(cDATA0);
      assertEquals(Integer.MIN_VALUE, jDOMNodePointer0.getIndex());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      QName qName0 = new QName("", "");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      Element element0 = new Element("spacEe", "");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, element0);
      jDOMNodePointer0.setValue("");
      assertFalse(jDOMNodePointer0.isAttribute());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CDATA cDATA0 = new CDATA("&j!F,l3");
      Locale locale0 = Locale.TAIWAN;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.setValue("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CDATA cDATA0 = new CDATA("&j!F,l3");
      Locale locale0 = Locale.TAIWAN;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.setValue((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CDATA cDATA0 = new CDATA("O_FWo$M4`84d2=n(nSC");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0, "zY)CB");
      jDOMNodePointer0.setValue(cDATA0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashMap<Element, String> hashMap0 = new HashMap<Element, String>();
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("hRk-Ikn_", hashMap0);
      Locale locale0 = Locale.PRC;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction0, locale0, "preserve");
      Object object0 = jDOMNodePointer0.getValue();
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      Locale locale0 = jXPathContext0.getLocale();
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0, "");
      Object object0 = jDOMNodePointer0.getValue();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      Comment comment0 = new Comment("5Ch@M'D");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(comment0, locale0, "')");
      Object object0 = jDOMNodePointer0.getValue();
      assertEquals("5Ch@M'D", object0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      QName qName0 = new QName("spacEe", "spacEe");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      Element element0 = new Element("spacEe", "spacEe", "spacEe");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, element0);
      CDATA cDATA0 = new CDATA("http://www.w3.org/XML/1998/namespace");
      element0.addContent((Content) cDATA0);
      Object object0 = jDOMNodePointer0.getValue();
      assertNotNull(object0);
      assertEquals("http://www.w3.org/XML/1998/namespace", object0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      QName qName0 = new QName("ufigE+F)", "ufigE+F)");
      VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
      Element element0 = new Element("space");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, element0);
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("space", "ufigE+F)");
      element0.addContent((Content) processingInstruction0);
      Object object0 = jDOMNodePointer0.getValue();
      assertNotNull(object0);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      QName qName0 = new QName("spcEe");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      Element element0 = new Element("spcEe", "spcEe");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, element0);
      Document document0 = new Document(element0);
      jDOMNodePointer0.setValue(document0);
      jDOMNodePointer0.getValue();
      assertEquals(1, element0.getContentSize());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CDATA cDATA0 = new CDATA("&j!F,l3");
      Locale locale0 = Locale.TAIWAN;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
      Object object0 = jDOMNodePointer0.getValue();
      assertNotNull(object0);
      assertEquals("&j!F,l3", object0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HashMap<Element, String> hashMap0 = new HashMap<Element, String>();
      ProcessingInstruction processingInstruction0 = new ProcessingInstruction("hRk-Ikn_", hashMap0);
      Locale locale0 = Locale.PRC;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstruction0, locale0, "preserve");
      QName qName0 = jDOMNodePointer0.getName();
      assertEquals("hRk-Ikn_", qName0.toString());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Element element0 = new Element("c", "c", "c");
      Locale locale0 = Locale.ENGLISH;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      QName qName0 = jDOMNodePointer0.getName();
      assertEquals("c:c", qName0.toString());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Element element0 = new Element("p", "p", "p");
      Document document0 = new Document(element0);
      Locale locale0 = new Locale("/@");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(document0, locale0, "char");
      boolean boolean0 = jDOMNodePointer0.isLeaf();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      LinkedList<Text> linkedList0 = new LinkedList<Text>();
      Document document0 = new Document(linkedList0);
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(document0, locale0, "9C-u[HD>:]LU");
      // Undeclared exception!
      try { 
        jDOMNodePointer0.isLeaf();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root element not set
         //
         verifyException("org.jdom.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      QName qName0 = new QName("ufigE+)", "ufigE+)");
      VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
      Element element0 = new Element("spacEe", "ufigE+)");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, element0);
      CDATA cDATA0 = new CDATA("<<unknown namespace>>");
      element0.addContent((Content) cDATA0);
      boolean boolean0 = jDOMNodePointer0.isLeaf();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      QName qName0 = new QName("E", "E");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      Element element0 = new Element("E", "E", "E");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, element0);
      boolean boolean0 = jDOMNodePointer0.isLeaf();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CDATA cDATA0 = new CDATA("&j!F,l3");
      Locale locale0 = Locale.TAIWAN;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
      boolean boolean0 = jDOMNodePointer0.isLeaf();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      QName qName0 = new QName("spacE6");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      Element element0 = new Element("spacE6", "spacE6", "spacE6");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, element0);
      CDATA cDATA0 = new CDATA("http://www.w3.org/XML/1998/namespace");
      element0.addContent((Content) cDATA0);
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, "$spacE6");
      int int0 = jDOMNodePointer0.compareChildNodePointers(jDOMNodePointer0, jDOMNodePointer1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      LinkedList<NodeTypeTest> linkedList0 = new LinkedList<NodeTypeTest>();
      Document document0 = new Document(linkedList0);
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(document0, locale0, "<<unknown namespace>>");
      // Undeclared exception!
      try { 
        jDOMNodePointer0.compareChildNodePointers(jDOMNodePointer0, jDOMNodePointer1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JXPath internal error: compareChildNodes called for zh_CN
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      QName qName0 = new QName("ufigE+F)", "ufigE+F)");
      VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
      Element element0 = new Element("space");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, element0);
      String string0 = jDOMNodePointer0.getNamespaceURI("space");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("space");
      Locale locale0 = Locale.ITALIAN;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstructionTest0, locale0);
      String string0 = jDOMNodePointer0.getNamespaceURI("space");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      Document document0 = new Document();
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(document0, locale0, "&j!F,l3");
      // Undeclared exception!
      try { 
        jDOMNodePointer0.getNamespaceURI("element");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root element not set
         //
         verifyException("org.jdom.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      Locale locale0 = jXPathContext0.getLocale();
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0, "[");
      String string0 = jDOMNodePointer0.getNamespaceURI("xml");
      assertEquals("http://www.w3.org/XML/1998/namespace", string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      QName qName0 = new QName("Aspace", "Aspace");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      Element element0 = new Element("Aspace");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "http://www.w3.org/XML/1998/namespace");
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) variablePointer0, (Object) element0, (NodeTest) nodeNameTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      QName qName0 = new QName("http://www.w3.org/2000/xmlns/");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      Element element0 = new Element("spaNe", "spaNe", "spaNe");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(variablePointer0, element0);
      JDOMNodePointer jDOMNodePointer1 = new JDOMNodePointer(jDOMNodePointer0, element0);
      assertEquals("spaNe", jDOMNodePointer1.getNamespaceURI());
      
      String string0 = jDOMNodePointer1.asPath();
      assertEquals("$http://www.w3.org/2000/xmlns/spaNe:spaNe[1]", string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Locale locale0 = new Locale("space");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("space", locale0);
      QName qName0 = jDOMNodePointer0.getName();
      // Undeclared exception!
      try { 
        jDOMNodePointer0.createChild((JXPathContext) null, qName0, (-2118850530), (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("jgXhIpX/:,");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(processingInstructionTest0, (Locale) null, "jgXhIpX/:,");
      jDOMNodePointer0.hashCode();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      Locale locale0 = jXPathContext0.getLocale();
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0, "[");
      String string0 = jDOMNodePointer0.getNamespaceURI();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(locale0, locale0);
      int int0 = jDOMNodePointer0.compareChildNodePointers(jDOMNodePointer0, jDOMNodePointer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(linkedList0, locale0);
      QName qName0 = new QName("\"W3&~$TI59~4");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      BasicVariables basicVariables0 = new BasicVariables();
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      // Undeclared exception!
      try { 
        jDOMNodePointer0.childIterator(nodeNameTest0, false, variablePointer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: '\"W3&~$TI59~4'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Element element0 = new Element("space");
      Locale locale0 = new Locale("ufigE+F)", "value", "_~$,EDj");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(element0, locale0);
      int int0 = jDOMNodePointer0.getLength();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Locale locale0 = new Locale("space");
      CDATA cDATA0 = new CDATA("s5/c[");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(cDATA0, locale0);
      NodeIterator nodeIterator0 = jDOMNodePointer0.namespaceIterator();
      assertEquals(0, nodeIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Locale locale0 = new Locale("space");
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer("space", locale0);
      boolean boolean0 = jDOMNodePointer0.isLanguage("space");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      Locale locale0 = jXPathContext0.getLocale();
      JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, locale0, "");
      boolean boolean0 = jDOMNodePointer0.isCollection();
      assertFalse(boolean0);
  }
}
