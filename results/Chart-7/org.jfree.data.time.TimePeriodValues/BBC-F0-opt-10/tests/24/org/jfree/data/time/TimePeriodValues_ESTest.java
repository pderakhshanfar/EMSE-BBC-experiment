/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 21:33:19 GMT 2021
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.time.Day;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimePeriod;
import org.jfree.data.time.TimePeriodValue;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TimePeriodValues_ESTest extends TimePeriodValues_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0, "", "");
      timePeriodValues0.hashCode();
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) second0, 1.7976931348623157E308);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0, "", "o*");
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(335, 0);
      timePeriodValues1.add(timePeriodValue0);
      boolean boolean0 = timePeriodValues1.equals(timePeriodValues0);
      assertEquals(0, timePeriodValues1.getMinStartIndex());
      assertEquals(0, timePeriodValues1.getMinEndIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Year year0 = new Year();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(year0);
      timePeriodValues0.add((TimePeriod) year0, (-1.0));
      // Undeclared exception!
      try { 
        timePeriodValues0.delete(0, 343);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Day day0 = new Day();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(day0, "\"q>%HGxK`-*Yx1U", "`'WB");
      // Undeclared exception!
      try { 
        timePeriodValues0.delete(365, 365);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 365, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0);
      timePeriodValues0.add((TimePeriod) second0, (Number) 0);
      MockDate mockDate0 = new MockDate(31, (-59), 59, (-367), (-367), (-827));
      Hour hour0 = new Hour(mockDate0, second0.DEFAULT_TIME_ZONE);
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      timePeriodValues0.add((TimePeriod) regularTimePeriod0, (Number) hour0.LAST_HOUR_IN_DAY);
      // Undeclared exception!
      try { 
        timePeriodValues0.clone();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0);
      timePeriodValues0.add((TimePeriod) second0, (double) 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(59, 486, 486, 486, (-1), (-1));
      second0.peg(mockGregorianCalendar0);
      // Undeclared exception!
      try { 
        timePeriodValues0.createCopy(0, 212);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Day day0 = new Day();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(day0, "\"q>%HGxK`-*Yx1U", "`'WB");
      timePeriodValues0.setDomainDescription("8j%K(<Oku<");
      assertEquals("8j%K(<Oku<", timePeriodValues0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Hour hour0 = new Hour();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("");
      timePeriodValues0.add((TimePeriod) hour0, 597.0);
      timePeriodValues0.getValue(0);
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day(mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(mockDate0, "YUV`f~|2=C_l", "YUV`f~|2=C_l");
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) day0, (Number) 0);
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.getTimePeriod(0);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Day day0 = new Day();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(day0, "\"q>%HGxK`-*Yx1U", "\"q>%HGxK`-*Yx1U");
      assertEquals("\"q>%HGxK`-*Yx1U", timePeriodValues0.getRangeDescription());
      
      timePeriodValues0.setRangeDescription((String) null);
      String string0 = timePeriodValues0.getRangeDescription();
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertNull(string0);
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("\"q>%HGxK`-*Yx1U", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0, "", "");
      String string0 = timePeriodValues0.getRangeDescription();
      assertEquals("", string0);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Day day0 = new Day();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(day0, "\"q>%HGxK`-*Yx1U", "`'WB");
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) day0, 0.0);
      timePeriodValues0.add(timePeriodValue0);
      int int0 = timePeriodValues0.getMinStartIndex();
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0);
      Locale locale0 = Locale.forLanguageTag("");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(second0.DEFAULT_TIME_ZONE, locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Quarter quarter0 = new Quarter(date0);
      timePeriodValues0.add((TimePeriod) second0, (double) 0);
      timePeriodValues0.add((TimePeriod) quarter0, (-1.0));
      int int0 = timePeriodValues0.getMinStartIndex();
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0, "", "");
      timePeriodValues0.add((TimePeriod) second0, (double) 0);
      int int0 = timePeriodValues0.getMinMiddleIndex();
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0);
      Locale locale0 = Locale.forLanguageTag("");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(second0.DEFAULT_TIME_ZONE, locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Quarter quarter0 = new Quarter(date0);
      timePeriodValues0.add((TimePeriod) second0, (double) 0);
      timePeriodValues0.add((TimePeriod) quarter0, (-1.0));
      int int0 = timePeriodValues0.getMinMiddleIndex();
      assertEquals(1, timePeriodValues0.getMinStartIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Day day0 = new Day();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(day0, "\"q>%HGxK`-*Yx1U", "`'WB");
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) day0, 0.0);
      timePeriodValues0.add(timePeriodValue0);
      int int0 = timePeriodValues0.getMinEndIndex();
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("org.jfree.data.xy.YIntervalDataItem", "Time", "Time");
      Hour hour0 = new Hour();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) second0, (-1.0));
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.add((TimePeriod) hour0, (Number) 23);
      int int0 = timePeriodValues0.getMinEndIndex();
      assertEquals(1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Day day0 = new Day();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(day0, "\"q>%HGxK`-*Yx1U", "`'WB");
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) day0, 0.0);
      timePeriodValues0.add(timePeriodValue0);
      int int0 = timePeriodValues0.getMaxStartIndex();
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Year year0 = new Year();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(year0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) year0, 290.09291);
      timePeriodValues0.add(timePeriodValue0);
      int int0 = timePeriodValues0.getMaxMiddleIndex();
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Year year0 = new Year();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(year0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) year0, (-45.656050097));
      timePeriodValues0.add(timePeriodValue0);
      int int0 = timePeriodValues0.getMaxEndIndex();
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Year year0 = new Year();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(year0);
      timePeriodValues0.add((TimePeriod) year0, (-1.0));
      timePeriodValues0.getItemCount();
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ";PPB{TE", 0, 0, 0, 0, 0, 0, 0, (-4913));
      Year year0 = new Year(date0, simpleTimeZone0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(year0);
      String string0 = timePeriodValues0.getDomainDescription();
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Time", string0);
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0, "", "");
      String string0 = timePeriodValues0.getDomainDescription();
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0);
      timePeriodValues0.add((TimePeriod) second0, (double) 0);
      timePeriodValues0.getDataItem(0);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0);
      timePeriodValues0.setNotify(false);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(59, 59);
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals("Time", timePeriodValues1.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues1.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Second second0 = new Second();
      Minute minute0 = second0.getMinute();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0);
      timePeriodValues0.add((TimePeriod) minute0, (Number) minute0.FIRST_MINUTE_IN_HOUR);
      timePeriodValues0.add((TimePeriod) second0, (double) 59);
      timePeriodValues0.createCopy(59, 0);
      assertEquals(2, timePeriodValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Year year0 = new Year();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(year0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) year0, 290.09291);
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.createCopy(0, 0);
      assertEquals(0, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Year year0 = new Year();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(year0);
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      // Undeclared exception!
      try { 
        timePeriodValues0.update((-1), integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "`#gC");
      Day day0 = new Day(mockDate0, simpleTimeZone0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(day0);
      // Undeclared exception!
      try { 
        timePeriodValues0.getValue(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(185, 185, 185);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Month month0 = new Month(date0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(month0);
      // Undeclared exception!
      try { 
        timePeriodValues0.getTimePeriod((-2249));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Year year0 = new Year();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(year0, " but the series already contains an observation", " but the series already contains an observation");
      // Undeclared exception!
      try { 
        timePeriodValues0.getDataItem((-939));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Hour hour0 = new Hour();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, (String) null, "fj");
      // Undeclared exception!
      try { 
        timePeriodValues0.delete((-2919), (-1667));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Day day0 = new Day();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(day0, "\"q>%HGxK`-*Yx1U", "`'WB");
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) day0, 0.0);
      timePeriodValues0.add(timePeriodValue0);
      // Undeclared exception!
      try { 
        timePeriodValues0.createCopy((-2227), 2014);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0);
      timePeriodValues0.add((TimePeriod) second0, (Number) 0);
      MockDate mockDate0 = new MockDate(31, (-59), 59, (-367), (-367), (-827));
      Hour hour0 = new Hour(mockDate0, second0.DEFAULT_TIME_ZONE);
      timePeriodValues0.add((TimePeriod) hour0, (Number) second0.FIRST_SECOND_IN_MINUTE);
      // Undeclared exception!
      try { 
        timePeriodValues0.clone();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0);
      Locale locale0 = Locale.forLanguageTag("");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(second0.DEFAULT_TIME_ZONE, locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Quarter quarter0 = new Quarter(date0);
      timePeriodValues0.add((TimePeriod) second0, (double) 0);
      timePeriodValues0.add((TimePeriod) quarter0, (-1.0));
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(1, 0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) quarter0, (double) 4);
      // Undeclared exception!
      try { 
        timePeriodValues1.add(timePeriodValue0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0);
      Locale locale0 = Locale.forLanguageTag("");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(second0.DEFAULT_TIME_ZONE, locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Quarter quarter0 = new Quarter(date0);
      timePeriodValues0.add((TimePeriod) second0, (double) 0);
      timePeriodValues0.add((TimePeriod) quarter0, (-1.0));
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(1, 0);
      // Undeclared exception!
      try { 
        timePeriodValues1.add((TimePeriod) quarter0, (Number) 4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0);
      // Undeclared exception!
      try { 
        timePeriodValues0.add((TimePeriod) null, (Number) 59);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimePeriodValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(185, 185, 185);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(mockGregorianCalendar0, "Domain", "Domain");
      // Undeclared exception!
      try { 
        timePeriodValues0.add((TimePeriod) null, (double) 185);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimePeriodValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = null;
      try {
        timePeriodValues0 = new TimePeriodValues((Comparable) null, "!=oIns)!T)-=x!L", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = null;
      try {
        timePeriodValues0 = new TimePeriodValues((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Week week0 = new Week(151, 2279);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(week0, (String) null, (String) null);
      String string0 = timePeriodValues0.getDomainDescription();
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Day day0 = new Day();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(day0, "\"q>%HGxK`-*Yx1U", "\"q>%HGxK`-*Yx1U");
      // Undeclared exception!
      try { 
        timePeriodValues0.getDataItem(12);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 12, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Day day0 = new Day();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(day0, "\"q>%HGxK`-*Yx1U", "\"q>%HGxK`-*Yx1U");
      String string0 = timePeriodValues0.getRangeDescription();
      assertEquals("\"q>%HGxK`-*Yx1U", string0);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("\"q>%HGxK`-*Yx1U", timePeriodValues0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Year year0 = new Year();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(year0);
      timePeriodValues0.getItemCount();
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Day day0 = new Day();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(day0, "\"q>%HGxK`-*Yx1U", "`'WB");
      assertEquals("`'WB", timePeriodValues0.getRangeDescription());
      
      timePeriodValues0.setRangeDescription((String) null);
      timePeriodValues0.hashCode();
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("\"q>%HGxK`-*Yx1U", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Year year0 = new Year();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(year0);
      timePeriodValues0.hashCode();
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Year year0 = new Year();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(year0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) year0, (-45.656050097));
      timePeriodValues0.add(timePeriodValue0);
      TimePeriodValues timePeriodValues1 = (TimePeriodValues)timePeriodValues0.clone();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      timePeriodValues1.update(0, integer0);
      boolean boolean0 = timePeriodValues1.equals(timePeriodValues0);
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Year year0 = new Year();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(year0);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(29, 29);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) year0, 290.09291);
      timePeriodValues1.add(timePeriodValue0);
      Object object0 = timePeriodValues1.clone();
      boolean boolean0 = timePeriodValues0.equals(object0);
      assertEquals(0, timePeriodValues1.getMinStartIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0);
      Object object0 = timePeriodValues0.clone();
      timePeriodValues0.setRangeDescription("v");
      boolean boolean0 = timePeriodValues0.equals(object0);
      assertEquals("v", timePeriodValues0.getRangeDescription());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Year year0 = new Year();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(year0);
      TimePeriodValues timePeriodValues1 = new TimePeriodValues(year0, "*_nG;zd\"", "*_nG;zd\"");
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertEquals("*_nG;zd\"", timePeriodValues1.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertFalse(boolean0);
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals("*_nG;zd\"", timePeriodValues1.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Day day0 = new Day();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(day0, "\"q>%HGxK`-*Yx1U", "\"q>%HGxK`-*Yx1U");
      TimePeriodValues timePeriodValues1 = new TimePeriodValues("\"q>%HGxK`-*Yx1U");
      boolean boolean0 = timePeriodValues1.equals(timePeriodValues0);
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues1.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals("\"q>%HGxK`-*Yx1U", timePeriodValues0.getRangeDescription());
      assertEquals("Value", timePeriodValues1.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals("\"q>%HGxK`-*Yx1U", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Year year0 = new Year();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(year0);
      boolean boolean0 = timePeriodValues0.equals(year0);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertFalse(boolean0);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Year year0 = new Year();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(year0);
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(boolean0);
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Year year0 = new Year();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(year0);
      timePeriodValues0.add((TimePeriod) year0, (-1.0));
      timePeriodValues0.delete(0, (-1389));
      assertEquals(1, timePeriodValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0);
      MockDate mockDate0 = new MockDate((-3558L));
      Locale locale0 = Locale.KOREAN;
      Week week0 = new Week(mockDate0, second0.DEFAULT_TIME_ZONE, locale0);
      timePeriodValues0.add((TimePeriod) week0, (Number) 0);
      timePeriodValues0.add((TimePeriod) second0, (double) 59);
      // Undeclared exception!
      try { 
        timePeriodValues0.createCopy(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0);
      // Undeclared exception!
      try { 
        timePeriodValues0.add((TimePeriodValue) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null item not allowed.
         //
         verifyException("org.jfree.data.time.TimePeriodValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0);
      int int0 = timePeriodValues0.getMinMiddleIndex();
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), int0);
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Year year0 = new Year();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(year0);
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      // Undeclared exception!
      try { 
        timePeriodValues0.update(0, integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Year year0 = new Year();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(year0);
      int int0 = timePeriodValues0.getMaxEndIndex();
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), int0);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0);
      // Undeclared exception!
      try { 
        timePeriodValues0.getTimePeriod(59);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 59, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0);
      int int0 = timePeriodValues0.getMinStartIndex();
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), int0);
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("org.jfree.data.xy.YIntervalDataItem", "Time", "Time");
      int int0 = timePeriodValues0.getMaxStartIndex();
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), int0);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Time", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0);
      int int0 = timePeriodValues0.getMinEndIndex();
      assertEquals((-1), int0);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Second second0 = new Second();
      Minute minute0 = second0.getMinute();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0);
      timePeriodValues0.add((TimePeriod) minute0, (Number) second0.FIRST_SECOND_IN_MINUTE);
      timePeriodValues0.add((TimePeriod) second0, (double) 59);
      int int0 = timePeriodValues0.getMaxMiddleIndex();
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(mockDate0, "YUV`f~|2=C_l", "YUV`f~|2=C_l");
      // Undeclared exception!
      try { 
        timePeriodValues0.getValue((-242));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Year year0 = new Year();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(year0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) year0, (-45.656050097));
      timePeriodValues0.add(timePeriodValue0);
      Object object0 = timePeriodValues0.clone();
      boolean boolean0 = object0.equals(timePeriodValues0);
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0);
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      
      timePeriodValues0.setDomainDescription((String) null);
      timePeriodValues0.hashCode();
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0);
      int int0 = timePeriodValues0.getMaxMiddleIndex();
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), int0);
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
  }
}
