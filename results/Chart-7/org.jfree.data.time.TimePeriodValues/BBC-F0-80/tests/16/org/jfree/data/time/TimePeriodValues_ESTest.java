/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 11:21:00 GMT 2021
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.text.DateFormatSymbols;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimePeriod;
import org.jfree.data.time.TimePeriodValue;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.Week;
import org.jfree.data.xy.XYDataItem;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TimePeriodValues_ESTest extends TimePeriodValues_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 29, 0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Week week0 = new Week(mockDate0, timeZone0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(week0);
      timePeriodValues0.add((TimePeriod) week0, (double) 33L);
      // Undeclared exception!
      try { 
        timePeriodValues0.createCopy(0, 53);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      TimePeriodValues timePeriodValues1 = new TimePeriodValues(fixedMillisecond0);
      timePeriodValues1.add((TimePeriod) fixedMillisecond0, (double) 1183);
      timePeriodValues1.equals(timePeriodValues0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Hour hour0 = new Hour();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0);
      timePeriodValues0.add((TimePeriod) hour0, (double) (-1));
      // Undeclared exception!
      try { 
        timePeriodValues0.delete(0, 4052);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      // Undeclared exception!
      try { 
        timePeriodValues0.delete(53, 53);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 53, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
      Second second0 = new Second();
      timePeriodValues0.add((TimePeriod) second0, (Number) 4);
      timePeriodValues0.add((TimePeriod) quarter0, (Number) 4);
      // Undeclared exception!
      try { 
        timePeriodValues0.clone();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Week week0 = new Week(0, (-1935));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(week0, "Quarter outside valid range.", "Quarter outside valid range.");
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) week0, (Number) 1);
      timePeriodValues0.add(timePeriodValue0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("m", "The 'data' array must have length == 6.", "m");
      timePeriodValues0.setRangeDescription("m");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(1573.0, 1458.1);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(xYDataItem0, "Q4K7;K\")&&)v01(e<R", "Q4K7;K\")&&)v01(e<R");
      timePeriodValues0.setDomainDescription("gIdyd\"WUvW)}");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) fixedMillisecond0, 2466.12459);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      timePeriodValues0.add(timePeriodValue0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      timePeriodValues0.update(0, integer0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      BigInteger bigInteger0 = BigInteger.ZERO;
      TimePeriodValue timePeriodValue0 = new TimePeriodValue(fixedMillisecond0, bigInteger0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(bigInteger0);
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.getValue(0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte)76;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (Number) bigInteger0);
      timePeriodValues0.getValue((byte)0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (-422.48));
      timePeriodValues0.getTimePeriod(0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((double) 0, (-807.6849582787398));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(xYDataItem0, ":$\r!r91?&)cFj", (String) null);
      timePeriodValues0.getRangeDescription();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(bigInteger0, "", "");
      timePeriodValues0.getRangeDescription();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) fixedMillisecond0, 2466.12459);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.getMinStartIndex();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (-422.48));
      timePeriodValues0.getMinMiddleIndex();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) fixedMillisecond0, (Number) integer0);
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.getMinEndIndex();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Hour hour0 = new Hour(mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) hour0, (double) 0);
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.getMaxStartIndex();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Hour hour0 = new Hour();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0);
      timePeriodValues0.add((TimePeriod) hour0, (double) (-1));
      timePeriodValues0.getMaxMiddleIndex();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      TimePeriodValue timePeriodValue0 = new TimePeriodValue(fixedMillisecond0, bigInteger0);
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.getMaxEndIndex();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      MockDate mockDate0 = new MockDate(1000L);
      FixedMillisecond fixedMillisecond1 = new FixedMillisecond(mockDate0);
      timePeriodValues0.add((TimePeriod) fixedMillisecond1, 11.782036603268214);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, 11.782036603268214);
      timePeriodValues0.getMaxEndIndex();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      TimePeriodValue timePeriodValue0 = new TimePeriodValue(fixedMillisecond0, bigInteger0);
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.getItemCount();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(mockDate0);
      timePeriodValues0.setDomainDescription((String) null);
      timePeriodValues0.getDomainDescription();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Date date0 = mockSimpleDateFormat0.parse("", parsePosition0);
      SerialDate serialDate0 = SerialDate.createInstance(date0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(serialDate0, "", "");
      timePeriodValues0.getDomainDescription();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      TimePeriodValue timePeriodValue0 = new TimePeriodValue(fixedMillisecond0, bigInteger0);
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.getDataItem(0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(1573.0, 1458.1);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(xYDataItem0, "Q4K7;K\")&&)v01(e<R", "Q4K7;K\")&&)v01(e<R");
      timePeriodValues0.setNotify(false);
      timePeriodValues0.createCopy(3860, 3860);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 29, 0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Week week0 = new Week(mockDate0, timeZone0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(week0);
      // Undeclared exception!
      try { 
        timePeriodValues0.update((-804), 53);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Hour hour0 = new Hour(mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0);
      // Undeclared exception!
      try { 
        timePeriodValues0.getValue((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(1573.0, 1458.1);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(xYDataItem0);
      // Undeclared exception!
      try { 
        timePeriodValues0.getTimePeriod((-617));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      // Undeclared exception!
      try { 
        timePeriodValues0.getDataItem((-2841));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      Minute minute0 = new Minute(mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0);
      // Undeclared exception!
      try { 
        timePeriodValues0.delete((-1504), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Hour hour0 = new Hour();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0);
      timePeriodValues0.add((TimePeriod) hour0, (double) (-1));
      // Undeclared exception!
      try { 
        timePeriodValues0.createCopy(23, 23);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 23, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Hour hour0 = new Hour(mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0);
      timePeriodValues0.add((TimePeriod) hour0, (double) (-1));
      // Undeclared exception!
      try { 
        timePeriodValues0.createCopy((-1659), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      // Undeclared exception!
      try { 
        timePeriodValues0.add((TimePeriod) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimePeriodValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Hour hour0 = new Hour();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0);
      // Undeclared exception!
      try { 
        timePeriodValues0.add((TimePeriod) null, (-1.7976931348623157E308));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimePeriodValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = null;
      try {
        timePeriodValues0 = new TimePeriodValues((Comparable) null, (String) null, "]a@XKwS<(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = null;
      try {
        timePeriodValues0 = new TimePeriodValues((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, 0.0);
      timePeriodValues0.createCopy(0, 0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      timePeriodValues0.getDomainDescription();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      // Undeclared exception!
      try { 
        timePeriodValues0.getDataItem(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      timePeriodValues0.getRangeDescription();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      timePeriodValues0.getItemCount();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(1573.0, 1458.1);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(xYDataItem0, "m", "m");
      timePeriodValues0.hashCode();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((double) 0, (-807.6849582787398));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(xYDataItem0, ":$\r!r91?&)cFj", (String) null);
      timePeriodValues0.hashCode();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("m", (String) null, (String) null);
      timePeriodValues0.hashCode();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) fixedMillisecond0, (Number) integer0);
      timePeriodValues0.add(timePeriodValue0);
      TimePeriodValues timePeriodValues1 = new TimePeriodValues(fixedMillisecond0);
      timePeriodValues1.add((TimePeriod) fixedMillisecond0, (double) 1183);
      timePeriodValues1.equals(timePeriodValues0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      TimePeriodValue timePeriodValue0 = new TimePeriodValue(fixedMillisecond0, bigInteger0);
      timePeriodValues0.add(timePeriodValue0);
      TimePeriodValues timePeriodValues1 = new TimePeriodValues(fixedMillisecond0);
      timePeriodValues1.equals(timePeriodValues0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      TimePeriodValues timePeriodValues1 = (TimePeriodValues)timePeriodValues0.clone();
      timePeriodValues1.setRangeDescription("Overwritten values from: ");
      timePeriodValues0.equals(timePeriodValues1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      TimePeriodValues timePeriodValues1 = new TimePeriodValues(fixedMillisecond0, "[#@@sLJRy4G,8^Wc**", "");
      timePeriodValues0.equals(timePeriodValues1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      TimePeriodValues timePeriodValues1 = new TimePeriodValues(bigInteger0);
      timePeriodValues1.equals(timePeriodValues0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(578);
      Date date0 = spreadsheetDate0.toDate();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(bigInteger0, "", "");
      timePeriodValues0.equals(date0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      timePeriodValues0.equals(timePeriodValues0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      BigInteger bigInteger0 = BigInteger.ZERO;
      TimePeriodValue timePeriodValue0 = new TimePeriodValue(fixedMillisecond0, bigInteger0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(bigInteger0);
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.delete(7, (-1521));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      MockDate mockDate0 = new MockDate(1000L);
      FixedMillisecond fixedMillisecond1 = new FixedMillisecond(mockDate0);
      timePeriodValues0.add((TimePeriod) fixedMillisecond1, 11.782036603268214);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, 11.782036603268214);
      // Undeclared exception!
      try { 
        timePeriodValues0.clone();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 29, 0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Week week0 = new Week(mockDate0, timeZone0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(29);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (double) 29);
      timePeriodValues0.add((TimePeriod) week0, (Number) 53);
      // Undeclared exception!
      try { 
        timePeriodValues0.clone();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      // Undeclared exception!
      try { 
        timePeriodValues0.add((TimePeriodValue) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null item not allowed.
         //
         verifyException("org.jfree.data.time.TimePeriodValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(bigInteger0);
      timePeriodValues0.getMinMiddleIndex();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      // Undeclared exception!
      try { 
        timePeriodValues0.update(0, integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      timePeriodValues0.getMaxEndIndex();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      // Undeclared exception!
      try { 
        timePeriodValues0.getTimePeriod(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 1, 0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Week week0 = new Week(mockDate0, timeZone0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(week0);
      timePeriodValues0.getMinStartIndex();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(bigInteger0, "", "");
      timePeriodValues0.getMaxStartIndex();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      timePeriodValues0.getMinEndIndex();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(bigInteger0);
      // Undeclared exception!
      try { 
        timePeriodValues0.getValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      BigInteger bigInteger0 = BigInteger.ZERO;
      TimePeriodValue timePeriodValue0 = new TimePeriodValue(fixedMillisecond0, bigInteger0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(bigInteger0);
      timePeriodValues0.add(timePeriodValue0);
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      
      Object object0 = timePeriodValues0.clone();
      boolean boolean0 = timePeriodValues0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Hour hour0 = new Hour();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0);
      int int0 = timePeriodValues0.getMaxMiddleIndex();
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), int0);
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
  }
}
