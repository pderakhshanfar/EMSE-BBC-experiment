/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 16:12:12 GMT 2021
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.time.Instant;
import java.util.Date;
import javax.swing.JLayeredPane;
import javax.swing.plaf.synth.SynthSpinnerUI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimePeriod;
import org.jfree.data.time.TimePeriodValue;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.Week;
import org.jfree.data.xy.XYDataItem;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TimePeriodValues_ESTest extends TimePeriodValues_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("VXHu3*I}y@R`&uR", "Qz@RIeBo09Rsq+Woq", "VXHu3*I}y@R`&uR");
      Day day0 = new Day();
      BigInteger bigInteger0 = BigInteger.ZERO;
      TimePeriodValue timePeriodValue0 = new TimePeriodValue(day0, bigInteger0);
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.add((TimePeriod) day0, 2688.769082740145);
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      
      Object object0 = timePeriodValues0.clone();
      assertTrue(object0.equals((Object)timePeriodValues0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2110L);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0, "", "Time");
      timePeriodValues0.setDomainDescription("Failed to add cloned item.");
      timePeriodValues0.hashCode();
      assertEquals("Failed to add cloned item.", timePeriodValues0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("'Y@-TE%z!wxBjwkn$", "", "b|$mdUgHy&58e]Nm1h");
      Day day0 = new Day();
      timePeriodValues0.add((TimePeriod) day0, (Number) integer0);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(2249, (-999));
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals(1, timePeriodValues0.getItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("VXHu3*I}y@R`&uR", "yd`9-FmIcv", "VXHu3*I}y@R`&uR");
      Day day0 = new Day();
      timePeriodValues0.add((TimePeriod) day0, 2688.769082740145);
      // Undeclared exception!
      try { 
        timePeriodValues0.delete(0, Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(1.0, 1705.5869472873);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(xYDataItem0);
      // Undeclared exception!
      try { 
        timePeriodValues0.delete(17, 17);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 17, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
      Second second0 = new Second();
      timePeriodValues0.add((TimePeriod) second0, (double) 0);
      Day day0 = new Day();
      timePeriodValues0.add((TimePeriod) day0, 73.47);
      // Undeclared exception!
      try { 
        timePeriodValues0.clone();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
      Instant instant0 = MockInstant.ofEpochMilli(1);
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      timePeriodValues0.add((TimePeriod) minute0, (double) 0);
      timePeriodValues0.add((TimePeriod) quarter0, (double) 4);
      // Undeclared exception!
      try { 
        timePeriodValues0.clone();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
      Instant instant0 = MockInstant.now();
      Instant instant1 = MockInstant.plusMillis(instant0, 4);
      Date date0 = Date.from(instant1);
      Minute minute0 = new Minute(date0);
      timePeriodValues0.add((TimePeriod) minute0, (double) 0);
      timePeriodValues0.add((TimePeriod) quarter0, (double) 4);
      // Undeclared exception!
      try { 
        timePeriodValues0.clone();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0, "4-c g w30>iki", "4-c g w30>iki");
      timePeriodValues0.setRangeDescription("org.jfree.data.time.Minute");
      assertEquals("org.jfree.data.time.Minute", timePeriodValues0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0);
      timePeriodValues0.add((TimePeriod) second0, (Number) null);
      timePeriodValues0.getValue(0);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("vI{@", "vI{@", "vI{@");
      Day day0 = new Day();
      timePeriodValues0.add((TimePeriod) day0, (double) 2110L);
      timePeriodValues0.getTimePeriod(0);
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(integer0, (String) null, (String) null);
      String string0 = timePeriodValues0.getRangeDescription();
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(integer0, "'Y@-TE%z!wxBjWkn$", "g$hUB@E");
      String string0 = timePeriodValues0.getRangeDescription();
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("'Y@-TE%z!wxBjWkn$", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("g$hUB@E", string0);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("vI{@", "vI{@", "vI{@");
      Day day0 = new Day();
      timePeriodValues0.add((TimePeriod) day0, (double) 2110L);
      int int0 = timePeriodValues0.getMinStartIndex();
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("VXHu3*I}y@R`&uR", "F", "VXHu3*I}y@R`&uR");
      Day day0 = new Day();
      timePeriodValues0.add((TimePeriod) day0, 0.0);
      MockDate mockDate0 = new MockDate((-2465L));
      Hour hour0 = new Hour(mockDate0, day0.DEFAULT_TIME_ZONE);
      timePeriodValues0.add((TimePeriod) hour0, (Number) 23);
      int int0 = timePeriodValues0.getMinStartIndex();
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(integer0);
      Quarter quarter0 = new Quarter();
      timePeriodValues0.add((TimePeriod) quarter0, (double) 4);
      int int0 = timePeriodValues0.getMinMiddleIndex();
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("VXHu3*I}y@R`&uR", "F", "VXHu3*I}y@R`&uR");
      Day day0 = new Day();
      timePeriodValues0.add((TimePeriod) day0, 0.0);
      MockDate mockDate0 = new MockDate((-2465L));
      Hour hour0 = new Hour(mockDate0, day0.DEFAULT_TIME_ZONE);
      timePeriodValues0.add((TimePeriod) hour0, (Number) 23);
      int int0 = timePeriodValues0.getMinMiddleIndex();
      assertEquals(1, timePeriodValues0.getMinEndIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Month month0 = new Month(mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(month0, "", "");
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      timePeriodValues0.add((TimePeriod) month0, (Number) integer0);
      int int0 = timePeriodValues0.getMinEndIndex();
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("VXHu3*I}y@R`&uR", "F", "VXHu3*I}y@R`&uR");
      Day day0 = new Day();
      timePeriodValues0.add((TimePeriod) day0, 0.0);
      MockDate mockDate0 = new MockDate((-2465L));
      Hour hour0 = new Hour(mockDate0, day0.DEFAULT_TIME_ZONE);
      timePeriodValues0.add((TimePeriod) hour0, (Number) 23);
      int int0 = timePeriodValues0.getMinEndIndex();
      assertEquals(1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Month month0 = new Month(mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(month0, "", "");
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      timePeriodValues0.add((TimePeriod) month0, (Number) integer0);
      int int0 = timePeriodValues0.getMaxStartIndex();
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
      Instant instant0 = MockInstant.ofEpochMilli(1);
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      timePeriodValues0.add((TimePeriod) minute0, (double) 0);
      timePeriodValues0.add((TimePeriod) quarter0, (double) 4);
      int int0 = timePeriodValues0.getMaxStartIndex();
      assertEquals(1, timePeriodValues0.getMaxEndIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("'Y@-TE%z!wxBjwkn$", "", "b|$mdUgHy&58e]Nm1h");
      Day day0 = new Day();
      timePeriodValues0.add((TimePeriod) day0, (Number) integer0);
      int int0 = timePeriodValues0.getMaxMiddleIndex();
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("VXHu3*I}y@R`&uR", ".", "VXHu3*I}y@R`&uR");
      Day day0 = new Day();
      timePeriodValues0.add((TimePeriod) day0, 2688.769082740145);
      Second second0 = new Second();
      timePeriodValues0.add((TimePeriod) second0, 2688.769082740145);
      int int0 = timePeriodValues0.getMaxMiddleIndex();
      assertEquals(1, timePeriodValues0.getMaxEndIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Month month0 = new Month(mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(month0, "", "");
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      timePeriodValues0.add((TimePeriod) month0, (Number) integer0);
      int int0 = timePeriodValues0.getMaxEndIndex();
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("VXHu3*I}y@R`&uR", "", "VXHu3*I}y@R`&uR");
      Day day0 = new Day();
      timePeriodValues0.add((TimePeriod) day0, 2688.769082740145);
      Second second0 = new Second();
      timePeriodValues0.add((TimePeriod) second0, 2688.769082740145);
      int int0 = timePeriodValues0.getMaxEndIndex();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("'Y@-TE%z!wxBjwkn$", "", "b|$mdUgHy&58e]Nm1h");
      Day day0 = new Day();
      timePeriodValues0.add((TimePeriod) day0, (-1466.1357));
      timePeriodValues0.getItemCount();
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Month month0 = new Month(mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(month0, "", "");
      assertEquals("", timePeriodValues0.getDomainDescription());
      
      timePeriodValues0.setDomainDescription((String) null);
      String string0 = timePeriodValues0.getDomainDescription();
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0, "4-c g w30>iki", "4-c g w30>iki");
      String string0 = timePeriodValues0.getDomainDescription();
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("4-c g w30>iki", string0);
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("4-c g w30>iki", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(integer0);
      Quarter quarter0 = new Quarter();
      timePeriodValues0.add((TimePeriod) quarter0, (double) 4);
      timePeriodValues0.getDataItem(0);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2000, (-1), 180, 1, 180);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(mockDate0, "{2^", "{2^");
      timePeriodValues0.setNotify(false);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(1, 302);
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals("{2^", timePeriodValues1.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals("{2^", timePeriodValues1.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("VXHu3*I}y@R`&uR", "", "VXHu3*I}y@R`&uR");
      Day day0 = new Day();
      timePeriodValues0.add((TimePeriod) day0, 2688.769082740145);
      Second second0 = new Second();
      timePeriodValues0.add((TimePeriod) second0, 2688.769082740145);
      timePeriodValues0.createCopy(2000, 0);
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Month month0 = new Month(mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(month0, "", "");
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      timePeriodValues0.add((TimePeriod) month0, (Number) integer0);
      timePeriodValues0.createCopy(0, 0);
      assertEquals(0, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(integer0, (String) null, (String) null);
      // Undeclared exception!
      try { 
        timePeriodValues0.update((-2187), integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Minute minute0 = new Minute();
      Second second0 = new Second(240, minute0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0);
      SynthSpinnerUI synthSpinnerUI0 = new SynthSpinnerUI();
      timePeriodValues0.addPropertyChangeListener(synthSpinnerUI0);
      // Undeclared exception!
      try { 
        timePeriodValues0.setDomainDescription("UQPLQ(7?w[X4!\"&SSV");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.TimePeriodValues cannot be cast to javax.swing.JSpinner
         //
         verifyException("javax.swing.plaf.synth.SynthSpinnerUI", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(mockDate0, "HYQnYpN", ".<}TT");
      // Undeclared exception!
      try { 
        timePeriodValues0.getValue((-1124));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Day day0 = new Day(date0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(day0);
      // Undeclared exception!
      try { 
        timePeriodValues0.getTimePeriod((-5));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Month month0 = new Month(mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(month0, "", "");
      // Undeclared exception!
      try { 
        timePeriodValues0.getDataItem((-231));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(mockDate0);
      // Undeclared exception!
      try { 
        timePeriodValues0.delete((-2602), 3703);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Month month0 = new Month(mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(month0, "", "");
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      timePeriodValues0.add((TimePeriod) month0, (Number) integer0);
      // Undeclared exception!
      try { 
        timePeriodValues0.createCopy(243, 243);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 243, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("'Y@-TE%z!wxBjwkn$", "", "b|$mdUgHy&58e]Nm1h");
      // Undeclared exception!
      try { 
        timePeriodValues0.add((TimePeriod) null, (Number) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimePeriodValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(integer0, "'Y@-TE%z!wxBjWkn$", "g$hUB@E");
      // Undeclared exception!
      try { 
        timePeriodValues0.add((TimePeriod) null, (double) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimePeriodValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = null;
      try {
        timePeriodValues0 = new TimePeriodValues((Comparable) null, "org.jfree.data.general.SubSeriesDataset", "org.jfree.data.xy.XYBarDataset");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = null;
      try {
        timePeriodValues0 = new TimePeriodValues((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2110L);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(integer0);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (Number) integer0);
      // Undeclared exception!
      try { 
        timePeriodValues0.createCopy((-121), (-121));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Month month0 = new Month(mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(month0, "", "");
      String string0 = timePeriodValues0.getDomainDescription();
      assertEquals("", string0);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Week week0 = new Week(0, 0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(week0);
      // Undeclared exception!
      try { 
        timePeriodValues0.getDataItem(53);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 53, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Month month0 = new Month(mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(month0, "", "");
      String string0 = timePeriodValues0.getRangeDescription();
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("", string0);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("VXHu3*I}y@R`&uR", "F", "VXHu3*I}y@R`&uR");
      timePeriodValues0.getItemCount();
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("VXHu3*I}y@R`&uR", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("F", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("", "", (String) null);
      timePeriodValues0.hashCode();
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli((-630L));
      Date date0 = Date.from(instant0);
      Hour hour0 = new Hour(date0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, (String) null, (String) null);
      timePeriodValues0.hashCode();
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
      timePeriodValues0.add((TimePeriod) quarter0, (double) 4);
      TimePeriodValues timePeriodValues1 = (TimePeriodValues)timePeriodValues0.clone();
      timePeriodValues1.update(0, 1);
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(1, 1);
      MockDate mockDate0 = new MockDate((-1082), (-3434), 1543);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      timePeriodValues1.add((TimePeriod) fixedMillisecond0, (double) 1);
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues1.getMaxEndIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("'Y@-TE%z!wxBjwkn$");
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy((-777), (-139));
      timePeriodValues0.setRangeDescription("");
      boolean boolean0 = timePeriodValues1.equals(timePeriodValues0);
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("'Y@-TE%z!wxBjwkn$");
      TimePeriodValues timePeriodValues1 = new TimePeriodValues("'Y@-TE%z!wxBjwkn$", "b|$m}dUHy&8e]Nm1h", "M2Z5F^V#x!m");
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals("M2Z5F^V#x!m", timePeriodValues1.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertFalse(boolean0);
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals("b|$m}dUHy&8e]Nm1h", timePeriodValues1.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("'Y@-TE%z!wxBjwkn$");
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy((-777), (-139));
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      
      timePeriodValues1.setDescription("'Y@-TE%z!wxBjwkn$");
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertFalse(boolean0);
      assertFalse(timePeriodValues1.equals((Object)timePeriodValues0));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
      MockDate mockDate0 = new MockDate(1, 2198, (-754), 1, 2198);
      Millisecond millisecond0 = new Millisecond(mockDate0, quarter0.DEFAULT_TIME_ZONE);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) millisecond0, (Number) 999);
      boolean boolean0 = timePeriodValues0.equals(timePeriodValue0);
      assertFalse(boolean0);
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(mockDate0);
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues0);
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertTrue(boolean0);
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
      MockDate mockDate0 = new MockDate((-1082), (-3434), 1543);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (double) 1);
      timePeriodValues0.delete(420, 1);
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
      timePeriodValues0.add((TimePeriod) quarter0, (Number) 4);
      MockDate mockDate0 = new MockDate(1, 2198, (-754), 1, 2198);
      Millisecond millisecond0 = new Millisecond(mockDate0, quarter0.DEFAULT_TIME_ZONE);
      timePeriodValues0.add((TimePeriod) millisecond0, (double) (-754));
      timePeriodValues0.createCopy(2923, 4);
      assertEquals(0, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("VXHu3*I}y@R`&uR", "F", "VXHu3*I}y@R`&uR");
      Day day0 = new Day();
      timePeriodValues0.add((TimePeriod) day0, 0.0);
      MockDate mockDate0 = new MockDate((-2465L));
      Hour hour0 = new Hour(mockDate0, day0.DEFAULT_TIME_ZONE);
      timePeriodValues0.add((TimePeriod) hour0, (Number) 23);
      timePeriodValues0.createCopy(3349, 899);
      assertEquals(1, timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("8`ynj", "Time", "8`ynj");
      // Undeclared exception!
      try { 
        timePeriodValues0.add((TimePeriodValue) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null item not allowed.
         //
         verifyException("org.jfree.data.time.TimePeriodValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("VXHu3*I}y@R`&uR", "F", "VXHu3*I}y@R`&uR");
      int int0 = timePeriodValues0.getMinMiddleIndex();
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), int0);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("F", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("VXHu3*I}y@R`&uR", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
      // Undeclared exception!
      try { 
        timePeriodValues0.update(0, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("VXHu3*I}y@R`&uR", ".", "VXHu3*I}y@R`&uR");
      int int0 = timePeriodValues0.getMaxEndIndex();
      assertEquals("VXHu3*I}y@R`&uR", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals(".", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), int0);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("vI{@", "vI{@", "vI{@");
      // Undeclared exception!
      try { 
        timePeriodValues0.getTimePeriod(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("VXHu3*I}y@R`&uR", "F", "VXHu3*I}y@R`&uR");
      int int0 = timePeriodValues0.getMinStartIndex();
      assertEquals("F", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("VXHu3*I}y@R`&uR", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
      int int0 = timePeriodValues0.getMaxStartIndex();
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), int0);
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("VXHu3*I}y@R`&uR", "F", "VXHu3*I}y@R`&uR");
      int int0 = timePeriodValues0.getMinEndIndex();
      assertEquals((-1), int0);
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals("F", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("VXHu3*I}y@R`&uR", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0);
      // Undeclared exception!
      try { 
        timePeriodValues0.getValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("VXHu3*I}y@R`&uR", "F", "VXHu3*I}y@R`&uR");
      Day day0 = new Day();
      timePeriodValues0.add((TimePeriod) day0, 0.0);
      Object object0 = timePeriodValues0.clone();
      boolean boolean0 = timePeriodValues0.equals(object0);
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("vI{@", "vI{@", "vI{@");
      int int0 = timePeriodValues0.getMaxMiddleIndex();
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("vI{@", timePeriodValues0.getDomainDescription());
      assertEquals("vI{@", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), int0);
  }
}
