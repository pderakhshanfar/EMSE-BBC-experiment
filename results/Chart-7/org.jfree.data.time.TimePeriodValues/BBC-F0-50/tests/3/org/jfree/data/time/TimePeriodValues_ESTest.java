/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 17 16:01:45 GMT 2021
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import javax.swing.plaf.synth.SynthSpinnerUI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimePeriod;
import org.jfree.data.time.TimePeriodValue;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.XYDataItem;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TimePeriodValues_ESTest extends TimePeriodValues_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Hour hour0 = new Hour();
      Minute minute0 = new Minute(1, hour0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0);
      timePeriodValues0.add((TimePeriod) minute0, 1.7976931348623157E308);
      // Undeclared exception!
      try { 
        timePeriodValues0.createCopy(0, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0, "&tJ4wl<Uj}K.GE/", "Domain");
      timePeriodValues0.hashCode();
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals("&tJ4wl<Uj}K.GE/", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Domain", timePeriodValues0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0, "&tJ4wl<Uj}K.GE/", "Domain");
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(1, 1);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) quarter0, (Number) 4);
      timePeriodValues1.add(timePeriodValue0);
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals(0, timePeriodValues1.getMinStartIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0, "&tJ4wl<Uj}K.GE/", "Domain");
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) quarter0, (Number) 4);
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.add((TimePeriod) quarter0, (double) 1);
      timePeriodValues0.delete(1, 1);
      assertEquals(1, timePeriodValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0, "&tJ4wl<Uj}K.GE/", "Domain");
      // Undeclared exception!
      try { 
        timePeriodValues0.delete(1, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
      timePeriodValues0.add((TimePeriod) quarter0, (double) 4);
      MockDate mockDate0 = new MockDate(4, 1, (-1), (-1), 1);
      Millisecond millisecond0 = new Millisecond(mockDate0);
      timePeriodValues0.add((TimePeriod) millisecond0, (double) 4);
      // Undeclared exception!
      try { 
        timePeriodValues0.clone();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(1747.971007227804, 2490.6545625097947);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(xYDataItem0, "B", "B");
      timePeriodValues0.setRangeDescription("$p!tgUO6*L(w'Uq$g>~");
      assertEquals("$p!tgUO6*L(w'Uq$g>~", timePeriodValues0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("", "Requires start on or before end.", "Requires start on or before end.");
      timePeriodValues0.setDomainDescription("org.jfree.data.statistics.HistogramType");
      assertEquals("org.jfree.data.statistics.HistogramType", timePeriodValues0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3126);
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      Hour hour0 = new Hour(mockDate0, zoneInfo0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) hour0, (Number) 23);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(mockDate0, "PK\"'Iqv9S=|R\"", "PK\"'Iqv9S=|R\"");
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.update(0, 0);
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1066L);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (Number) bigInteger0);
      timePeriodValues0.getValue(0);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0, "&tJ4wl<Uj}K.GE/", "Domain");
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) quarter0, (Number) 1);
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.getTimePeriod(0);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(4519L);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      
      timePeriodValues0.setRangeDescription((String) null);
      String string0 = timePeriodValues0.getRangeDescription();
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertNull(string0);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Year year0 = new Year(3511);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(year0, "Requires start on or before end.", "");
      String string0 = timePeriodValues0.getRangeDescription();
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("", string0);
      assertEquals("Requires start on or before end.", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0, "&tJ4wl<Uj}K.GE/", "Domain");
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) quarter0, (Number) 4);
      timePeriodValues0.add(timePeriodValue0);
      int int0 = timePeriodValues0.getMinStartIndex();
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
      timePeriodValues0.add((TimePeriod) quarter0, (double) 4);
      MockDate mockDate0 = new MockDate(4, 1, (-1), (-1), 1);
      Millisecond millisecond0 = new Millisecond(mockDate0);
      timePeriodValues0.add((TimePeriod) millisecond0, (double) 4);
      int int0 = timePeriodValues0.getMinStartIndex();
      assertEquals(1, timePeriodValues0.getMinEndIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(89);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(serialDate0);
      Week week0 = new Week(0, 5);
      timePeriodValues0.add((TimePeriod) week0, (Number) 9999);
      int int0 = timePeriodValues0.getMinMiddleIndex();
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(89);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(serialDate0);
      Day day0 = new Day();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) day0, (Number) 2);
      timePeriodValues0.add(timePeriodValue0);
      MockDate mockDate0 = new MockDate(273, (-113), 0, 3, 273);
      mockDate0.setTime(2L);
      Second second0 = new Second(mockDate0);
      timePeriodValues0.add((TimePeriod) second0, (double) 3);
      int int0 = timePeriodValues0.getMinMiddleIndex();
      assertEquals(1, timePeriodValues0.getMinEndIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(89);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(serialDate0);
      Day day0 = new Day();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) day0, (Number) 2);
      timePeriodValues0.add(timePeriodValue0);
      int int0 = timePeriodValues0.getMinEndIndex();
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(89);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(serialDate0);
      Hour hour0 = new Hour();
      timePeriodValues0.add((TimePeriod) hour0, (-900.4544833566105));
      int int0 = timePeriodValues0.getMaxStartIndex();
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(89);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(serialDate0);
      Day day0 = new Day();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) day0, (Number) 2);
      timePeriodValues0.add(timePeriodValue0);
      MockDate mockDate0 = new MockDate(273, (-113), 0, 3, 273);
      Second second0 = new Second(mockDate0);
      timePeriodValues0.add((TimePeriod) second0, (double) 3);
      int int0 = timePeriodValues0.getMaxStartIndex();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(89);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(serialDate0);
      Day day0 = new Day();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) day0, (Number) 2);
      timePeriodValues0.add(timePeriodValue0);
      int int0 = timePeriodValues0.getMaxMiddleIndex();
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(89);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(serialDate0);
      Day day0 = new Day();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) day0, (Number) 2);
      timePeriodValues0.add(timePeriodValue0);
      MockDate mockDate0 = new MockDate(273, (-113), 0, 3, 273);
      Second second0 = new Second(mockDate0);
      timePeriodValues0.add((TimePeriod) second0, (double) 3);
      int int0 = timePeriodValues0.getMaxMiddleIndex();
      assertEquals(1, timePeriodValues0.getMaxEndIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0, "&tJ4wl<Uj}K.GE/", "Domain");
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) quarter0, (Number) 4);
      timePeriodValues0.add(timePeriodValue0);
      int int0 = timePeriodValues0.getMaxEndIndex();
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(89);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(serialDate0);
      Day day0 = new Day();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) day0, (Number) 2);
      timePeriodValues0.add(timePeriodValue0);
      MockDate mockDate0 = new MockDate(273, (-113), 0, 3, 273);
      Second second0 = new Second(mockDate0);
      timePeriodValues0.add((TimePeriod) second0, (double) 3);
      int int0 = timePeriodValues0.getMaxEndIndex();
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(88);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(spreadsheetDate0);
      timePeriodValues0.getItemCount();
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Year year0 = new Year(3511);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(year0, "Requires start on or before end.", "");
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) year0, (double) 3511);
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.getItemCount();
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(89);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(serialDate0, (String) null, "H)p/t");
      String string0 = timePeriodValues0.getDomainDescription();
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertNull(string0);
      assertEquals("H)p/t", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-514L), (-514L));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(simpleTimePeriod0, "", "(W\"=b8\"!&|*XIhrta%b");
      String string0 = timePeriodValues0.getDomainDescription();
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("(W\"=b8\"!&|*XIhrta%b", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals("", string0);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0, "&tJ4wl<Uj}K.GE/", "Domain");
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) quarter0, (Number) 4);
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.getDataItem(0);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
      timePeriodValues0.setNotify(false);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(2719, (-6));
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals("Time", timePeriodValues1.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals("Value", timePeriodValues1.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
      timePeriodValues0.add((TimePeriod) quarter0, (double) 1);
      MockDate mockDate0 = new MockDate(4, 4, 171, 171, 1, (-6));
      Day day0 = new Day(mockDate0);
      timePeriodValues0.add((TimePeriod) day0, 753.2159);
      timePeriodValues0.createCopy(2719, (-6));
      assertEquals(1, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) second0, (double) 0);
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.createCopy(0, 0);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("-,$Az[YFO[i", (String) null, (String) null);
      Double double0 = new Double((-1));
      // Undeclared exception!
      try { 
        timePeriodValues0.update((-1), double0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Day day0 = new Day();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(day0);
      SynthSpinnerUI synthSpinnerUI0 = new SynthSpinnerUI();
      timePeriodValues0.addPropertyChangeListener(synthSpinnerUI0);
      // Undeclared exception!
      try { 
        timePeriodValues0.setRangeDescription((String) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.TimePeriodValues cannot be cast to javax.swing.JSpinner
         //
         verifyException("javax.swing.plaf.synth.SynthSpinnerUI", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      // Undeclared exception!
      try { 
        timePeriodValues0.getValue((-2845));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("Domain", (String) null, "/@Oe||4[");
      // Undeclared exception!
      try { 
        timePeriodValues0.getTimePeriod((-4804));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Hour hour0 = new Hour();
      Minute minute0 = new Minute(1, hour0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0);
      // Undeclared exception!
      try { 
        timePeriodValues0.getDataItem((-3512));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(89);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(serialDate0);
      Day day0 = new Day();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) day0, (Number) 0);
      timePeriodValues0.add(timePeriodValue0);
      // Undeclared exception!
      try { 
        timePeriodValues0.createCopy((-1), 3897);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
      Second second0 = new Second();
      timePeriodValues0.add((TimePeriod) second0, (double) 1);
      timePeriodValues0.add((TimePeriod) quarter0, (Number) 1);
      // Undeclared exception!
      try { 
        timePeriodValues0.clone();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(89);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(serialDate0);
      Week week0 = new Week(0, 5);
      timePeriodValues0.add((TimePeriod) week0, (Number) 9999);
      Day day0 = new Day();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) day0, (Number) 2);
      timePeriodValues0.add(timePeriodValue0);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(2, 0);
      // Undeclared exception!
      try { 
        timePeriodValues1.add((TimePeriod) week0, (Number) 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
      // Undeclared exception!
      try { 
        timePeriodValues0.add((TimePeriod) null, (Number) 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimePeriodValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(89);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(serialDate0);
      Week week0 = new Week(0, 5);
      timePeriodValues0.add((TimePeriod) week0, (Number) 9999);
      Day day0 = new Day();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) day0, (Number) 2);
      timePeriodValues0.add(timePeriodValue0);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(4, 1);
      // Undeclared exception!
      try { 
        timePeriodValues1.add((TimePeriod) day0, (double) 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
      // Undeclared exception!
      try { 
        timePeriodValues0.add((TimePeriod) null, (double) (-2131));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimePeriodValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = null;
      try {
        timePeriodValues0 = new TimePeriodValues((Comparable) null, (String) null, "@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = null;
      try {
        timePeriodValues0 = new TimePeriodValues((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("", "Requires start on or before end.", "Requires start on or before end.");
      String string0 = timePeriodValues0.getDomainDescription();
      assertEquals("Requires start on or before end.", string0);
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Requires start on or before end.", timePeriodValues0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0, "&tJ4wl<Uj}K.GE/", "Domain");
      // Undeclared exception!
      try { 
        timePeriodValues0.getDataItem(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(4519L);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      String string0 = timePeriodValues0.getRangeDescription();
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Value", string0);
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("-,$Az[YFO[i", (String) null, (String) null);
      timePeriodValues0.hashCode();
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(89);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(serialDate0);
      Day day0 = new Day();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) day0, (Number) 2);
      timePeriodValues0.add(timePeriodValue0);
      Object object0 = timePeriodValues0.clone();
      boolean boolean0 = timePeriodValues0.equals(object0);
      assertEquals(1, timePeriodValues0.getItemCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy((-88), 2323);
      timePeriodValues1.add((TimePeriod) quarter0, 1433.22788323586);
      timePeriodValues0.add((TimePeriod) quarter0, (Number) 1);
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals(1, timePeriodValues0.getItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(89);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(serialDate0);
      Week week0 = new Week(0, 5);
      timePeriodValues0.add((TimePeriod) week0, (Number) 9999);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(4, 1);
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals(1, timePeriodValues0.getItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(89);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(serialDate0);
      timePeriodValues0.setDomainDescription("'");
      TimePeriodValues timePeriodValues1 = new TimePeriodValues(serialDate0, "'", "*3");
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals("'", timePeriodValues0.getDomainDescription());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(89);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(serialDate0);
      timePeriodValues0.setDomainDescription("org.jfree.data.statistics.SimpleHistogramBin");
      TimePeriodValues timePeriodValues1 = new TimePeriodValues(serialDate0);
      boolean boolean0 = timePeriodValues1.equals(timePeriodValues0);
      assertEquals("org.jfree.data.statistics.SimpleHistogramBin", timePeriodValues0.getDomainDescription());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Hour hour0 = new Hour();
      Minute minute0 = new Minute(1, hour0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0);
      timePeriodValues0.setKey(hour0);
      TimePeriodValues timePeriodValues1 = new TimePeriodValues(minute0, "5-8K1YUW@33&4:Ue", "KuFou");
      boolean boolean0 = timePeriodValues1.equals(timePeriodValues0);
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertFalse(boolean0);
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals("KuFou", timePeriodValues1.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1066L);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      boolean boolean0 = timePeriodValues0.equals(fixedMillisecond0);
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertFalse(boolean0);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Year year0 = new Year(3511);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(year0, "Requires start on or before end.", "");
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues0);
      assertEquals("Requires start on or before end.", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertTrue(boolean0);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(89);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(serialDate0);
      // Undeclared exception!
      try { 
        timePeriodValues0.delete((-2583), 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(89);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(serialDate0);
      Day day0 = new Day();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) day0, (Number) 2);
      timePeriodValues0.add(timePeriodValue0);
      MockDate mockDate0 = new MockDate(273, (-113), 0, 3, 273);
      Second second0 = new Second(mockDate0);
      timePeriodValues0.add((TimePeriod) second0, (double) 3);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(59, (-659));
      // Undeclared exception!
      try { 
        timePeriodValues1.add(timePeriodValue0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(89);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(serialDate0);
      Day day0 = new Day();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) day0, (Number) 2);
      timePeriodValues0.add(timePeriodValue0);
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      
      MockDate mockDate0 = new MockDate(273, (-113), 0, 3, 273);
      mockDate0.setTime(2L);
      Second second0 = new Second(mockDate0);
      timePeriodValues0.add((TimePeriod) second0, (double) 3);
      int int0 = timePeriodValues0.getMinEndIndex();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(89);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(serialDate0);
      // Undeclared exception!
      try { 
        timePeriodValues0.add((TimePeriodValue) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null item not allowed.
         //
         verifyException("org.jfree.data.time.TimePeriodValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(89);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(serialDate0);
      int int0 = timePeriodValues0.getMinMiddleIndex();
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), int0);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1066L);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        timePeriodValues0.update(0, bigInteger0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(89);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(serialDate0);
      int int0 = timePeriodValues0.getMaxEndIndex();
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), int0);
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1066L);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      // Undeclared exception!
      try { 
        timePeriodValues0.getTimePeriod(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0);
      int int0 = timePeriodValues0.getMinStartIndex();
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), int0);
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(89);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(serialDate0);
      int int0 = timePeriodValues0.getMaxStartIndex();
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(89);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(serialDate0);
      int int0 = timePeriodValues0.getMinEndIndex();
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1066L);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      // Undeclared exception!
      try { 
        timePeriodValues0.getValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(89);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(serialDate0);
      int int0 = timePeriodValues0.getMaxMiddleIndex();
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), int0);
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
  }
}
