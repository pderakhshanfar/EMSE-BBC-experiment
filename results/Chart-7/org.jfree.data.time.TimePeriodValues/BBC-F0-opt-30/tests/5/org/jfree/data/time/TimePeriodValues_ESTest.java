/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 15:43:35 GMT 2021
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import java.util.SimpleTimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimePeriod;
import org.jfree.data.time.TimePeriodValue;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TimePeriodValues_ESTest extends TimePeriodValues_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Day day0 = new Day();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(day0);
      timePeriodValues0.add((TimePeriod) day0, 3044.9519);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(564, (-79));
      boolean boolean0 = timePeriodValues1.equals(timePeriodValues0);
      assertEquals(1, timePeriodValues0.getItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      timePeriodValues0.add((TimePeriod) millisecond0, (Number) 0);
      // Undeclared exception!
      try { 
        timePeriodValues0.delete(0, 15);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, (String) null, "*CP");
      // Undeclared exception!
      try { 
        timePeriodValues0.delete(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, "Series index out of bounds", "Series index out of bounds");
      timePeriodValues0.add((TimePeriod) millisecond0, 0.0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) millisecond0, (Number) 0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (double) 999);
      timePeriodValues0.add(timePeriodValue0);
      assertEquals(1, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      timePeriodValues0.add((TimePeriod) millisecond0, (double) 999);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(24L);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (Number) 0);
      // Undeclared exception!
      try { 
        timePeriodValues0.clone();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1875, "");
      Quarter quarter0 = new Quarter(mockDate0, simpleTimeZone0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0, "Failed to add cloned item.", "Cq7E32#(*");
      timePeriodValues0.setDomainDescription("");
      assertEquals("", timePeriodValues0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, (String) null, "*CP");
      timePeriodValues0.add((TimePeriod) millisecond0, (Number) 999);
      timePeriodValues0.update(0, 999);
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Month month0 = new Month();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(month0);
      timePeriodValues0.add((TimePeriod) month0, (Number) null);
      timePeriodValues0.getValue(0);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      timePeriodValues0.add((TimePeriod) millisecond0, (double) 999);
      timePeriodValues0.getTimePeriod(0);
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0, (String) null, (String) null);
      String string0 = timePeriodValues0.getRangeDescription();
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, "Range", "");
      String string0 = timePeriodValues0.getRangeDescription();
      assertEquals("", string0);
      assertEquals("Range", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      timePeriodValues0.add((TimePeriod) millisecond0, (double) 999);
      int int0 = timePeriodValues0.getMinStartIndex();
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, "Series index out of bounds", "Series index out of bounds");
      timePeriodValues0.add((TimePeriod) millisecond0, 0.0);
      int int0 = timePeriodValues0.getMinMiddleIndex();
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      RegularTimePeriod regularTimePeriod0 = millisecond0.next();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(regularTimePeriod0, "Series index out of bounds", "Series index out of bounds");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), (-1), (-3896), 0, (-1), 999);
      regularTimePeriod0.peg(mockGregorianCalendar0);
      timePeriodValues0.add((TimePeriod) millisecond0, 0.0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) regularTimePeriod0, (Number) 0);
      timePeriodValues0.add(timePeriodValue0);
      int int0 = timePeriodValues0.getMinMiddleIndex();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      timePeriodValues0.add((TimePeriod) millisecond0, (Number) 0);
      int int0 = timePeriodValues0.getMinEndIndex();
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, "Series index out of bounds", "Series index out of bounds");
      timePeriodValues0.add((TimePeriod) millisecond0, 0.0);
      int int0 = timePeriodValues0.getMaxStartIndex();
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      timePeriodValues0.add((TimePeriod) millisecond0, (double) 999);
      int int0 = timePeriodValues0.getMaxMiddleIndex();
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      timePeriodValues0.add((TimePeriod) millisecond0, (Number) 0);
      int int0 = timePeriodValues0.getMaxEndIndex();
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Date date0 = millisecond0.getEnd();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      timePeriodValues0.add((TimePeriod) millisecond0, (double) 999);
      Hour hour0 = new Hour(date0);
      Minute minute0 = new Minute(0, hour0);
      Second second0 = new Second(0, minute0);
      timePeriodValues0.add((TimePeriod) second0, (-1682.6));
      int int0 = timePeriodValues0.getMaxEndIndex();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Week week0 = new Week();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(week0);
      timePeriodValues0.getItemCount();
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      timePeriodValues0.add((TimePeriod) millisecond0, (Number) 999);
      timePeriodValues0.getItemCount();
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("m", (String) null, "");
      String string0 = timePeriodValues0.getDomainDescription();
      assertNull(string0);
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("", "", "");
      String string0 = timePeriodValues0.getDomainDescription();
      assertEquals("", string0);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, (String) null, "*CP");
      timePeriodValues0.add((TimePeriod) millisecond0, (Number) 999);
      timePeriodValues0.getDataItem(0);
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      timePeriodValues0.setNotify(false);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(0, 0);
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals("Value", timePeriodValues1.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals("Time", timePeriodValues1.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertNotSame(timePeriodValues1, timePeriodValues0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      RegularTimePeriod regularTimePeriod0 = millisecond0.next();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(regularTimePeriod0, "Series index out of bounds", "Series index out of bounds");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), (-1), (-3896), 0, (-1), 999);
      regularTimePeriod0.peg(mockGregorianCalendar0);
      timePeriodValues0.add((TimePeriod) millisecond0, 0.0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) regularTimePeriod0, (Number) 0);
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.createCopy(999, (-1));
      assertEquals(2, timePeriodValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      timePeriodValues0.add((TimePeriod) millisecond0, (double) 999);
      timePeriodValues0.createCopy(0, 0);
      assertEquals(0, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Year year0 = new Year();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(year0, "wN_aXH7~aU1q]", "wN_aXH7~aU1q]");
      // Undeclared exception!
      try { 
        timePeriodValues0.update((-334), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Year year0 = new Year();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(year0, "wN_aXH7~aU1q]", "wN_aXH7~aU1q]");
      // Undeclared exception!
      try { 
        timePeriodValues0.getValue((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, "Series index out of bounds", "m");
      // Undeclared exception!
      try { 
        timePeriodValues0.getTimePeriod((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Year year0 = new Year();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(year0, "wN_aXH7~aU1q]", "wN_aXH7~aU1q]");
      // Undeclared exception!
      try { 
        timePeriodValues0.getDataItem(2111);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2111, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Year year0 = new Year();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(year0, "wN_aXH7~aU1q]", "wN_aXH7~aU1q]");
      // Undeclared exception!
      try { 
        timePeriodValues0.delete((-1), 1525);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      timePeriodValues0.add((TimePeriod) millisecond0, (double) 999);
      // Undeclared exception!
      try { 
        timePeriodValues0.createCopy(0, 1023);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      MockDate mockDate0 = new MockDate(0, 999, 0);
      Quarter quarter0 = new Quarter(mockDate0, millisecond0.DEFAULT_TIME_ZONE);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) quarter0, (double) 1);
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.add((TimePeriod) millisecond0, (double) 999);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(999, 1);
      // Undeclared exception!
      try { 
        timePeriodValues1.add((TimePeriod) millisecond0, (Number) 999);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Week week0 = new Week();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(week0);
      // Undeclared exception!
      try { 
        timePeriodValues0.add((TimePeriod) null, (Number) 53);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimePeriodValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      // Undeclared exception!
      try { 
        timePeriodValues0.add((TimePeriod) null, (double) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimePeriodValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = null;
      try {
        timePeriodValues0 = new TimePeriodValues((Comparable) null, (String) null, "*CP");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = null;
      try {
        timePeriodValues0 = new TimePeriodValues((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Day day0 = new Day();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(day0);
      timePeriodValues0.add((TimePeriod) day0, (-21.6));
      // Undeclared exception!
      try { 
        timePeriodValues0.createCopy((-1519), (-1082));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Day day0 = new Day();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(day0, "tit[{Ks=~aC", "tit[{Ks=~aC");
      String string0 = timePeriodValues0.getDomainDescription();
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("tit[{Ks=~aC", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("tit[{Ks=~aC", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      // Undeclared exception!
      try { 
        timePeriodValues0.getDataItem((-1065));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, (String) null, "*CP");
      String string0 = timePeriodValues0.getRangeDescription();
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("*CP", string0);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, "", (String) null);
      timePeriodValues0.hashCode();
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("", timePeriodValues0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      timePeriodValues0.hashCode();
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, (String) null, "{");
      timePeriodValues0.hashCode();
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("{", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      timePeriodValues0.add((TimePeriod) millisecond0, (Number) 999);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(0, (-1357));
      timePeriodValues1.add((TimePeriod) millisecond0, (-3132.457058965034));
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals(1, timePeriodValues0.getItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      Object object0 = timePeriodValues0.clone();
      timePeriodValues0.add((TimePeriod) millisecond0, (-21.6));
      boolean boolean0 = timePeriodValues0.equals(object0);
      assertFalse(object0.equals((Object)timePeriodValues0));
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      TimePeriodValues timePeriodValues1 = (TimePeriodValues)timePeriodValues0.clone();
      timePeriodValues1.setRangeDescription("+\"@C Nztlqm");
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals("+\"@C Nztlqm", timePeriodValues1.getRangeDescription());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, "Series index out of bounds", "Series index out of bounds");
      TimePeriodValues timePeriodValues1 = new TimePeriodValues(millisecond0);
      boolean boolean0 = timePeriodValues1.equals(timePeriodValues0);
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals("Value", timePeriodValues1.getRangeDescription());
      assertEquals("Series index out of bounds", timePeriodValues0.getDomainDescription());
      assertFalse(boolean0);
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals("Time", timePeriodValues1.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals("Series index out of bounds", timePeriodValues0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, (String) null, "*CP");
      RegularTimePeriod regularTimePeriod0 = millisecond0.previous();
      TimePeriodValues timePeriodValues1 = new TimePeriodValues(regularTimePeriod0);
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals("Time", timePeriodValues1.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertEquals("*CP", timePeriodValues0.getRangeDescription());
      assertFalse(boolean0);
      assertEquals("Value", timePeriodValues1.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      boolean boolean0 = timePeriodValues0.equals((Object) null);
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertFalse(boolean0);
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Year year0 = new Year();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(year0, "wN_aXH7~aU1q]", "wN_aXH7~aU1q]");
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("wN_aXH7~aU1q]", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("wN_aXH7~aU1q]", timePeriodValues0.getRangeDescription());
      assertTrue(boolean0);
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      timePeriodValues0.add((TimePeriod) millisecond0, (double) 999);
      timePeriodValues0.delete(999, 0);
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      timePeriodValues0.add((TimePeriod) millisecond0, (double) 999);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(21100328520000L);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (Number) 0);
      int int0 = timePeriodValues0.getMaxMiddleIndex();
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      timePeriodValues0.add((TimePeriod) millisecond0, (double) 999);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(24L);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (Number) 0);
      int int0 = timePeriodValues0.getMinStartIndex();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      // Undeclared exception!
      try { 
        timePeriodValues0.add((TimePeriodValue) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null item not allowed.
         //
         verifyException("org.jfree.data.time.TimePeriodValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, "Series index out of bounds", "Series index out of bounds");
      int int0 = timePeriodValues0.getMinMiddleIndex();
      assertEquals((-1), int0);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Series index out of bounds", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("Series index out of bounds", timePeriodValues0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, (String) null, "*CP");
      // Undeclared exception!
      try { 
        timePeriodValues0.update(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      int int0 = timePeriodValues0.getMaxEndIndex();
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), int0);
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      // Undeclared exception!
      try { 
        timePeriodValues0.getTimePeriod(999);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 999, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      int int0 = timePeriodValues0.getMinStartIndex();
      assertEquals((-1), int0);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      int int0 = timePeriodValues0.getMaxStartIndex();
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, "Series index out of bounds", "");
      int int0 = timePeriodValues0.getMinEndIndex();
      assertEquals((-1), int0);
      assertEquals("Series index out of bounds", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      // Undeclared exception!
      try { 
        timePeriodValues0.getValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      timePeriodValues0.add((TimePeriod) millisecond0, (double) 999);
      Object object0 = timePeriodValues0.clone();
      boolean boolean0 = timePeriodValues0.equals(object0);
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Year year0 = new Year();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(year0, "wN_aXH7~aU1q]", "wN_aXH7~aU1q]");
      timePeriodValues0.setRangeDescription("Null 'id' argument.");
      assertEquals("Null 'id' argument.", timePeriodValues0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      int int0 = timePeriodValues0.getMaxMiddleIndex();
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), int0);
  }
}
