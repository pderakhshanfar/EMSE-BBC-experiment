/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 12 12:24:30 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLStreamHandler;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.file.FileSystemException;
import java.nio.file.NoSuchFileException;
import java.nio.file.Path;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.Consumer;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVParser_ESTest extends CSVParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) pipedWriter0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      cSVFormat1.printRecord(pipedWriter0, objectArray0);
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate name: \"org.apache.commons.csv.CSVFormat@0000000002\" in [org.apache.commons.csv.CSVFormat@0000000002, java.io.PipedWriter@0000000003, org.apache.commons.csv.CSVFormat@0000000002, org.apache.commons.csv.CSVFormat@0000000004, org.apache.commons.csv.CSVFormat@0000000004, java.lang.Object@0000000005]
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) pipedReader0;
      objectArray0[6] = (Object) pipedWriter0;
      objectArray0[3] = object0;
      objectArray0[4] = (Object) pipedReader0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) cSVFormat0;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte) (-32);
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte) (-29);
      byteArray0[7] = (byte)97;
      byteArray0[8] = (byte) (-49);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      cSVFormat1.printRecord(pipedWriter0, objectArray0);
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate name: \"null\" in [null, java.io.PipedReader@0000000003, null, java.lang.Object@0000000004, java.io.PipedReader@0000000003, java.lang.Object@0000000005, org.apache.commons.csv.CSVFormat@0000000006]
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) pipedWriter0;
      objectArray0[1] = (Object) pipedReader0;
      objectArray0[2] = (Object) pipedReader0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat0;
      cSVFormat0.printRecord(pipedWriter0, objectArray0);
      Object[] objectArray1 = new Object[6];
      objectArray1[0] = (Object) cSVFormat1;
      objectArray1[1] = (Object) pipedWriter0;
      Object object1 = new Object();
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      cSVFormat2.printRecord(pipedWriter0, objectArray1);
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate name: \"java.io.PipedReader@0000000004\" in [java.io.PipedWriter@0000000003, java.io.PipedReader@0000000004, java.io.PipedReader@0000000004, java.lang.Object@0000000005, org.apache.commons.csv.CSVFormat@0000000006, org.apache.commons.csv.CSVFormat@0000000002, org.apache.commons.csv.CSVFormat@0000000006]
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.withFirstRecordAsHeader();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      Charset charset0 = Charset.defaultCharset();
      CSVParser cSVParser0 = CSVParser.parse((InputStream) dataInputStream0, charset0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVParser0.getRecords();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "vA7 C`GkvdY!grX&19";
      StringReader stringReader0 = new StringReader("vA7 C`GkvdY!grX&19");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      CharBuffer charBuffer0 = CharBuffer.allocate(1160);
      stringReader0.read(charBuffer0);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("vA7 C`GkvdY!grX&19");
      CSVParser cSVParser0 = CSVParser.parse((Reader) stringReader0, cSVFormat3);
      cSVParser0.getHeaderMap();
      // Undeclared exception!
      try { 
        MockURI.create("vA7 C`GkvdY!grX&19");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 3: vA7 C`GkvdY!grX&19
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse("\r\n", cSVFormat1);
      cSVParser0.getFirstEndOfLine();
      CSVParser.parse("4%/ah+rX=82Y", cSVFormat0);
      try { 
        MockURI.URI("4%/ah+rX=82Y");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Malformed escape pair at index 1: 4%/ah+rX=82Y
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse("\r\n", cSVFormat1);
      cSVParser0.getCurrentLineNumber();
      cSVParser0.close();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse("\r\n", cSVFormat1);
      cSVParser0.close();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat1.printer();
      String string0 = " $9j ga_Q|'6'I?=n\\";
      CSVParser cSVParser0 = CSVParser.parse(" $9j ga_Q|'6'I?=n", cSVFormat1);
      cSVParser0.close();
      try { 
        CSVParser.parse(string0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // EOF whilst processing escape sequence
         //
         verifyException("org.apache.commons.csv.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      StringReader stringReader0 = new StringReader("The comment start marker character cannot be a line break");
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0, (-816L), (-1117L));
      cSVParser0.nextRecord();
      MockURL.getFileExample();
      // Undeclared exception!
      try { 
        Charset.forName("The comment start marker character cannot be a line break");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // The comment start marker character cannot be a line break
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat1, (-1345L), 0L);
      long long0 = cSVParser0.getRecordNumber();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVParser.parse("9spK[\"sX,", cSVFormat0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("9spK[\"sX,");
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0, 1797L, 1797L);
      cSVParser0.nextRecord();
      assertEquals(1797L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte) (-108);
      byteArray0[8] = (byte)120;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVParser cSVParser0 = CSVParser.parse(" (kH-YH}nR1SzT&J", cSVFormat0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse("9spK[\"sX,", cSVFormat1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9spK[\"sX,");
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      CSVFormat cSVFormat2 = CSVFormat.TDF;
      cSVFormat2.withSkipHeaderRecord(false);
      cSVFormat2.withIgnoreEmptyLines();
      CSVParser cSVParser1 = CSVParser.parse("hBs4}|u~7Kn+V.e2", cSVFormat1);
      Map<String, Integer> map0 = cSVParser1.getHeaderMap();
      assertEquals(1, map0.size());
      
      cSVParser0.nextRecord();
      cSVParser0.close();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "r7Ik8k]U\"1~xR.");
      CSVParser cSVParser2 = CSVParser.parse("VPw6Kw5", cSVFormat1);
      cSVParser2.getFirstEndOfLine();
      assertEquals(0L, cSVParser2.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse(",IVhg]o?;1jvh", cSVFormat1);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVParser cSVParser0 = CSVParser.parse("9spK[\"sX,", cSVFormat0);
      cSVParser0.getRecords();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVParser.parse("CSVParser has been closed", cSVFormat1);
      MockFile mockFile0 = new MockFile("CSVParser has been closed", "CSVParser has been closed");
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      try { 
        CSVParser.parse(path0, (Charset) null, cSVFormat1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)106;
      byteArray0[5] = (byte) (-40);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      URL uRL0 = MockURL.getHttpExample();
      Charset charset0 = Charset.defaultCharset();
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse(" [", cSVFormat1);
      cSVParser0.close();
      boolean boolean0 = cSVParser0.isClosed();
      assertEquals(0L, cSVParser0.getRecordNumber());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat1;
      CSVFormat cSVFormat2 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      CSVFormat cSVFormat4 = cSVFormat3.withTrim();
      Object object0 = new Object();
      CSVFormat cSVFormat5 = CSVFormat.POSTGRESQL_TEXT;
      CSVParser.parse("N", cSVFormat4);
      PipedReader pipedReader0 = new PipedReader();
      Character character0 = new Character('');
      CSVFormat cSVFormat6 = cSVFormat4.withQuote(character0);
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat6, (-1154L), (-1154L));
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("9spK[\"sX,", cSVFormat0);
      cSVParser0.close();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "HeaderComments:";
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      Character character0 = new Character('0');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      cSVFormat2.withHeader((String[]) null);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreHeaderCase(true);
      CSVParser cSVParser0 = CSVParser.parse("HeaderComments:", cSVFormat3);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      try { 
        MockURL.URL("HeaderComments:", "HeaderComments:", (-7), "No quotes mode set but no escape character is set");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid port number :-7
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      CSVParser cSVParser0 = CSVParser.parse("CSVParser has been closed", cSVFormat2);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('g');
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser((Reader) null, cSVFormat0, (-2237L), 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat1.withNullString("S,<L?(UO=7EX6]s=W");
      CSVParser.parse("format", cSVFormat1);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, 2884);
      Charset charset0 = Charset.defaultCharset();
      try { 
        CSVParser.parse((InputStream) pushbackInputStream0, charset0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "HeaderComments:");
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      Character character0 = Character.valueOf('0');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      CSVParser cSVParser0 = CSVParser.parse("(line ", cSVFormat3);
      cSVParser0.iterator();
      MockFile mockFile0 = new MockFile("p", "O7evt`B~yWyf<N");
      cSVFormat1.withTrailingDelimiter();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringReader stringReader0 = new StringReader("HoS#A9qN:Z(sJy3[");
      CSVParser cSVParser1 = CSVParser.parse((Reader) stringReader0, cSVFormat3);
      cSVParser1.nextRecord();
      cSVParser0.close();
      try { 
        cSVParser0.nextRecord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object object0 = new Object();
      CSVFormat cSVFormat1 = CSVFormat.POSTGRESQL_TEXT;
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFile mockFile1 = new MockFile(mockFile0, " AVB{?X^7h/'fc,p");
      Path path0 = mockFile1.toPath();
      try { 
        CSVParser.parse(path0, charset0, cSVFormat1);
        fail("Expecting exception: FileSystemException");
      
      } catch(FileSystemException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "HeaderComments:");
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      Character character0 = Character.valueOf('0');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      CSVParser cSVParser0 = CSVParser.parse("(line ", cSVFormat3);
      cSVParser0.iterator();
      MockFile mockFile0 = new MockFile("p", "O7evt`B~yWyf<N");
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      CSVParser.parse("p", cSVFormat3);
      cSVParser0.getRecords();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "HeaderComments:";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "HeaderComments:");
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      Character character0 = Character.valueOf('0');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      CSVParser cSVParser0 = CSVParser.parse("(line ", cSVFormat3);
      cSVParser0.iterator();
      MockFile mockFile0 = new MockFile("p", "O7evt`B~yWyf<N");
      Charset charset0 = Charset.defaultCharset();
      try { 
        CSVParser.parse((File) mockFile0, charset0, cSVFormat2);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object object0 = new Object();
      CSVFormat cSVFormat1 = CSVFormat.POSTGRESQL_TEXT;
      CSVParser cSVParser0 = CSVParser.parse(" AVB{?X^7h/'fc,p", cSVFormat0);
      cSVParser0.getRecords();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      cSVFormat1.withCommentMarker('g');
      CSVParser cSVParser0 = CSVParser.parse("The header contains a duplicate name: \"", cSVFormat2);
      CSVParser cSVParser1 = CSVParser.parse(" AVB{?X^7h/'fc,p", cSVFormat2);
      cSVParser0.getRecords();
      cSVParser0.nextRecord();
      cSVParser1.getCurrentLineNumber();
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      cSVFormat1.withRecordSeparator('Q');
      Character character0 = Character.valueOf('$');
      CSVFormat cSVFormat3 = cSVFormat1.withCommentMarker(character0);
      cSVFormat3.withIgnoreEmptyLines(false);
      CSVParser cSVParser0 = CSVParser.parse("NON_NUMERIC", cSVFormat0);
      cSVParser0.iterator();
      CSVParser cSVParser1 = CSVParser.parse("p", cSVFormat0);
      cSVParser1.close();
      cSVParser0.getRecords();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(dataInputStream0, 4);
      // Undeclared exception!
      try { 
        CSVParser.parse((InputStream) pushbackInputStream0, charset0, cSVFormat2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((String[]) null);
      cSVFormat1.withIgnoreSurroundingSpaces();
      CSVParser cSVParser0 = CSVParser.parse("9spK[\"sX,", cSVFormat1);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      CSVParser cSVParser1 = CSVParser.parse("ZgdT", cSVFormat1);
      cSVParser0.nextRecord();
      cSVParser1.close();
      cSVParser0.iterator();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      Object object0 = new Object();
      CSVFormat cSVFormat2 = CSVFormat.POSTGRESQL_TEXT;
      CSVParser cSVParser0 = CSVParser.parse("VXnt", cSVFormat2);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      cSVParser0.getRecords();
      StringReader stringReader0 = new StringReader("VXnt");
      CSVParser cSVParser1 = new CSVParser(stringReader0, cSVFormat1, 0L, 0L);
      cSVParser1.nextRecord();
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1719);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((String[]) null);
      cSVFormat1.withSystemRecordSeparator();
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments((Object[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVParser.parse("$Mr;C)Plv;7;8Ai:", cSVFormat1);
      PipedReader pipedReader1 = new PipedReader();
      cSVFormat2.withIgnoreHeaderCase();
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader1, cSVFormat2);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cSVParser0.forEach(consumer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // IOException reading next record: java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) charset0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CSVParser cSVParser0 = CSVParser.parse("VXnt", cSVFormat3);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertEquals(0L, cSVParser0.getRecordNumber());
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      Object object0 = new Object();
      CSVParser cSVParser0 = CSVParser.parse("aHH<vL\":>>bI$TDiHBj", cSVFormat2);
      cSVParser0.iterator();
      CSVParser cSVParser1 = CSVParser.parse("line.separator", cSVFormat1);
      cSVParser1.close();
      PipedReader pipedReader0 = new PipedReader(10);
      try { 
        CSVParser.parse((Reader) pipedReader0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat1.withCommentMarker('g');
      CSVParser cSVParser0 = CSVParser.parse("The header contains a duplicate name: \"", cSVFormat2);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      CSVParser cSVParser1 = CSVParser.parse((InputStream) sequenceInputStream0, charset0, cSVFormat3);
      CSVParser.parse("", cSVFormat3);
      cSVParser1.getCurrentLineNumber();
      cSVParser0.isClosed();
      cSVParser0.nextRecord();
      StringReader stringReader0 = new StringReader(" AVB{?X^7h/'fc,p");
      CSVParser.parse((Reader) stringReader0, cSVFormat3);
      cSVParser0.nextRecord();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("9spK[\"sX,", cSVFormat0);
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      CSVParser cSVParser1 = CSVParser.parse("9spK[\"sX,", cSVFormat1);
      cSVParser0.close();
      cSVParser1.getRecords();
      assertEquals(1L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(')');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "h%`Qq";
      byte[] byteArray0 = new byte[0];
      Object[] objectArray1 = new Object[4];
      objectArray1[0] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray1[1] = object0;
      objectArray1[2] = (Object) cSVFormat2;
      objectArray1[3] = (Object) null;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray1);
      CSVParser.parse("h%`Qq", cSVFormat0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1649);
      Charset charset0 = Charset.defaultCharset();
      CSVParser.parse((InputStream) pipedInputStream0, charset0, cSVFormat3);
      String string0 = "inputStream";
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
      try { 
        charArrayWriter0.append((CharSequence) "inputStream", 1649, 124);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(1099);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('>');
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat1, (-1690L), (-1L));
      try { 
        cSVParser0.nextRecord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1719);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((String[]) null);
      CSVFormat cSVFormat2 = cSVFormat1.withSystemRecordSeparator();
      Character character0 = new Character('#');
      CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat3);
      cSVParser0.close();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0, 1376);
      // Undeclared exception!
      try { 
        Charset.forName("qyZ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // qyZ
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.withRecordSeparator("");
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0);
      cSVParser0.getCurrentLineNumber();
      Charset.defaultCharset();
      cSVParser0.close();
      try { 
        cSVParser0.getRecords();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      cSVFormat0.withTrim(false);
      Character character0 = Character.valueOf('o');
      CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat2;
      cSVFormat3.format(objectArray0);
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat3);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      cSVParser0.getRecords();
      cSVParser0.nextRecord();
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(0L, long0);
      
      cSVParser0.getFirstEndOfLine();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("h%`Qq");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('Y');
      Character character0 = Character.valueOf('u');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVParser cSVParser0 = CSVParser.parse((Reader) stringReader0, cSVFormat3);
      cSVParser0.nextRecord();
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = "";
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
      cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = CSVFormat.POSTGRESQL_CSV;
      // Undeclared exception!
      try { 
        CSVParser.parse((InputStream) null, (Charset) null, cSVFormat2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'inputStream' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = "";
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
      cSVFormat1.withSkipHeaderRecord();
      InputStream inputStream0 = null;
      Charset charset0 = null;
      CSVFormat cSVFormat2 = CSVFormat.POSTGRESQL_CSV;
      // Undeclared exception!
      try { 
        CSVParser.parse((InputStream) null, (Charset) null, cSVFormat2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'inputStream' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
      CSVFormat cSVFormat3 = cSVFormat2.withSystemRecordSeparator();
      cSVFormat1.withIgnoreHeaderCase(true);
      Object[] objectArray0 = new Object[15];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat3;
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) pipedReader0;
      objectArray0[8] = (Object) cSVFormat0;
      cSVFormat3.withTrailingDelimiter();
      // Undeclared exception!
      try { 
        CSVParser.parse((String) null, cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'string' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(1099);
      Character character0 = new Character('#');
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) null);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      Character character1 = new Character('#');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character1);
      Character character2 = new Character('#');
      CSVFormat cSVFormat4 = cSVFormat3.withQuote(character2);
      QuoteMode quoteMode0 = QuoteMode.NONE;
      cSVFormat4.withQuoteMode(quoteMode0);
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser((Reader) null, cSVFormat3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("The escape character cannot be a line break");
      Object[] objectArray0 = new Object[0];
      CSVFormat cSVFormat4 = cSVFormat3.withHeaderComments(objectArray0);
      CSVParser cSVParser0 = CSVParser.parse("The escape character cannot be a line break", cSVFormat4);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      CSVParser cSVParser0 = CSVParser.parse("inputStream", cSVFormat2);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("| i}o}T#eujj$", "q", 2046, " AVB{?X^7h/'fc,p", uRLStreamHandler0);
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) uRL0;
      objectArray0[1] = (Object) charset0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CSVParser cSVParser0 = CSVParser.parse("VXnt", cSVFormat3);
      cSVParser0.getRecords();
      cSVParser0.nextRecord();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1719);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat0.withTrim();
      Object object0 = new Object();
      Character character0 = Character.valueOf('_');
      CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat3;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) pipedReader0;
      Object object2 = new Object();
      objectArray0[3] = object2;
      objectArray0[4] = (Object) pipedReader0;
      CSVFormat cSVFormat4 = cSVFormat3.withHeaderComments(objectArray0);
      CSVParser cSVParser0 = CSVParser.parse("VXnt", cSVFormat4);
      cSVParser0.getRecords();
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringReader stringReader0 = new StringReader("h%`Qq");
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVParser cSVParser0 = CSVParser.parse((Reader) stringReader0, cSVFormat0);
      cSVParser0.iterator();
      cSVParser0.getCurrentLineNumber();
      cSVParser0.isClosed();
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
      
      CSVParser cSVParser1 = CSVParser.parse((Reader) stringReader0, cSVFormat0);
      cSVParser1.nextRecord();
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "HeckerComments:");
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      Character character0 = Character.valueOf('0');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      CSVParser cSVParser0 = CSVParser.parse("HeckerComments:", cSVFormat3);
      cSVParser0.iterator();
      CSVParser cSVParser1 = CSVParser.parse("p", cSVFormat2);
      cSVParser0.close();
      cSVParser1.getRecords();
      cSVParser1.getCurrentLineNumber();
      MockFile mockFile0 = new MockFile("p", "3N&.RDyD0Ecrtx");
      MockFile mockFile1 = new MockFile(mockFile0, "3N&.RDyD0Ecrtx");
      Path path0 = mockFile1.toPath();
      Charset charset0 = Charset.defaultCharset();
      try { 
        CSVParser.parse(path0, charset0, cSVFormat3);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat1.parse(pipedReader0);
      File file0 = MockFile.createTempFile("kj[1", "EORECORD");
      Charset charset0 = null;
      // Undeclared exception!
      try { 
        CSVParser.parse(file0, (Charset) null, cSVFormat1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException("java.io.InputStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(')');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "h%`Qq";
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) "h%`Qq";
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) "h%`Qq";
      cSVFormat0.withHeaderComments(objectArray0);
      CSVParser cSVParser0 = CSVParser.parse("h%`Qq", cSVFormat2);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      cSVParser0.getRecords();
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat1.withTrim();
      Object object0 = new Object();
      CSVFormat cSVFormat2 = CSVFormat.POSTGRESQL_TEXT;
      CSVParser.parse("", cSVFormat1);
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      cSVFormat0.withTrim(false);
      Character character0 = Character.valueOf('o');
      CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat2;
      cSVFormat3.format(objectArray0);
      CSVParser.parse("", cSVFormat3);
      URI uRI0 = MockURI.URI("");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Khs+#WCn");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat3);
      cSVParser0.getHeaderMap();
      try { 
        MockURL.URL("'g@f*NEL#\"", "Khs+#WCn", (-4221), "file");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid port number :-4221
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringReader stringReader0 = new StringReader("h%`Qq");
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVParser cSVParser0 = CSVParser.parse((Reader) stringReader0, cSVFormat0);
      cSVParser0.iterator();
      cSVParser0.getCurrentLineNumber();
      CSVFormat cSVFormat1 = CSVFormat.POSTGRESQL_TEXT;
      CSVParser.parse("VXnt", cSVFormat1);
      cSVParser0.getRecords();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        CSVParser.parse((File) null, charset0, cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = CSVParser.parse("p", cSVFormat0);
      cSVParser0.getRecords();
      cSVParser0.getHeaderMap();
      cSVParser0.nextRecord();
      MockFile mockFile0 = new MockFile("\" in ");
      URL uRL0 = mockFile0.toURL();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((String[]) null);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      cSVFormat2.withCommentMarker('B');
      CSVParser cSVParser0 = CSVParser.parse("string", cSVFormat0);
      CSVParser.parse("The header contains a duplicate name: \"", cSVFormat2);
      cSVParser0.getRecords();
      cSVParser0.nextRecord();
      // Undeclared exception!
      try { 
        CSVParser.parse((URL) null, (Charset) null, cSVFormat3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'url' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("| i}o}T#eujj$", "q", 2046, " AVB{?X^7h/'fc,p", uRLStreamHandler0);
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Q');
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0, (-288L), (-288L));
      char[] charArray0 = new char[7];
      charArray0[0] = 'F';
      charArray0[1] = '/';
      charArray0[2] = '|';
      charArray0[3] = '`';
      stringReader0.reset();
      charArray0[4] = 'R';
      charArray0[5] = '[';
      char char0 = 'd';
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      // Undeclared exception!
      try { 
        cSVFormat0.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: '' in [, , , , , ]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Reader reader0 = null;
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      // Undeclared exception!
      try { 
        CSVParser.parse((Reader) null, cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MockFile mockFile0 = new MockFile("YIP8D )O<1|,rM^h", "");
      Charset charset0 = Charset.defaultCharset();
      charset0.encode("dp0JSB'");
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      try { 
        CSVParser.parse((File) mockFile0, charset0, cSVFormat1);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      File file0 = MockFile.createTempFile("4 }DMb", "4 }DMb");
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('1');
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat1.withSkipHeaderRecord(true);
      charset0.aliases();
      CSVParser cSVParser0 = CSVParser.parse(file0, charset0, cSVFormat1);
      cSVFormat0.withSkipHeaderRecord();
      cSVParser0.iterator();
      cSVParser0.getRecords();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      pipedWriter0.write("xPAldEev");
      try { 
        pipedReader0.connect(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\" in ");
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVParser cSVParser0 = CSVParser.parse((Reader) stringReader0, cSVFormat0);
      cSVParser0.getCurrentLineNumber();
      cSVParser0.isClosed();
      try { 
        cSVParser0.nextRecord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (startline 1) EOF reached before encapsulated token finished
         //
         verifyException("org.apache.commons.csv.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(')');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "h%`Qq";
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) "h%`Qq";
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) "h%`Qq";
      cSVFormat0.withHeaderComments(objectArray0);
      CSVParser cSVParser0 = CSVParser.parse("h%`Qq", cSVFormat2);
      cSVParser0.getRecords();
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser.parse("|bZQ>r&rRtjcCxVZ^", cSVFormat0);
      MockFile mockFile0 = new MockFile("_[`'fSb5VS4XQ[^GC");
      File file0 = MockFile.createTempFile("HeaderComments:", "E.$vZ`xd", (File) mockFile0);
      MockFile mockFile1 = new MockFile(file0, "*HH>y6x:8hOb|r7");
      Path path0 = mockFile1.toPath();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        CSVParser.parse(path0, charset0, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StringReader stringReader0 = new StringReader("p^(Z0e!1Ei|S73P");
      char[] charArray0 = new char[5];
      charArray0[0] = '(';
      charArray0[1] = 'D';
      charArray0[2] = 'C';
      charArray0[3] = '`';
      charArray0[4] = 'N';
      stringReader0.read(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVParser cSVParser0 = CSVParser.parse((Reader) stringReader0, cSVFormat0);
      cSVParser0.getFirstEndOfLine();
      try { 
        MockURI.URI("", "w ", (String) null);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: :w%20
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = cSVFormat1.parse(pipedReader0);
      try { 
        cSVParser0.getRecords();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1719);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((String[]) null);
      CSVFormat cSVFormat2 = cSVFormat1.withSystemRecordSeparator();
      Character character0 = new Character('#');
      cSVFormat2.withQuote(character0);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat3);
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      CSVParser cSVParser1 = CSVParser.parse(path0, charset0, cSVFormat1);
      cSVParser1.iterator();
      cSVParser0.getHeaderMap();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }
}
