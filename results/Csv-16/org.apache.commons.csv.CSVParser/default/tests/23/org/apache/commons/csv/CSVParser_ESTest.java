/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 06:17:22 GMT 2020
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.file.NoSuchFileException;
import java.nio.file.Path;
import java.sql.ResultSetMetaData;
import java.util.Locale;
import java.util.Map;
import java.util.function.Consumer;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVParser_ESTest extends CSVParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) pipedReader0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) pipedReader0;
      objectArray0[5] = (Object) pipedReader0;
      cSVFormat2.printRecord(pipedWriter0, objectArray0);
      // Undeclared exception!
      try { 
        CSVParser.parse((Reader) pipedReader0, cSVFormat2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate name: \"java.io.PipedReader@0000000004\" in [java.io.PipedReader@0000000004, org.apache.commons.csv.CSVFormat@0000000002, org.apache.commons.csv.CSVFormat@0000000005, org.apache.commons.csv.CSVFormat@0000000003, java.io.PipedReader@0000000004, java.io.PipedReader@0000000004]
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) pipedWriter0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      cSVFormat1.printRecord(pipedWriter0, objectArray0);
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat1, 1632, (-1856L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate name: \"org.apache.commons.csv.CSVFormat@0000000004\" in [java.io.PipedWriter@0000000003, org.apache.commons.csv.CSVFormat@0000000004, org.apache.commons.csv.CSVFormat@0000000004]
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) pipedWriter0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      cSVFormat1.printRecord(pipedWriter0, objectArray0);
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat1, 1632, (-1846L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate name: \"org.apache.commons.csv.CSVFormat@0000000004\" in [java.io.PipedWriter@0000000003, org.apache.commons.csv.CSVFormat@0000000004, org.apache.commons.csv.CSVFormat@0000000004]
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      Object[] objectArray0 = new Object[3];
      cSVFormat0.printRecord(pipedWriter0, objectArray0);
      // Undeclared exception!
      try { 
        CSVParser.parse((Reader) pipedReader0, cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate name: \"\" in [, , ]
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      File file0 = MockFile.createTempFile(")FsVpP", "B5kx}y4AN~:TV6X2:");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte) (-120);
      byteArray0[6] = (byte) (-1);
      mockFileInputStream0.read(byteArray0, (int) (byte) (-1), 577);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, ")FsVpP");
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse((InputStream) mockFileInputStream0, charset0, cSVFormat2);
      cSVParser0.close();
      cSVParser0.getCurrentLineNumber();
      cSVParser0.isClosed();
      cSVParser0.iterator();
      cSVParser0.getHeaderMap();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "B5kx}y4AN~:TV6X2:");
      cSVParser0.iterator();
      CSVParser cSVParser1 = CSVParser.parse("inputStream", cSVFormat1);
      cSVParser1.nextRecord();
      CSVParser cSVParser2 = CSVParser.parse(")FsVpP", cSVFormat0);
      cSVParser2.getHeaderMap();
      cSVParser1.getCurrentLineNumber();
      try { 
        cSVParser0.nextRecord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse("N", cSVFormat1);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      try { 
        CSVParser.parse("\"`", cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (startline 1) EOF reached before encapsulated token finished
         //
         verifyException("org.apache.commons.csv.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse("/", cSVFormat1);
      StringReader stringReader0 = new StringReader("The header contains a duplicate name: \"");
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVParser.parse((Reader) stringReader0, cSVFormat2);
      cSVParser0.getRecords();
      MockFile mockFile0 = new MockFile("/");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      CSVParser cSVParser1 = CSVParser.parse(path0, charset0, cSVFormat2);
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser.parse("reader", cSVFormat0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Charset charset0 = Charset.defaultCharset();
      try { 
        CSVParser.parse((InputStream) pipedInputStream0, charset0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-39);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-39), (byte)4);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      Charset charset0 = Charset.defaultCharset();
      CSVParser cSVParser0 = CSVParser.parse((InputStream) bufferedInputStream0, charset0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVParser0.nextRecord();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      rowSetMetaDataImpl0.setColumnCount(3945);
      StringReader stringReader0 = new StringReader("");
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat1, 0L, 0L);
      long long0 = cSVParser0.getRecordNumber();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser.parse(")6s5a", cSVFormat0);
      File file0 = MockFile.createTempFile(")6s5a", ")6s5a", (File) null);
      // Undeclared exception!
      try { 
        CSVParser.parse(file0, (Charset) null, cSVFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException("java.io.InputStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.withTrim(true);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "h,";
      stringArray0[1] = "1OmB'K&g";
      stringArray0[2] = "Iy~8";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse("1OmB'K&g", cSVFormat2);
      cSVParser0.nextRecord();
      cSVParser0.getCurrentLineNumber();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        Charset.forName("Iy~8");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Iy~8
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("&iMK");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      cSVFormat0.print((Appendable) stringBuffer0);
      cSVFormat2.printer();
      cSVFormat2.withRecordSeparator("&iMK");
      CSVFormat cSVFormat3 = cSVFormat1.withTrim(true);
      cSVFormat3.withTrailingDelimiter();
      MockFile mockFile0 = new MockFile("");
      StringReader stringReader0 = new StringReader("&iMK");
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat2, 1L, 0L);
      cSVParser0.nextRecord();
      URL uRL0 = MockURL.getFileExample();
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVParser cSVParser0 = CSVParser.parse(" )2Aa%x'w,", cSVFormat0);
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVParser cSVParser0 = CSVParser.parse("N", cSVFormat0);
      cSVParser0.getFirstEndOfLine();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      cSVParser0.close();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat1, (-2718L), (-2718L));
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse("%5", cSVFormat0);
      cSVParser0.getFirstEndOfLine();
      Character character0 = new Character(' ');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      CSVParser cSVParser1 = new CSVParser(pipedReader0, cSVFormat1);
      cSVParser0.close();
      boolean boolean0 = cSVParser0.isClosed();
      assertTrue(boolean0);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser.parse("]eac(TG,D`N", cSVFormat0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        CSVParser.parse((InputStream) bufferedInputStream0, (Charset) null, cSVFormat1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException("java.io.InputStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse("%5", cSVFormat0);
      cSVParser0.getFirstEndOfLine();
      cSVParser0.close();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      cSVParser0.getHeaderMap();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = CSVParser.parse("</Et8g5Z", cSVFormat0);
      cSVParser0.close();
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser.parse("R", cSVFormat1);
      MockFile mockFile0 = new MockFile("R");
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      try { 
        CSVParser.parse(path0, (Charset) null, cSVFormat1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Class<Locale.Category> class0 = Locale.Category.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      cSVFormat1.printer();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) null);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('P');
      CSVParser cSVParser0 = CSVParser.parse(",8s9?/nM ", cSVFormat2);
      CSVParser cSVParser1 = new CSVParser(pipedReader0, cSVFormat1, 1L, 1L);
      cSVParser1.getFirstEndOfLine();
      cSVFormat4.withCommentMarker((Character) null);
      cSVParser0.getCurrentLineNumber();
      cSVParser0.getRecords();
      assertEquals(1L, cSVParser0.getRecordNumber());
      
      long long0 = cSVParser1.getRecordNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      char char0 = 'p';
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('p');
      String string0 = "fvpQ7UCtR+$.";
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("h-XlJtOd$,yYGrA)F?");
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      cSVFormat3.printer();
      CSVParser cSVParser0 = CSVParser.parse("h-XlJtOd$,yYGrA)F?", cSVFormat1);
      cSVFormat1.withIgnoreEmptyLines();
      cSVParser0.getRecords();
      PipedReader pipedReader0 = new PipedReader(1967);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("fvpQ7UCtR+$.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.fvpQ7UCtR+$.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator((String) null);
      CSVFormat cSVFormat2 = cSVFormat0.withAutoFlush(false);
      cSVFormat0.withQuote('~');
      cSVFormat0.withNullString("fvpQ7UCtR+$.");
      CSVPrinter cSVPrinter0 = cSVFormat0.printer();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "fvpQ7UCtR+$.";
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVPrinter0;
      StringReader stringReader0 = new StringReader("/NB~O}J3EOVtIw/y");
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat1);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat3.parse(stringReader0);
      cSVFormat3.withAllowMissingColumnNames();
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser1 = CSVParser.parse((Reader) pipedReader0, cSVFormat2);
      cSVParser1.getRecordNumber();
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cSVParser0.forEach(consumer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // IOException reading next record: java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator((String) null);
      CSVFormat cSVFormat2 = cSVFormat0.withAutoFlush(false);
      CSVFormat cSVFormat3 = cSVFormat0.withQuote('~');
      CSVFormat cSVFormat4 = cSVFormat0.withNullString("fvpQ7UCtR+$.");
      CSVPrinter cSVPrinter0 = cSVFormat0.printer();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "fvpQ7UCtR+$.";
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) cSVFormat4;
      cSVFormat4.withHeaderComments(objectArray0);
      CSVParser cSVParser0 = CSVParser.parse("{l<Z", cSVFormat2);
      cSVFormat2.withIgnoreEmptyLines();
      CSVParser.parse("8;", cSVFormat0);
      cSVParser0.getFirstEndOfLine();
      Character character0 = Character.valueOf('U');
      cSVFormat1.withCommentMarker(character0);
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat5 = cSVFormat4.withTrailingDelimiter(false);
      CSVParser cSVParser1 = new CSVParser(pipedReader0, cSVFormat5, 28L, 4948L);
      try { 
        cSVParser1.getRecords();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator((String) null);
      CSVFormat cSVFormat2 = cSVFormat0.withAutoFlush(false);
      CSVFormat cSVFormat3 = cSVFormat0.withQuote('~');
      CSVFormat cSVFormat4 = cSVFormat0.withNullString("fvpQ7UCtR+$.");
      CSVPrinter cSVPrinter0 = cSVFormat0.printer();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "fvpQ7UCtR+$.";
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) cSVFormat4;
      CSVFormat cSVFormat5 = cSVFormat4.withHeaderComments(objectArray0);
      CSVParser cSVParser0 = CSVParser.parse("{l<Z", cSVFormat2);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      cSVFormat5.withRecordSeparator('~');
      CSVParser cSVParser1 = CSVParser.parse("fvpQ7UCtR+$.", cSVFormat3);
      cSVParser1.getFirstEndOfLine();
      cSVParser0.getCurrentLineNumber();
      cSVParser1.getRecordNumber();
      cSVParser0.getCurrentLineNumber();
      cSVParser0.close();
      try { 
        cSVParser0.getRecords();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = CSVParser.parse("EDxc+U!n?=4a]", cSVFormat0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      PipedReader pipedReader0 = new PipedReader();
      try { 
        CSVParser.parse((Reader) pipedReader0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse("R", cSVFormat1);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertEquals(0L, cSVParser0.getRecordNumber());
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Class<Locale.Category> class0 = Locale.Category.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      cSVFormat1.printer();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      cSVFormat3.withRecordSeparator('F');
      CSVParser cSVParser0 = CSVParser.parse("%5", cSVFormat3);
      cSVParser0.getFirstEndOfLine();
      cSVParser0.getHeaderMap();
      cSVParser0.getRecords();
      cSVParser0.getRecordNumber();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        MockURL.URL((String) null, "bwG~[", (-98), "%5", uRLStreamHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Class<Locale.Category> class0 = Locale.Category.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      cSVFormat0.printer();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.withTrim();
      char char0 = '<';
      cSVFormat0.withRecordSeparator('<');
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat1);
      cSVParser0.nextRecord();
      URL uRL0 = MockURL.getFtpExample();
      URL uRL1 = MockURL.URL(uRL0, "");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      MockURL.URL(uRL1, "(line ", uRLStreamHandler0);
      // Undeclared exception!
      try { 
        Charset.forName("(line ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // (line 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      // Undeclared exception!
      try { 
        CSVParser.parse((Reader) null, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Class<Locale.Category> class0 = Locale.Category.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      cSVFormat1.printer();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("");
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat4 = cSVFormat2.withTrim();
      cSVFormat0.withRecordSeparator('c');
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat3);
      cSVParser0.getFirstEndOfLine();
      cSVParser0.getCurrentLineNumber();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 5);
      CSVParser cSVParser1 = new CSVParser(pipedReader0, cSVFormat4);
      long long0 = cSVParser1.getRecordNumber();
      assertEquals(0L, long0);
      
      cSVParser0.getCurrentLineNumber();
      cSVParser0.close();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat1);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVParser cSVParser0 = CSVParser.parse(" )2Aa|x'w,", cSVFormat0);
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Class<Locale.Category> class0 = Locale.Category.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      cSVFormat0.printer();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      String string0 = " SurroundingSpaces:ignored";
      String string1 = "";
      File file0 = MockFile.createTempFile(" SurroundingSpaces:ignored", "");
      Charset charset0 = Charset.defaultCharset();
      CSVParser.parse(file0, charset0, cSVFormat2);
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      charset0.encode("Wv");
      cSVFormat2.withIgnoreSurroundingSpaces();
      int int0 = 0;
      PipedWriter pipedWriter1 = null;
      try {
        pipedWriter1 = new PipedWriter(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = "{l<Z";
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withRecordSeparator((String) null);
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(false);
      cSVFormat0.withQuote('~');
      cSVFormat0.withNullString("fvpQ7UCtR+$.");
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      cSVFormat0.printer();
      CSVParser cSVParser0 = CSVParser.parse("{l<Z", cSVFormat2);
      cSVFormat1.withIgnoreEmptyLines();
      cSVParser0.getRecords();
      PipedReader pipedReader0 = new PipedReader(1967);
      CSVParser.parse((Reader) pipedReader0, cSVFormat0);
      cSVParser0.getRecordNumber();
      cSVParser0.getHeaderMap();
      String string1 = null;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        MockURL.URL("Delimiter=<", "fvpQ7UCtR+$.", 1967, (String) null, uRLStreamHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.Parts", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0);
      cSVParser0.getHeaderMap();
      assertEquals(0L, cSVParser0.getRecordNumber());
      
      cSVParser0.iterator();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVParser cSVParser0 = CSVParser.parse("r~f)oAU", cSVFormat0);
      cSVParser0.iterator();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Class<Locale.Category> class0 = Locale.Category.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      cSVFormat0.printer();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.withTrim();
      cSVFormat0.withRecordSeparator('<');
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat1);
      cSVParser0.getFirstEndOfLine();
      cSVParser0.getCurrentLineNumber();
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(0L, long0);
      
      cSVParser0.getCurrentLineNumber();
      cSVParser0.close();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0);
      assertEquals(0L, cSVParser0.getRecordNumber());
      
      cSVParser0.close();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Class<Locale.Category> class0 = Locale.Category.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat1);
      cSVParser0.getCurrentLineNumber();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      MockFile mockFile0 = new MockFile("fvpQ7UCtR+$.");
      Charset.defaultCharset();
      cSVFormat1.withIgnoreEmptyLines();
      CSVParser.parse("fvpQ7UCtR+$.", cSVFormat2);
      try { 
        MockURL.URL("fvpQ7UCtR+$.", "3:mINMh8C)3", "3:mINMh8C)3");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: fvpq7uctr+$.
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      Class<Locale.Category> class0 = Locale.Category.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      CSVParser cSVParser0 = CSVParser.parse("]", cSVFormat2);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withRecordSeparator("uN>H3:>/OrUc:xPF-4");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      CSVParser cSVParser0 = CSVParser.parse((InputStream) sequenceInputStream0, charset0, cSVFormat0);
      cSVParser0.getFirstEndOfLine();
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      MockFile mockFile0 = new MockFile("N");
      MockFile mockFile1 = new MockFile(mockFile0, "inputStream");
      Path path0 = mockFile0.toPath();
      try { 
        CSVParser.parse(path0, charset0, cSVFormat1);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("&iMK");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      cSVFormat0.print((Appendable) stringBuffer0);
      cSVFormat2.printer();
      cSVFormat2.withRecordSeparator("&iMK");
      CSVFormat cSVFormat3 = cSVFormat1.withTrim(true);
      MockFile mockFile0 = new MockFile("");
      URL uRL0 = MockURL.getFileExample();
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      try { 
        cSVParser0.getRecords();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Class<Locale.Category> class0 = Locale.Category.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      cSVFormat0.printer();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.withTrim();
      cSVFormat0.withRecordSeparator('<');
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat1);
      cSVParser0.getFirstEndOfLine();
      cSVParser0.getCurrentLineNumber();
      cSVParser0.getRecords();
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      PipedReader pipedReader1 = new PipedReader();
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader1, cSVFormat0);
      try { 
        cSVParser0.nextRecord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Class<Locale.Category> class0 = Locale.Category.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat1.withSystemRecordSeparator();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      cSVFormat2.withAllowMissingColumnNames();
      CSVParser cSVParser0 = CSVParser.parse("org.apache.commons.csv.CSVParser$1", cSVFormat3);
      Character.valueOf('=');
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0);
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockFile mockFile0 = new MockFile("9xT");
      Charset charset0 = Charset.defaultCharset();
      try { 
        CSVParser.parse((File) mockFile0, charset0, cSVFormat0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        CSVParser.parse((File) null, charset0, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("Iy~8", cSVFormat0);
      cSVParser0.getCurrentLineNumber();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Class<Locale.Category> class0 = Locale.Category.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat1);
      cSVParser0.getCurrentLineNumber();
      String string0 = "fvpQ7UCtR+$.";
      cSVFormat1.withSkipHeaderRecord();
      MockFile mockFile0 = new MockFile("fvpQ7UCtR+$.");
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      try { 
        CSVParser.parse((File) mockFile0, charset0, cSVFormat2);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      Object[] objectArray0 = new Object[3];
      cSVFormat0.printRecord(pipedWriter0, objectArray0);
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat1, (-1846L), 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate name: \"\" in [, , ]
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse(",</E}tVhx/*,kY", cSVFormat1);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Class<Locale.Category> class0 = Locale.Category.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat1.withSystemRecordSeparator();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat3);
      cSVFormat3.parse(pipedReader0);
      CSVFormat.newFormat('|');
      PipedReader pipedReader1 = new PipedReader();
      CSVParser.parse((Reader) pipedReader1, cSVFormat2);
      cSVParser0.getRecordNumber();
      try { 
        cSVParser0.nextRecord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Class<Locale.Category> class0 = Locale.Category.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat1);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "/NB~O}J3EOVtIw/y";
      cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      boolean boolean0 = false;
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat2, 0L, 0L);
      cSVParser0.isClosed();
      cSVParser0.getFirstEndOfLine();
      try { 
        MockURL.URL("/NB~O}J3EOVtIw/y");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: /NB~O}J3EOVtIw/y
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("8xFq", cSVFormat0);
      cSVParser0.isClosed();
      cSVParser0.close();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse("out", cSVFormat1);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser((Reader) null, cSVFormat0, (-1L), 1117L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        CSVParser.parse((InputStream) null, charset0, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'inputStream' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Charset charset0 = Charset.defaultCharset();
      CSVParser cSVParser0 = CSVParser.parse((InputStream) pipedInputStream0, charset0, cSVFormat0);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("&iMK");
      cSVFormat1.withAllowMissingColumnNames();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      cSVFormat0.print((Appendable) stringBuffer0);
      cSVFormat1.printer();
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("&iMK");
      // Undeclared exception!
      try { 
        CSVParser.parse((InputStream) null, charset0, cSVFormat2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'inputStream' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Class<Locale.Category> class0 = Locale.Category.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      cSVFormat1.printer();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      cSVFormat3.withRecordSeparator('F');
      CSVParser cSVParser0 = CSVParser.parse("%5", cSVFormat3);
      cSVParser0.getFirstEndOfLine();
      cSVFormat0.withCommentMarker((Character) null);
      cSVParser0.getCurrentLineNumber();
      cSVParser0.getRecords();
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVParser cSVParser0 = CSVParser.parse(",", cSVFormat0);
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("+", cSVFormat0);
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse("%5", cSVFormat0);
      cSVParser0.getCurrentLineNumber();
      cSVParser0.getRecords();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat0);
      cSVParser0.nextRecord();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0);
      cSVParser0.getFirstEndOfLine();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse(" )2Aa|x'w,", cSVFormat0);
      assertEquals(0L, cSVParser0.getRecordNumber());
      
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      boolean boolean0 = true;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      CSVParser cSVParser0 = CSVParser.parse("L'-", cSVFormat1);
      cSVParser0.getRecords();
      cSVParser0.getFirstEndOfLine();
      cSVParser0.getHeaderMap();
      MockFile mockFile0 = new MockFile("L'-", "");
      mockFile0.mkdir();
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", (String) null, (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      String string0 = "Mapping for %s not found, expected one of %s";
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat3.withQuote('!');
      CSVParser.parse("Mapping for %s not found, expected one of %s", cSVFormat4);
      URI uRI0 = MockURI.URI("");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockFile mockFile0 = new MockFile("@h~\"hqE3H#7f5S)\"z");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      try { 
        CSVParser.parse(path0, charset0, cSVFormat0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVParser.parse(" )2Aa%x'w,", cSVFormat0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        CSVParser.parse((Path) null, charset0, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'path' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      String string0 = "LpI@%./TxPPX!t";
      MockFile mockFile0 = new MockFile("io9KAkf", "LpI@%./TxPPX!t");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      Character character0 = Character.valueOf('l');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withQuote('y');
      try { 
        CSVParser.parse(path0, charset0, cSVFormat3);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "%");
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat1.toString();
      CSVParser cSVParser0 = CSVParser.parse(" )IAa%x'wmc,", cSVFormat1);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('J');
      cSVFormat2.withSkipHeaderRecord();
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat2, (-611L), (-611L));
      assertEquals((-612L), cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser((Reader) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      CSVFormat cSVFormat0 = null;
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser((Reader) null, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      // Undeclared exception!
      try { 
        CSVParser.parse((URL) null, charset0, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'url' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      URL uRL0 = MockURL.getHttpExample();
      Charset charset0 = Charset.defaultCharset();
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      // Undeclared exception!
      try { 
        CSVParser.parse((URL) null, (Charset) null, cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'url' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      // Undeclared exception!
      try { 
        CSVParser.parse((String) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'string' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      String string0 = "*Il6@Z5S";
      CSVFormat cSVFormat0 = null;
      // Undeclared exception!
      try { 
        CSVParser.parse("*Il6@Z5S", (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }
}
