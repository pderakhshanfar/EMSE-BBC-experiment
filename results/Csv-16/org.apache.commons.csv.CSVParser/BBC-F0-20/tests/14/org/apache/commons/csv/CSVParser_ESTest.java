/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 05:29:40 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.net.MalformedURLException;
import java.net.Proxy;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.file.NoSuchFileException;
import java.nio.file.Path;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.Enumeration;
import java.util.Map;
import java.util.function.Consumer;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVParser_ESTest extends CSVParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      pipedWriter0.write("url");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) pipedReader0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) pipedReader0;
      objectArray0[3] = (Object) " reading next record: ";
      objectArray0[4] = (Object) pipedWriter0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) "url";
      objectArray0[7] = (Object) pipedWriter0;
      cSVFormat0.printRecord(pipedWriter0, objectArray0);
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat0);
      cSVParser0.close();
      CSVParser.parse("", cSVFormat1);
      CSVParser cSVParser1 = CSVParser.parse("", cSVFormat1);
      cSVParser1.getHeaderMap();
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      Object[] objectArray0 = new Object[1];
      cSVFormat1.printRecord(pipedWriter0, objectArray0);
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat1);
      cSVParser0.getFirstEndOfLine();
      cSVParser0.getCurrentLineNumber();
      cSVParser0.close();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      Object[] objectArray0 = new Object[1];
      cSVFormat1.printRecord(pipedWriter0, objectArray0);
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat1);
      cSVParser0.close();
      cSVParser0.getCurrentLineNumber();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVParser.parse("charset", cSVFormat0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVParser.parse((Reader) pipedReader0, cSVFormat0);
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      CSVParser cSVParser0 = CSVParser.parse(path0, charset0, cSVFormat0);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      Object[] objectArray0 = new Object[2];
      cSVFormat1.printRecord(pipedWriter0, objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      // Undeclared exception!
      try { 
        CSVParser.parse((Reader) pipedReader0, cSVFormat2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      Object[] objectArray0 = new Object[2];
      cSVFormat1.printRecord(pipedWriter0, objectArray0);
      // Undeclared exception!
      try { 
        CSVParser.parse((Reader) pipedReader0, cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate name: \"null\" in [null, null]
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) pipedWriter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) pipedWriter0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat1;
      cSVFormat0.printRecord(pipedWriter0, objectArray0);
      CSVParser.parse((Reader) pipedReader0, cSVFormat0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      // Undeclared exception!
      try { 
        CSVParser.parse((Reader) pipedReader0, cSVFormat2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate name: \"java.io.PipedWriter@0000000003\" in [java.io.PipedWriter@0000000003, java.lang.Object@0000000004, java.io.PipedWriter@0000000003, org.apache.commons.csv.CSVFormat@0000000002, org.apache.commons.csv.CSVFormat@0000000002]
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) pipedWriter0;
      objectArray0[1] = (Object) cSVFormat0;
      cSVFormat1.printRecord(pipedWriter0, objectArray0);
      CSVParser.parse((Reader) pipedReader0, cSVFormat1);
      // Undeclared exception!
      try { 
        CSVParser.parse((Reader) null, cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser.parse("`", cSVFormat1);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Charset charset0 = Charset.defaultCharset();
      try { 
        CSVParser.parse((InputStream) mockFileInputStream0, charset0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withIgnoreSurroundingSpaces();
      CSVParser cSVParser0 = CSVParser.parse("HZ", cSVFormat0);
      cSVParser0.close();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      assertEquals(0L, cSVParser0.getRecordNumber());
      
      CSVParser cSVParser1 = CSVParser.parse("HZ", cSVFormat0);
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 424);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      char char0 = 'D';
      cSVFormat0.withCommentMarker('D');
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat2, 424, 0L);
      cSVParser0.iterator();
      cSVParser0.getRecordNumber();
      String string0 = "`M0!D";
      try { 
        MockURI.URI("`M0!D");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 0: `M0!D
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "#IiFJDx";
      String string1 = "R";
      File file0 = MockFile.createTempFile("#IiFJDx", "R");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      // Undeclared exception!
      try { 
        CSVParser.parse(file0, (Charset) null, cSVFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException("java.io.InputStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "#IiFJDx";
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cSVParser0.forEach(consumer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // IOException reading next record: java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = CSVParser.parse("SC<s1%v", cSVFormat0);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      // Undeclared exception!
      try { 
        cSVParser0.forEach((Consumer<? super CSVRecord>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse("V,[RD$|T``n\"", cSVFormat1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      CSVParser cSVParser1 = CSVParser.parse("+\"_Y!*jDLl", cSVFormat0);
      cSVParser1.close();
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertEquals(2, map0.size());
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVParser cSVParser0 = CSVParser.parse("m,", cSVFormat1);
      cSVParser0.nextRecord();
      URL uRL0 = MockURL.getHttpExample();
      Charset charset0 = Charset.defaultCharset();
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      try { 
        CSVParser.parse("\"", cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (startline 1) EOF reached before encapsulated token finished
         //
         verifyException("org.apache.commons.csv.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("gb0");
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVParser.parse("gb0", cSVFormat2);
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat2, (-1L), 0L);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("`");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);
      cSVFormat2.withIgnoreHeaderCase(false);
      cSVFormat0.withRecordSeparator('z');
      CSVParser cSVParser0 = CSVParser.parse("mO,", cSVFormat1);
      cSVParser0.nextRecord();
      try { 
        MockURL.URL((String) null);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("`");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVParser cSVParser0 = CSVParser.parse("`", cSVFormat1);
      cSVParser0.nextRecord();
      cSVParser0.getRecords();
      cSVParser0.close();
      CSVParser cSVParser1 = new CSVParser(stringReader0, cSVFormat0, 0L, 0L);
      cSVParser1.nextRecord();
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(false);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat1);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("7");
      PipedWriter pipedWriter0 = new PipedWriter();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVParser0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) "gb0";
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVFormat1;
      CSVFormat cSVFormat4 = cSVFormat3.withHeaderComments(objectArray0);
      CSVParser cSVParser1 = CSVParser.parse("7", cSVFormat4);
      cSVParser1.getRecords();
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.withAutoFlush(false);
      Class<Proxy.Type> class0 = Proxy.Type.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVParser cSVParser0 = CSVParser.parse("'.rU:bpUc+j}YUA~", cSVFormat1);
      cSVParser0.nextRecord();
      cSVParser0.getRecords();
      cSVParser0.close();
      cSVParser0.close();
      try { 
        cSVParser0.nextRecord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("geb0`");
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVParser cSVParser0 = CSVParser.parse(";", cSVFormat0);
      cSVParser0.getRecords();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        CSVParser.parse((InputStream) null, charset0, cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'inputStream' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVParser cSVParser0 = CSVParser.parse("MySQL", cSVFormat0);
      cSVParser0.getRecords();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, pushbackInputStream0);
      // Undeclared exception!
      try { 
        CSVParser.parse((InputStream) sequenceInputStream0, (Charset) null, cSVFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException("java.io.InputStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      CSVParser cSVParser0 = CSVParser.parse(" reading next record: ", cSVFormat2);
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = ";";
      Class<Proxy.Type> class0 = Proxy.Type.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      cSVFormat1.withNullString(";");
      cSVFormat1.withTrailingDelimiter(false);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase(false);
      cSVFormat2.withRecordSeparator('5');
      String string1 = ";";
      CSVParser.parse(";", cSVFormat1);
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      try { 
        cSVParser0.nextRecord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('D');
      Class<Proxy.Type> class0 = Proxy.Type.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      CSVFormat cSVFormat3 = cSVFormat2.withQuote('n');
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(resultSet0);
      cSVFormat5.withIgnoreHeaderCase(true);
      cSVFormat2.withAllowMissingColumnNames();
      CSVFormat cSVFormat6 = CSVFormat.TDF;
      CSVFormat cSVFormat7 = cSVFormat6.withTrailingDelimiter(false);
      cSVFormat7.withNullString("g7Y?-T_9eA");
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVParser cSVParser0 = CSVParser.parse("org.apache.commons.csv.CSVParser$1", cSVFormat4);
      cSVParser0.getRecords();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withNullString("~2u`fNr|N|{+X*");
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVParser cSVParser0 = CSVParser.parse("~2u`fNr|N|{+X*", cSVFormat0);
      cSVParser0.getRecords();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        CSVParser.parse((URL) null, charset0, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'url' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.ORACLE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      cSVFormat1.withNullString(";");
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      cSVFormat3.withRecordSeparator('J');
      CSVParser cSVParser0 = CSVParser.parse("m,", cSVFormat3);
      cSVParser0.nextRecord();
      String string0 = "+'ueNhBz-";
      try { 
        MockURL.URL("+'ueNhBz-");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: +'ueNhBz-
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(false);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat0.withHeader(resultSet0);
      CSVParser cSVParser0 = CSVParser.parse("Unexpected Token type: ", cSVFormat2);
      cSVParser0.getCurrentLineNumber();
      cSVParser0.getRecords();
      cSVParser0.close();
      StringReader stringReader0 = new StringReader(", mapping=");
      CSVParser cSVParser1 = new CSVParser(stringReader0, cSVFormat1, 3547L, 3547L);
      cSVParser1.nextRecord();
      assertEquals(3547L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockFile mockFile0 = new MockFile("78>`+6ob}cae}R1", "78>`+6ob}cae}R1");
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("JC");
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat0.withHeader(resultSet0);
      CSVParser cSVParser0 = CSVParser.parse("X+hbRrP", cSVFormat1);
      cSVFormat0.withQuote('+');
      cSVParser0.getRecords();
      StringReader stringReader0 = new StringReader("inputStream");
      stringReader0.skip((-1L));
      CSVParser.parse((Reader) stringReader0, cSVFormat0);
      cSVParser0.close();
      boolean boolean0 = cSVParser0.isClosed();
      assertEquals(1L, cSVParser0.getRecordNumber());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("geb0`");
      cSVFormat3.withRecordSeparator('a');
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVParser cSVParser0 = CSVParser.parse("*S'", cSVFormat1);
      cSVParser0.getHeaderMap();
      Charset charset0 = Charset.defaultCharset();
      URL uRL0 = MockURL.getHttpExample();
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("geb0`");
      cSVFormat3.withRecordSeparator('a');
      PipedWriter pipedWriter0 = new PipedWriter();
      pipedWriter0.flush();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVParser cSVParser0 = CSVParser.parse(";", cSVFormat3);
      cSVParser0.nextRecord();
      cSVParser0.close();
      try { 
        cSVParser0.getRecords();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames();
      cSVFormat0.withIgnoreHeaderCase(false);
      cSVFormat2.withRecordSeparator('a');
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedWriter pipedWriter1 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter1);
      CSVParser cSVParser0 = CSVParser.parse(") invalid parse sequence", cSVFormat1);
      cSVParser0.nextRecord();
      cSVParser0.getFirstEndOfLine();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.ORACLE;
      cSVFormat1.withAllowMissingColumnNames();
      String string0 = ";";
      cSVFormat1.withNullString(";");
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);
      cSVFormat2.withRecordSeparator('H');
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVParser cSVParser0 = CSVParser.parse(";", cSVFormat2);
      cSVParser0.nextRecord();
      try { 
        MockURL.URL(";");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: ;
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "+9$[,1\":`]7$NH";
      stringArray0[1] = "";
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVParser cSVParser0 = CSVParser.parse("+9$[,1\":`]7$NH", cSVFormat1);
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("geb0`");
      cSVFormat3.withRecordSeparator('a');
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVParser cSVParser0 = CSVParser.parse(";", cSVFormat0);
      cSVParser0.getRecords();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(505);
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "+9$[,1\":`]7$NH";
      stringArray0[1] = "";
      cSVFormat1.withRecordSeparator("Unexpeted oken type ");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet0);
      CSVParser cSVParser0 = CSVParser.parse("u8d )+\"o*N}:VWqUTr", cSVFormat2);
      cSVParser0.getRecords();
      MockFile mockFile0 = new MockFile("+9$[,1\":`]7$NH");
      MockFile mockFile1 = new MockFile(mockFile0, "geb0`");
      mockFile1.toPath();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Charset.forName("+9$[,1\":`]7$NH");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // +9$[,1\":`]7$NH
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.withTrailingDelimiter(false);
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(" reading next record: ");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat1.withHeader(resultSet0);
      CSVParser cSVParser0 = CSVParser.parse(" reading next record: ", cSVFormat0);
      cSVParser0.nextRecord();
      cSVParser0.getRecords();
      cSVParser0.getRecordNumber();
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = "";
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Character character0 = Character.valueOf('J');
      cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      cSVFormat1.withTrim();
      String string1 = "O5DlP1uWu";
      CSVParser cSVParser0 = CSVParser.parse("O5DlP1uWu", cSVFormat1);
      cSVParser0.isClosed();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        CSVParser.parse((File) null, charset0, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf('j');
      cSVFormat0.withCommentMarker(character0);
      // Undeclared exception!
      try { 
        CSVParser.parse((String) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'string' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("`");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat0.withTrim(false);
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      CSVParser.parse((Reader) stringReader0, cSVFormat1);
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("`");
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedWriter pipedWriter1 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter1);
      CSVFormat cSVFormat5 = CSVFormat.MYSQL;
      CSVParser.parse("", cSVFormat4);
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat2);
      cSVParser0.getRecords();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader("`");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse((Reader) stringReader0, cSVFormat3);
      cSVParser0.getHeaderMap();
      cSVParser0.getFirstEndOfLine();
      cSVParser0.getFirstEndOfLine();
      cSVParser0.getCurrentLineNumber();
      PipedOutputStream pipedOutputStream0 = null;
      try {
        pipedOutputStream0 = new PipedOutputStream((PipedInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(false);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat3);
      cSVParser0.getRecords();
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(505);
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "+9$[,1\":`]7$NH";
      stringArray0[1] = "";
      stringArray0[2] = "]";
      stringArray0[3] = "string";
      stringArray0[4] = "'scz9";
      stringArray0[5] = "%(3sWq]]:L)Vu6MLD~";
      stringArray0[6] = "2l}";
      stringArray0[7] = "()";
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      try { 
        CSVParser.parse((Reader) pipedReader0, cSVFormat3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(false);
      cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      cSVFormat0.withNullString("NONE");
      CSVParser cSVParser0 = CSVParser.parse(" reading next record: ", cSVFormat0);
      cSVParser0.nextRecord();
      MockFile mockFile0 = new MockFile("org.apache.commons.csv.CSVParser$2");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      try { 
        CSVParser.parse(path0, charset0, cSVFormat2);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withQuote('R');
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      cSVFormat2.withDelimiter('R');
      cSVFormat1.toString();
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator(',');
      // Undeclared exception!
      try { 
        CSVParser.parse((Path) null, charset0, cSVFormat3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'path' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("geb0`");
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('a');
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVParser cSVParser0 = cSVFormat4.parse(pipedReader0);
      cSVParser0.close();
      try { 
        cSVParser0.nextRecord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = CSVParser.parse(" +}vZ<-#YzgUQ", cSVFormat0);
      cSVParser0.nextRecord();
      MockFile mockFile0 = new MockFile("TOKEN");
      cSVFormat0.withAutoFlush(true);
      Charset charset0 = Charset.defaultCharset();
      cSVFormat0.withIgnoreHeaderCase(true);
      try { 
        CSVParser.parse((File) mockFile0, charset0, cSVFormat0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      // Undeclared exception!
      try { 
        CSVParser.parse(path0, (Charset) null, cSVFormat2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.withEscape('w');
      CSVParser cSVParser0 = CSVParser.parse("%|7nAB~^}e&'", cSVFormat0);
      cSVParser0.isClosed();
      String string0 = "MU->I5yj(oE1S$0n H";
      String string1 = "The escape character and the delimiter cannot be the same ('";
      String string2 = "No header mapping was specified, the record values can't be accessed by name";
      int int0 = (-7905);
      String string3 = "X$W4]yMRnrJR$ DGwt";
      try { 
        MockURI.URI("X$W4]yMRnrJR$ DGwt");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 4: X$W4]yMRnrJR$ DGwt
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("geb0`");
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVParser cSVParser0 = cSVFormat1.parse(pipedReader0);
      cSVParser0.close();
      CSVParser cSVParser1 = CSVParser.parse("geb0`", cSVFormat1);
      cSVParser1.nextRecord();
      assertEquals(1L, cSVParser1.getRecordNumber());
      
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.close();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CharBuffer charBuffer0 = CharBuffer.allocate(3117);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 3117, 3117);
      CharBuffer charBuffer2 = CharBuffer.wrap((CharSequence) charBuffer1);
      charset0.encode(charBuffer2);
      Character character0 = Character.valueOf('g');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withSystemRecordSeparator();
      charset0.aliases();
      CSVFormat cSVFormat3 = cSVFormat2.withTrim(false);
      CSVParser cSVParser0 = CSVParser.parse((InputStream) sequenceInputStream0, charset0, cSVFormat3);
      cSVParser0.spliterator();
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(0L, long0);
      
      cSVParser0.isClosed();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(false);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("NONE");
      CSVParser cSVParser0 = CSVParser.parse(" reading next record: ", cSVFormat3);
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Character character0 = Character.valueOf('?');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      cSVFormat1.withSystemRecordSeparator();
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVParser.parse("5,{[^A7p;t_v.B|", cSVFormat2);
      StringReader stringReader0 = new StringReader("5,{[^A7p;t_v.B|");
      CSVFormat cSVFormat3 = cSVFormat0.withAllowMissingColumnNames();
      stringReader0.read();
      CSVFormat cSVFormat4 = cSVFormat3.withTrim();
      CSVParser.parse((Reader) stringReader0, cSVFormat4);
      PipedReader pipedReader0 = new PipedReader(1);
      CSVParser.parse((Reader) pipedReader0, cSVFormat1);
      CSVParser.parse((Reader) pipedReader0, cSVFormat2);
      String string0 = "%) /HZ";
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFile.createTempFile("5,{[^A7p;t_v.B|", "%) /HZ", (File) mockFile0);
      // Undeclared exception!
      try { 
        Charset.forName("%) /HZ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // %) /HZ
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Reader reader0 = null;
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser((Reader) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Hu/?dy<uQqbAh1t:";
      stringArray0[1] = "' in ";
      stringArray0[2] = "D-aI";
      stringArray0[3] = "";
      stringArray0[4] = ". 0iI?I";
      stringArray0[5] = "bH2";
      stringArray0[6] = "vp_:H;M.w`u]h";
      stringArray0[7] = "\"GJ8]z";
      stringArray0[8] = "GZBM9c!btengOw_NA;";
      cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser((Reader) null, cSVFormat0, (-1L), (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      File file0 = MockFile.createTempFile("ZE.(>;{Dcs#J~XQ%'}", "ZE.(>;{Dcs#J~XQ%'}");
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('e');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
      CSVParser cSVParser0 = CSVParser.parse(file0, charset0, cSVFormat3);
      cSVParser0.getRecords();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(10);
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat1, 1968L, 1968L);
      cSVParser0.spliterator();
      cSVParser0.getHeaderMap();
      assertEquals(1967L, cSVParser0.getRecordNumber());
      
      cSVFormat1.withEscape('w');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)12;
      cSVFormat1.withCommentMarker((Character) null);
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte)0;
      cSVFormat0.withAutoFlush(false);
      CSVFormat.newFormat('?');
      byteArray0[4] = (byte)116;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      byteArrayInputStream0.read(byteArray0);
      CSVParser cSVParser1 = CSVParser.parse((InputStream) byteArrayInputStream0, charset0, cSVFormat1);
      cSVParser1.getCurrentLineNumber();
      CSVParser cSVParser2 = CSVParser.parse((InputStream) byteArrayInputStream0, charset0, cSVFormat1);
      assertEquals(0L, cSVParser2.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = "";
      CSVFormat cSVFormat0 = CSVFormat.newFormat('Q');
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVParser.parse("", cSVFormat2);
      // Undeclared exception!
      try { 
        CSVParser.parse((Reader) null, cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0);
      cSVParser0.iterator();
      PipedInputStream pipedInputStream0 = new PipedInputStream(4501);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0, 4501);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0, 690L, (-1037L));
      ByteArrayInputStream byteArrayInputStream0 = null;
      try {
        byteArrayInputStream0 = new ByteArrayInputStream((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
