/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 05:29:40 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.file.NoSuchFileException;
import java.nio.file.Path;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.Enumeration;
import java.util.Locale;
import java.util.Map;
import java.util.function.Consumer;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVParser_ESTest extends CSVParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat0.withFirstRecordAsHeader();
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      CSVParser cSVParser0 = CSVParser.parse(path0, charset0, cSVFormat0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cSVParser0.forEach(consumer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // IOException reading next record: java.io.IOException: Is a directory
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
      CSVParser cSVParser0 = CSVParser.parse("&@t|", cSVFormat2);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Q/Jo}MI8(?*XhJa");
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Q/Jo}MI8(?*XhJa");
      CSVFormat cSVFormat2 = cSVFormat0.withQuote('(');
      CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator("4{[`e;/F.");
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      CSVFormat cSVFormat4 = cSVFormat1.withHeader(class0);
      cSVFormat2.parse(stringReader0);
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat4);
      cSVParser0.spliterator();
      CSVParser cSVParser1 = new CSVParser(stringReader0, cSVFormat3, 1L, 1L);
      cSVParser0.iterator();
      CSVParser cSVParser2 = cSVFormat4.parse(stringReader0);
      CSVParser cSVParser3 = new CSVParser(stringReader0, cSVFormat4);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser3.forEach(consumer0);
      cSVParser2.close();
      MockFile.createTempFile("4{[`e;/F.", "Q/Jo}MI8(?*XhJa");
      CSVFormat cSVFormat5 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser.parse("org.apache.commons.csv.CSVParser", cSVFormat5);
      File file0 = MockFile.createTempFile("org.apache.commons.csv.CSVParser", "Q/Jo}MI8(?*XhJa");
      Charset charset0 = Charset.defaultCharset();
      CSVParser.parse(file0, charset0, cSVFormat5);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        CSVParser.parse((InputStream) pipedInputStream0, charset0, cSVFormat5);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse("Mapping for %s not found, expected one of %s", cSVFormat1);
      cSVParser0.getFirstEndOfLine();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse("&xt|", cSVFormat1);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVParser cSVParser0 = CSVParser.parse("b5W>H4 w0Fz}y]#T>u|", cSVFormat0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse("A5`>04Q}VOuHJ", cSVFormat0);
      cSVParser0.close();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Q/Jo}M4I(?*XhJa");
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Q/Jo}M4I(?*XhJa");
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0, (-4601L), (-4601L));
      cSVParser0.nextRecord();
      assertEquals((-4601L), cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat1);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertNotNull(map0);
      
      cSVParser0.getFirstEndOfLine();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVParser cSVParser0 = CSVParser.parse("No header mapping was specified, the record values can't be accessed by name", cSVFormat0);
      String[] stringArray0 = new String[2];
      stringArray0[1] = "No header mapping was specified, the record values can't be accessed by name";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser.parse("(startline ", cSVFormat1);
      cSVParser0.close();
      // Undeclared exception!
      try { 
        CSVParser.parse((String) null, cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'string' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat0.withTrim();
      CSVParser cSVParser0 = CSVParser.parse("Wm", cSVFormat0);
      CSVParser cSVParser1 = CSVParser.parse("Wm", cSVFormat0);
      cSVParser1.getFirstEndOfLine();
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      cSVParser0.close();
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) pipedReader0;
      objectArray0[1] = (Object) "Wm";
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) pipedReader0;
      CSVParser cSVParser0 = CSVParser.parse("Rw9(:},Vay8NaWGm>K^", cSVFormat3);
      cSVParser0.close();
      cSVParser0.getFirstEndOfLine();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CSVFormat cSVFormat2 = cSVFormat0.withFirstRecordAsHeader();
      String string0 = "qAO!";
      try { 
        CSVParser.parse("GK5jGc\"", cSVFormat2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // EOF whilst processing escape sequence
         //
         verifyException("org.apache.commons.csv.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Q/Jo}MI8(?*XhJa");
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("EXTENDED_FILTERING");
      CSVFormat cSVFormat2 = cSVFormat0.withQuote('(');
      CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator("4{[`e;/F.");
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      CSVFormat cSVFormat4 = cSVFormat1.withHeader(class0);
      cSVFormat2.parse(stringReader0);
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat4);
      cSVParser0.spliterator();
      CSVParser cSVParser1 = new CSVParser(stringReader0, cSVFormat3, 1L, 1L);
      cSVParser0.iterator();
      CSVParser cSVParser2 = cSVFormat4.parse(stringReader0);
      CSVParser cSVParser3 = new CSVParser(stringReader0, cSVFormat4);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser3.forEach(consumer0);
      cSVParser2.close();
      MockFile.createTempFile("4{[`e;/F.", "Q/Jo}MI8(?*XhJa");
      CSVFormat cSVFormat5 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser.parse("org.apache.commons.csv.CSVParser", cSVFormat5);
      File file0 = MockFile.createTempFile("org.apache.commons.csv.CSVParser", "Q/Jo}MI8(?*XhJa");
      Charset charset0 = Charset.defaultCharset();
      CSVParser.parse(file0, charset0, cSVFormat5);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        CSVParser.parse((InputStream) pipedInputStream0, charset0, cSVFormat5);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse("qAO!", cSVFormat0);
      cSVParser0.isClosed();
      cSVFormat1.withAutoFlush(false);
      cSVParser0.close();
      boolean boolean0 = cSVParser0.isClosed();
      assertTrue(boolean0);
      
      cSVParser0.getCurrentLineNumber();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Unexpected Token type: ");
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0, (-1L), (-1L));
      cSVParser0.getRecordNumber();
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser cSVParser1 = null;
      try {
        cSVParser1 = new CSVParser(pipedReader0, cSVFormat1, 9L, 9L);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat0.withQuote('u');
      String string0 = "`lhuq9WamlO(yH7@tU";
      String string1 = "]2,GFrRosY";
      cSVFormat0.withRecordSeparator("]2,GFrRosY");
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('>');
      try { 
        cSVFormat3.parse(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat0);
      cSVParser0.isClosed();
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(false);
      CSVParser cSVParser1 = CSVParser.parse("format", cSVFormat2);
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      File file0 = null;
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        CSVParser.parse((File) null, charset0, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat0.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat0);
      cSVParser0.isClosed();
      StringReader stringReader0 = new StringReader("QuoteChar=<");
      CSVParser cSVParser1 = new CSVParser(stringReader0, cSVFormat0, 1L, 2816L);
      cSVParser0.getRecords();
      cSVParser1.close();
      assertEquals(2815L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Q/Jo}MI8(?*XhJa");
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("EXTENDED_FILTERING");
      CSVFormat cSVFormat2 = cSVFormat0.withQuote('(');
      CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator("`lhuq9WamlO(yH7@tU");
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      CSVFormat cSVFormat4 = cSVFormat1.withHeader(class0);
      cSVFormat2.parse(stringReader0);
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat4);
      cSVParser0.spliterator();
      CSVParser cSVParser1 = new CSVParser(stringReader0, cSVFormat3, 1L, 1L);
      cSVParser0.iterator();
      cSVFormat4.parse(stringReader0);
      CSVParser cSVParser2 = new CSVParser(stringReader0, cSVFormat4);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser2.forEach(consumer0);
      assertEquals(1L, cSVParser2.getRecordNumber());
      
      CSVParser cSVParser3 = new CSVParser(stringReader0, cSVFormat4, 1L, 0L);
      cSVParser0.close();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      pipedReader0.skip(0L);
      StringReader stringReader0 = new StringReader("jtry");
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0, 0L, (-1435L));
      cSVParser0.getRecords();
      cSVParser0.close();
      try { 
        cSVParser0.nextRecord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        CSVParser.parse((Reader) null, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat1);
      cSVParser0.isClosed();
      Character character0 = Character.valueOf(';');
      cSVFormat0.withQuote(character0);
      cSVFormat0.withAutoFlush(true);
      // Undeclared exception!
      try { 
        CSVParser.parse((String) null, cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'string' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.CSVParser");
      cSVFormat1.withQuote('A');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("Q/Jo}M4I(?*XhJa");
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      CSVFormat cSVFormat3 = cSVFormat0.withHeader(class0);
      CSVParser cSVParser0 = cSVFormat3.parse(stringReader0);
      CSVParser cSVParser1 = CSVParser.parse("to>a9H", cSVFormat2);
      cSVFormat0.withRecordSeparator("p j#n^uk]D(I#rYy%");
      Class<Locale.FilteringMode> class1 = Locale.FilteringMode.class;
      cSVFormat0.withHeader(class1);
      CSVParser cSVParser2 = cSVFormat0.parse(stringReader0);
      CSVParser cSVParser3 = new CSVParser(stringReader0, cSVFormat2);
      cSVParser0.spliterator();
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser4 = new CSVParser(pipedReader0, cSVFormat3, (-9L), 1L);
      cSVParser2.close();
      cSVParser1.getHeaderMap();
      try { 
        cSVParser0.getRecords();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('v');
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      File file0 = MockFile.createTempFile("`{ZZiU4(H", "y+IMZ{Sf}!");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, mockFileInputStream0);
      sequenceInputStream0.skip((-35L));
      cSVFormat2.withIgnoreSurroundingSpaces();
      Charset charset0 = Charset.defaultCharset();
      CSVParser.parse((InputStream) mockFileInputStream0, charset0, cSVFormat2);
      String string0 = "file";
      StringReader stringReader0 = new StringReader("`{ZZiU4(H");
      stringReader0.markSupported();
      PipedReader pipedReader0 = new PipedReader();
      try { 
        CSVParser.parse((Reader) pipedReader0, cSVFormat3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "Q/Jo}M4I(?*XhJa";
      StringReader stringReader0 = new StringReader(string0);
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      String string1 = "EXTENDED_FILTERING";
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(string1);
      char char0 = '(';
      CSVFormat cSVFormat2 = cSVFormat0.withQuote(char0);
      String string2 = "`lhuq9WamlO(yH7@tU";
      CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator(string2);
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      CSVFormat cSVFormat4 = cSVFormat1.withHeader(class0);
      cSVFormat2.parse(stringReader0);
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat4);
      cSVParser0.spliterator();
      long long0 = 1L;
      CSVParser cSVParser1 = new CSVParser(stringReader0, cSVFormat3, long0, long0);
      cSVParser0.iterator();
      cSVParser1.getHeaderMap();
      cSVParser0.nextRecord();
      String string3 = "CommentStart=<";
      MockFile mockFile0 = new MockFile(string3);
      String string4 = "org.apache.commons.csv.CSVFormat$Predefined";
      MockFile.createTempFile(string4, string4, (File) mockFile0);
      MockFile mockFile1 = new MockFile(mockFile0, string1);
      mockFile0.toPath();
      // Undeclared exception!
      try { 
        Charset.forName(string2);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // `lhuq9WamlO(yH7@tU
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.CSVParser");
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('A');
      cSVFormat1.withRecordSeparator("Q/Jo}M4I(?*XhJa");
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      CSVFormat cSVFormat3 = cSVFormat0.withHeader(class0);
      CSVParser cSVParser0 = cSVFormat3.parse(stringReader0);
      cSVParser0.spliterator();
      CSVParser cSVParser1 = new CSVParser(stringReader0, cSVFormat2, 2041L, 2123L);
      cSVParser1.iterator();
      cSVParser0.getHeaderMap();
      cSVParser0.nextRecord();
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "Q/Jo}M4I(?*XhJa");
      mockFile1.toPath();
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.withNullString("org.apache.commons.csv.CSVParser");
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      cSVFormat1.withRecordSeparator("Q/Jo}M4I(?*XhJa");
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(class0);
      cSVFormat2.parse(stringReader0);
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat1);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      CSVParser cSVParser1 = new CSVParser(stringReader0, cSVFormat1, 2041L, 2123L);
      CSVFormat cSVFormat3 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVParser cSVParser2 = new CSVParser(stringReader0, cSVFormat3, 2041L, 2041L);
      cSVParser0.isClosed();
      URI uRI0 = MockURI.aFileURI;
      URL uRL0 = MockURI.toURL(uRI0);
      MockURL.URL(uRL0, "Q/Jo}M4I(?*XhJa");
      // Undeclared exception!
      try { 
        Charset.forName("{3|d)tC*");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // {3|d)tC*
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.CSVParser");
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('A');
      CSVFormat cSVFormat3 = cSVFormat1.withRecordSeparator("Q/Jo}M4I(?*XhJa");
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      CSVFormat cSVFormat4 = cSVFormat0.withHeader(class0);
      cSVFormat4.parse(stringReader0);
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat2);
      cSVParser0.spliterator();
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser1 = new CSVParser(pipedReader0, cSVFormat3, (-9L), 2123L);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cSVParser1.forEach(consumer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // IOException reading next record: java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/x.SD`(n^|Q@q6", "/x.SD`(n^|Q@q6");
      Path path0 = mockFile0.toPath();
      Charset charset0 = null;
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
      // Undeclared exception!
      try { 
        CSVParser.parse(path0, (Charset) null, cSVFormat3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Q/Jo}M4I(?*XhJa");
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.withNullString("Q/Jo}M4I(?*XhJa");
      cSVFormat0.withQuote('a');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      cSVFormat1.withRecordSeparator("Q/Jo}M4I(?*XhJa");
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0, 6591L, 0L);
      cSVParser0.iterator();
      cSVParser0.getHeaderMap();
      cSVParser0.nextRecord();
      CSVParser cSVParser1 = new CSVParser(stringReader0, cSVFormat1, 0L, 1208L);
      cSVParser1.close();
      CSVFormat.newFormat('a');
      try { 
        MockURI.URI("`lhuq9WamlO(yH7@tU", "`lhuq9WamlO(yH7@tU", "Q/Jo}M4I(?*XhJa", 35, "`lhuq9WamlO(yH7@tU", "0wK8ltL)BM(", "`lhuq9WamlO(yH7@tU");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: `lhuq9WamlO(yH7@tU://%60lhuq9WamlO(yH7%40tU@Q/Jo}M4I(?*XhJa:35%60lhuq9WamlO(yH7@tU?0wK8ltL)BM(#%60lhuq9WamlO(yH7@tU
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("`lhuq9WamlO(yH7@tU");
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.CSVParser");
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('E');
      CSVFormat cSVFormat3 = cSVFormat1.withRecordSeparator("org.apache.commons.csv.CSVParser");
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      cSVFormat0.withHeader(class0);
      cSVFormat2.parse(stringReader0);
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat3);
      cSVParser0.spliterator();
      CSVParser cSVParser1 = new CSVParser(stringReader0, cSVFormat2, 936L, 936L);
      cSVParser1.iterator();
      cSVParser0.getHeaderMap();
      cSVParser1.nextRecord();
      MockFile mockFile0 = new MockFile("org.apache.commons.csv.CSVParser");
      File file0 = MockFile.createTempFile("to>a9H", "org.apache.commons.csv.CSVFormat$Predefined", (File) mockFile0);
      MockFile mockFile1 = new MockFile(file0, "org.apache.commons.csv.CSVParser");
      mockFile1.toPath();
      // Undeclared exception!
      try { 
        Charset.forName("Ke7H.Z");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Ke7H.Z
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.CSVParser");
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('A');
      CSVFormat cSVFormat3 = cSVFormat1.withRecordSeparator("Q/Jo}M4I(?*XhJa");
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      CSVFormat cSVFormat4 = cSVFormat0.withHeader(class0);
      cSVFormat4.parse(stringReader0);
      CSVParser cSVParser0 = CSVParser.parse("to>a9H", cSVFormat3);
      cSVParser0.spliterator();
      CSVParser cSVParser1 = new CSVParser(stringReader0, cSVFormat2, 2041L, 2123L);
      cSVParser1.iterator();
      cSVParser0.getHeaderMap();
      cSVParser0.nextRecord();
      MockFile mockFile0 = new MockFile("");
      MockFile.createTempFile("No quotes mode set but no escape character is set", "to>a9H", (File) mockFile0);
      MockFile mockFile1 = new MockFile("No quotes mode set but no escape character is set", "org.apache.commons.csv.CSVParser");
      mockFile0.toPath();
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat0);
      cSVParser0.isClosed();
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(false);
      CSVParser cSVParser1 = CSVParser.parse("", cSVFormat2);
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVParser cSVParser0 = CSVParser.parse("a(", cSVFormat0);
      cSVParser0.close();
      MockFile mockFile0 = new MockFile("h3l`{8|xGEo^t1<$J", "h3l`{8|xGEo^t1<$J");
      File file0 = MockFile.createTempFile(":>jAWWI&", ":>jAWWI&", (File) mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      mockFileInputStream0.markSupported();
      // Undeclared exception!
      try { 
        CSVParser.parse((InputStream) mockFileInputStream0, (Charset) null, cSVFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException("java.io.InputStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      Character.valueOf('_');
      Character character0 = new Character('_');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      PipedReader pipedReader1 = new PipedReader(2106);
      CSVParser cSVParser0 = cSVFormat1.parse(pipedReader1);
      cSVParser0.close();
      MockFile mockFile0 = new MockFile("c*=");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      try { 
        CSVParser.parse(path0, charset0, cSVFormat1);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      String string0 = "to>a9H";
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.CSVParser");
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('A');
      cSVFormat1.withRecordSeparator("Q/Jo}M4I(?*XhJa");
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      CSVFormat cSVFormat3 = cSVFormat0.withHeader(class0);
      cSVFormat3.parse(stringReader0);
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat2);
      cSVParser0.spliterator();
      long long0 = 2041L;
      long long1 = 2123L;
      CSVParser cSVParser1 = new CSVParser(stringReader0, cSVFormat2, long0, long1);
      cSVParser1.iterator();
      cSVParser0.getHeaderMap();
      cSVParser0.nextRecord();
      String string1 = "";
      MockFile mockFile0 = new MockFile(string1);
      String string2 = "No quotes mode set but no escape character is set";
      File file0 = MockFile.createTempFile(string2, string0, (File) mockFile0);
      String string3 = "!K2\\.y";
      MockFile mockFile1 = new MockFile(file0, string3);
      mockFile0.toPath();
      String string4 = null;
      // Undeclared exception!
      try { 
        Charset.forName(string4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withSystemRecordSeparator();
      cSVFormat1.withTrailingDelimiter(true);
      CSVFormat cSVFormat2 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat2, 0L, 0L);
      cSVParser0.getHeaderMap();
      cSVParser0.getHeaderMap();
      String string0 = "jDg<E#CjW<F?+sug-";
      URL uRL0 = MockURL.getHttpExample();
      Charset charset0 = Charset.defaultCharset();
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser.parse("qAO!", cSVFormat0);
      cSVFormat0.parse(pipedReader0);
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockFile mockFile0 = new MockFile("')");
      URL uRL0 = mockFile0.toURL();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      // Undeclared exception!
      try { 
        CSVParser.parse((Path) null, charset0, cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'path' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("to>a9H");
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('a');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("to>a9H");
      CSVParser cSVParser0 = cSVFormat3.parse(stringReader0);
      cSVParser0.spliterator();
      CSVParser cSVParser1 = new CSVParser(stringReader0, cSVFormat3, 0L, 2041L);
      cSVParser1.iterator();
      cSVParser1.getHeaderMap();
      cSVParser1.nextRecord();
      String string0 = "?";
      MockFile mockFile0 = new MockFile("fdYG;d'~B6");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("?", "to>a9H", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = cSVFormat3.parse(pipedReader0);
      cSVParser0.getCurrentLineNumber();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(2255);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter();
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat3, 2255, (-1L));
      cSVParser0.iterator();
      cSVParser0.iterator();
      assertEquals((-2L), cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      File file0 = MockFile.createTempFile("S#`X4TzS", "/RZ9-H%.8[sTKMGrl");
      MockFile mockFile0 = new MockFile(file0, "/RZ9-H%.8[sTKMGrl");
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim(false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "EWJ_mj";
      cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter(true);
      try { 
        CSVParser.parse((File) mockFile0, charset0, cSVFormat4);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser((Reader) null, (CSVFormat) null, (-226L), (-226L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      Charset charset0 = null;
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('T');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL0, (Charset) null, cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'charset' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withSystemRecordSeparator();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('V');
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat3, 0L, 0L);
      cSVParser0.getFirstEndOfLine();
      cSVParser0.getHeaderMap();
      cSVParser0.getHeaderMap();
      String string0 = "jDg<E#CjW<F?+sug-";
      CSVParser.parse("jDg<E#CjW<F?+sug-", cSVFormat3);
      cSVParser0.isClosed();
      try { 
        MockURL.URL("jDg<E#CjW<F?+sug-");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: jDg<E#CjW<F?+sug-
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.withNullString("org.apache.commons.csv.CSVParser");
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      stringReader0.close();
      cSVFormat1.withRecordSeparator("Q/Jo}M4I(?*XhJa");
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(class0);
      cSVFormat2.parse(stringReader0);
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat1);
      CSVParser cSVParser1 = CSVParser.parse("Q/Jo}M4I(?*XhJa", cSVFormat2);
      long long0 = cSVParser1.getRecordNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = "";
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('A');
      CSVFormat cSVFormat5 = cSVFormat4.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat4);
      cSVParser0.isClosed();
      cSVParser0.getRecordNumber();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat5.withHeader(resultSet0);
      MockFile mockFile0 = new MockFile("", "D![.j.z4AD");
      String string1 = "vIJ";
      MockFile mockFile1 = new MockFile(mockFile0, "vIJ");
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Reader reader0 = null;
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      boolean boolean0 = false;
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      cSVFormat0.withEscape('H');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      CSVFormat cSVFormat4 = cSVFormat3.withSystemRecordSeparator();
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser((Reader) null, cSVFormat4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat0.withFirstRecordAsHeader();
      CSVParser.parse("LDY={zL9ov3WmE`}", cSVFormat0);
      File file0 = MockFile.createTempFile("(>YBmn", ";`5^6lP%p");
      Charset charset0 = Charset.defaultCharset();
      Charset charset1 = Charset.defaultCharset();
      CSVParser.parse(file0, charset1, cSVFormat1);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        CSVParser.parse((InputStream) pipedInputStream0, charset0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('v');
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      StringReader stringReader0 = new StringReader("IGNORE_EXTENDED_RANGES");
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat3, (-9L), (-9L));
      cSVParser0.close();
      assertEquals((-10L), cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.withTrim(true);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        CSVParser.parse((InputStream) null, charset0, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'inputStream' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat0);
      cSVParser0.iterator();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat1, 0L, 0L);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1000);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, pipedInputStream0);
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      boolean boolean0 = true;
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(boolean0);
      char char0 = '8';
      cSVFormat1.withRecordSeparator(char0);
      long long0 = 613L;
      sequenceInputStream0.skip(long0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      try { 
        CSVParser.parse((InputStream) sequenceInputStream1, charset0, cSVFormat3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Q/Jo}M4I(?*XhJa");
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat2, 2114L, (-4601L));
      assertEquals((-4602L), cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      File file0 = MockFile.createTempFile("P[i%x", "P[i%x");
      Charset charset0 = null;
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withSystemRecordSeparator();
      cSVFormat0.withTrailingDelimiter(false);
      cSVFormat0.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('d');
      cSVFormat2.withSkipHeaderRecord();
      // Undeclared exception!
      try { 
        CSVParser.parse(file0, (Charset) null, cSVFormat2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException("java.io.InputStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('v');
      Character character0 = Character.valueOf('v');
      cSVFormat1.withQuote(character0);
      PipedReader pipedReader0 = new PipedReader(2106);
      CSVParser cSVParser0 = cSVFormat2.parse(pipedReader0);
      cSVParser0.close();
      try { 
        cSVParser0.nextRecord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }
}
