/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 17:45:08 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.file.FileSystemException;
import java.nio.file.NoSuchFileException;
import java.nio.file.Path;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.Map;
import java.util.function.Consumer;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVParser_ESTest extends CSVParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      StringReader stringReader0 = new StringReader(", values=");
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0, 438L, (-477L));
      cSVParser0.nextRecord();
      cSVParser0.iterator();
      assertEquals((-477L), cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      Charset charset0 = Charset.defaultCharset();
      try { 
        CSVParser.parse((InputStream) bufferedInputStream0, charset0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(']');
      CSVParser cSVParser0 = CSVParser.parse("]~B&M;#>^cizpL;f#AM", cSVFormat1);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(']');
      CSVParser cSVParser0 = CSVParser.parse("]~B&M;#>^cizpL;f#AM", cSVFormat1);
      cSVParser0.nextRecord();
      // Undeclared exception!
      try { 
        cSVParser0.forEach((Consumer<? super CSVRecord>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      pipedReader0.markSupported();
      CSVFormat cSVFormat2 = cSVFormat0.withTrailingDelimiter(true);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) pipedReader0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) pipedWriter0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) pipedWriter0;
      cSVFormat2.printRecord(pipedWriter0, objectArray0);
      cSVFormat1.withIgnoreEmptyLines(false);
      cSVFormat2.println(pipedWriter0);
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate name: \"org.apache.commons.csv.CSVFormat@0000000002\" in [java.io.PipedReader@0000000004, org.apache.commons.csv.CSVFormat@0000000002, org.apache.commons.csv.CSVFormat@0000000002, org.apache.commons.csv.CSVFormat@0000000003, java.io.PipedWriter@0000000005, org.apache.commons.csv.CSVFormat@0000000006, java.io.PipedWriter@0000000005, ]
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "h7NPP6|Xz!McO:<");
      File file0 = MockFile.createTempFile("w7kZ#=?A-", "CSVParser has been closed", (File) mockFile0);
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      mockFile0.toURI();
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);
      CSVParser cSVParser0 = CSVParser.parse(file0, charset0, cSVFormat2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        cSVParser0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat2.println(pipedWriter0);
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      PipedWriter pipedWriter0 = new PipedWriter();
      pipedReader0.connect(pipedWriter0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0, (-544L), (-2021L));
      cSVParser0.getRecordNumber();
      MockFile mockFile0 = new MockFile("");
      mockFile0.toPath();
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      Path path0 = mockFile1.toPath();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('{');
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter();
      try { 
        CSVParser.parse(path0, charset0, cSVFormat3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 10, 98);
      // Undeclared exception!
      try { 
        CSVParser.parse((InputStream) byteArrayInputStream0, (Charset) null, cSVFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException("java.io.InputStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(true);
      cSVFormat3.withIgnoreHeaderCase();
      cSVFormat3.println(pipedWriter0);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat2);
      cSVParser0.close();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat2.withTrim();
      CSVFormat cSVFormat3 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat1.withAllowMissingColumnNames(true);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat4 = cSVFormat2.withTrailingDelimiter(true);
      cSVFormat3.println(pipedWriter0);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat4);
      cSVParser0.close();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat3, 1L, (-1131L));
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      cSVFormat1.withAllowMissingColumnNames(false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      cSVFormat2.println(pipedWriter0);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat2);
      cSVParser0.getCurrentLineNumber();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('D');
      CSVParser cSVParser0 = CSVParser.parse("org.apache.commons.csv.CSVRecord", cSVFormat1);
      cSVParser0.close();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      try { 
        cSVParser0.nextRecord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat1.withAllowMissingColumnNames(true);
      StringWriter stringWriter0 = new StringWriter(5);
      CharBuffer charBuffer0 = CharBuffer.allocate(959);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      cSVFormat1.print((Object) cSVFormat2, (Appendable) stringWriter1, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      cSVFormat0.withTrailingDelimiter(true);
      cSVFormat0.println(pipedWriter0);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat3);
      cSVParser0.close();
      cSVParser0.getFirstEndOfLine();
      cSVParser0.getFirstEndOfLine();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat0.parse(pipedReader0);
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser.parse("R@HORECORD", cSVFormat1);
      try { 
        CSVParser.parse((Reader) pipedReader0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "3yl7\"xcpZlsM@";
      String string1 = "org.apache.commons.csv.QuoteMode";
      File file0 = MockFile.createTempFile("3yl7\"xcpZlsM@", "org.apache.commons.csv.QuoteMode");
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "org.apache.commons.csv.QuoteMode");
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = null;
      // Undeclared exception!
      try { 
        CSVParser.parse(file0, charset0, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      StringReader stringReader0 = new StringReader("lj");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      StringReader stringReader1 = new StringReader("Z");
      CSVParser cSVParser1 = new CSVParser(stringReader0, cSVFormat1);
      cSVParser1.isClosed();
      CSVParser cSVParser2 = new CSVParser(stringReader0, cSVFormat0);
      cSVParser0.close();
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      cSVFormat2.withAllowMissingColumnNames(true);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter(true);
      cSVFormat4.println(pipedWriter0);
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate name: \"\" in [, ]
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("L=>{d'jbfefH}n!");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat2.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat1.withSkipHeaderRecord();
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet1).getMetaData();
      cSVFormat4.withHeader(resultSet1);
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat4);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreHeaderCase();
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat1;
      cSVFormat4.withHeaderComments(objectArray0);
      StringReader stringReader0 = new StringReader("");
      cSVFormat1.parse(stringReader0);
      cSVFormat4.parse(stringReader0);
      CSVParser cSVParser0 = CSVParser.parse("h7NPP6|Xz!McO:<", cSVFormat3);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      Character character0 = new Character('w');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "WAt";
      stringArray0[2] = "3%(9k.aAk)z*DF";
      stringArray0[3] = "7`G,`YvN'?n";
      stringArray0[4] = "Ax\"uI~7|xROU7x>";
      stringArray0[5] = "u";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      CSVParser cSVParser0 = CSVParser.parse((InputStream) byteArrayInputStream0, charset0, cSVFormat3);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertEquals(6, map0.size());
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        CSVParser.parse((InputStream) null, charset0, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'inputStream' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(10);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "L_6'UdF");
      StringReader stringReader0 = new StringReader("L_6'UdF");
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0);
      cSVParser0.isClosed();
      PipedReader pipedReader1 = new PipedReader();
      CSVParser cSVParser1 = new CSVParser(pipedReader1, cSVFormat0, 10, 0L);
      try { 
        cSVParser1.nextRecord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      cSVFormat2.withTrim();
      CSVFormat cSVFormat3 = cSVFormat0.withTrim();
      CSVFormat cSVFormat4 = cSVFormat0.withAllowMissingColumnNames(true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat3;
      cSVFormat2.withHeaderComments(objectArray0);
      StringReader stringReader0 = new StringReader("Index for header '%s' is %d but CSVRecord only has %d values!");
      StringReader stringReader1 = new StringReader("6Na7~X$sb*ic5R-");
      PipedReader pipedReader0 = new PipedReader(114);
      cSVFormat4.parse(pipedReader0);
      CSVParser cSVParser0 = CSVParser.parse("CSVParser has been closed", cSVFormat0);
      cSVParser0.getHeaderMap();
      cSVParser0.getCurrentLineNumber();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      cSVFormat2.withTrim();
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "B`/LAb0Pp<DN";
      cSVFormat4.withHeaderComments(objectArray0);
      StringReader stringReader0 = new StringReader("B`/LAb0Pp<DN");
      StringReader stringReader1 = new StringReader("");
      CSVParser cSVParser0 = cSVFormat1.parse(stringReader1);
      stringReader0.mark(21);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      StringReader stringReader2 = new StringReader("(line ");
      cSVFormat0.parse(stringReader2);
      CSVParser cSVParser1 = new CSVParser(stringReader0, cSVFormat1, 0L, (-1L));
      cSVParser1.close();
      cSVParser1.getHeaderMap();
      try { 
        cSVParser1.getRecords();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat2;
      CSVFormat cSVFormat3 = cSVFormat1.withHeaderComments(objectArray0);
      StringReader stringReader0 = new StringReader("B`/LAb0Pp<DN");
      StringReader stringReader1 = new StringReader("B`/LAb0Pp<DN");
      CSVParser cSVParser0 = cSVFormat2.parse(stringReader0);
      StringReader stringReader2 = new StringReader("");
      stringReader2.mark(1454);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      assertEquals(1L, cSVParser0.getRecordNumber());
      
      StringReader stringReader3 = new StringReader("B`/LAb0Pp<DN");
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      cSVFormat3.parse(pipedReader0);
      CSVParser cSVParser1 = CSVParser.parse("M{Og7f3[PV<kRm=S!`2", cSVFormat3);
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "=?%\"GR@c0:";
      File file0 = MockFile.createTempFile("=?%\"GR@c0:", "=?%\"GR@c0:");
      MockFile mockFile0 = new MockFile(file0, "=?%\"GR@c0:");
      Path path0 = mockFile0.toPath();
      Charset charset0 = null;
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      // Undeclared exception!
      try { 
        CSVParser.parse(path0, (Charset) null, cSVFormat2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);
      Object[] objectArray0 = new Object[6];
      CSVFormat cSVFormat4 = cSVFormat2.withNullString("");
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) "";
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "N");
      StringReader stringReader0 = new StringReader("N");
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat4);
      cSVParser0.isClosed();
      cSVParser0.nextRecord();
      cSVParser0.iterator();
      cSVParser0.getRecords();
      assertEquals(1L, cSVParser0.getRecordNumber());
      
      CSVParser cSVParser1 = new CSVParser(stringReader0, cSVFormat0);
      CSVParser cSVParser2 = CSVParser.parse("", cSVFormat3);
      cSVParser2.close();
      cSVParser2.getHeaderMap();
      assertEquals(0L, cSVParser2.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      File file0 = MockFile.createTempFile("ilWSVc??qm", "ilWSVc??qm");
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('y');
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('y');
      // Undeclared exception!
      try { 
        CSVParser.parse(file0, (Charset) null, cSVFormat3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException("java.io.InputStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "B`/LAb0Pp<DN";
      CSVFormat cSVFormat5 = cSVFormat4.withHeaderComments(objectArray0);
      StringReader stringReader0 = new StringReader("");
      CSVParser cSVParser0 = cSVFormat1.parse(stringReader0);
      cSVFormat5.withTrim(false);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      cSVParser0.isClosed();
      cSVParser0.nextRecord();
      cSVParser0.iterator();
      cSVParser0.getRecords();
      CSVParser cSVParser1 = CSVParser.parse("ALL_NON_NULL", cSVFormat5);
      cSVParser1.getRecords();
      Character character0 = new Character('T');
      Character character1 = Character.valueOf('$');
      CSVFormat cSVFormat6 = cSVFormat2.withQuote(character1);
      CSVParser cSVParser2 = CSVParser.parse("T(kmOL 5\"]7", cSVFormat6);
      cSVParser0.close();
      cSVParser2.close();
      boolean boolean0 = cSVParser0.isClosed();
      assertTrue(boolean0);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("M N}7CbI\"QIi");
      StringReader stringReader0 = new StringReader("M N}7CbI\"QIi");
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      cSVParser0.isClosed();
      stringReader0.ready();
      cSVParser0.nextRecord();
      cSVParser0.iterator();
      cSVParser0.getRecords();
      assertEquals(1L, cSVParser0.getRecordNumber());
      
      Character character0 = new Character('A');
      Character character1 = new Character(')');
      CSVFormat cSVFormat3 = cSVFormat2.withQuote(character1);
      cSVFormat3.withRecordSeparator("M N}7CbI\"QIi");
      CSVParser cSVParser1 = CSVParser.parse("JGTI/8Ed_", cSVFormat3);
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "B`/LAb0Pp<DN";
      cSVFormat4.withHeaderComments(objectArray0);
      StringReader stringReader0 = new StringReader("B`/LAb0Pp<DN");
      StringReader stringReader1 = new StringReader("");
      CSVParser cSVParser0 = cSVFormat1.parse(stringReader1);
      stringReader0.mark(21);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      CSVFormat cSVFormat5 = cSVFormat2.withHeaderComments(objectArray0);
      StringReader stringReader2 = new StringReader("-zFH~)=}G]Y");
      cSVFormat5.parse(stringReader2);
      MockFile mockFile0 = new MockFile("", " reading next record: ");
      mockFile0.toPath();
      CSVParser.parse(" reading next record: ", cSVFormat5);
      CSVParser cSVParser1 = CSVParser.parse("org.apache.commons.csv.CSVParser$1", cSVFormat2);
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);
      Object[] objectArray0 = new Object[6];
      CSVFormat cSVFormat4 = cSVFormat2.withNullString("");
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) "";
      StringReader stringReader0 = new StringReader("N");
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat4);
      cSVParser0.isClosed();
      cSVParser0.nextRecord();
      cSVParser0.iterator();
      cSVParser0.getRecords();
      assertEquals(1L, cSVParser0.getRecordNumber());
      
      Character character0 = new Character('A');
      Character character1 = new Character('A');
      CSVFormat cSVFormat5 = cSVFormat2.withQuote(character1);
      CSVParser cSVParser1 = CSVParser.parse("sa0nNq{8F", cSVFormat5);
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      CSVFormat cSVFormat4 = cSVFormat2.withNullString(") invalid parse sequence");
      Object object0 = new Object();
      cSVFormat1.withNullString("AbbP!8M`@8J'#");
      Object object1 = new Object();
      cSVFormat1.withAllowMissingColumnNames(false);
      Object[] objectArray0 = new Object[0];
      CSVFormat cSVFormat5 = cSVFormat3.withHeaderComments(objectArray0);
      StringReader stringReader0 = new StringReader("AbbP!8M`@8J'#");
      cSVFormat5.parse(stringReader0);
      cSVFormat2.parse(stringReader0);
      CSVParser cSVParser0 = CSVParser.parse(") invalid parse sequence", cSVFormat4);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1838);
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = CSVParser.parse((InputStream) pipedInputStream0, charset0, cSVFormat0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("QuoteChar=<");
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) pipedOutputStream0;
      objectArray0[2] = (Object) pipedOutputStream0;
      objectArray0[3] = (Object) cSVParser0;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      StringReader stringReader0 = new StringReader("");
      CSVParser cSVParser1 = cSVFormat3.parse(stringReader0);
      stringReader0.mark(1882);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser1.forEach(consumer0);
      cSVParser1.isClosed();
      cSVParser1.nextRecord();
      cSVParser1.iterator();
      Character character0 = new Character('#');
      Character character1 = new Character('#');
      Character character2 = Character.valueOf('#');
      cSVFormat1.withQuote(character2);
      CSVFormat cSVFormat4 = cSVFormat2.withSystemRecordSeparator();
      CSVParser cSVParser2 = CSVParser.parse("QuoteChar=<", cSVFormat4);
      assertEquals(0L, cSVParser2.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);
      Object[] objectArray0 = new Object[6];
      CSVFormat cSVFormat4 = cSVFormat2.withNullString("");
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) cSVFormat1;
      CSVFormat cSVFormat5 = cSVFormat3.withHeaderComments(objectArray0);
      StringReader stringReader0 = new StringReader("");
      cSVFormat5.parse(stringReader0);
      Character character0 = new Character('W');
      cSVFormat3.withQuote(character0);
      CSVParser.parse("", cSVFormat4);
      CSVParser cSVParser0 = CSVParser.parse("I-DMx?Fiw[?RUo", cSVFormat2);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      PipedReader pipedReader0 = new PipedReader(24);
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      cSVParser0.close();
      URL uRL0 = MockURL.URL(", values=", "The escape character cannot be a line break", 0, ", values=", uRLStreamHandler0);
      URLStreamHandler uRLStreamHandler1 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      MockURL.URL(uRL0, "", uRLStreamHandler1);
      cSVParser0.iterator();
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(0L, long0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(false);
      CSVParser cSVParser1 = CSVParser.parse((Reader) pipedReader0, cSVFormat1);
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = "NON_NUMERIC";
      CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
      cSVFormat0.withIgnoreHeaderCase(true);
      cSVFormat0.withSystemRecordSeparator();
      CSVParser cSVParser0 = CSVParser.parse("NON_NUMERIC", cSVFormat0);
      cSVParser0.getRecordNumber();
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      PipedReader pipedReader1 = null;
      try {
        pipedReader1 = new PipedReader(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString((String) null);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) pipedWriter0;
      objectArray0[1] = (Object) pipedWriter0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) resultSet0;
      objectArray0[7] = (Object) pipedReader0;
      objectArray0[8] = (Object) resultSet0;
      cSVFormat0.withHeaderComments(objectArray0);
      StringReader stringReader0 = new StringReader("IOg6rcPg~)");
      CSVParser cSVParser0 = cSVFormat2.parse(stringReader0);
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet1).getMetaData();
      cSVFormat3.withHeader(resultSet1);
      CSVParser cSVParser1 = new CSVParser(stringReader0, cSVFormat3);
      cSVParser1.close();
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(0L, long0);
      
      CSVFormat cSVFormat4 = cSVFormat0.withSkipHeaderRecord(true);
      CSVParser cSVParser2 = CSVParser.parse("tz,y", cSVFormat4);
      assertEquals(0L, cSVParser2.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      try { 
        CSVParser.parse("5,\"S~/hom", cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (startline 1) EOF reached before encapsulated token finished
         //
         verifyException("org.apache.commons.csv.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1838);
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = CSVParser.parse((InputStream) pipedInputStream0, charset0, cSVFormat0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("QuoteChar=<");
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) pipedOutputStream0;
      objectArray0[2] = (Object) pipedOutputStream0;
      objectArray0[3] = (Object) cSVParser0;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      StringReader stringReader0 = new StringReader("");
      CSVParser cSVParser1 = cSVFormat3.parse(stringReader0);
      stringReader0.mark(1882);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser1.forEach(consumer0);
      cSVParser1.isClosed();
      cSVParser1.nextRecord();
      cSVParser1.iterator();
      cSVParser1.getRecords();
      Character character0 = new Character('A');
      CSVFormat cSVFormat4 = cSVFormat3.withQuote(character0);
      CSVParser cSVParser2 = CSVParser.parse("u%/+[wvy=:p/", cSVFormat4);
      assertEquals(0L, cSVParser2.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat4 = cSVFormat3.withTrim();
      cSVFormat2.withAllowMissingColumnNames(false);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) cSVFormat4;
      objectArray0[2] = (Object) rowSetMetaDataImpl0;
      objectArray0[3] = (Object) cSVFormat4;
      objectArray0[5] = (Object) cSVFormat4;
      objectArray0[6] = (Object) class0;
      objectArray0[7] = (Object) cSVFormat0;
      cSVFormat0.withHeaderComments(objectArray0);
      StringReader stringReader0 = new StringReader("T(kmOL 5\"]7");
      StringReader stringReader1 = new StringReader("T(kmOL 5\"]7");
      cSVFormat3.parse(stringReader0);
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat2);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      cSVFormat3.withAllowMissingColumnNames(false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      cSVFormat0.println(pipedWriter0);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat3);
      cSVParser0.close();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "B`/LAb0Pp<DN";
      cSVFormat4.withHeaderComments(objectArray0);
      StringReader stringReader0 = new StringReader("B`/LAb0Pp<DN");
      StringReader stringReader1 = new StringReader("");
      CSVParser cSVParser0 = cSVFormat1.parse(stringReader1);
      stringReader0.mark(4);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      cSVParser0.isClosed();
      cSVParser0.nextRecord();
      cSVParser0.iterator();
      cSVParser0.getRecords();
      Character character0 = new Character('A');
      Character character1 = new Character('s');
      cSVFormat4.withQuote(character1);
      CSVParser cSVParser1 = CSVParser.parse("yW@-<:dz)~1qF", cSVFormat2);
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      // Undeclared exception!
      try { 
        CSVParser.parse((String) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'string' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = CSVParser.parse("B`/LAb0Pp<DN", cSVFormat0);
      assertEquals(0L, cSVParser0.getRecordNumber());
      
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      CSVParser cSVParser1 = CSVParser.parse(path0, charset0, cSVFormat0);
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1838);
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = CSVParser.parse((InputStream) pipedInputStream0, charset0, cSVFormat0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("QuoteChar=<");
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) pipedOutputStream0;
      objectArray0[2] = (Object) pipedOutputStream0;
      objectArray0[3] = (Object) cSVParser0;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      StringReader stringReader0 = new StringReader("");
      CSVParser cSVParser1 = cSVFormat3.parse(stringReader0);
      stringReader0.mark(1882);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser1.forEach(consumer0);
      cSVParser1.isClosed();
      cSVParser1.nextRecord();
      cSVParser1.iterator();
      cSVParser1.getRecords();
      Character character0 = new Character('A');
      CSVFormat cSVFormat4 = cSVFormat3.withQuote(character0);
      CSVParser cSVParser2 = CSVParser.parse("u%/+[wvy=:p/", cSVFormat4);
      assertEquals(0L, cSVParser2.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      PipedReader pipedReader0 = new PipedReader(24);
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      cSVParser0.close();
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat0.withHeader(resultSet0);
      CSVParser cSVParser1 = new CSVParser(pipedReader0, cSVFormat1);
      cSVParser0.close();
      File file0 = MockFile.createTempFile("out", (String) null);
      Charset charset0 = Charset.defaultCharset();
      CSVParser cSVParser2 = CSVParser.parse(file0, charset0, cSVFormat0);
      assertEquals(0L, cSVParser2.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      CSVFormat cSVFormat4 = cSVFormat2.withNullString(") invalid parse sequence");
      Object object0 = new Object();
      CSVFormat cSVFormat5 = cSVFormat4.withFirstRecordAsHeader();
      Object[] objectArray0 = new Object[0];
      cSVFormat3.withHeaderComments(objectArray0);
      StringReader stringReader0 = new StringReader("0^,}pHqUt");
      cSVFormat5.parse(stringReader0);
      cSVFormat0.parse(stringReader0);
      CSVParser cSVParser0 = CSVParser.parse("0^,}pHqUt", cSVFormat4);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "B`/LAb0Pp<DN";
      cSVFormat4.withHeaderComments(objectArray0);
      StringReader stringReader0 = new StringReader("B`/LAb0Pp<DN");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      cSVParser0.iterator();
      cSVParser0.getRecords();
      assertEquals(1L, cSVParser0.getRecordNumber());
      
      Character character0 = new Character('A');
      Character character1 = new Character('~');
      Character character2 = new Character('m');
      cSVFormat1.withQuote(character2);
      CSVParser cSVParser1 = CSVParser.parse("inputStream", cSVFormat2);
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "B`/LAb0Pp<DN";
      cSVFormat3.withHeaderComments(objectArray0);
      StringReader stringReader0 = new StringReader("");
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat3);
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('O');
      CSVParser cSVParser1 = CSVParser.parse("format", cSVFormat4);
      CSVParser cSVParser2 = CSVParser.parse((Reader) stringReader0, cSVFormat1);
      cSVParser2.close();
      Map<String, Integer> map0 = cSVParser1.getHeaderMap();
      assertEquals(0L, cSVParser1.getRecordNumber());
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      String string0 = "";
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);
      Object[] objectArray0 = new Object[6];
      cSVFormat2.withNullString("");
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) cSVFormat1;
      CSVFormat cSVFormat4 = cSVFormat3.withHeaderComments(objectArray0);
      StringReader stringReader0 = new StringReader("");
      cSVFormat4.parse(stringReader0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        stringReader0.mark((-2387));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Read-ahead limit < 0
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = CSVParser.parse("B`/LAb0Pp<DN", cSVFormat0);
      cSVParser0.isClosed();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(12);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVParser cSVParser0 = cSVFormat1.parse(pipedReader0);
      String string0 = ", recordNumber=";
      StringReader stringReader0 = new StringReader(", recordNumber=");
      stringReader0.mark(5);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cSVParser0.forEach(consumer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // IOException reading next record: java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat0.parse(pipedReader0);
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(10);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat2);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "B`/LAb0Pp<DN";
      CSVFormat cSVFormat5 = cSVFormat4.withHeaderComments(objectArray0);
      StringReader stringReader0 = new StringReader("B`/LAb0Pp<DN");
      StringReader stringReader1 = new StringReader("");
      cSVFormat1.parse(stringReader1);
      CSVParser cSVParser0 = CSVParser.parse("4!", cSVFormat5);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      cSVFormat1.withAllowMissingColumnNames(false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      cSVFormat0.println(pipedWriter0);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat1);
      cSVParser0.close();
      try { 
        cSVParser0.getRecords();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(10);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("$EK:C_");
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat2);
      cSVParser0.getCurrentLineNumber();
      try { 
        cSVParser0.getRecords();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(10);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat2);
      cSVParser0.close();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      Charset charset0 = Charset.defaultCharset();
      CSVParser cSVParser0 = CSVParser.parse((InputStream) pushbackInputStream0, charset0, cSVFormat0);
      cSVParser0.close();
      cSVParser0.spliterator();
      URL uRL0 = MockURL.getHttpExample();
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser((Reader) null, cSVFormat0, 0L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(stringReader0, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      URL uRL0 = null;
      Charset charset0 = null;
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat1.withAutoFlush(false);
      cSVFormat1.withSystemRecordSeparator();
      // Undeclared exception!
      try { 
        CSVParser.parse((URL) null, (Charset) null, cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'url' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[3] = object0;
      cSVFormat0.format(objectArray0);
      char char0 = 'e';
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('e');
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("file");
      cSVFormat1.toString();
      // Undeclared exception!
      try { 
        CSVParser.parse((Reader) null, cSVFormat3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat0.withHeader(class0);
      CSVParser cSVParser0 = CSVParser.parse("t7W3/W)ma}'P", cSVFormat0);
      cSVParser0.getFirstEndOfLine();
      // Undeclared exception!
      try { 
        MockURI.create((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      String string0 = "org.apache.commons.csv.CSVParser$2";
      String string1 = "8v*XQ[";
      MockFile mockFile0 = new MockFile("org.apache.commons.csv.CSVParser$2", "8v*XQ[");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      try { 
        CSVParser.parse(path0, charset0, cSVFormat0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      StringReader stringReader0 = new StringReader("");
      stringReader0.skip(582L);
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      char[] charArray0 = new char[0];
      cSVParser0.getCurrentLineNumber();
      // Undeclared exception!
      try { 
        stringReader0.read(charArray0, 0, 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFile mockFile1 = new MockFile(mockFile0, "~N;68oh5u$CEFbq");
      Path path0 = mockFile1.toPath();
      Charset charset0 = Charset.defaultCharset();
      mockFile0.getCanonicalPath();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("~N;68oh5u$CEFbq");
      cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "~N;68oh5u$CEFbq", 0, 0);
      charset0.encode(charBuffer0);
      try { 
        CSVParser.parse(path0, charset0, cSVFormat2);
        fail("Expecting exception: FileSystemException");
      
      } catch(FileSystemException e) {
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) pipedWriter0;
      objectArray0[1] = (Object) pipedWriter0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat1, 0L, 0L);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1838);
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser.parse((InputStream) pipedInputStream0, charset0, cSVFormat0);
      try { 
        MockURL.URL("{,=z{MX1H", "{,=z{MX1H", 3798, "{,=z{MX1H");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: {,=z{mx1h
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      MockFile mockFile0 = new MockFile("No more CSV records available");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('K');
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('K');
      try { 
        CSVParser.parse((File) mockFile0, (Charset) null, cSVFormat3);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(12);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat2);
      try { 
        cSVParser0.nextRecord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      // Undeclared exception!
      try { 
        CSVParser.parse((Path) null, (Charset) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'path' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }
}
