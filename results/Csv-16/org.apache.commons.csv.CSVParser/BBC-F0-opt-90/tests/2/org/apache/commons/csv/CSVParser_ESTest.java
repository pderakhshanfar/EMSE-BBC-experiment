/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 12 12:25:45 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.net.URI;
import java.net.URL;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.file.FileSystemException;
import java.nio.file.NoSuchFileException;
import java.nio.file.Path;
import java.sql.ResultSetMetaData;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.function.Consumer;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVParser_ESTest extends CSVParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      CSVParser cSVParser0 = CSVParser.parse("\r\n", cSVFormat2);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      Object[] objectArray0 = new Object[3];
      cSVFormat1.printRecord(pipedWriter0, objectArray0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("Header:");
      // Undeclared exception!
      try { 
        CSVParser.parse((Reader) pipedReader0, cSVFormat3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate name: \"null\" in [null, null, null]
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) pipedReader0;
      objectArray0[1] = (Object) pipedReader0;
      objectArray0[2] = (Object) pipedWriter0;
      cSVFormat0.printRecord(pipedWriter0, objectArray0);
      // Undeclared exception!
      try { 
        CSVParser.parse((Reader) pipedReader0, cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate name: \"java.io.PipedReader@0000000003\" in [java.io.PipedReader@0000000003, java.io.PipedReader@0000000003, java.io.PipedWriter@0000000004]
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.withFirstRecordAsHeader();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "|?a238<_huU<AGrJ");
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      Charset charset0 = Charset.defaultCharset();
      CSVParser cSVParser0 = CSVParser.parse((InputStream) dataInputStream0, charset0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVParser0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\r\n");
      CSVParser cSVParser0 = CSVParser.parse("\r\n", cSVFormat0);
      cSVParser0.nextRecord();
      cSVParser0.getFirstEndOfLine();
      cSVParser0.close();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      PipedReader pipedReader0 = new PipedReader(5072);
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVParser cSVParser0 = CSVParser.parse("\r\n", cSVFormat0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      assertEquals(1L, cSVParser0.getRecordNumber());
      
      long long0 = cSVParser0.getCurrentLineNumber();
      assertEquals(1L, cSVParser0.getRecordNumber());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVParser cSVParser0 = CSVParser.parse("\r\n", cSVFormat0);
      cSVParser0.nextRecord();
      MockURL.getFileExample();
      // Undeclared exception!
      try { 
        Charset.forName("\r\n");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // \r
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse("k6", cSVFormat0);
      cSVParser0.close();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFile mockFile1 = new MockFile(mockFile0, "k6");
      Path path0 = mockFile1.toPath();
      Charset charset0 = Charset.defaultCharset();
      try { 
        CSVParser.parse(path0, charset0, cSVFormat0);
        fail("Expecting exception: FileSystemException");
      
      } catch(FileSystemException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("yj");
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat0.parse(stringReader0);
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      try { 
        CSVParser.parse("\"fKNS!,MzE7@j", cSVFormat2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (startline 1) EOF reached before encapsulated token finished
         //
         verifyException("org.apache.commons.csv.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse("{|O,", cSVFormat2);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      cSVFormat0.withHeader(class0);
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser((Reader) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat0.withTrailingDelimiter();
      CSVParser.parse("\" in ", cSVFormat2);
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat1, 498L, (-385L));
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('.');
      Character character0 = Character.valueOf('.');
      CSVFormat cSVFormat4 = cSVFormat3.withEscape(character0);
      CSVParser cSVParser0 = CSVParser.parse("chars!eet", cSVFormat4);
      cSVParser0.close();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      Charset charset0 = Charset.defaultCharset();
      CSVParser cSVParser1 = CSVParser.parse((InputStream) sequenceInputStream0, charset0, cSVFormat2);
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = CSVFormat.ORACLE;
      CSVParser cSVParser0 = CSVParser.parse("(line ", cSVFormat1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("RB");
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat0.parse(stringReader0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        CSVParser.parse((Path) null, charset0, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'path' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      MockURL.getFileExample();
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat0.withIgnoreHeaderCase();
      CSVParser.parse("+lD;+]X", cSVFormat1);
      PipedReader pipedReader0 = new PipedReader();
      try { 
        CSVParser.parse((Reader) pipedReader0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      MockURL.getFileExample();
      cSVFormat0.withFirstRecordAsHeader();
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0, 1L, 1L);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cSVParser0.forEach(consumer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // IOException reading next record: java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      PipedReader pipedReader0 = new PipedReader();
      pipedReader0.skip(0L);
      MockFile mockFile0 = new MockFile("CSVParser has been closed");
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      try { 
        CSVParser.parse(path0, (Charset) null, cSVFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      MockURL.getFileExample();
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase();
      CSVParser.parse("+lD;+]X", cSVFormat2);
      CSVParser.parse("?AS^,vxZ#c.2K0,_e", cSVFormat1);
      MockFile mockFile0 = new MockFile("|8U?t+`_m}sbdsjR+O~");
      File file0 = MockFile.createTempFile("|8U?t+`_m}sbdsjR+O~", "|8U?t+`_m}sbdsjR+O~", (File) mockFile0);
      Charset charset0 = Charset.defaultCharset();
      CSVParser cSVParser0 = CSVParser.parse(file0, charset0, cSVFormat2);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("H");
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      cSVParser0.getCurrentLineNumber();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      assertEquals(1L, cSVParser0.getRecordNumber());
      
      CSVParser cSVParser1 = CSVParser.parse((Reader) stringReader0, cSVFormat0);
      Charset.defaultCharset();
      cSVFormat0.parse(stringReader0);
      cSVParser1.close();
      Consumer<CSVRecord> consumer1 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser1.forEach(consumer1);
      cSVParser1.close();
      cSVParser1.getHeaderMap();
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser((Reader) null, cSVFormat0, 1L, 249L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("RB");
      MockURL.getFileExample();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      CSVParser.parse("RB", cSVFormat2);
      CSVParser.parse("+lD;+]X", cSVFormat1);
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat2);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("No more CSV records available");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      cSVFormat2.withIgnoreSurroundingSpaces(false);
      MockFile mockFile0 = new MockFile((String) null, ":rPkfFr!\"K23v");
      CSVParser cSVParser0 = CSVParser.parse("url", cSVFormat0);
      URL uRL0 = MockURL.getFileExample();
      MockURL.URL(uRL0, ":rPkfFr!\"K23v");
      cSVParser0.nextRecord();
      cSVParser0.close();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Charset charset0 = Charset.defaultCharset();
      try { 
        CSVParser.parse((InputStream) mockFileInputStream0, charset0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("yj");
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat0.parse(stringReader0);
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      CSVParser cSVParser0 = CSVParser.parse(">!R\"zxJ", cSVFormat2);
      cSVParser0.close();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("yjA");
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat0.withFirstRecordAsHeader();
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      MockFile mockFile0 = new MockFile("url", "");
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVParser cSVParser0 = CSVParser.parse("PostgreSQLText", cSVFormat2);
      URL uRL0 = MockURL.getFileExample();
      MockURL.URL(uRL0, "Gd5");
      cSVParser0.nextRecord();
      cSVParser0.close();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      PipedReader pipedReader0 = new PipedReader();
      // Undeclared exception!
      try { 
        CSVParser.parse((Reader) pipedReader0, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("No more CSV records available");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat1.withHeader(class0);
      cSVFormat0.withIgnoreSurroundingSpaces(false);
      MockFile mockFile0 = new MockFile((String) null, "url");
      CSVParser cSVParser0 = CSVParser.parse("Gd5", cSVFormat1);
      URL uRL0 = MockURL.getFileExample();
      MockURL.URL(uRL0, "CSVRecord [comment=");
      cSVParser0.nextRecord();
      cSVParser0.close();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("RB");
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      cSVParser0.isClosed();
      CSVParser cSVParser1 = CSVParser.parse("iOR.1np(aAgs", cSVFormat0);
      URL uRL0 = MockURL.getFileExample();
      MockURL.URL(uRL0, "iOR.1np(aAgs");
      cSVParser0.nextRecord();
      cSVParser1.close();
      try { 
        cSVParser1.getRecords();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("yjA");
      StringReader stringReader1 = new StringReader("RB");
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader1);
      cSVParser0.isClosed();
      MockFile mockFile0 = new MockFile("(startline ", "yjA");
      CSVParser cSVParser1 = CSVParser.parse("iOR.1np(aAgs", cSVFormat0);
      URL uRL0 = MockURL.getFileExample();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      MockURL.URL(uRL0, "iOR.1np(aAgs");
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
      
      cSVParser1.close();
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      cSVFormat2.printer();
      MockFile mockFile0 = new MockFile("", "line.separator");
      CSVParser cSVParser0 = CSVParser.parse("iOR.1np(aAgs", cSVFormat2);
      URL uRL0 = MockURL.getFileExample();
      MockURL.URL(uRL0, "iOR.1np(aAgs");
      cSVParser0.nextRecord();
      cSVParser0.close();
      boolean boolean0 = cSVParser0.isClosed();
      assertEquals(1L, cSVParser0.getRecordNumber());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("yjA");
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0, (-1L), (-1L));
      URL uRL0 = MockURL.getFileExample();
      MockURL.URL(uRL0, "9.'");
      cSVParser0.nextRecord();
      cSVParser0.getHeaderMap();
      cSVParser0.getFirstEndOfLine();
      assertEquals((-1L), cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("PostgreSQLText");
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0, 269L, 269L);
      URL uRL0 = MockURL.getFileExample();
      MockURL.URL(uRL0, "PostgreSQLText");
      cSVParser0.nextRecord();
      cSVParser0.getHeaderMap();
      cSVParser0.getFirstEndOfLine();
      assertEquals(269L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringReader stringReader0 = new StringReader("kMb@\"gUd6A&+=/Ry");
      CSVFormat cSVFormat1 = CSVFormat.newFormat('j');
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(false);
      String string0 = "L{(n-H.Zx>&/f";
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("L{(n-H.Zx>&/f");
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat3, 482L, 0L);
      cSVParser0.getFirstEndOfLine();
      cSVParser0.nextRecord();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      cSVParser0.nextRecord();
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("yjA");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0, 0L, 0L);
      CSVFormat cSVFormat1 = CSVFormat.ORACLE;
      CSVParser cSVParser1 = new CSVParser(stringReader0, cSVFormat1, 284L, 0L);
      assertEquals((-1L), cSVParser1.getRecordNumber());
      
      long long0 = cSVParser0.getRecordNumber();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator("");
      CSVParser cSVParser0 = cSVFormat4.parse(stringReader0);
      cSVParser0.isClosed();
      MockFile mockFile0 = new MockFile("iOR.1nBp(aAgs", ".");
      CSVParser cSVParser1 = CSVParser.parse("&p+QtI>WY8`", cSVFormat3);
      CSVParser cSVParser2 = CSVParser.parse("&p+QtI>WY8`", cSVFormat2);
      URL uRL0 = MockURL.getFileExample();
      MockURL.URL(uRL0, "inputStream");
      cSVParser1.nextRecord();
      assertEquals(1L, cSVParser1.getRecordNumber());
      
      cSVParser2.getHeaderMap();
      assertEquals(0L, cSVParser2.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator("");
      CSVParser cSVParser0 = cSVFormat4.parse(stringReader0);
      cSVParser0.isClosed();
      MockFile mockFile0 = new MockFile("iOR.1nBp(aAgs", ".");
      CSVParser cSVParser1 = CSVParser.parse("&p+QtI>WY8`", cSVFormat3);
      URL uRL0 = MockURL.getFileExample();
      MockURL.URL(uRL0, "&p+QtI>WY8`");
      cSVParser0.nextRecord();
      assertEquals(0L, cSVParser0.getRecordNumber());
      
      Map<String, Integer> map0 = cSVParser1.getHeaderMap();
      assertEquals(5, map0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("yjA");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      stringReader0.close();
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0, 0L, 0L);
      MockFile mockFile0 = new MockFile("I9Z -XJWfy", "yjA");
      CSVParser.parse("I9Z -XJWfy", cSVFormat0);
      URL uRL0 = MockURL.getFileExample();
      MockURL.URL(uRL0, "Z[WNvP");
      try { 
        cSVParser0.nextRecord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("yjA");
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "yjA");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('c');
      CSVFormat cSVFormat1 = CSVFormat.newFormat('(');
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat1;
      cSVFormat0.withHeaderComments(objectArray0);
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      char[] charArray0 = new char[6];
      charArray0[0] = '(';
      charArray0[1] = '(';
      charArray0[2] = '(';
      charArray0[3] = '(';
      charArray0[4] = '(';
      charArray0[5] = '(';
      stringReader0.read(charArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      cSVParser0.getCurrentLineNumber();
      cSVParser0.close();
      cSVParser0.iterator();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        CSVParser.parse((InputStream) pipedInputStream0, (Charset) null, cSVFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException("java.io.InputStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("PostgreSQLText");
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0, 284L, 284L);
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(283L, long0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("yjA");
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.withAutoFlush(true);
      cSVFormat0.withNullString("yjA");
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0, 0L, 0L);
      cSVParser0.getFirstEndOfLine();
      cSVParser0.getFirstEndOfLine();
      cSVParser0.nextRecord();
      cSVParser0.nextRecord();
      MockFile mockFile0 = new MockFile("");
      CSVParser.parse("org.apache.commons.csv.CSVFormat$Predefined", cSVFormat0);
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CSVParser.parse(path0, charset0, cSVFormat1);
      cSVParser0.iterator();
      assertEquals(0L, cSVParser0.getRecordNumber());
      
      CSVParser cSVParser1 = CSVParser.parse((Reader) stringReader0, cSVFormat0);
      cSVParser1.iterator();
      CSVParser cSVParser2 = CSVParser.parse(path0, charset0, cSVFormat0);
      assertEquals(0L, cSVParser2.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "yjA";
      StringReader stringReader0 = new StringReader("yjA");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('c');
      boolean boolean0 = false;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(false);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("yjA");
      CSVFormat cSVFormat3 = CSVFormat.newFormat('c');
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat3, (-3681L), 1L);
      cSVParser0.getFirstEndOfLine();
      cSVParser0.getFirstEndOfLine();
      cSVParser0.nextRecord();
      MockFile mockFile0 = new MockFile("/zsjujUk&3JYK5v");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      try { 
        CSVParser.parse(path0, charset0, cSVFormat2);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringReader stringReader0 = new StringReader("kMb@\"gUd6A&+=/Ry");
      CSVFormat cSVFormat1 = CSVFormat.newFormat('j');
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(false);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("L{(n-H.Zx>&/f");
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat3, 482L, 0L);
      cSVParser0.getFirstEndOfLine();
      cSVParser0.getFirstEndOfLine();
      cSVParser0.nextRecord();
      cSVParser0.nextRecord();
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator("");
      CSVParser cSVParser0 = cSVFormat4.parse(stringReader0);
      cSVParser0.isClosed();
      cSVParser0.getFirstEndOfLine();
      MockFile mockFile0 = new MockFile("/.ERa#s2m", "iOR.1nBp(aAgs");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", (String) null, (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringReader stringReader0 = new StringReader("FKj@9Xbp z");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      cSVParser0.isClosed();
      MockFile mockFile0 = new MockFile("iOR.1nBp(aAgs", "FKj@9Xbp z");
      CSVParser.parse("we'!57zoLa2R", cSVFormat0);
      URL uRL0 = MockURL.getFileExample();
      MockURL.URL(uRL0, "we'!57zoLa2R");
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      Character character0 = Character.valueOf('l');
      cSVFormat0.withCommentMarker(character0);
      cSVFormat0.printer();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Token type: ");
      cSVFormat1.withTrailingDelimiter(true);
      CSVParser cSVParser0 = CSVParser.parse((InputStream) sequenceInputStream0, charset0, cSVFormat1);
      cSVParser0.getCurrentLineNumber();
      assertEquals(0L, cSVParser0.getRecordNumber());
      
      MockFile mockFile0 = new MockFile("Unexpected Token type: ", ", mapping=");
      File file0 = MockFile.createTempFile("Unexpected Token type: ", "NONE", (File) mockFile0);
      CSVParser.parse(file0, charset0, cSVFormat0);
      cSVParser0.iterator();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      cSVFormat0.withIgnoreHeaderCase();
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL0, charset0, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringReader stringReader0 = new StringReader("W[; r#W1#1vj");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) stringReader0;
      objectArray0[1] = (Object) "W[; r#W1#1vj";
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat1);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader("yjA");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('c');
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(false);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("yjA");
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat2, 0L, 0L);
      cSVParser0.getFirstEndOfLine();
      cSVParser0.getFirstEndOfLine();
      cSVParser0.nextRecord();
      cSVParser0.nextRecord();
      MockFile mockFile0 = new MockFile("");
      // Undeclared exception!
      try { 
        MockFile.createTempFile((String) null, "", (File) mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringReader stringReader0 = new StringReader("FKj@9Xbp z");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      cSVParser0.isClosed();
      cSVParser0.getFirstEndOfLine();
      String string0 = "we'!57zoLa2R";
      MockFile mockFile0 = new MockFile("iOR.1nBp(aAgs", "FKj@9Xbp z");
      File file0 = MockFile.createTempFile("we'!57zoLa2R", (String) null, (File) mockFile0);
      Charset charset0 = null;
      CSVParser.parse("we'!57zoLa2R", cSVFormat0);
      // Undeclared exception!
      try { 
        CSVParser.parse(file0, (Charset) null, cSVFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException("java.io.InputStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockURL.getHttpExample();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.withSkipHeaderRecord();
      cSVFormat0.withIgnoreHeaderCase();
      // Undeclared exception!
      try { 
        CSVParser.parse((InputStream) null, charset0, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'inputStream' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringReader stringReader0 = new StringReader("FKj@9Xbp z");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      cSVParser0.isClosed();
      cSVParser0.getFirstEndOfLine();
      MockFile mockFile0 = new MockFile("iOR.1nBp(aAgs", "FKj@9Xbp z");
      CSVParser cSVParser1 = CSVParser.parse("we'!57zoLa2R", cSVFormat0);
      CSVParser cSVParser2 = CSVParser.parse((Reader) stringReader0, cSVFormat0);
      cSVParser2.getRecordNumber();
      cSVParser2.getCurrentLineNumber();
      cSVParser1.getHeaderMap();
      cSVParser2.getRecords();
      cSVParser2.isClosed();
      CSVParser cSVParser3 = new CSVParser(stringReader0, cSVFormat0);
      cSVParser3.close();
      PipedReader pipedReader0 = new PipedReader(98);
      CSVParser.parse((Reader) pipedReader0, cSVFormat0);
      cSVParser1.getFirstEndOfLine();
      cSVParser1.getRecords();
      assertEquals(1L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      char char0 = 't';
      Character character0 = new Character('t');
      cSVFormat0.withCommentMarker(character0);
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat0);
      cSVParser0.getHeaderMap();
      cSVParser0.iterator();
      cSVParser0.getHeaderMap();
      cSVParser0.getRecords();
      PipedReader pipedReader0 = new PipedReader(1380);
      MockFile mockFile0 = new MockFile("", "");
      try { 
        CSVParser.parse((File) mockFile0, (Charset) null, cSVFormat0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      File file0 = null;
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      // Undeclared exception!
      try { 
        CSVParser.parse((File) null, charset0, cSVFormat2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CSVFormat cSVFormat0 = null;
      // Undeclared exception!
      try { 
        CSVParser.parse("p!do\"'KoS`8K8n:3!H", (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }
}
