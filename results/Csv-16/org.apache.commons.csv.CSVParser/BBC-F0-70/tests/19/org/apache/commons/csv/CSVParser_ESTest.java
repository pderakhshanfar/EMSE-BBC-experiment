/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 04:33:18 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.charset.Charset;
import java.nio.file.NoSuchFileException;
import java.nio.file.Path;
import java.sql.ResultSetMetaData;
import java.util.Locale;
import java.util.Map;
import java.util.function.Consumer;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVParser_ESTest extends CSVParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "m!kQ_-D)-R&!&'");
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      // Undeclared exception!
      try { 
        CSVParser.parse(",", cSVFormat3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      pipedWriter0.write("JUClu/");
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      cSVFormat1.withTrim(true);
      char[] charArray0 = new char[7];
      charArray0[0] = '!';
      charArray0[1] = '6';
      charArray0[2] = 'X';
      charArray0[3] = '(';
      charArray0[4] = ')';
      charArray0[5] = 'B';
      charArray0[6] = '6';
      pipedWriter0.write(charArray0);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat1, (-957L), 0L);
      pipedWriter0.close();
      cSVParser0.getCurrentLineNumber();
      cSVParser0.getCurrentLineNumber();
      cSVParser0.getRecordNumber();
      cSVParser0.nextRecord();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      StringReader stringReader0 = new StringReader(",");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      cSVFormat0.toString();
      CSVFormat cSVFormat2 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse("Delimiter=<,> Escape=<\"> QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false", cSVFormat2);
      cSVParser0.nextRecord();
      // Undeclared exception!
      try { 
        CSVParser.parse((Reader) stringReader0, cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate name: \"null\" in [null, null]
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      CSVParser cSVParser0 = CSVParser.parse(",", cSVFormat2);
      cSVParser0.getRecords();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("N@`8%$bK\"w?2X");
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Character character0 = Character.valueOf('a');
      cSVFormat0.withEscape('a');
      cSVFormat0.withQuote(character0);
      cSVFormat0.withIgnoreHeaderCase();
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0, (-1L), (-1L));
      cSVParser0.getHeaderMap();
      cSVParser0.nextRecord();
      cSVParser0.iterator();
      CSVParser cSVParser1 = CSVParser.parse((Reader) stringReader0, cSVFormat0);
      cSVParser0.getCurrentLineNumber();
      cSVParser0.getFirstEndOfLine();
      assertEquals((-1L), cSVParser0.getRecordNumber());
      
      cSVParser1.getCurrentLineNumber();
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVParser cSVParser0 = CSVParser.parse("\rx", cSVFormat0);
      cSVParser0.nextRecord();
      cSVParser0.getCurrentLineNumber();
      cSVParser0.getRecords();
      cSVParser0.close();
      assertEquals(2L, cSVParser0.getRecordNumber());
      
      CSVParser cSVParser1 = CSVParser.parse("\rx", cSVFormat0);
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      try { 
        CSVParser.parse(path0, charset0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse("\r\n", cSVFormat0);
      cSVParser0.nextRecord();
      cSVParser0.getFirstEndOfLine();
      MockFile mockFile0 = new MockFile("UGoO kv1P", "\r\n");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      try { 
        CSVParser.parse(path0, charset0, cSVFormat0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVParser cSVParser0 = CSVParser.parse("\rx", cSVFormat0);
      cSVParser0.nextRecord();
      cSVParser0.nextRecord();
      cSVParser0.getHeaderMap();
      assertEquals(2L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("N");
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('x');
      cSVFormat0.println(printWriter0);
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
      CSVParser cSVParser0 = CSVParser.parse((Reader) stringReader0, cSVFormat3);
      cSVParser0.getRecords();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      StringReader stringReader0 = new StringReader(",");
      CSVParser cSVParser0 = CSVParser.parse(",", cSVFormat0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      cSVFormat0.toString();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVParser.parse("Delimiter=<,> Escape=<\"> QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false", cSVFormat2);
      cSVParser0.iterator();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      StringReader stringReader0 = new StringReader(",");
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(stringReader0, cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate name: \"\" in [, ]
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      StringReader stringReader0 = new StringReader(",");
      CSVParser.parse(",", cSVFormat1);
      cSVFormat1.toString();
      CSVParser cSVParser0 = CSVParser.parse((Reader) stringReader0, cSVFormat0);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      StringReader stringReader0 = new StringReader(",");
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(stringReader0, cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate name: \"null\" in [null, null]
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat0.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse("V", cSVFormat0);
      cSVParser0.close();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVParser cSVParser0 = CSVParser.parse("' in ", cSVFormat0);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      cSVParser0.close();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      Class<Locale.Category> class0 = Locale.Category.class;
      cSVFormat1.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVParser.parse("+3;5ef!Cx0!", cSVFormat2);
      cSVFormat0.withSkipHeaderRecord();
      CSVParser cSVParser0 = CSVParser.parse("[k8t]", cSVFormat2);
      cSVParser0.isClosed();
      File file0 = MockFile.createTempFile("path", "path");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "+3;5ef!Cx0!";
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(stringArray0);
      // Undeclared exception!
      try { 
        CSVParser.parse(file0, (Charset) null, cSVFormat3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException("java.io.InputStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('I');
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      Charset charset0 = Charset.defaultCharset();
      try { 
        CSVParser.parse((InputStream) sequenceInputStream0, charset0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('I');
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat1.withTrailingDelimiter();
      CSVParser.parse("V", cSVFormat1);
      File file0 = MockFile.createTempFile("InformixUnload", "O8?wl\"`L>M$eT\"|");
      cSVFormat0.withSystemRecordSeparator();
      Charset charset0 = Charset.defaultCharset();
      CSVParser cSVParser0 = CSVParser.parse(file0, charset0, cSVFormat0);
      cSVParser0.nextRecord();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = ">Cd:TN(?s3iiV3L";
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(false);
      CSVParser cSVParser0 = CSVParser.parse(">Cd:TN(?s3iiV3L", cSVFormat1);
      cSVParser0.close();
      try { 
        cSVParser0.nextRecord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        CSVParser.parse((File) null, charset0, cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "V";
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVParser cSVParser0 = CSVParser.parse("V", cSVFormat0);
      cSVParser0.close();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      Charset charset0 = null;
      // Undeclared exception!
      try { 
        CSVParser.parse((InputStream) pipedInputStream0, (Charset) null, cSVFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException("java.io.InputStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('I');
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser.parse("V", cSVFormat1);
      // Undeclared exception!
      try { 
        CSVParser.parse((Reader) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringReader stringReader0 = new StringReader("\"'o>CEc");
      CSVFormat.newFormat('C');
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      try { 
        CSVParser.parse("\"'o>CEc", cSVFormat2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (startline 1) EOF reached before encapsulated token finished
         //
         verifyException("org.apache.commons.csv.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("V");
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      Character character0 = Character.valueOf('Y');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('V');
      CSVParser cSVParser0 = CSVParser.parse("V", cSVFormat2);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cSVParser0.forEach(consumer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // MockIOException reading next record: org.evosuite.runtime.mock.java.lang.MockThrowable: EOF whilst processing escape sequence
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('i');
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      CSVParser cSVParser0 = CSVParser.parse("_&PYC}fN8P$adS:nN*", cSVFormat1);
      cSVParser0.close();
      boolean boolean0 = cSVParser0.isClosed();
      assertEquals(0L, cSVParser0.getRecordNumber());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withFirstRecordAsHeader();
      MockFile mockFile0 = new MockFile("N");
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      try { 
        CSVParser.parse(path0, (Charset) null, cSVFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse(", mapping=", cSVFormat0);
      cSVParser0.getRecords();
      cSVParser0.iterator();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('n');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withAutoFlush(false);
      cSVFormat0.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse("N", cSVFormat0);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      cSVParser0.isClosed();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.withEscape('9');
      CSVParser cSVParser0 = CSVParser.parse("N", cSVFormat1);
      cSVParser0.nextRecord();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('i');
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser((Reader) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("V");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat2 = CSVFormat.ORACLE;
      CSVFormat cSVFormat3 = cSVFormat1.withNullString("The quoteChar character and the delimiter cannot be the same ('");
      CSVFormat cSVFormat4 = cSVFormat2.withCommentMarker('|');
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      cSVFormat2.withIgnoreEmptyLines();
      cSVFormat2.withIgnoreHeaderCase(false);
      cSVFormat2.withSkipHeaderRecord(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat4.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVParser cSVParser0 = CSVParser.parse("N", cSVFormat3);
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat1.withQuote('9');
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat2 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat3 = cSVFormat0.withAllowMissingColumnNames(true);
      // Undeclared exception!
      try { 
        CSVParser.parse((InputStream) null, charset0, cSVFormat3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'inputStream' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("V");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat2 = CSVFormat.ORACLE;
      String string0 = "The quoteChar character and the delimiter cannot be the same ('";
      cSVFormat1.withNullString("The quoteChar character and the delimiter cannot be the same ('");
      cSVFormat2.withCommentMarker('|');
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      cSVFormat2.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(false);
      cSVFormat2.withSkipHeaderRecord(false);
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat3);
      cSVParser0.getCurrentLineNumber();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "mNo$9C");
      cSVParser0.getRecords();
      cSVParser0.getCurrentLineNumber();
      cSVParser0.getRecordNumber();
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile("V", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('9');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat2;
      CSVFormat cSVFormat3 = cSVFormat1.withQuote('9');
      CSVFormat cSVFormat4 = cSVFormat2.withSkipHeaderRecord();
      cSVFormat4.withIgnoreHeaderCase(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat5 = cSVFormat3.withRecordSeparator("m3;};Ro~]SNhy4FI(c");
      CSVParser cSVParser0 = CSVParser.parse("m3;};Ro~]SNhy4FI(c", cSVFormat5);
      cSVParser0.getHeaderMap();
      cSVParser0.getRecordNumber();
      cSVParser0.iterator();
      MockFile mockFile0 = new MockFile("m3;};Ro~]SNhy4FI(c", "i`[<8u<!l?{thI0eJd");
      Charset charset0 = Charset.defaultCharset();
      try { 
        CSVParser.parse((File) mockFile0, charset0, cSVFormat5);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      Class<Locale.Category> class0 = Locale.Category.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      try { 
        CSVParser.parse((Reader) pipedReader0, cSVFormat2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Class<Locale.Category> class0 = Locale.Category.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat2);
      cSVParser0.isClosed();
      String string0 = "+3;5ef!Cx0!";
      CSVFormat cSVFormat3 = cSVFormat1.withSkipHeaderRecord();
      CSVParser.parse("+3;5ef!Cx0!", cSVFormat3);
      CSVParser cSVParser1 = CSVParser.parse("[k8t]", cSVFormat3);
      cSVParser1.isClosed();
      try { 
        cSVParser0.getRecords();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "7cJU<";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat1.withSkipHeaderRecord();
      cSVFormat1.withIgnoreHeaderCase(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat0.withTrim();
      cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat2);
      cSVParser0.nextRecord();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('8');
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) pipedReader0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) pipedReader0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat0;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat3, (-158L), (-158L));
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, ":uK;U'iN,'1t");
      cSVParser0.close();
      try { 
        cSVParser0.getRecords();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      CSVParser cSVParser0 = CSVParser.parse((InputStream) pushbackInputStream0, charset0, cSVFormat1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      cSVParser0.isClosed();
      cSVParser0.close();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat0.parse(pipedReader0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat.newFormat('i');
      CSVParser cSVParser0 = CSVParser.parse("out", cSVFormat0);
      cSVParser0.iterator();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("");
      String string0 = "The quoteChar character and the delimiter cannot be the same ('";
      cSVFormat1.withNullString("The quoteChar character and the delimiter cannot be the same ('");
      cSVFormat2.withCommentMarker('|');
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      cSVFormat2.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(false);
      cSVFormat2.withSkipHeaderRecord(false);
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat3);
      cSVParser0.getCurrentLineNumber();
      cSVParser0.getRecords();
      cSVParser0.getRecordNumber();
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile("", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat0);
      cSVParser0.getHeaderMap();
      PipedReader pipedReader1 = new PipedReader(102);
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CSVParser.parse((Reader) pipedReader0, cSVFormat1);
      cSVParser0.getRecordNumber();
      cSVParser0.getCurrentLineNumber();
      cSVParser0.getRecordNumber();
      try { 
        MockURL.URL((String) null);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('9');
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      Object object1 = new Object();
      objectArray0[1] = object1;
      cSVFormat1.withHeaderComments(objectArray0);
      cSVFormat0.withIgnoreSurroundingSpaces(false);
      PipedReader pipedReader0 = new PipedReader(13);
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat2, 13, 200L);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('8');
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) pipedReader0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) pipedReader0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat0;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat3, (-158L), (-158L));
      cSVParser0.close();
      assertEquals((-159L), cSVParser0.getRecordNumber());
      
      cSVParser0.getHeaderMap();
      assertEquals((-159L), cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("");
      CSVParser cSVParser0 = CSVParser.parse(path0, charset0, cSVFormat3);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte)2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)56, (byte)124);
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      CSVParser.parse((InputStream) byteArrayInputStream0, charset0, cSVFormat1);
      URL uRL0 = MockURL.getHttpExample();
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)33;
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      URL uRL0 = MockURL.getFtpExample();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) "7cJU<";
      objectArray0[2] = (Object) "7cJU<";
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser((Reader) null, cSVFormat2, 1834L, 1834L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) "7cJU<";
      objectArray0[2] = (Object) "7cJU<";
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVParser cSVParser0 = CSVParser.parse("7cJU<", cSVFormat4);
      assertEquals(0L, cSVParser0.getRecordNumber());
      
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      cSVFormat2.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreHeaderCase(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat4);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertEquals(0L, cSVParser0.getRecordNumber());
      assertNotNull(map0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = "4_vn^Y";
      MockFile mockFile0 = new MockFile("4_vn^Y");
      mockFile0.toURL();
      MockFile mockFile1 = new MockFile(mockFile0, "iR~QWu[>^");
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat.newFormat('6');
      try { 
        CSVParser.parse((File) mockFile1, charset0, cSVFormat0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      // Undeclared exception!
      try { 
        CSVParser.parse((URL) null, charset0, cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'url' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('a');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('a');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      CSVParser cSVParser0 = CSVParser.parse("&z&E0\"+b$4t3bR", cSVFormat3);
      cSVParser0.getFirstEndOfLine();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte)2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)56, (byte)124);
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      CSVParser cSVParser0 = CSVParser.parse((InputStream) byteArrayInputStream0, charset0, cSVFormat1);
      cSVParser0.getCurrentLineNumber();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) "7cJU<";
      objectArray0[2] = (Object) "7cJU<";
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      MockFile mockFile0 = new MockFile("7cJU<", "hs3.2{?R\"hUsBzkPw~");
      MockFile mockFile1 = new MockFile(mockFile0, "hs3.2{?R\"hUsBzkPw~");
      Path path0 = mockFile1.toPath();
      Charset charset0 = Charset.defaultCharset();
      try { 
        CSVParser.parse(path0, charset0, cSVFormat0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Path path0 = null;
      Charset charset0 = null;
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('/');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      Character character0 = Character.valueOf('X');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
      // Undeclared exception!
      try { 
        CSVParser.parse((Path) null, (Charset) null, cSVFormat3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'path' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MockFile mockFile0 = new MockFile("B{a\"9(9uW#15IN!", "org.apache.commons.csv.CSVParser");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      mockFile0.mkdirs();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('B');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat2.withSystemRecordSeparator();
      cSVFormat2.withIgnoreSurroundingSpaces();
      CSVFormat.newFormat('B');
      try { 
        CSVParser.parse(path0, charset0, cSVFormat3);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = "P/Sm*bAvcdG";
      CSVFormat cSVFormat0 = null;
      // Undeclared exception!
      try { 
        CSVParser.parse("P/Sm*bAvcdG", (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      pipedWriter0.write("JUClu/");
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      cSVFormat1.withTrim(true);
      char[] charArray0 = new char[7];
      charArray0[0] = '!';
      charArray0[1] = '6';
      charArray0[2] = 'X';
      charArray0[3] = '(';
      charArray0[4] = ')';
      charArray0[5] = 'B';
      charArray0[6] = '6';
      pipedWriter0.write(charArray0);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat1, (-957L), 0L);
      cSVParser0.getCurrentLineNumber();
      cSVParser0.getCurrentLineNumber();
      long long0 = cSVParser0.getRecordNumber();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = "org.apache.commons.csv.QuoteMode";
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVParser cSVParser0 = CSVParser.parse("org.apache.commons.csv.QuoteMode", cSVFormat0);
      cSVParser0.getCurrentLineNumber();
      // Undeclared exception!
      try { 
        CSVParser.parse((String) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'string' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0);
      try { 
        cSVParser0.getRecords();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }
}
