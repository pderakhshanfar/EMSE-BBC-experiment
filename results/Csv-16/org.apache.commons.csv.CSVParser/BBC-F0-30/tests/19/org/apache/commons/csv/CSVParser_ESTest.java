/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 05:32:37 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.StringReader;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLStreamHandler;
import java.nio.charset.Charset;
import java.nio.charset.UnsupportedCharsetException;
import java.nio.file.NoSuchFileException;
import java.nio.file.Path;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.Map;
import java.util.function.Consumer;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVParser_ESTest extends CSVParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = CSVFormat.ORACLE;
      cSVFormat1.withTrailingDelimiter(true);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      CSVFormat cSVFormat4 = cSVFormat3.withFirstRecordAsHeader();
      cSVFormat4.withAutoFlush(false);
      CSVParser cSVParser0 = CSVParser.parse("\u0000!", cSVFormat1);
      cSVParser0.getRecords();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      cSVParser0.close();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) resultSet0;
      objectArray0[2] = (Object) pipedReader0;
      objectArray0[3] = (Object) pipedReader0;
      objectArray0[4] = (Object) pipedReader0;
      cSVFormat1.printRecord(pipedWriter0, objectArray0);
      // Undeclared exception!
      try { 
        CSVParser.parse((Reader) pipedReader0, cSVFormat2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate name: \"java.io.PipedReader@0000000005\" in [java.lang.Object@0000000003, org.evosuite.shaded.org.mockito.codegen.ResultSet$MockitoMock$1781588040@0000000004, java.io.PipedReader@0000000005, java.io.PipedReader@0000000005, java.io.PipedReader@0000000005]
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      cSVFormat0.println(pipedWriter0);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      cSVFormat0.withQuote('L');
      cSVFormat2.printRecord(pipedWriter0, stringArray0);
      cSVFormat2.withSystemRecordSeparator();
      // Undeclared exception!
      try { 
        CSVParser.parse((Reader) pipedReader0, cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate name: \"\" in [, ]
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      // Undeclared exception!
      try { 
        CSVParser.parse(",", cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate name: \"\" in [, ]
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      cSVFormat0.withQuote('L');
      cSVFormat2.printRecord(pipedWriter0, stringArray0);
      cSVFormat0.toString();
      CSVFormat cSVFormat3 = CSVFormat.EXCEL;
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreHeaderCase(true);
      cSVFormat4.withSystemRecordSeparator();
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat4);
      MockFile mockFile0 = new MockFile("url", "url");
      CSVParser.parse("url", cSVFormat1);
      String string0 = cSVParser0.getFirstEndOfLine();
      assertNotNull(string0);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat2 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse("\r\n", cSVFormat2);
      cSVParser0.getCurrentLineNumber();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat1.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse("\r\n", cSVFormat1);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      cSVFormat0.println(pipedWriter0);
      pipedWriter0.write(551);
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter();
      cSVFormat1.withQuote('L');
      Character character0 = new Character('L');
      cSVFormat3.printRecord(pipedWriter0, stringArray0);
      cSVFormat3.withCommentMarker(character0);
      cSVFormat2.withSkipHeaderRecord(true);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(true);
      cSVFormat4.withSystemRecordSeparator();
      CSVParser.parse((Reader) pipedReader0, cSVFormat4);
      String string0 = "url";
      MockFile mockFile0 = new MockFile("url");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "The quoteChar character and the delimiter cannot be the same ('");
      MockFile mockFile1 = new MockFile(mockFile0, "@X3~");
      Path path0 = mockFile1.toPath();
      Charset charset0 = Charset.defaultCharset();
      try { 
        CSVParser.parse(path0, charset0, cSVFormat3);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse("$", cSVFormat1);
      cSVParser0.getCurrentLineNumber();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-18);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$");
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte) (-83);
      byteArray0[7] = (byte)49;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1581, (-1100876092));
      // Undeclared exception!
      try { 
        CSVParser.parse((InputStream) byteArrayInputStream0, (Charset) null, cSVFormat1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException("java.io.InputStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withIgnoreEmptyLines();
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      cSVParser0.close();
      cSVParser0.iterator();
      cSVFormat0.withHeader((ResultSet) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      cSVParser0.spliterator();
      cSVParser0.forEach(consumer0);
      cSVParser0.getHeaderMap();
      cSVParser0.getHeaderMap();
      try { 
        cSVParser0.nextRecord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVParser cSVParser0 = CSVParser.parse("The header contains a duplicate name: \"", cSVFormat1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cSVParser0.forEach(consumer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // MockIOException reading next record: org.evosuite.runtime.mock.java.lang.MockThrowable: EOF whilst processing escape sequence
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("od%P)}jn+k2dgtLIQS");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) null);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      CSVFormat cSVFormat4 = cSVFormat3.withHeaderComments(objectArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat4, 1L, (-1L));
      long long0 = cSVParser0.getRecordNumber();
      assertEquals((-2L), long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      CSVParser cSVParser0 = CSVParser.parse("G^", cSVFormat2);
      cSVParser0.getFirstEndOfLine();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse("Gb", cSVFormat0);
      String string0 = "%N";
      StringReader stringReader0 = new StringReader("%N");
      CSVParser cSVParser1 = cSVFormat0.parse(stringReader0);
      cSVParser1.close();
      cSVParser0.getRecords();
      cSVParser0.getRecordNumber();
      cSVParser0.getHeaderMap();
      URL uRL0 = MockURL.getHttpExample();
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = CSVParser.parse("N", cSVFormat0);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      cSVParser0.close();
      try { 
        cSVParser0.getRecords();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse("N", cSVFormat1);
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat1.withHeader(class0);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      cSVParser0.close();
      try { 
        cSVParser0.getRecords();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(false);
      cSVFormat3.withEscape('E');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "h..2S\b";
      stringArray0[1] = "WQ";
      stringArray0[2] = "Unexpected Token type: ";
      CSVFormat cSVFormat4 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat5 = cSVFormat4.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat3.withDelimiter('J');
      Charset charset0 = Charset.defaultCharset();
      CSVParser cSVParser0 = CSVParser.parse("h..2S\b", cSVFormat0);
      cSVParser0.nextRecord();
      cSVParser0.getCurrentLineNumber();
      PipedInputStream pipedInputStream0 = new PipedInputStream(10);
      try { 
        CSVParser.parse((InputStream) pipedInputStream0, charset0, cSVFormat5);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVParser cSVParser0 = CSVParser.parse("path", cSVFormat0);
      cSVParser0.getFirstEndOfLine();
      MockFile mockFile0 = new MockFile("path");
      MockFile mockFile1 = new MockFile(mockFile0, "The header contains a duplicate name: \"");
      File file0 = MockFile.createTempFile("path", "path", (File) mockFile1);
      // Undeclared exception!
      try { 
        CSVParser.parse(file0, (Charset) null, cSVFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException("java.io.InputStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        CSVParser.parse((InputStream) pushbackInputStream0, charset0, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("HeaderComments:");
      CSVParser.parse("HeaderComments:", cSVFormat3);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Charset.defaultCharset();
      CSVParser cSVParser0 = CSVParser.parse("'W:H ", cSVFormat3);
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('L');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      cSVFormat3.withSkipHeaderRecord();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat4 = cSVFormat2.withQuoteMode(quoteMode0);
      CSVParser cSVParser0 = CSVParser.parse("m", cSVFormat2);
      cSVParser0.close();
      CSVParser.parse("lYY3R(hf8g%oiK", cSVFormat3);
      CSVParser.parse("m", cSVFormat2);
      CSVParser.parse("G@", cSVFormat4);
      CSVParser cSVParser1 = CSVParser.parse("G@", cSVFormat1);
      cSVParser1.nextRecord();
      cSVParser0.getHeaderMap();
      cSVParser0.isClosed();
      PipedReader pipedReader0 = new PipedReader();
      try { 
        CSVParser.parse((Reader) pipedReader0, cSVFormat2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.withEscape('L');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.withIgnoreSurroundingSpaces(false);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat1);
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      RowSetMetaDataImpl rowSetMetaDataImpl2 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl2);
      Charset.defaultCharset();
      CSVParser.parse("6j1pVqB+\"deSf>0SnW", cSVFormat3);
      cSVParser0.nextRecord();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVParser cSVParser0 = CSVParser.parse("N", cSVFormat1);
      cSVParser0.close();
      CSVParser cSVParser1 = CSVParser.parse("i,,?@RE;n", cSVFormat1);
      cSVParser1.nextRecord();
      cSVParser0.getHeaderMap();
      cSVParser0.isClosed();
      File file0 = MockFile.createTempFile("@f?r+5fyc", "&;~jpmG2");
      MockFile mockFile0 = new MockFile(file0, "org.apache.commons.csv.CSVParser$2");
      mockFile0.toURL();
      // Undeclared exception!
      try { 
        Charset.forName("TOKEN");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // TOKEN
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('L');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat1.withAllowMissingColumnNames();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat2.withQuoteMode(quoteMode0);
      Reader reader0 = null;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withQuote('L');
      // Undeclared exception!
      try { 
        CSVParser.parse((Reader) null, cSVFormat4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.withEscape('L');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      boolean boolean0 = false;
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      String string0 = "org.apache.commons.csv.CSVParser$2";
      cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("org.apache.commons.csv.CSVParser$2");
      cSVFormat0.withTrailingDelimiter(false);
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat3);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.toPath();
      Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      Character character0 = new Character('b');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.withIgnoreSurroundingSpaces(true);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat3.withQuoteMode(quoteMode0);
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl1);
      Charset.defaultCharset();
      CSVParser cSVParser0 = CSVParser.parse("q&=%G&J#$hO)lLmlke", cSVFormat4);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      Charset.defaultCharset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) path0;
      objectArray0[1] = (Object) cSVFormat0;
      cSVFormat0.withIgnoreEmptyLines(true);
      cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat0);
      cSVParser0.getFirstEndOfLine();
      cSVParser0.getHeaderMap();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat2 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreEmptyLines(true);
      cSVFormat1.withAutoFlush(true);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 431);
      CSVParser cSVParser0 = cSVFormat3.parse(pipedReader0);
      cSVParser0.close();
      CSVFormat cSVFormat4 = null;
      // Undeclared exception!
      try { 
        CSVParser.parse((File) mockFile0, charset0, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('L');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat2.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("org.apache.commons.csv.CSVParser$2");
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter(true);
      CSVParser cSVParser0 = CSVParser.parse("S}2BQby+:`x{Zl-", cSVFormat4);
      cSVParser0.getRecords();
      cSVParser0.nextRecord();
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertEquals(0L, cSVParser0.getRecordNumber());
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.toPath();
      Charset.defaultCharset();
      mockFile0.setExecutable(true);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("')");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVParser cSVParser0 = cSVFormat4.parse(pipedReader0);
      cSVParser0.close();
      cSVFormat4.withEscape('\\');
      PipedReader pipedReader1 = new PipedReader();
      PipedWriter pipedWriter1 = new PipedWriter(pipedReader1);
      PipedReader pipedReader2 = null;
      try {
        pipedReader2 = new PipedReader(pipedWriter1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.toPath();
      Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("url");
      cSVFormat1.withSystemRecordSeparator();
      cSVFormat1.withDelimiter('N');
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat3 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat4 = cSVFormat3.withQuote('N');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat3.withHeader(resultSet0);
      Charset.defaultCharset();
      CSVParser cSVParser0 = CSVParser.parse("url", cSVFormat4);
      cSVParser0.nextRecord();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVParser cSVParser0 = CSVParser.parse(",", cSVFormat1);
      cSVParser0.nextRecord();
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertEquals(0L, cSVParser0.getRecordNumber());
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.withEscape('L');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("org.apache.commons.csv.CSVParser$2");
      cSVFormat0.withTrailingDelimiter(false);
      CSVParser cSVParser0 = CSVParser.parse("org.apache.commons.csv.CSVParser$2", cSVFormat3);
      cSVParser0.getRecords();
      cSVParser0.nextRecord();
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertEquals(0L, cSVParser0.getRecordNumber());
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Charset.defaultCharset();
      CSVParser cSVParser0 = CSVParser.parse("A>36<\u0006jpbwumzk4}6.", cSVFormat0);
      cSVParser0.getFirstEndOfLine();
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('L');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      cSVFormat3.withSkipHeaderRecord();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat2.withQuoteMode(quoteMode0);
      CSVParser cSVParser0 = CSVParser.parse("m", cSVFormat2);
      cSVParser0.close();
      cSVFormat2.withEscape('2');
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      PipedReader pipedReader1 = null;
      try {
        pipedReader1 = new PipedReader(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      mockFile0.setExecutable(true);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) path0;
      objectArray0[1] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat2);
      cSVParser0.getRecords();
      CSVParser cSVParser1 = CSVParser.parse(path0, charset0, cSVFormat2);
      try { 
        cSVParser1.nextRecord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('%');
      String string0 = "q=Jkb*&@Y. `kP";
      MockFile mockFile0 = new MockFile((File) null, "q=Jkb*&@Y. `kP");
      mockFile0.setExecutable(false);
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat4 = cSVFormat0.withSkipHeaderRecord();
      CSVParser.parse("q=Jkb*&@Y. `kP", cSVFormat1);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) cSVFormat0;
      cSVFormat3.withHeaderComments(objectArray0);
      PipedReader pipedReader0 = new PipedReader(1980);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat4, (-1230L), 843L);
      try { 
        cSVParser0.getRecords();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      mockFile0.setExecutable(true);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) path0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) path0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat1.withHeaderComments(objectArray0);
      InputStream inputStream0 = null;
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      mockFile0.setExecutable(false);
      CSVParser cSVParser0 = CSVParser.parse((InputStream) bufferedInputStream0, charset0, cSVFormat0);
      try { 
        cSVParser0.getRecords();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('%');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("S}2BQby+:`x{Zl-");
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(true);
      CSVFormat.newFormat('%');
      CSVFormat cSVFormat4 = cSVFormat3.withFirstRecordAsHeader();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat4.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Charset.defaultCharset();
      CSVParser cSVParser0 = CSVParser.parse("S}2BQby+:`x{Zl-", cSVFormat3);
      cSVParser0.nextRecord();
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" SurroundingSpaces:ignored", " SurroundingSpaces:ignored");
      Path path0 = mockFile0.toPath();
      Charset.defaultCharset();
      mockFile0.setExecutable(true);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) path0;
      objectArray0[1] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      cSVFormat1.withSkipHeaderRecord();
      CSVParser cSVParser0 = CSVParser.parse(" SurroundingSpaces:ignored", cSVFormat0);
      cSVFormat1.withHeaderComments(objectArray0);
      cSVParser0.getRecords();
      cSVParser0.nextRecord();
      cSVParser0.isClosed();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('j');
      cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withSystemRecordSeparator();
      cSVFormat0.withDelimiter('4');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat4 = cSVFormat3.withAutoFlush(true);
      CSVFormat cSVFormat5 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat6 = cSVFormat5.withQuote('w');
      cSVFormat4.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat7 = cSVFormat6.withSkipHeaderRecord();
      CSVParser cSVParser0 = CSVParser.parse("i,,?@RE;n", cSVFormat7);
      cSVParser0.getRecords();
      cSVParser0.nextRecord();
      cSVParser0.getHeaderMap();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      Charset.defaultCharset();
      mockFile0.setExecutable(true);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) path0;
      objectArray0[1] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      cSVFormat0.withSkipHeaderRecord();
      CSVParser cSVParser0 = CSVParser.parse("i,,?@RE;n", cSVFormat1);
      cSVFormat1.withHeaderComments((Object[]) null);
      cSVParser0.getRecords();
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockFile mockFile0 = new MockFile("8yV;5", "8yV;5");
      Path path0 = mockFile0.toPath();
      Charset.defaultCharset();
      mockFile0.setExecutable(true);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) path0;
      mockFile0.toURI();
      objectArray0[2] = (Object) path0;
      cSVFormat0.withHeaderComments(objectArray0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      PipedReader pipedReader0 = new PipedReader(5);
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat1, 0L, (-1895L));
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      Charset.defaultCharset();
      mockFile0.setExecutable(true);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) path0;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      // Undeclared exception!
      try { 
        CSVParser.parse((String) null, cSVFormat2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'string' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('%');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("S}2BQby+:`x{Zl-");
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(true);
      CSVFormat cSVFormat4 = cSVFormat3.withFirstRecordAsHeader();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat4.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Charset.defaultCharset();
      CSVParser cSVParser0 = CSVParser.parse("S}2BQby+:`x{Zl-", cSVFormat3);
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      File file0 = MockFile.createTempFile("Parameter '", "Parameter '", (File) null);
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = CSVParser.parse(file0, charset0, cSVFormat0);
      cSVParser0.getCurrentLineNumber();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      mockFile0.setExecutable(true);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) path0;
      objectArray0[1] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      cSVFormat1.withSkipHeaderRecord();
      CSVParser cSVParser0 = CSVParser.parse("i,,?@RE;n", cSVFormat0);
      cSVParser0.getRecords();
      cSVParser0.nextRecord();
      URL uRL0 = mockFile0.toURL();
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      mockFile0.setExecutable(true);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = CSVParser.parse("F", cSVFormat0);
      cSVParser0.getCurrentLineNumber();
      URL uRL0 = null;
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        CSVParser.parse((URL) null, charset0, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'url' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "XmBuf=9\"i", uRLStreamHandler0);
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('b');
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL1, charset0, cSVFormat3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      mockFile0.toPath();
      Charset.defaultCharset();
      mockFile0.setExecutable(false);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      PipedReader pipedReader0 = new PipedReader(50);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader("od%P)}jn+k2dgtLIQS");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) null);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      cSVFormat3.withHeaderComments(objectArray0);
      CSVParser cSVParser0 = cSVFormat3.parse(stringReader0);
      cSVParser0.iterator();
      cSVParser0.getFirstEndOfLine();
      cSVParser0.getFirstEndOfLine();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('w');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat2.withSystemRecordSeparator();
      CSVFormat cSVFormat4 = cSVFormat2.withDelimiter('I');
      cSVFormat4.withAutoFlush(true);
      cSVFormat1.withQuote('4');
      cSVFormat2.withIgnoreEmptyLines(true);
      cSVFormat3.withSkipHeaderRecord();
      CSVParser cSVParser0 = CSVParser.parse("i,,?@RE;n", cSVFormat1);
      cSVFormat2.withHeaderComments((Object[]) null);
      cSVParser0.getRecords();
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      MockFile mockFile0 = new MockFile("Bl<}");
      File file0 = MockFile.createTempFile("s0YAhLynke2e*'%cp)", "s0YAhLynke2e*'%cp)", (File) mockFile0);
      MockFile mockFile1 = new MockFile(file0, "Bl<}");
      Path path0 = mockFile1.toPath();
      Charset charset0 = Charset.defaultCharset();
      mockFile0.setExecutable(true);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) pipedWriter0;
      objectArray0[1] = (Object) path0;
      objectArray0[2] = (Object) charset0;
      objectArray0[3] = (Object) "s0YAhLynke2e*'%cp)";
      objectArray0[4] = (Object) file0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "Bl<}";
      objectArray0[7] = (Object) charset0;
      Object object1 = new Object();
      objectArray0[8] = object1;
      cSVFormat0.withHeaderComments(objectArray0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      try { 
        CSVParser.parse(path0, charset0, cSVFormat1);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      mockFile0.setExecutable(true);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) path0;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVParser cSVParser0 = CSVParser.parse(path0, charset0, cSVFormat0);
      try { 
        cSVParser0.nextRecord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", ")g5u6ZpBc9ZD`]p)e");
      File file0 = MockFile.createTempFile(",~RD7D\"_Z?+EMdO%=:", ",~RD7D\"_Z?+EMdO%=:", (File) mockFile0);
      MockFile mockFile1 = new MockFile(file0, "]I");
      Path path0 = mockFile1.toPath();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        CSVParser.parse(path0, charset0, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringReader stringReader0 = new StringReader("od%P)}jn+k2dgtLIQS");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) null);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      CSVFormat cSVFormat4 = cSVFormat3.withHeaderComments(objectArray0);
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat4, 1L, (-1L));
      assertEquals((-2L), cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat3);
      cSVParser0.iterator();
      cSVParser0.getCurrentLineNumber();
      CSVParser cSVParser1 = CSVParser.parse("", cSVFormat2);
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser((Reader) null, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(pipedReader0, (CSVFormat) null, 1L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      mockFile0.setExecutable(true);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) path0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) path0;
      cSVFormat0.withHeaderComments(objectArray0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      try { 
        CSVParser.parse(path0, charset0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat2);
      cSVParser0.close();
      try { 
        MockURI.URI("", (String) null, "", "No more CSV records available", (String) null);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: :?No%20more%20CSV%20records%20available
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.csv.CSVParser$2", "org.apache.commons.csv.CSVParser$2");
      Charset charset0 = null;
      CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
      mockFile0.mkdir();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      Character character0 = new Character('D');
      cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter(':');
      cSVFormat1.withRecordSeparator('S');
      try { 
        CSVParser.parse((File) mockFile0, (Charset) null, cSVFormat4);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('0');
      // Undeclared exception!
      try { 
        CSVParser.parse(path0, (Charset) null, cSVFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }
}
