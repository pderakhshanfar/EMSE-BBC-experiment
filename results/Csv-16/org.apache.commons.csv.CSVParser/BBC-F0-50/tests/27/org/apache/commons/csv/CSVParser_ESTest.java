/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 02:48:20 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.file.NoSuchFileException;
import java.nio.file.Path;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.Enumeration;
import java.util.Locale;
import java.util.Map;
import java.util.function.Consumer;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVParser_ESTest extends CSVParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser.parse("m", cSVFormat1);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-8), 743);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Charset charset0 = Charset.defaultCharset();
      CSVParser cSVParser0 = CSVParser.parse((InputStream) dataInputStream0, charset0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVParser0.nextRecord();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser.parse("OexL=M 3%8R", cSVFormat0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.mark((-7));
      Charset charset0 = Charset.defaultCharset();
      CSVParser cSVParser0 = CSVParser.parse((InputStream) sequenceInputStream0, charset0, cSVFormat1);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      cSVParser0.getHeaderMap();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVParser cSVParser0 = CSVParser.parse("-]n`AiHy$\"|", cSVFormat0);
      cSVParser0.close();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      cSVParser0.close();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat1;
      cSVFormat1.printRecord(pipedWriter0, objectArray0);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat1, (-1595L), (-1595L));
      cSVParser0.getCurrentLineNumber();
      cSVParser0.close();
      long long0 = cSVParser0.getRecordNumber();
      assertEquals((-1596L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      Object[] objectArray0 = new Object[18];
      objectArray0[0] = (Object) cSVFormat1;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      objectArray0[1] = (Object) pipedWriter0;
      cSVFormat1.printRecord(pipedWriter0, objectArray0);
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      CSVParser cSVParser0 = CSVParser.parse("}9>V2:4^Z:uXBW#g6_g", cSVFormat2);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = CSVFormat.ORACLE;
      CSVFormat cSVFormat2 = cSVFormat0.withFirstRecordAsHeader();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) pipedReader0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) pipedReader0;
      cSVFormat0.printRecord(pipedWriter0, objectArray0);
      CSVParser cSVParser0 = CSVParser.parse("bfvnMF%.hZ ", cSVFormat3);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = cSVFormat1.parse(pipedReader0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cSVParser0.forEach(consumer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // IOException reading next record: java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVParser cSVParser0 = CSVParser.parse("r&/;j,(Urc,Y[k_n|X", cSVFormat0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      cSVParser0.getCurrentLineNumber();
      cSVParser0.close();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[1] = (Object) pipedReader0;
      objectArray0[2] = (Object) pipedWriter0;
      cSVFormat0.printRecord(pipedWriter0, objectArray0);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0, 255L, (-1594L));
      cSVParser0.nextRecord();
      cSVParser0.getCurrentLineNumber();
      cSVParser0.close();
      cSVParser0.close();
      assertEquals((-1594L), cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      PipedReader pipedReader0 = new PipedReader(4520);
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat1, 4520, (-340L));
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Character character0 = new Character('-');
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat2.withCommentMarker('-');
      Character.valueOf('U');
      Character character1 = Character.valueOf('-');
      cSVFormat1.withEscape(character1);
      Object object0 = new Object();
      PipedReader pipedReader0 = new PipedReader(1253);
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat2);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Character.valueOf('\t');
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('\t');
      Character.valueOf('d');
      Character character0 = new Character('d');
      CSVFormat cSVFormat4 = CSVFormat.TDF;
      cSVFormat4.printer();
      StringReader stringReader0 = new StringReader("J+");
      CSVParser.parse("?", cSVFormat4);
      CSVParser.parse("?", cSVFormat3);
      Charset charset0 = Charset.defaultCharset();
      charset0.aliases();
      // Undeclared exception!
      try { 
        CSVParser.parse((File) null, charset0, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser.parse("GB", cSVFormat1);
      CSVParser.parse("Parameter '", cSVFormat2);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      try { 
        CSVParser.parse((InputStream) pushbackInputStream0, charset0, cSVFormat3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      CSVFormat cSVFormat2 = cSVFormat0.withTrailingDelimiter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl1);
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker('*');
      Character.valueOf('*');
      Character.valueOf('U');
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[8];
      Object object2 = new Object();
      objectArray0[0] = object2;
      Object object3 = new Object();
      objectArray0[1] = object3;
      objectArray0[2] = (Object) cSVFormat3;
      Object object4 = new Object();
      objectArray0[3] = object4;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVFormat2;
      objectArray0[6] = (Object) cSVFormat4;
      objectArray0[7] = object1;
      cSVFormat3.format(objectArray0);
      cSVFormat3.withAllowMissingColumnNames();
      CSVFormat cSVFormat5 = cSVFormat3.withSystemRecordSeparator();
      cSVFormat1.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse(",\njava.lang.Object@0000000005,java.lang.Object@0000000006,org.apache.commons.csv.CSVFormat@0000000002,java.lang.Object@0000000007,org.apache.commons.csv.CSVFormat@0000000001,org.apache.commons.csv.CSVFormat@0000000001,org.apache.commons.csv.CSVFormat@0000000003,java.lang.Object@0000000008,", cSVFormat5);
      cSVParser0.spliterator();
      cSVParser0.nextRecord();
      cSVParser0.getHeaderMap();
      assertEquals(1L, cSVParser0.getRecordNumber());
      
      cSVParser0.getFirstEndOfLine();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte)3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      cSVFormat0.parse(pipedReader0);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat1.withDelimiter('<');
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) byteArrayInputStream0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) byteArrayInputStream0;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      CSVParser cSVParser0 = CSVParser.parse((InputStream) byteArrayInputStream0, charset0, cSVFormat3);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertEquals(5, map0.size());
      assertEquals(0L, cSVParser0.getRecordNumber());
      assertEquals(4, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Character character0 = new Character('?');
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('?');
      Character.valueOf('U');
      Character character1 = Character.valueOf('?');
      CSVFormat cSVFormat3 = cSVFormat0.withEscape(character1);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) rowSetMetaDataImpl0;
      Object object0 = new Object();
      CSVFormat cSVFormat4 = cSVFormat2.withAllowMissingColumnNames();
      cSVFormat3.format(objectArray0);
      CSVParser cSVParser0 = CSVParser.parse("file", cSVFormat4);
      cSVParser0.getRecordNumber();
      // Undeclared exception!
      try { 
        CSVParser.parse("org.apache.commons.csv.CSVFormat@0000000001\tjava.lang.Character@0000000006\tjavax.sql.rowset.RowSetMetaDataImpl@0000000007\tN\tN\tN\tN", cSVFormat2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate name: \"N\" in [org.apache.commons.csv.CSVFormat@0000000001, java.lang.Character@0000000006, javax.sql.rowset.RowSetMetaDataImpl@0000000007, N, N, N, N]
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('h');
      // Undeclared exception!
      try { 
        CSVParser.parse((InputStream) dataInputStream0, (Charset) null, cSVFormat2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException("java.io.InputStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      CSVFormat cSVFormat2 = cSVFormat0.withTrailingDelimiter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat1.withTrailingDelimiter();
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      RowSetMetaDataImpl rowSetMetaDataImpl2 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl2);
      CSVFormat cSVFormat5 = cSVFormat4.withCommentMarker('2');
      Character.valueOf('U');
      Character character0 = Character.valueOf('Y');
      CSVFormat cSVFormat6 = cSVFormat1.withEscape(character0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) character0;
      cSVFormat0.format(objectArray0);
      cSVFormat6.withAllowMissingColumnNames();
      cSVFormat2.withAutoFlush(true);
      CSVParser.parse("java.lang.Object@0000000005", cSVFormat5);
      PipedReader pipedReader0 = new PipedReader();
      try { 
        CSVParser.parse((Reader) pipedReader0, cSVFormat5);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      CSVFormat cSVFormat2 = cSVFormat0.withTrailingDelimiter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl1);
      cSVFormat1.withSystemRecordSeparator();
      Character.valueOf('*');
      Character.valueOf('U');
      Object object0 = new Object();
      Character.valueOf('*');
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      CSVParser cSVParser0 = CSVParser.parse("w&9", cSVFormat4);
      cSVParser0.spliterator();
      cSVParser0.nextRecord();
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertEquals(0L, cSVParser0.getRecordNumber());
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Character character0 = new Character('-');
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('-');
      Character.valueOf('U');
      Character character1 = Character.valueOf('-');
      CSVFormat cSVFormat4 = cSVFormat1.withEscape(character1);
      Object object0 = new Object();
      CSVFormat cSVFormat5 = cSVFormat3.withAllowMissingColumnNames();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat5;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat4;
      objectArray0[3] = object0;
      objectArray0[4] = object0;
      cSVFormat2.format(objectArray0);
      CSVFormat cSVFormat6 = cSVFormat2.withAllowMissingColumnNames();
      CSVFormat cSVFormat7 = CSVFormat.EXCEL;
      CSVFormat cSVFormat8 = cSVFormat7.withAutoFlush(false);
      cSVFormat8.withIgnoreSurroundingSpaces();
      String string0 = "org.apache.commons.csv.CSVParser$2";
      CSVParser.parse("org.apache.commons.csv.CSVParser$2", cSVFormat3);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        CSVParser.parse((Path) null, charset0, cSVFormat6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'path' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Character character0 = new Character('?');
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('?');
      Character.valueOf('U');
      Character character1 = Character.valueOf('?');
      CSVFormat cSVFormat4 = cSVFormat1.withEscape(character1);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) rowSetMetaDataImpl0;
      Object object0 = new Object();
      objectArray0[5] = (Object) cSVFormat3;
      cSVFormat0.format(objectArray0);
      cSVFormat3.withAllowMissingColumnNames();
      cSVFormat0.withAutoFlush(false);
      cSVFormat2.withIgnoreSurroundingSpaces();
      cSVFormat3.withIgnoreEmptyLines();
      CSVParser.parse("org.apache.commons.csv.CSVFormat@0000000002,java.lang.Character@0000000006,javax.sql.rowset.RowSetMetaDataImpl@0000000007,,,org.apache.commons.csv.CSVFormat@0000000003,", cSVFormat4);
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      try { 
        CSVParser.parse(path0, charset0, cSVFormat2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Character character0 = new Character('m');
      String[] stringArray0 = new String[6];
      stringArray0[0] = "h4sLZu&(\"";
      stringArray0[1] = "@FNLpsEiF\"t>wC:L!W,";
      stringArray0[2] = "<rSX!dq:[Xb9B.du";
      stringArray0[3] = ":~9Qy0}81ra(p\"<pP";
      stringArray0[4] = "I_Xrz6L'Ni[e-=";
      stringArray0[5] = "$is{^C";
      cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat1 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat1.withIgnoreSurroundingSpaces();
      CSVParser cSVParser0 = CSVParser.parse("N", cSVFormat0);
      cSVParser0.nextRecord();
      CSVParser cSVParser1 = CSVParser.parse("N", cSVFormat1);
      cSVParser1.nextRecord();
      cSVParser0.getCurrentLineNumber();
      cSVParser0.getRecords();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Character character0 = new Character('?');
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('?');
      Character.valueOf('U');
      Character character1 = Character.valueOf('?');
      cSVFormat1.withEscape(character1);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) rowSetMetaDataImpl0;
      Object object0 = new Object();
      objectArray0[5] = (Object) cSVFormat3;
      cSVFormat0.format(objectArray0);
      cSVFormat3.withAllowMissingColumnNames();
      cSVFormat0.withAutoFlush(false);
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreSurroundingSpaces();
      CSVParser cSVParser0 = CSVParser.parse("org.apache.commons.csv.CSVFormat@0000000002,java.lang.Character@0000000006,javax.sql.rowset.RowSetMetaDataImpl@0000000007,,,org.apache.commons.csv.CSVFormat@0000000003,", cSVFormat4);
      cSVParser0.getCurrentLineNumber();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Character character0 = new Character('?');
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('?');
      Character.valueOf('U');
      Character character1 = Character.valueOf('?');
      cSVFormat1.withEscape(character1);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) rowSetMetaDataImpl0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[5] = (Object) cSVFormat3;
      objectArray0[6] = (Object) "";
      cSVFormat0.format(objectArray0);
      cSVFormat3.withAllowMissingColumnNames();
      cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreSurroundingSpaces();
      CSVParser cSVParser0 = CSVParser.parse("org.apache.commons.csv.CSVFormat@0000000002,java.lang.Character@0000000006,javax.sql.rowset.RowSetMetaDataImpl@0000000007,java.lang.Object@0000000008,,org.apache.commons.csv.CSVFormat@0000000003,", cSVFormat4);
      cSVParser0.nextRecord();
      cSVParser0.getCurrentLineNumber();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      CSVFormat cSVFormat2 = cSVFormat0.withTrailingDelimiter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl1);
      cSVFormat3.withCommentMarker('*');
      Character.valueOf('*');
      Character.valueOf('U');
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat2;
      cSVFormat3.format(objectArray0);
      cSVFormat3.withAllowMissingColumnNames();
      CSVFormat cSVFormat4 = cSVFormat1.withSystemRecordSeparator();
      CSVFormat cSVFormat5 = cSVFormat4.withFirstRecordAsHeader();
      CSVFormat cSVFormat6 = cSVFormat5.withAutoFlush(false);
      cSVFormat3.withIgnoreEmptyLines();
      cSVFormat6.withIgnoreSurroundingSpaces();
      CSVParser cSVParser0 = CSVParser.parse(",\njava.lang.Object@0000000005,org.apache.commons.csv.CSVFormat@0000000006,org.apache.commons.csv.CSVFormat@0000000001,", cSVFormat2);
      cSVParser0.nextRecord();
      cSVParser0.getCurrentLineNumber();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      StringReader stringReader0 = new StringReader("CSVParser has been closed");
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0, 0L, 0L);
      cSVParser0.getCurrentLineNumber();
      cSVParser0.nextRecord();
      int int0 = (-14);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-14));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Character character0 = new Character('?');
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = CSVFormat.POSTGRESQL_TEXT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat2.withSystemRecordSeparator();
      cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      CSVParser.parse("N", cSVFormat3);
      CSVParser cSVParser0 = CSVParser.parse("N", cSVFormat2);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte) (-110);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVFormat cSVFormat3 = cSVFormat1.withAutoFlush(false);
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreSurroundingSpaces();
      cSVFormat3.withAllowMissingColumnNames();
      CSVFormat cSVFormat5 = cSVFormat1.withAutoFlush(true);
      cSVFormat5.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat6 = cSVFormat4.withIgnoreSurroundingSpaces();
      CSVParser cSVParser0 = CSVParser.parse("Unexpected Token type: ", cSVFormat6);
      cSVParser0.nextRecord();
      cSVParser0.getCurrentLineNumber();
      URL uRL0 = MockURL.getHttpExample();
      Charset charset0 = Charset.defaultCharset();
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('3');
      Character character0 = Character.valueOf('U');
      Character.valueOf('3');
      Character character1 = Character.valueOf('$');
      CSVFormat cSVFormat3 = cSVFormat0.withEscape(character1);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) rowSetMetaDataImpl0;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) character0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      cSVFormat3.format(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat2.withAllowMissingColumnNames();
      CSVFormat cSVFormat5 = cSVFormat2.withIgnoreEmptyLines(false);
      cSVFormat5.withAutoFlush(false);
      cSVFormat4.withIgnoreSurroundingSpaces();
      CSVParser cSVParser0 = CSVParser.parse("The comment start and the escape character cannot be the same ('", cSVFormat2);
      cSVParser0.nextRecord();
      cSVParser0.getCurrentLineNumber();
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertEquals(1, map0.size());
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      cSVFormat2.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat3 = cSVFormat1.withAutoFlush(false);
      cSVFormat2.withIgnoreSurroundingSpaces();
      cSVFormat3.withAllowMissingColumnNames();
      CSVFormat cSVFormat4 = cSVFormat1.withAutoFlush(true);
      cSVFormat4.withIgnoreSurroundingSpaces();
      CSVParser cSVParser0 = CSVParser.parse(",`7y<INi/n", cSVFormat4);
      cSVParser0.nextRecord();
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Character character0 = new Character('8');
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('\\');
      Character character1 = Character.valueOf('z');
      Character.valueOf('c');
      Character character2 = Character.valueOf('U');
      CSVFormat cSVFormat4 = cSVFormat2.withEscape(character2);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[12];
      objectArray0[0] = (Object) character2;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) rowSetMetaDataImpl0;
      objectArray0[3] = (Object) character1;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) cSVFormat4;
      objectArray0[6] = object0;
      objectArray0[7] = (Object) character0;
      Object object2 = new Object();
      objectArray0[8] = object2;
      cSVFormat1.format(objectArray0);
      cSVFormat3.withAllowMissingColumnNames();
      CSVFormat cSVFormat5 = cSVFormat0.withAutoFlush(true);
      cSVFormat5.withIgnoreSurroundingSpaces();
      CSVParser cSVParser0 = CSVParser.parse("java.lang.Character@0000000006,org.apache.commons.csv.CSVFormat@0000000002,javax.sql.rowset.RowSetMetaDataImpl@0000000007,java.lang.Character@0000000008,java.lang.Object@0000000009,org.apache.commons.csv.CSVFormat@0000000004,java.lang.Object@0000000010,java.lang.Character@0000000011,java.lang.Object@0000000012,,,,", cSVFormat5);
      cSVParser0.nextRecord();
      cSVParser0.getCurrentLineNumber();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      StringReader stringReader0 = new StringReader("L&VMG");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      cSVParser0.getCurrentLineNumber();
      cSVParser0.nextRecord();
      cSVParser0.close();
      boolean boolean0 = cSVParser0.isClosed();
      assertEquals(1L, cSVParser0.getRecordNumber());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) pipedReader0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) pipedReader0;
      objectArray0[4] = (Object) pipedReader0;
      objectArray0[5] = (Object) pipedReader0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) pipedReader0;
      objectArray0[8] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(' ');
      CSVFormat cSVFormat3 = cSVFormat2.withAutoFlush(false);
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat3);
      cSVParser0.getCurrentLineNumber();
      CSVParser cSVParser1 = CSVParser.parse((Reader) pipedReader0, cSVFormat2);
      try { 
        cSVParser1.getRecords();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Character character0 = new Character('?');
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('?');
      Character.valueOf('U');
      Character character1 = Character.valueOf('?');
      cSVFormat1.withEscape(character1);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) rowSetMetaDataImpl0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) rowSetMetaDataImpl0;
      objectArray0[5] = (Object) cSVFormat3;
      objectArray0[6] = (Object) "";
      cSVFormat0.format(objectArray0);
      cSVFormat3.withAllowMissingColumnNames();
      cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreSurroundingSpaces();
      // Undeclared exception!
      try { 
        CSVParser.parse("org.apache.commons.csv.CSVFormat@0000000002,java.lang.Character@0000000006,javax.sql.rowset.RowSetMetaDataImpl@0000000007,java.lang.Object@0000000008,javax.sql.rowset.RowSetMetaDataImpl@0000000007,org.apache.commons.csv.CSVFormat@0000000003,", cSVFormat4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate name: \"javax.sql.rowset.RowSetMetaDataImpl@0000000007\" in [org.apache.commons.csv.CSVFormat@0000000002, java.lang.Character@0000000006, javax.sql.rowset.RowSetMetaDataImpl@0000000007, java.lang.Object@0000000008, javax.sql.rowset.RowSetMetaDataImpl@0000000007, org.apache.commons.csv.CSVFormat@0000000003]
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Character character0 = new Character('?');
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat2.withSystemRecordSeparator();
      CSVFormat cSVFormat4 = cSVFormat3.withQuote('N');
      CSVFormat cSVFormat5 = cSVFormat4.withCommentMarker('*');
      Character.valueOf('?');
      cSVFormat5.withIgnoreSurroundingSpaces();
      CSVParser cSVParser0 = CSVParser.parse("4Z5i:&w{c|", cSVFormat2);
      cSVParser0.nextRecord();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) pipedReader0;
      objectArray0[1] = (Object) cSVFormat0;
      Character character0 = new Character('L');
      Character character1 = new Character('L');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');
      cSVFormat1.withAutoFlush(false);
      CSVFormat cSVFormat2 = CSVFormat.ORACLE;
      cSVFormat2.withIgnoreSurroundingSpaces();
      CSVParser cSVParser0 = CSVParser.parse("N", cSVFormat2);
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
      
      CSVParser cSVParser1 = CSVParser.parse("N", cSVFormat2);
      cSVParser1.close();
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      StringReader stringReader0 = new StringReader("CSVParser has been closed");
      CSVParser cSVParser0 = cSVFormat2.parse(stringReader0);
      cSVParser0.getHeaderMap();
      cSVParser0.close();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        CSVParser.parse((URL) null, charset0, cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'url' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      cSVFormat0.withSkipHeaderRecord(false);
      cSVFormat0.withAutoFlush(false);
      cSVFormat1.withIgnoreSurroundingSpaces();
      CSVParser.parse("EuEXs>H>Z0MnJWv", cSVFormat1);
      Reader reader0 = null;
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser((Reader) null, cSVFormat1, (-1L), (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      cSVFormat1.withSkipHeaderRecord(false);
      StringReader stringReader0 = new StringReader("CSVParser has been closed");
      StringReader stringReader1 = new StringReader("CSVParser has been closed");
      CSVParser cSVParser0 = cSVFormat1.parse(stringReader0);
      cSVParser0.getHeaderMap();
      cSVParser0.getCurrentLineNumber();
      cSVParser0.getRecords();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Character character0 = new Character('?');
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat2.withSystemRecordSeparator();
      CSVFormat cSVFormat4 = cSVFormat3.withQuote('N');
      CSVFormat cSVFormat5 = cSVFormat4.withCommentMarker('*');
      Character character1 = Character.valueOf('?');
      cSVFormat5.withEscape(character1);
      CSVFormat cSVFormat6 = cSVFormat5.withAllowMissingColumnNames();
      CSVFormat cSVFormat7 = cSVFormat6.withAutoFlush(true);
      cSVFormat7.withIgnoreSurroundingSpaces();
      try { 
        CSVParser.parse("NONE", cSVFormat4);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (line 1) invalid char between encapsulated token and delimiter
         //
         verifyException("org.apache.commons.csv.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Character character0 = new Character('?');
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat2.withSystemRecordSeparator();
      CSVFormat cSVFormat4 = cSVFormat3.withQuote('T');
      CSVFormat cSVFormat5 = cSVFormat4.withCommentMarker('*');
      Character character1 = Character.valueOf('?');
      cSVFormat5.withEscape(character1);
      CSVFormat cSVFormat6 = cSVFormat5.withAllowMissingColumnNames();
      CSVFormat cSVFormat7 = cSVFormat6.withAutoFlush(true);
      cSVFormat7.withIgnoreSurroundingSpaces();
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat4);
      cSVParser0.nextRecord();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) pipedReader0;
      objectArray0[1] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      StringReader stringReader0 = new StringReader("CSVParser has been closed");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      cSVParser0.getCurrentLineNumber();
      CSVParser cSVParser1 = CSVParser.parse((Reader) pipedReader0, cSVFormat1);
      long long0 = cSVParser1.getRecordNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      Character character0 = new Character('8');
      Character character1 = Character.valueOf('8');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character1);
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      CSVFormat cSVFormat3 = cSVFormat1.withAutoFlush(true);
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('C');
      cSVFormat4.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat5 = cSVFormat1.withEscape('Z');
      CSVParser.parse("j'g@!", cSVFormat5);
      PipedReader pipedReader0 = new PipedReader(910);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat4, 910, 1592L);
      try { 
        cSVParser0.nextRecord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Character character0 = new Character('8');
      cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      StringReader stringReader0 = new StringReader("");
      CSVFormat cSVFormat2 = cSVFormat0.withSystemRecordSeparator();
      cSVFormat2.parse(stringReader0);
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat1);
      cSVParser0.getCurrentLineNumber();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      InputStream inputStream0 = null;
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = null;
      // Undeclared exception!
      try { 
        CSVParser.parse((InputStream) null, charset0, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'inputStream' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = "NON_NUMERIC";
      File file0 = MockFile.createTempFile("NON_NUMERIC", "NON_NUMERIC");
      MockFile mockFile0 = new MockFile(file0, ") invalid parse sequence");
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      CSVParser cSVParser0 = CSVParser.parse((InputStream) bufferedInputStream0, charset0, cSVFormat0);
      cSVParser0.isClosed();
      mockFile0.mkdir();
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      try { 
        CSVParser.parse((File) mockFile0, charset0, cSVFormat1);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      StringReader stringReader0 = new StringReader("CSVParser has been closed");
      CSVParser cSVParser0 = cSVFormat2.parse(stringReader0);
      cSVParser0.getCurrentLineNumber();
      cSVParser0.nextRecord();
      cSVParser0.close();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('\'');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withSystemRecordSeparator();
      CSVParser cSVParser0 = CSVParser.parse("i`", cSVFormat2);
      cSVParser0.nextRecord();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVParser.parse((Reader) pipedReader0, cSVFormat1);
      pipedWriter0.flush();
      MockFile mockFile0 = new MockFile("i`", "");
      mockFile0.toPath();
      String string0 = "J5Dpp\"j";
      // Undeclared exception!
      try { 
        Charset.forName("J5Dpp\"j");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // J5Dpp\"j
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      CSVFormat cSVFormat4 = CSVFormat.INFORMIX_UNLOAD_CSV;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.withSystemRecordSeparator();
      cSVFormat2.withIgnoreEmptyLines(true);
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser((Reader) null, cSVFormat3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Character character0 = new Character('8');
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0, 0L, 0L);
      assertEquals((-1L), cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Character character0 = new Character('8');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);
      cSVFormat2.withIgnoreSurroundingSpaces();
      StringReader stringReader0 = new StringReader("");
      CSVParser cSVParser0 = cSVFormat2.parse(stringReader0);
      cSVParser0.getHeaderMap();
      cSVParser0.getHeaderMap();
      cSVParser0.getCurrentLineNumber();
      CSVParser.parse((Reader) stringReader0, cSVFormat2);
      cSVParser0.isClosed();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      CSVFormat cSVFormat3 = cSVFormat1.withAutoFlush(false);
      cSVFormat2.withIgnoreSurroundingSpaces();
      CSVParser cSVParser0 = CSVParser.parse(" j'g@!,\"M=v", cSVFormat3);
      try { 
        cSVParser0.nextRecord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (startline 1) EOF reached before encapsulated token finished
         //
         verifyException("org.apache.commons.csv.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      StringReader stringReader0 = new StringReader("CSVParser has been closed");
      CSVParser cSVParser0 = cSVFormat2.parse(stringReader0);
      cSVParser0.getCurrentLineNumber();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      File file0 = MockFile.createTempFile("_1Q~GIg4b", "_1Q~GIg4b", (File) mockFile0);
      // Undeclared exception!
      try { 
        CSVParser.parse(file0, (Charset) null, cSVFormat1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException("java.io.InputStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Character character0 = new Character('8');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);
      cSVFormat2.withIgnoreSurroundingSpaces();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      CSVParser cSVParser0 = CSVParser.parse("N", cSVFormat0);
      cSVParser0.nextRecord();
      cSVParser0.close();
      URL uRL0 = MockURL.getFtpExample();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("gn+%@Bg", "", 0, "gn+%@Bg", uRLStreamHandler0);
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('[');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('\'');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withSystemRecordSeparator();
      CSVParser cSVParser0 = CSVParser.parse("i`", cSVFormat2);
      cSVParser0.nextRecord();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVParser.parse((Reader) pipedReader0, cSVFormat1);
      pipedWriter0.flush();
      MockFile mockFile0 = new MockFile("i`", "");
      mockFile0.toPath();
      // Undeclared exception!
      try { 
        Charset.forName("J5Dpp\"j");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // J5Dpp\"j
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat1.parse(pipedReader0);
      String string0 = "";
      // Undeclared exception!
      try { 
        Locale.FilteringMode.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.util.Locale.FilteringMode.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) pipedReader0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) pipedReader0;
      objectArray0[3] = (Object) pipedReader0;
      objectArray0[4] = (Object) pipedReader0;
      objectArray0[5] = (Object) pipedReader0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) pipedReader0;
      objectArray0[8] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(' ');
      CSVFormat cSVFormat3 = cSVFormat2.withAutoFlush(false);
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat3);
      cSVParser0.getCurrentLineNumber();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", ") invalid parse sequence");
      mockFile0.getAbsoluteFile();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      mockFile0.setWritable(false);
      Charset charset0 = null;
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withNullString("");
      try { 
        CSVParser.parse((File) mockFile1, (Charset) null, cSVFormat0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Sf;", "Sf;");
      File file0 = MockFile.createTempFile("Sf;", "Sf;", (File) mockFile0);
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('>');
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('L');
      cSVFormat3.withDelimiter('/');
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      CSVParser cSVParser0 = CSVParser.parse(file0, charset0, cSVFormat4);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      File file0 = null;
      String string0 = "'k]q' ;\"oK";
      MockFile mockFile0 = new MockFile((File) null, "'k]q' ;\"oK");
      Charset charset0 = Charset.defaultCharset();
      char char0 = 'n';
      Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('n');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      try { 
        CSVParser.parse((File) mockFile0, charset0, cSVFormat3);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "eboA^z*#[`9m>>KufW";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) "eboA^z*#[`9m>>KufW";
      Object object1 = new Object();
      objectArray0[7] = object1;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat0.withHeader(resultSet0);
      cSVFormat2.withIgnoreEmptyLines();
      cSVFormat2.withSkipHeaderRecord();
      CSVParser cSVParser0 = CSVParser.parse("eboA^z*#[`9m>>KufW", cSVFormat2);
      cSVParser0.isClosed();
      cSVParser0.isClosed();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat2.withSystemRecordSeparator();
      String string0 = "K]E1;";
      StringReader stringReader0 = new StringReader("K]E1;");
      CSVParser cSVParser0 = cSVFormat3.parse(stringReader0);
      cSVFormat1.withIgnoreEmptyLines(true);
      cSVParser0.getFirstEndOfLine();
      cSVParser0.isClosed();
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Character character0 = new Character('8');
      CSVFormat cSVFormat0 = CSVFormat.newFormat('<');
      // Undeclared exception!
      try { 
        CSVParser.parse((Reader) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat2.withIgnoreHeaderCase();
      Character character0 = Character.valueOf('E');
      cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(true);
      // Undeclared exception!
      try { 
        CSVParser.parse((Reader) null, cSVFormat3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(10);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      Character character0 = Character.valueOf('N');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat3);
      cSVParser0.iterator();
      String string0 = null;
      String string1 = "";
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Character character0 = new Character('8');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat3);
      cSVParser0.nextRecord();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('y');
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat4 = cSVFormat3.withSystemRecordSeparator();
      CSVParser cSVParser0 = CSVParser.parse("/9K", cSVFormat4);
      assertEquals(0L, cSVParser0.getRecordNumber());
      
      MockFile mockFile0 = new MockFile("/9K");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      try { 
        CSVParser.parse(path0, charset0, cSVFormat2);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      MockFile mockFile0 = new MockFile("k_G=KjXW*Jp6EVV");
      Path path0 = mockFile0.toPath();
      Charset charset0 = null;
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withIgnoreEmptyLines(true);
      // Undeclared exception!
      try { 
        CSVParser.parse(path0, (Charset) null, cSVFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      // Undeclared exception!
      try { 
        cSVFormat1.parse((Reader) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      String string0 = null;
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      cSVFormat2.withIgnoreEmptyLines(false);
      Character character0 = new Character('(');
      cSVFormat2.withEscape(character0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      // Undeclared exception!
      try { 
        CSVParser.parse((String) null, cSVFormat3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'string' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }
}
