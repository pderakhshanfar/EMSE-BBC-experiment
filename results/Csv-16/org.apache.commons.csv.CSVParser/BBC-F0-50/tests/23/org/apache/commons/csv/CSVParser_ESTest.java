/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 02:47:58 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.net.URI;
import java.net.URL;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.file.NoSuchFileException;
import java.nio.file.Path;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.function.Consumer;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVParser_ESTest extends CSVParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      try { 
        CSVParser.parse(path0, charset0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat0.withSkipHeaderRecord(false);
      String[] stringArray0 = new String[5];
      stringArray0[1] = "";
      stringArray0[2] = "format";
      stringArray0[3] = "~]w8e<=0 wTY& ";
      stringArray0[4] = "_C@]Egux#";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(false);
      CSVParser.parse("_C@]Egux#", cSVFormat3);
      // Undeclared exception!
      try { 
        CSVParser.parse("", cSVFormat2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSet) null);
      Character character0 = new Character('*');
      StringReader stringReader0 = new StringReader("jmSUX[9VE,sc7u");
      stringReader0.read();
      Character character1 = Character.valueOf('');
      cSVFormat0.withQuote(character1);
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) stringReader0;
      Object object2 = new Object();
      objectArray0[3] = object2;
      objectArray0[4] = object0;
      cSVFormat1.format(objectArray0);
      CSVParser cSVParser0 = CSVParser.parse((Reader) stringReader0, cSVFormat1);
      cSVParser0.getHeaderMap();
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-4);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-4), 3857);
      Charset charset0 = Charset.defaultCharset();
      CSVParser cSVParser1 = CSVParser.parse((InputStream) byteArrayInputStream0, charset0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVParser1.getRecords();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      StringReader stringReader0 = new StringReader("!8d,IN)9");
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0, (-487L), (-487L));
      cSVParser0.nextRecord();
      MockFile mockFile0 = new MockFile("!8d,IN)9", "dPP");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      try { 
        CSVParser.parse(path0, charset0, cSVFormat1);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0, 0L, 0L);
      long long0 = cSVParser0.getRecordNumber();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser.parse("6^S(^UxB\"u,;3a},", cSVFormat0);
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      CSVParser cSVParser0 = CSVParser.parse("6^S(^UxB\"u,;3a},", cSVFormat1);
      cSVParser0.nextRecord();
      cSVParser0.getFirstEndOfLine();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withSystemRecordSeparator();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat3.withSkipHeaderRecord();
      Class<Locale.Category> class0 = Locale.Category.class;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) pipedReader0;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) pipedReader0;
      cSVFormat1.printRecord(pipedWriter0, objectArray0);
      cSVFormat2.withHeader(class0);
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat3, 0L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate name: \"org.apache.commons.csv.CSVFormat@0000000001\" in [java.io.PipedReader@0000000005, org.apache.commons.csv.CSVFormat@0000000003, org.apache.commons.csv.CSVFormat@0000000001, org.apache.commons.csv.CSVFormat@0000000001, java.io.PipedReader@0000000005]
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(':');
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      // Undeclared exception!
      try { 
        CSVParser.parse(",+!=||B[C+nP%kEnF|", cSVFormat3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate name: \"\" in [,+!=, , B[C+nP%kEnF, ]
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      // Undeclared exception!
      try { 
        CSVParser.parse(",+!=||B[C+nP%-[4F|", cSVFormat2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate name: \"\" in [,+!=, , B[C+nP%-[4F, ]
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1995), 110);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        CSVParser.parse((InputStream) byteArrayInputStream0, charset0, cSVFormat1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      PipedInputStream pipedInputStream0 = new PipedInputStream(7);
      Charset charset0 = Charset.defaultCharset();
      try { 
        CSVParser.parse((InputStream) pipedInputStream0, charset0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('+');
      CSVParser cSVParser0 = CSVParser.parse(path0, charset0, cSVFormat3);
      try { 
        cSVParser0.nextRecord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVParser cSVParser0 = CSVParser.parse("pN^l,W@w\rW", cSVFormat0);
      cSVParser0.iterator();
      cSVParser0.nextRecord();
      cSVParser0.nextRecord();
      assertEquals(2L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      cSVFormat0.withSkipHeaderRecord();
      CSVParser cSVParser0 = CSVParser.parse("17", cSVFormat0);
      cSVParser0.close();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      try { 
        CSVParser.parse("\" in ", cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (startline 1) EOF reached before encapsulated token finished
         //
         verifyException("org.apache.commons.csv.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("The comment start character and the delimiter cannot be the same ('");
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat1, 0L, 0L);
      cSVParser0.nextRecord();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(",PG");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat0.withSkipHeaderRecord(true);
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(false);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(",PG");
      Charset charset0 = Charset.defaultCharset();
      CSVParser cSVParser0 = CSVParser.parse((InputStream) mockFileInputStream0, charset0, cSVFormat3);
      mockFileInputStream0.markSupported();
      CSVParser.parse(",PG", cSVFormat3);
      cSVParser0.getRecords();
      cSVParser0.getHeaderMap();
      cSVParser0.getFirstEndOfLine();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse("pN]e^lCW@w\rW", cSVFormat0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.getHeaderMap();
      cSVParser0.forEach(consumer0);
      cSVParser0.close();
      cSVParser0.getFirstEndOfLine();
      assertEquals(2L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(",PG");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(false);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(",PG");
      Charset charset0 = Charset.defaultCharset();
      CSVParser cSVParser0 = CSVParser.parse((InputStream) mockFileInputStream0, charset0, cSVFormat3);
      mockFileInputStream0.markSupported();
      CSVParser.parse(",PG", cSVFormat3);
      cSVParser0.getRecords();
      cSVParser0.getCurrentLineNumber();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat0.withSkipHeaderRecord(false);
      String[] stringArray0 = new String[8];
      cSVFormat2.withHeaderComments(stringArray0);
      stringArray0[0] = "NON_NUMERIC";
      stringArray0[5] = "Hd_]u6ia{:u'$oT";
      stringArray0[2] = "i";
      stringArray0[3] = "d7J{VMV;p_";
      stringArray0[4] = "i#F''R#,)C@u";
      cSVFormat0.withFirstRecordAsHeader();
      stringArray0[6] = "(line ";
      stringArray0[7] = "5OT=(I1`XETDl";
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      cSVFormat1.withIgnoreHeaderCase(false);
      CSVParser cSVParser0 = CSVParser.parse("Unexpected Token type: ", cSVFormat3);
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(",PG");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "$>");
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      StringReader stringReader0 = new StringReader("$>");
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat1, 2820L, 2820L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      cSVParser0.getRecords();
      assertEquals(2819L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(",PG");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "$>");
      cSVFormat0.withFirstRecordAsHeader();
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(",PG");
      Charset charset0 = Charset.defaultCharset();
      CSVParser cSVParser0 = CSVParser.parse((InputStream) mockFileInputStream0, charset0, cSVFormat2);
      cSVParser0.close();
      cSVParser0.getCurrentLineNumber();
      URL uRL0 = MockURL.getHttpExample();
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "$>";
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(",PG");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "$>");
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cSVParser0.forEach(consumer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // IOException reading next record: java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(3199);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      PipedReader pipedReader1 = new PipedReader(3199);
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(pipedReader1, cSVFormat1, (-377L), (-377L));
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(",PG");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "$>");
      cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(false);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(",PG");
      Charset charset0 = Charset.defaultCharset();
      CSVParser cSVParser0 = CSVParser.parse((InputStream) mockFileInputStream0, charset0, cSVFormat3);
      mockFileInputStream0.markSupported();
      CSVParser.parse(",PG", cSVFormat3);
      cSVParser0.getRecords();
      cSVParser0.getCurrentLineNumber();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte)72;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      MockFile mockFile0 = new MockFile("}?AlscN.}v");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
      cSVFormat0.print((Object) byteArrayInputStream0, (Appendable) bufferedWriter0, true);
      CSVParser.parse("}?AlscN.}v", cSVFormat0);
      // Undeclared exception!
      try { 
        CSVParser.parse((File) mockFile0, (Charset) null, cSVFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException("java.io.InputStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(",PG");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "$>");
      cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(false);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(",PG");
      Charset charset0 = Charset.defaultCharset();
      CSVParser.parse((InputStream) mockFileInputStream0, charset0, cSVFormat3);
      CSVParser.parse(",PG", cSVFormat3);
      Charset charset1 = Charset.defaultCharset();
      CSVParser cSVParser0 = CSVParser.parse((InputStream) mockFileInputStream0, charset1, cSVFormat2);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(",PG");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) evoSuiteFile0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat0.withFirstRecordAsHeader();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "d7J{VMV;p_";
      stringArray0[1] = "i#F''R#,)C@u";
      cSVFormat2.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreHeaderCase(true);
      CSVParser cSVParser0 = CSVParser.parse("=l_AX4=k", cSVFormat3);
      cSVParser0.iterator();
      PipedReader pipedReader0 = new PipedReader(114);
      CSVParser.parse((Reader) pipedReader0, cSVFormat0);
      cSVParser0.iterator();
      MockFile mockFile0 = new MockFile("=l_AX4=k", "u$SQOPKK,0.");
      MockFile mockFile1 = new MockFile(mockFile0, "d7J{VMV;p_");
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        CSVParser.parse((File) mockFile1, charset0, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      cSVFormat0.withSystemRecordSeparator();
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)73;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)13, (byte)93);
      byteArrayInputStream0.close();
      // Undeclared exception!
      try { 
        CSVParser.parse((InputStream) byteArrayInputStream0, (Charset) null, cSVFormat1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException("java.io.InputStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVParser cSVParser0 = CSVParser.parse("3]./h0ABxF!Nm@Q#b", cSVFormat0);
      CSVParser cSVParser1 = CSVParser.parse("RFC4180", cSVFormat0);
      cSVParser0.getRecords();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVFormat0.withAllowMissingColumnNames();
      cSVParser1.forEach(consumer0);
      cSVParser1.getRecords();
      cSVParser0.iterator();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVParser cSVParser0 = CSVParser.parse("3]./h0ABxF!Nm@Q#b", cSVFormat0);
      cSVParser0.close();
      cSVParser0.isClosed();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      try { 
        cSVParser0.getRecords();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      cSVFormat0.withSystemRecordSeparator();
      CSVParser cSVParser0 = CSVParser.parse("7|,,/_az1vx,mA", cSVFormat2);
      cSVParser0.getRecords();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      cSVParser0.getRecords();
      cSVParser0.nextRecord();
      cSVParser0.getFirstEndOfLine();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat0.withSkipHeaderRecord(true);
      String[] stringArray0 = new String[8];
      cSVFormat2.withHeaderComments(stringArray0);
      stringArray0[0] = "NON_NUMERIC";
      stringArray0[5] = "Hd_]u6ia{:u'$oT";
      stringArray0[2] = "i";
      stringArray0[3] = "d7J{VMV;p_";
      stringArray0[4] = "i#F''R#,)C@u";
      cSVFormat0.withFirstRecordAsHeader();
      stringArray0[5] = "Unexpected Token type: ";
      stringArray0[6] = ",zjcO?O&&;db";
      stringArray0[7] = "5OT=(I1`XETDl";
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      cSVFormat1.withIgnoreHeaderCase(false);
      CSVParser cSVParser0 = CSVParser.parse("INVALID", cSVFormat3);
      cSVParser0.getRecords();
      cSVParser0.nextRecord();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat0.withSkipHeaderRecord(false);
      CSVParser cSVParser0 = CSVParser.parse(" [", cSVFormat2);
      CSVParser.parse("7L", cSVFormat0);
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("$>");
      cSVFormat2.withSystemRecordSeparator();
      CSVParser cSVParser0 = CSVParser.parse("$>", cSVFormat2);
      cSVFormat2.withTrailingDelimiter(true);
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      cSVFormat0.withSystemRecordSeparator();
      File file0 = MockFile.createTempFile("{5%&G25->gT3.R", "\r\n");
      Charset charset0 = Charset.defaultCharset();
      CSVParser cSVParser0 = CSVParser.parse(file0, charset0, cSVFormat2);
      cSVParser0.close();
      try { 
        cSVParser0.getRecords();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      MockFile mockFile0 = new MockFile((File) null, "");
      Charset charset0 = Charset.defaultCharset();
      try { 
        cSVFormat1.print((File) mockFile0, charset0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat0.withSkipHeaderRecord(false);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "No more CSV records available";
      stringArray0[1] = "";
      stringArray0[2] = "format";
      stringArray0[3] = "~]w8e<=0 wTY& ";
      stringArray0[4] = "_C@]Egux#";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(false);
      CSVParser cSVParser0 = CSVParser.parse("_C@]Egux#", cSVFormat3);
      CSVParser.parse("", cSVFormat2);
      cSVParser0.getFirstEndOfLine();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVParser cSVParser0 = CSVParser.parse("7|,,/_az1vx,mA", cSVFormat1);
      Class<Locale.Category> class0 = Locale.Category.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      CSVParser.parse((Reader) pipedReader0, cSVFormat2);
      Object[] objectArray0 = new Object[0];
      CSVFormat cSVFormat3 = cSVFormat1.withHeaderComments(objectArray0);
      cSVFormat3.withIgnoreHeaderCase();
      cSVParser0.getRecords();
      cSVParser0.nextRecord();
      URI uRI0 = MockURI.aHttpURI;
      cSVParser0.getRecords();
      cSVParser0.nextRecord();
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("u.cDl;TLk&");
      CSVParser cSVParser0 = CSVParser.parse("u.cDl;TLk&", cSVFormat0);
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      cSVParser0.getRecords();
      cSVParser0.nextRecord();
      MockFile mockFile0 = new MockFile("u.cDl;TLk&", "u.cDl;TLk&");
      MockFile mockFile1 = new MockFile(mockFile0, "u.cDl;TLk&");
      Path path0 = mockFile1.toPath();
      // Undeclared exception!
      try { 
        CSVParser.parse(path0, (Charset) null, cSVFormat1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString((String) null);
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser((Reader) null, cSVFormat2, (-670L), 17L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(",PG");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "$>");
      cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
      CSVFormat.newFormat('b');
      CSVParser.parse("$>", cSVFormat2);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(",PG");
      Charset charset0 = Charset.defaultCharset();
      CSVParser.parse((InputStream) mockFileInputStream0, charset0, cSVFormat3);
      CSVParser cSVParser0 = CSVParser.parse(",PG", cSVFormat3);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVParser.parse("", cSVFormat1);
      Class<Locale.Category> class0 = Locale.Category.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      cSVFormat2.printer();
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat2);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "#vxdp):_l>YG$";
      stringArray0[1] = "?\"v";
      stringArray0[2] = "gA81G#~`N";
      stringArray0[3] = " H $a\"8]f;gc{u}l<k";
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(stringArray0);
      cSVFormat3.withNullString("7|,,/_az1vx,mA");
      // Undeclared exception!
      try { 
        CSVParser.parse((Reader) null, cSVFormat3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter(false);
      cSVFormat2.withIgnoreEmptyLines(false);
      CSVParser cSVParser0 = CSVParser.parse("$>", cSVFormat4);
      cSVParser0.getRecords();
      cSVParser0.nextRecord();
      cSVParser0.close();
      PipedReader pipedReader0 = new PipedReader();
      try { 
        CSVParser.parse((Reader) pipedReader0, cSVFormat4);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines();
      cSVFormat2.withAutoFlush(true);
      cSVFormat1.withSkipHeaderRecord(false);
      CSVParser cSVParser0 = CSVParser.parse("f", cSVFormat2);
      CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(true);
      cSVParser0.getRecords();
      assertEquals(1L, cSVParser0.getRecordNumber());
      
      CSVParser cSVParser1 = CSVParser.parse("IL_3/'C?<l", cSVFormat3);
      cSVParser1.isClosed();
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator("CSVParser has been closed");
      cSVFormat1.withSkipHeaderRecord(true);
      CSVParser cSVParser0 = CSVParser.parse("$MxvC{KVdB2TY-',Om", cSVFormat4);
      cSVFormat3.withTrailingDelimiter(true);
      cSVParser0.getRecords();
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat1);
      Class<Locale.Category> class0 = Locale.Category.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      cSVFormat2.printer();
      cSVParser0.close();
      try { 
        cSVParser0.getRecords();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      cSVFormat2.withIgnoreEmptyLines();
      cSVFormat2.withRecordSeparator("W@7jKeo\"Z'e!%;qz");
      cSVFormat2.withSkipHeaderRecord(true);
      CSVParser cSVParser0 = CSVParser.parse("W@7jKeo\"Z'e!%;qz", cSVFormat1);
      cSVParser0.getRecords();
      cSVParser0.iterator();
      assertEquals(1L, cSVParser0.getRecordNumber());
      
      CSVParser cSVParser1 = CSVParser.parse("^*", cSVFormat1);
      cSVParser1.close();
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringReader stringReader0 = new StringReader("u7|,,/_az1vx,mA");
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      Charset charset0 = Charset.defaultCharset();
      CSVFormat.newFormat('&');
      MockFile mockFile0 = new MockFile("u7|,,/_az1vx,mA", "u7|,,/_az1vx,mA");
      Path path0 = mockFile0.toPath();
      try { 
        CSVParser.parse(path0, charset0, cSVFormat0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('#');
      // Undeclared exception!
      try { 
        CSVParser.parse((Path) null, charset0, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'path' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat1;
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = (Object) cSVFormat0;
      objectArray1[1] = (Object) cSVFormat1;
      objectArray1[2] = (Object) "hEYA";
      objectArray1[3] = (Object) cSVFormat1;
      objectArray1[4] = (Object) cSVFormat0;
      objectArray1[5] = (Object) "hEYA";
      objectArray1[6] = (Object) cSVFormat0;
      objectArray1[7] = (Object) "hEYA";
      cSVFormat1.format(objectArray1);
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker(')');
      CSVParser.parse("hEYA", cSVFormat4);
      cSVFormat3.withIgnoreEmptyLines();
      Object object0 = new Object();
      CSVFormat cSVFormat5 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat5.format(objectArray1);
      StringReader stringReader0 = new StringReader("org.apache.commons.csv.CSVFormat@0000000003,org.apache.commons.csv.CSVFormat@0000000001,hEYA,org.apache.commons.csv.CSVFormat@0000000001,org.apache.commons.csv.CSVFormat@0000000003,hEYA,org.apache.commons.csv.CSVFormat@0000000003,hEYA");
      CSVParser.parse((Reader) stringReader0, cSVFormat3);
      MockFile mockFile0 = new MockFile("N");
      Charset charset0 = Charset.defaultCharset();
      try { 
        CSVParser.parse((File) mockFile0, charset0, cSVFormat2);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator("%K\"<gf[;;]jRPW!`;5");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      cSVFormat3.withSkipHeaderRecord(true);
      CSVParser cSVParser0 = CSVParser.parse("~/1", cSVFormat4);
      cSVParser0.spliterator();
      cSVFormat1.withTrailingDelimiter(true);
      cSVParser0.getRecords();
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringReader stringReader0 = new StringReader("u7|,,/_az1vx,mA");
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      Character character0 = new Character('');
      stringReader0.read();
      cSVFormat1.withQuote(character0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) character0;
      objectArray0[5] = (Object) resultSet0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) "u7|,,/_az1vx,mA";
      cSVFormat1.format(objectArray0);
      CSVParser cSVParser0 = CSVParser.parse((Reader) stringReader0, cSVFormat1);
      cSVParser0.getHeaderMap();
      assertEquals(0L, cSVParser0.getRecordNumber());
      
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
      CSVParser cSVParser0 = CSVParser.parse("$>", cSVFormat2);
      cSVFormat3.toString();
      cSVParser0.getHeaderMap();
      String string0 = ",PG";
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(",PG");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringReader stringReader0 = new StringReader("u7|,,/_az1vx,mA");
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      Character character0 = new Character('');
      stringReader0.read();
      cSVFormat1.withQuote(character0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) character0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      objectArray0[1] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) character0;
      objectArray0[5] = (Object) resultSet0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) "u7|,,/_az1vx,mA";
      cSVFormat1.format(objectArray0);
      CSVParser cSVParser0 = CSVParser.parse((Reader) stringReader0, cSVFormat1);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertEquals(0L, cSVParser0.getRecordNumber());
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat1);
      Class<Locale.Category> class0 = Locale.Category.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      cSVFormat2.printer();
      cSVParser0.close();
      try { 
        cSVParser0.nextRecord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      boolean boolean0 = true;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat1, 1858L, 1858L);
      cSVParser0.getCurrentLineNumber();
      String string0 = ".a*D mx&m";
      StringReader stringReader0 = new StringReader(".a*D mx&m");
      CSVParser.parse((Reader) stringReader0, cSVFormat1);
      URI uRI0 = MockURI.aFTPURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      cSVFormat1.withRecordSeparator("f");
      CSVFormat cSVFormat4 = cSVFormat2.withSkipHeaderRecord(true);
      CSVParser cSVParser0 = CSVParser.parse("$>", cSVFormat4);
      cSVFormat3.withTrailingDelimiter(false);
      cSVParser0.getRecords();
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      boolean boolean0 = true;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      cSVFormat1.withIgnoreSurroundingSpaces(false);
      cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("%K\"<gf[;;]jRPW!`;5");
      cSVFormat0.withSkipHeaderRecord(true);
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat3);
      cSVFormat0.withTrailingDelimiter(false);
      cSVParser0.getRecords();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.toPath();
      // Undeclared exception!
      try { 
        Charset.forName("8t+0z~BP1J4s;jz%");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 8t+0z~BP1J4s;jz%
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-5);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte) (-5));
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      cSVFormat2.printer();
      CSVParser cSVParser0 = CSVParser.parse((InputStream) byteArrayInputStream0, charset0, cSVFormat2);
      cSVParser0.getRecordNumber();
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser1 = CSVParser.parse((Reader) pipedReader0, cSVFormat0);
      try { 
        cSVParser1.nextRecord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('F');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(3199);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("");
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord();
      try { 
        CSVParser.parse((Reader) pipedReader0, cSVFormat4);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat1);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser((Reader) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = CSVParser.parse(", mapping=", cSVFormat0);
      cSVParser0.getFirstEndOfLine();
      cSVFormat0.withQuote('3');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(13);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      cSVFormat0.println(charBuffer0);
      cSVParser0.getCurrentLineNumber();
      cSVParser0.getRecordNumber();
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      // Undeclared exception!
      try { 
        cSVFormat1.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'null' in [null, null, null, null, null]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CSVFormat cSVFormat0 = null;
      // Undeclared exception!
      try { 
        CSVParser.parse((String) null, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'string' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "@wrpQa?[W;";
      stringArray0[1] = "nniP]Et|%.";
      stringArray0[2] = "Escape=<";
      stringArray0[3] = "";
      stringArray0[4] = "No quotes mode set but no escape character is set";
      stringArray0[5] = "K*94$EWk";
      stringArray0[6] = "VLjRN$v)";
      stringArray0[7] = "su K.OdpI0~";
      stringArray0[8] = "TOKEN";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('D');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL0, (Charset) null, cSVFormat4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'charset' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat1;
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = (Object) cSVFormat0;
      objectArray1[1] = (Object) cSVFormat1;
      objectArray1[2] = (Object) "hEYA";
      objectArray1[3] = (Object) cSVFormat1;
      objectArray1[4] = (Object) cSVFormat0;
      objectArray1[5] = (Object) "hEYA";
      objectArray1[6] = (Object) cSVFormat0;
      objectArray1[7] = (Object) "hEYA";
      cSVFormat1.format(objectArray1);
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker(')');
      CSVParser.parse("hEYA", cSVFormat4);
      cSVFormat3.withIgnoreEmptyLines();
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((-2079));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser.parse("", cSVFormat0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator("%K\"<gf[;;]jRPW!`;5");
      cSVFormat3.withSkipHeaderRecord(true);
      CSVParser cSVParser0 = CSVParser.parse("~/1", cSVFormat4);
      cSVFormat1.withTrailingDelimiter(true);
      cSVParser0.getRecords();
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('R');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      cSVFormat2.withTrailingDelimiter(false);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      // Undeclared exception!
      try { 
        CSVParser.parse((InputStream) null, charset0, cSVFormat3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'inputStream' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }
}
