/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 23:03:39 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.net.MalformedURLException;
import java.net.Proxy;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.nio.file.NoSuchFileException;
import java.nio.file.Path;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.Enumeration;
import java.util.Map;
import java.util.function.Consumer;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVParser_ESTest extends CSVParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte) (-91);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-41), 3581);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        CSVParser.parse((InputStream) byteArrayInputStream0, charset0, cSVFormat1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat1);
      cSVParser0.getHeaderMap();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      PipedReader pipedReader0 = new PipedReader(10);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      PipedReader pipedReader1 = null;
      try {
        pipedReader1 = new PipedReader(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVParser cSVParser0 = CSVParser.parse("\r^k\n", cSVFormat0);
      cSVParser0.nextRecord();
      cSVParser0.nextRecord();
      assertEquals(2L, cSVParser0.getRecordNumber());
      
      CSVParser cSVParser1 = CSVParser.parse("\r^k\n", cSVFormat0);
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(5);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte) (-14);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(false);
      cSVFormat2.withIgnoreHeaderCase();
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat3, 5, (-2979L));
      cSVParser0.iterator();
      long long0 = cSVParser0.getRecordNumber();
      assertEquals((-2980L), long0);
      
      CSVParser.parse((Reader) pipedReader0, cSVFormat2);
      cSVParser0.getCurrentLineNumber();
      assertEquals((-2980L), cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Oracle");
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat2, (-758L), (-758L));
      cSVParser0.nextRecord();
      assertEquals((-758L), cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat0);
      cSVParser0.getRecords();
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      CSVParser cSVParser1 = CSVParser.parse(path0, charset0, cSVFormat0);
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      cSVFormat1.withFirstRecordAsHeader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[21];
      objectArray0[0] = (Object) pipedWriter0;
      objectArray0[1] = (Object) pipedReader0;
      cSVFormat2.printRecord(pipedWriter0, objectArray0);
      CSVFormat cSVFormat3 = cSVFormat1.withAllowMissingColumnNames(true);
      CSVParser.parse((Reader) pipedReader0, cSVFormat3);
      URI uRI0 = null;
      // Undeclared exception!
      try { 
        MockURI.relativize((URI) null, (URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)21;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVParser cSVParser0 = CSVParser.parse("\r\n", cSVFormat0);
      cSVParser0.getRecords();
      cSVParser0.iterator();
      cSVParser0.getCurrentLineNumber();
      cSVParser0.getFirstEndOfLine();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      Object[] objectArray0 = new Object[2];
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)35;
      byteArray0[7] = (byte)61;
      byteArray0[8] = (byte) (-3);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Object object0 = new Object();
      objectArray0[0] = object0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "d~-7Wsf0'\"q");
      objectArray0[1] = (Object) cSVFormat1;
      cSVFormat1.printRecord(pipedWriter0, objectArray0);
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat1);
      cSVParser0.getCurrentLineNumber();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      Object[] objectArray0 = new Object[21];
      objectArray0[0] = (Object) pipedWriter0;
      objectArray0[1] = (Object) pipedReader0;
      cSVFormat2.printRecord(pipedWriter0, objectArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Charset charset0 = Charset.defaultCharset();
      try { 
        CSVParser.parse((InputStream) pipedInputStream0, charset0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('$');
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();
      StringReader stringReader0 = new StringReader("");
      CSVParser cSVParser0 = cSVFormat4.parse(stringReader0);
      cSVParser0.isClosed();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVParser.parse("", cSVFormat2);
      MockFile.createTempFile("]N#av\"*", "hj5F&");
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter(true);
      cSVFormat4.withRecordSeparator('\\');
      // Undeclared exception!
      try { 
        Charset.forName("]N#av\"*");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ]N#av\"*
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      Object[] objectArray0 = new Object[21];
      objectArray0[0] = (Object) pipedWriter0;
      objectArray0[1] = (Object) pipedReader0;
      cSVFormat2.printRecord(pipedWriter0, objectArray0);
      cSVFormat0.withIgnoreSurroundingSpaces();
      // Undeclared exception!
      try { 
        CSVParser.parse((Reader) pipedReader0, cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate name: \"\" in [java.io.PipedWriter@0000000004, java.io.PipedReader@0000000005, , , , , , , , , , , , , , , , , , , ]
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      cSVFormat2.withRecordSeparator('V');
      Class<Proxy.Type> class0 = Proxy.Type.class;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) pipedWriter0;
      objectArray0[3] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) pipedWriter0;
      objectArray0[6] = (Object) cSVFormat1;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(class0);
      String string0 = "S;a]8-xFoXaR!oi\\";
      cSVFormat4.withRecordSeparator("S;a]8-xFoXaR!oi");
      cSVFormat2.withSkipHeaderRecord(true);
      CSVParser cSVParser0 = CSVParser.parse("S;a]8-xFoXaR!oi", cSVFormat3);
      cSVParser0.nextRecord();
      String string1 = "\" in ";
      String string2 = "file";
      String string3 = "Yf8u7yNB:+~:$";
      File file0 = MockFile.createTempFile(string2, string3);
      try { 
        MockFile.createTempFile(string0, string1, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.ORACLE;
      CSVParser.parse("5R[&O", cSVFormat0);
      MockFile mockFile0 = new MockFile("d", "Rt^-3dQm)CFCN<");
      MockFile mockFile1 = new MockFile(mockFile0, ") invalid char between encapsulated token and delimiter");
      Path path0 = mockFile1.toPath();
      // Undeclared exception!
      try { 
        CSVParser.parse(path0, (Charset) null, cSVFormat1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat1.withIgnoreEmptyLines(true);
      Object[] objectArray0 = new Object[21];
      objectArray0[14] = (Object) pipedWriter0;
      objectArray0[1] = (Object) pipedReader0;
      MockFile mockFile0 = new MockFile(".a(=YX.6t2wt^<]", ".a(=YX.6t2wt^<]");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        CSVParser.parse((InputStream) pipedInputStream0, (Charset) null, cSVFormat1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException("java.io.InputStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      Class<Proxy.Type> class0 = Proxy.Type.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      QuoteMode quoteMode0 = QuoteMode.NONE;
      cSVFormat1.withQuoteMode(quoteMode0);
      CSVParser cSVParser0 = cSVFormat1.parse(pipedReader0);
      String string0 = "u~yLg)2H ";
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cSVParser0.forEach(consumer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // IOException reading next record: java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      cSVFormat1.withAllowMissingColumnNames(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Character.valueOf(')');
      CSVParser cSVParser0 = CSVParser.parse("d", cSVFormat0);
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) cSVFormat0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) cSVFormat2;
      Object object2 = new Object();
      objectArray0[7] = object2;
      objectArray0[8] = (Object) pipedWriter0;
      cSVFormat3.printRecord(pipedWriter0, objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('B');
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreSurroundingSpaces(true);
      cSVFormat5.withIgnoreSurroundingSpaces();
      // Undeclared exception!
      try { 
        CSVParser.parse((Reader) pipedReader0, cSVFormat3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate name: \"org.apache.commons.csv.CSVFormat@0000000005\" in [org.apache.commons.csv.CSVFormat@0000000003, java.lang.Object@0000000006, org.apache.commons.csv.CSVFormat@0000000005, org.apache.commons.csv.CSVFormat@0000000005, org.apache.commons.csv.CSVFormat@0000000007, java.lang.Object@0000000008, org.apache.commons.csv.CSVFormat@0000000003, java.lang.Object@0000000009, java.io.PipedWriter@0000000010]
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      cSVFormat1.withFirstRecordAsHeader();
      Object[] objectArray0 = new Object[21];
      objectArray0[0] = (Object) pipedWriter0;
      objectArray0[1] = (Object) pipedReader0;
      cSVFormat2.printRecord(pipedWriter0, objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      // Undeclared exception!
      try { 
        CSVParser.parse((Reader) pipedReader0, cSVFormat3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate name: \"null\" in [java.io.PipedWriter@0000000006, java.io.PipedReader@0000000007, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) pipedReader0;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) resultSet0;
      objectArray0[5] = (Object) cSVFormat3;
      cSVFormat3.format(objectArray0);
      cSVFormat2.printer();
      Class<Proxy.Type> class0 = Proxy.Type.class;
      cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(class0);
      CSVParser cSVParser0 = CSVParser.parse("org.apache.commons.csv.CSVFormat@0000000002,java.io.PipedReader@0000000005,org.apache.commons.csv.CSVFormat@0000000003,org.apache.commons.csv.CSVFormat@0000000003,org.evosuite.shaded.org.mockito.codegen.ResultSet$MockitoMock$1991020708@0000000006,org.apache.commons.csv.CSVFormat@0000000003", cSVFormat4);
      cSVParser0.getRecords();
      MockFile mockFile0 = new MockFile("d", "NullString=<");
      cSVParser0.close();
      cSVParser0.iterator();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      cSVFormat1.withFirstRecordAsHeader();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) pipedWriter0;
      objectArray0[1] = (Object) pipedReader0;
      cSVFormat2.printRecord(pipedWriter0, objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat3);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      cSVFormat0.withIgnoreHeaderCase(false);
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser((Reader) null, cSVFormat0, 2955L, 3018L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(1115);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Character.valueOf('@');
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      Character.valueOf('&');
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator(')');
      cSVFormat2.withAllowMissingColumnNames();
      CSVParser cSVParser0 = CSVParser.parse("odFge;", cSVFormat2);
      cSVParser0.getRecords();
      MockFile mockFile0 = new MockFile("odFge;", "d");
      URL uRL0 = MockURL.getHttpExample();
      Charset charset0 = Charset.defaultCharset();
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVParser cSVParser0 = CSVParser.parse("JU", cSVFormat0);
      cSVParser0.getRecords();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      File file0 = MockFile.createTempFile("f}bBf !2f#`5 ", "f}bBf !2f#`5 ");
      Charset charset0 = null;
      // Undeclared exception!
      try { 
        CSVParser.parse(file0, (Charset) null, cSVFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException("java.io.InputStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      cSVFormat1.withAllowMissingColumnNames(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Character.valueOf(')');
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames();
      CSVParser cSVParser0 = CSVParser.parse("d", cSVFormat2);
      cSVParser0.getRecords();
      MockFile mockFile0 = new MockFile("d", "d");
      cSVParser0.close();
      cSVParser0.iterator();
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      Class<Proxy.Type> class0 = Proxy.Type.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVParser.parse("HTTP", cSVFormat1);
      CSVParser.parse("HTTP", cSVFormat0);
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments((Object[]) null);
      CSVParser cSVParser0 = CSVParser.parse("HTTP", cSVFormat1);
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
      
      CSVParser cSVParser1 = CSVParser.parse("CSVParser has been closed", cSVFormat3);
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      Class<Proxy.Type> class0 = Proxy.Type.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVParser cSVParser0 = CSVParser.parse("d", cSVFormat1);
      CSVParser cSVParser1 = CSVParser.parse("4<$UeF~0SySWbQX97SN", cSVFormat0);
      cSVParser0.close();
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser1.forEach(consumer0);
      Charset.defaultCharset();
      try { 
        MockURL.URL("d", "d", "d");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: d
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Character.valueOf('@');
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      Character character0 = Character.valueOf('e');
      cSVFormat2.withQuote(character0);
      CSVFormat cSVFormat3 = cSVFormat0.withAutoFlush(true);
      cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(true);
      PipedReader pipedReader0 = new PipedReader(2);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat4, 2, 2);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        CSVParser.parse((File) null, charset0, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      CSVParser cSVParser0 = cSVFormat2.parse(pipedReader0);
      try { 
        cSVParser0.nextRecord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      Character character0 = new Character('~');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      cSVFormat2.withAllowMissingColumnNames(true);
      cSVFormat2.withHeader((ResultSet) null);
      cSVFormat2.printer();
      Class<Proxy.Type> class0 = Proxy.Type.class;
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(class0);
      Character character1 = new Character('?');
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker(character1);
      // Undeclared exception!
      try { 
        CSVParser.parse((Reader) null, cSVFormat4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);
      cSVFormat2.printer();
      Class<Proxy.Type> class0 = Proxy.Type.class;
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(class0);
      Character character0 = Character.valueOf('x');
      cSVFormat0.withCommentMarker(character0);
      try { 
        CSVParser.parse((Reader) pipedReader0, cSVFormat4);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      Class<Proxy.Type> class0 = Proxy.Type.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      CSVFormat cSVFormat3 = cSVFormat2.withSystemRecordSeparator();
      CSVParser.parse("2f7L\"LsysdZ6tB&>=", cSVFormat3);
      MockURL.getHttpExample();
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      Class<Proxy.Type> class0 = Proxy.Type.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVParser cSVParser0 = CSVParser.parse("4<$UeF~0SySWbQX97SN", cSVFormat2);
      CSVParser cSVParser1 = CSVParser.parse("4<$UeF~0SySWbQX97SN", cSVFormat1);
      PipedInputStream pipedInputStream0 = new PipedInputStream(12);
      cSVParser0.close();
      byte[] byteArray0 = new byte[8];
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte)75;
      byteArray0[7] = (byte)75;
      Charset.defaultCharset();
      Map<String, Integer> map0 = cSVParser1.getHeaderMap();
      assertEquals(3, map0.size());
      
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('[');
      CSVFormat cSVFormat3 = cSVFormat2.withSystemRecordSeparator();
      cSVFormat3.withAllowMissingColumnNames();
      CSVParser cSVParser0 = CSVParser.parse(" IgnoreHeaderCase:ignored", cSVFormat2);
      cSVParser0.getRecords();
      Charset charset0 = Charset.defaultCharset();
      MockFile mockFile0 = new MockFile("]%8R,!}>", "Jf8");
      Path path0 = mockFile0.toPath();
      try { 
        CSVParser.parse(path0, charset0, cSVFormat1);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(10);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      try { 
        CSVParser.parse((Reader) pipedReader0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);
      cSVFormat2.printer();
      Class<Proxy.Type> class0 = Proxy.Type.class;
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(class0);
      Character character0 = Character.valueOf('x');
      cSVFormat0.withCommentMarker(character0);
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat4);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVParser cSVParser1 = CSVParser.parse("_)|'F3*d", cSVFormat4);
      cSVParser0.iterator();
      CSVFormat cSVFormat5 = cSVFormat3.withIgnoreHeaderCase(true);
      cSVParser1.close();
      cSVParser1.iterator();
      try { 
        CSVParser.parse((Reader) pipedReader0, cSVFormat5);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('H');
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(true);
      try { 
        cSVFormat4.parse(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PipedReader pipedReader1 = new PipedReader();
      pipedReader1.close();
      cSVFormat0.parse(pipedReader1);
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSystemRecordSeparator();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker((Character) null);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      cSVFormat3.withHeader(resultSet0);
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet1).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat1.withHeader(resultSet1);
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat3);
      cSVParser0.getFirstEndOfLine();
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl1);
      cSVFormat2.withIgnoreSurroundingSpaces(true);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVParser cSVParser1 = new CSVParser(pipedReader0, cSVFormat3, (-2632L), (-2632L));
      cSVParser1.iterator();
      cSVFormat4.withIgnoreHeaderCase(true);
      cSVParser0.close();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      MockURL.URL("PostgreSQLCsv", "7v(vG|[/aLuj&]B", 32, "PostgreSQLText", uRLStreamHandler0);
      // Undeclared exception!
      try { 
        Charset.forName("yCe7");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // yCe7
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat1.withNullString("");
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat1);
      cSVParser0.getRecords();
      cSVParser0.nextRecord();
      cSVFormat1.withAutoFlush(true);
      cSVParser0.getCurrentLineNumber();
      cSVParser0.nextRecord();
      cSVParser0.nextRecord();
      cSVParser0.isClosed();
      assertEquals(0L, cSVParser0.getRecordNumber());
      
      cSVParser0.iterator();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      stringReader0.close();
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0, (-3565L), 0L);
      cSVParser0.close();
      cSVParser0.isClosed();
      try { 
        cSVParser0.getRecords();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      Class<Proxy.Type> class0 = Proxy.Type.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVParser cSVParser0 = CSVParser.parse("O/5H9pzXiA4n", cSVFormat2);
      cSVParser0.getRecords();
      assertEquals(1L, cSVParser0.getRecordNumber());
      
      CSVParser cSVParser1 = CSVParser.parse("|b*b", cSVFormat1);
      PipedInputStream pipedInputStream0 = new PipedInputStream(12);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 12);
      pushbackInputStream0.mark((-878));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)75;
      pushbackInputStream0.unread(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      CSVParser.parse((InputStream) pipedInputStream0, charset0, cSVFormat0);
      cSVParser1.getHeaderMap();
      long long0 = cSVParser1.getRecordNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);
      cSVFormat2.printer();
      Class<Proxy.Type> class0 = Proxy.Type.class;
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(class0);
      Character character0 = Character.valueOf('x');
      cSVFormat0.withCommentMarker(character0);
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat4);
      cSVParser0.getHeaderMap();
      cSVParser0.close();
      cSVFormat1.withCommentMarker('w');
      try { 
        cSVParser0.getRecords();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      stringReader0.close();
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0, (-3565L), 0L);
      try { 
        cSVParser0.getRecords();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(1115);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withSkipHeaderRecord();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Character character0 = Character.valueOf('@');
      cSVFormat0.withQuote(character0);
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat1);
      cSVParser0.getHeaderMap();
      cSVParser0.getFirstEndOfLine();
      cSVParser0.getFirstEndOfLine();
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSystemRecordSeparator();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker((Character) null);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat3.withHeader(resultSet0);
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet1).getMetaData();
      cSVFormat1.withHeader(resultSet1);
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat3);
      cSVParser0.getFirstEndOfLine();
      cSVParser0.getHeaderMap();
      cSVParser0.getFirstEndOfLine();
      cSVParser0.getFirstEndOfLine();
      String string0 = "file";
      MockFile mockFile0 = new MockFile("");
      // Undeclared exception!
      try { 
        MockFile.createTempFile((String) null, "file", (File) mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockFile.createTempFile("(line ", "(line ");
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      cSVFormat2.withIgnoreHeaderCase(false);
      MockFile mockFile0 = new MockFile("(line ");
      CSVFormat cSVFormat3 = CSVFormat.MYSQL;
      try { 
        CSVParser.parse((File) mockFile0, charset0, cSVFormat3);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      File file0 = MockFile.createTempFile("(line ", "(line ");
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      cSVFormat2.withIgnoreHeaderCase(false);
      CSVParser cSVParser0 = CSVParser.parse(file0, charset0, cSVFormat2);
      cSVParser0.nextRecord();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockFile mockFile0 = new MockFile("(startline ", "(startline ");
      mockFile0.mkdirs();
      MockFile mockFile1 = new MockFile(mockFile0, "(startline ");
      Charset charset0 = null;
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      try { 
        CSVParser.parse((File) mockFile1, (Charset) null, cSVFormat0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      // Undeclared exception!
      try { 
        CSVParser.parse((InputStream) null, (Charset) null, cSVFormat2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'inputStream' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(1115);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Character character0 = Character.valueOf('@');
      cSVFormat0.withQuote(character0);
      cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat2, 1115, 1115);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(false);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("+oSTQ#pb+kS");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat1;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat3);
      cSVParser0.close();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('$');
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();
      StringReader stringReader0 = new StringReader("");
      CSVParser cSVParser0 = cSVFormat4.parse(stringReader0);
      cSVParser0.isClosed();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('g');
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((String[]) null);
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser((Reader) null, cSVFormat3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('[');
      CSVFormat cSVFormat3 = cSVFormat2.withSystemRecordSeparator();
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
      CSVParser cSVParser0 = CSVParser.parse("b;m D}/Nz&r3@", cSVFormat4);
      cSVParser0.getRecords();
      Charset charset0 = Charset.defaultCharset();
      MockFile mockFile0 = new MockFile("url", "]%8R,!}>");
      Path path0 = mockFile0.toPath();
      try { 
        CSVParser.parse(path0, charset0, cSVFormat2);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        CSVParser.parse("", (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Path path0 = null;
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('7');
      charset0.aliases();
      String string0 = "No more CSV records available";
      MockFile mockFile0 = new MockFile("R`2vOG*u0Wd_", "No more CSV records available");
      File file0 = MockFile.createTempFile("n/7eo?dzd", "No more CSV records available", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.println(766.34F);
      cSVFormat0.println(mockPrintWriter0);
      // Undeclared exception!
      try { 
        CSVParser.parse((Path) null, charset0, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'path' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      Class<Proxy.Type> class0 = Proxy.Type.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVParser cSVParser0 = CSVParser.parse("O/5H9pzXiA4n", cSVFormat2);
      CSVParser.parse("|b*b", cSVFormat1);
      PipedInputStream pipedInputStream0 = new PipedInputStream(12);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 12);
      pushbackInputStream0.mark((-878));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)124;
      byteArray0[7] = (byte)125;
      byteArray0[8] = (byte) (-90);
      pushbackInputStream0.unread(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      CSVParser.parse((InputStream) pushbackInputStream0, charset0, cSVFormat2);
      cSVParser0.getHeaderMap();
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(false);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('[');
      CSVFormat cSVFormat3 = cSVFormat2.withSystemRecordSeparator();
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
      CSVParser cSVParser0 = CSVParser.parse("b;m D}/Nz&r3@", cSVFormat4);
      cSVParser0.getRecords();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.mark(5);
      Charset charset0 = Charset.defaultCharset();
      CSVParser.parse((InputStream) sequenceInputStream0, charset0, cSVFormat3);
      MockFile mockFile0 = new MockFile("url", "]%8RFA}>");
      Path path0 = mockFile0.toPath();
      try { 
        CSVParser.parse(path0, charset0, cSVFormat2);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(1740);
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat1);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('A');
      Class<Proxy.Type> class0 = Proxy.Type.class;
      cSVFormat1.withHeader(class0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        CSVParser.parse((URL) null, charset0, cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'url' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(false);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('[');
      CSVFormat cSVFormat3 = cSVFormat2.withSystemRecordSeparator();
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
      CSVParser cSVParser0 = CSVParser.parse("b;m D}/Nz&r3@", cSVFormat4);
      cSVParser0.getRecords();
      CSVFormat cSVFormat5 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat6 = cSVFormat5.withAllowMissingColumnNames(true);
      cSVFormat2.withRecordSeparator('\"');
      File file0 = MockFile.createTempFile("b;m D}/Nz&r3@", "HTTP", (File) null);
      MockFile mockFile0 = new MockFile(file0, "2^^s(dA");
      URL uRL0 = mockFile0.toURL();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("<VVpv79Mf", (String) null, 1224, "<VVpv79Mf", uRLStreamHandler0);
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('\"');
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL0, (Charset) null, cSVFormat2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'charset' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      // Undeclared exception!
      try { 
        cSVFormat0.parse((Reader) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }
}
