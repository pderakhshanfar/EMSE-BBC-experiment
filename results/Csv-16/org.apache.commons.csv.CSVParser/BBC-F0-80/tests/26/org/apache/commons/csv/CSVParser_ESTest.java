/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 04:37:55 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLStreamHandler;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.file.NoSuchFileException;
import java.nio.file.Path;
import java.sql.ResultSetMetaData;
import java.util.Enumeration;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVParser_ESTest extends CSVParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withFirstRecordAsHeader();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      Charset charset0 = Charset.defaultCharset();
      CSVParser cSVParser0 = CSVParser.parse((InputStream) dataInputStream0, charset0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVParser0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = CSVFormat.POSTGRESQL_TEXT;
      MockPrintStream mockPrintStream0 = new MockPrintStream("ksZ-[\u0002vX_g(2+Aw");
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) "ksZ-[\u0002vX_g(2+Aw";
      cSVFormat1.format(objectArray0);
      StringReader stringReader0 = new StringReader("N,N,org.apache.commons.csv.CSVFormat@0000000004,org.apache.commons.csv.CSVFormat@0000000004,ksZ-[\u0002vX_g(2+Aw");
      // Undeclared exception!
      try { 
        CSVParser.parse((Reader) stringReader0, cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate name: \"N\" in [N, N, org.apache.commons.csv.CSVFormat@0000000004, org.apache.commons.csv.CSVFormat@0000000004, ksZ-[\u0002vX_g(2+Aw]
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      Object[] objectArray0 = new Object[3];
      Object[] objectArray1 = new Object[7];
      Object object0 = new Object();
      objectArray1[0] = object0;
      objectArray1[1] = (Object) cSVFormat3;
      objectArray1[2] = (Object) pipedReader0;
      objectArray1[3] = (Object) cSVFormat1;
      objectArray1[4] = (Object) pipedReader0;
      objectArray1[5] = (Object) cSVFormat0;
      objectArray1[6] = (Object) cSVFormat2;
      cSVFormat3.printRecord(pipedWriter0, objectArray1);
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) pipedReader0;
      cSVFormat1.format(objectArray0);
      cSVFormat1.withSkipHeaderRecord(false);
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("org.apache.commons.csv.CSVParser$2");
      // Undeclared exception!
      try { 
        CSVParser.parse((Reader) pipedReader0, cSVFormat4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate name: \"java.io.PipedReader@0000000006\" in [java.lang.Object@0000000005, org.apache.commons.csv.CSVFormat@0000000004, java.io.PipedReader@0000000006, org.apache.commons.csv.CSVFormat@0000000001, java.io.PipedReader@0000000006, org.apache.commons.csv.CSVFormat@0000000007, org.apache.commons.csv.CSVFormat@0000000002]
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse("\r\n", cSVFormat1);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Charset charset0 = Charset.defaultCharset();
      try { 
        CSVParser.parse((InputStream) mockFileInputStream0, charset0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      File file0 = MockFile.createTempFile("%vJXL/", "?fDAFD)RG!=Rcp@s");
      MockFile mockFile0 = new MockFile("%vJXL/", "%vJXL/");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      file0.renameTo(mockFile0);
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat1.withTrim();
      try { 
        CSVParser.parse(file0, charset0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat0.withFirstRecordAsHeader();
      StringReader stringReader0 = new StringReader(".Z");
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0, (-129L), (-129L));
      cSVParser0.iterator();
      cSVParser0.nextRecord();
      assertEquals((-129L), cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFile.createTempFile("%vJXL/", "?fDAFD)RG!=Rcp@s");
      Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      cSVFormat2.withTrim();
      Object[] objectArray0 = new Object[0];
      cSVFormat2.withHeaderComments(objectArray0);
      CSVParser cSVParser0 = CSVParser.parse("?fDAFD)RG!=Rcp@s", cSVFormat2);
      CSVParser.parse("|U5t=k=", cSVFormat2);
      cSVParser0.getFirstEndOfLine();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat1.toString();
      CSVParser cSVParser0 = CSVParser.parse("Delimiter=<,> Escape=<> QuoteChar=<\"> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:true Header:[]", cSVFormat1);
      cSVParser0.nextRecord();
      cSVParser0.close();
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 2028);
      pipedReader0.close();
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat1, 2028, 2028);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe closed
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVParser.parse("ALL", cSVFormat0);
      File file0 = MockFile.createTempFile("ALL", "ALL");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      // Undeclared exception!
      try { 
        CSVParser.parse((InputStream) mockFileInputStream0, (Charset) null, cSVFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException("java.io.InputStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse("\"qN5c@Jpy=A", cSVFormat1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cSVParser0.forEach(consumer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // MockIOException reading next record: org.evosuite.runtime.mock.java.lang.MockThrowable: (startline 1) EOF reached before encapsulated token finished
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat1);
      cSVParser0.nextRecord();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVParser cSVParser0 = CSVParser.parse(" SurroundingSpaces:ignored", cSVFormat0);
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments((Object[]) null);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.withSystemRecordSeparator();
      cSVFormat3.withTrim();
      cSVFormat2.toString();
      CSVParser cSVParser0 = CSVParser.parse("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:true Header:[]", cSVFormat3);
      cSVParser0.getFirstEndOfLine();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFile mockFile0 = new MockFile("charLet");
      Path path0 = mockFile0.toPath();
      mockFile0.getCanonicalFile();
      // Undeclared exception!
      try { 
        CSVParser.parse(path0, (Charset) null, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse("org.apache.commons.csv.Constants", cSVFormat0);
      cSVParser0.getCurrentLineNumber();
      cSVParser0.nextRecord();
      cSVParser0.close();
      try { 
        cSVParser0.getRecords();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      Character character0 = new Character('l');
      cSVFormat2.withEscape(character0);
      cSVFormat0.toString();
      CSVParser cSVParser0 = CSVParser.parse("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false", cSVFormat2);
      cSVParser0.getCurrentLineNumber();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      Charset.defaultCharset();
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      cSVFormat0.withTrim();
      cSVFormat2.toString();
      CSVParser cSVParser0 = CSVParser.parse("Delimiter=<,> Escape=<> QuoteChar=<\"> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:true Header:[]", cSVFormat2);
      cSVParser0.nextRecord();
      MockFile mockFile0 = new MockFile("REJECT_EXTENDED_RANGES", "MAP_EXTENDED_RANGES");
      MockFile mockFile1 = new MockFile(mockFile0, "MAP_EXTENDED_RANGES");
      // Undeclared exception!
      try { 
        Charset.forName("c^CCZ$YRYE<oLZ}T");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // c^CCZ$YRYE<oLZ}T
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      cSVFormat0.toString();
      CSVParser cSVParser0 = CSVParser.parse("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false", cSVFormat2);
      assertEquals(0L, cSVParser0.getRecordNumber());
      
      PipedReader pipedReader0 = new PipedReader(1810);
      CSVParser.parse((Reader) pipedReader0, cSVFormat0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        CSVParser.parse((InputStream) null, charset0, cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'inputStream' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockFile mockFile0 = new MockFile("JxzCT,rF)eydGP", "JxzCT,rF)eydGP");
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      try { 
        CSVParser.parse(path0, (Charset) null, cSVFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withIgnoreHeaderCase(false);
      StringReader stringReader0 = new StringReader("`");
      cSVFormat0.withEscape('^');
      CSVParser cSVParser0 = CSVParser.parse((Reader) stringReader0, cSVFormat0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.isClosed();
      cSVParser0.forEach(consumer0);
      cSVParser0.getCurrentLineNumber();
      cSVParser0.nextRecord();
      cSVParser0.close();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      Charset.defaultCharset();
      cSVFormat0.withCommentMarker('j');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);
      cSVFormat1.withDelimiter(' ');
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      cSVFormat1.withTrim();
      cSVFormat0.toString();
      CSVParser cSVParser0 = CSVParser.parse("N", cSVFormat2);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse("org.apache.commons.csv.Constants", cSVFormat0);
      cSVParser0.getCurrentLineNumber();
      cSVParser0.nextRecord();
      cSVParser0.close();
      boolean boolean0 = cSVParser0.isClosed();
      assertEquals(1L, cSVParser0.getRecordNumber());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockFile.createTempFile("%vJXL/", "%vJXL/");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVParser.parse("`", cSVFormat0);
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0, 1L, 1166L);
      pipedReader0.markSupported();
      cSVParser0.close();
      CSVParser.parse("`", cSVFormat0);
      try { 
        cSVParser0.nextRecord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFile.createTempFile("org.apache.commons.csv.CSVParser", "%vJXL/");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat0.withTrim();
      CSVParser cSVParser0 = CSVParser.parse("Oracle", cSVFormat1);
      cSVParser0.getRecords();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVParser.parse("%vJXL/", cSVFormat1);
      CSVParser.parse("OWY+Ttr$;ck<}8(k9f.", cSVFormat0);
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(pipedReader0, (CSVFormat) null, 233L, 335L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(96);
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      try { 
        CSVParser.parse((Reader) pipedReader0, cSVFormat2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('E');
      cSVFormat1.withEscape('E');
      Character character0 = new Character('=');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("U4-~Y0_!E*{t");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "U4-~Y0_!E*{t");
      cSVFormat1.print((Appendable) printWriter0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter();
      CSVParser cSVParser0 = CSVParser.parse("`", cSVFormat3);
      cSVParser0.nextRecord();
      cSVParser0.iterator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      cSVParser0.getFirstEndOfLine();
      CSVParser.parse("`", cSVFormat0);
      MockFile mockFile0 = new MockFile("/", "/");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      char[] charArray0 = new char[4];
      charArray0[0] = 'E';
      charArray0[1] = '{';
      charArray0[2] = '=';
      charArray0[3] = 'E';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charset0.encode(charBuffer0);
      CSVParser.parse(path0, charset0, cSVFormat3);
      cSVParser0.getHeaderMap();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      cSVFormat0.withSkipHeaderRecord();
      cSVFormat0.withDelimiter('K');
      File file0 = MockFile.createTempFile("file", "file");
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = CSVFormat.INFORMIX_UNLOAD;
      CSVParser cSVParser0 = CSVParser.parse(file0, charset0, cSVFormat2);
      CSVFormat.newFormat('D');
      cSVParser0.getHeaderMap();
      cSVParser0.getFirstEndOfLine();
      cSVParser0.close();
      try { 
        cSVParser0.nextRecord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile.createTempFile("?fDAFD)RG!=Rcp@s", "?fDAFD)RG!=Rcp@s");
      CSVFormat cSVFormat1 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.withAutoFlush(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0);
      cSVParser0.getCurrentLineNumber();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      File file0 = MockFile.createTempFile("%vJXL/", "%vJXL/");
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      cSVFormat1.withFirstRecordAsHeader();
      cSVFormat1.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVParser cSVParser0 = CSVParser.parse(file0, charset0, cSVFormat2);
      cSVParser0.getFirstEndOfLine();
      // Undeclared exception!
      try { 
        CSVParser.parse((Reader) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(96);
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.withIgnoreHeaderCase(true);
      cSVFormat0.withFirstRecordAsHeader();
      cSVFormat0.withTrim();
      File file0 = MockFile.createTempFile("uS0", "uS0");
      CSVFormat cSVFormat1 = CSVFormat.POSTGRESQL_CSV;
      // Undeclared exception!
      try { 
        CSVParser.parse(file0, (Charset) null, cSVFormat1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException("java.io.InputStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      File file0 = MockFile.createTempFile("%vJXL/", "?fDAFD)RG!=Rcp@s");
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat1.withTrim();
      CSVParser cSVParser0 = CSVParser.parse(file0, charset0, cSVFormat1);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertTrue(map0.isEmpty());
      
      cSVParser0.getFirstEndOfLine();
      cSVParser0.close();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte) (-41);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVParser cSVParser0 = CSVParser.parse("org.apache.commons.csv.CSVParser$2", cSVFormat2);
      MockFile mockFile0 = new MockFile("org.apache.commons.csv.CSVParser$2");
      mockFile0.toPath();
      cSVFormat2.printer();
      cSVParser0.getRecords();
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      File file0 = MockFile.createTempFile("%vJXL/", "?fDAFD)RG!=Rcp@s");
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      CSVFormat cSVFormat4 = cSVFormat3.withTrim();
      CSVParser cSVParser0 = CSVParser.parse(file0, charset0, cSVFormat1);
      cSVParser0.getFirstEndOfLine();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-43);
      byteArray0[6] = (byte) (-9);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1847, (byte) (-28));
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      CSVParser cSVParser1 = CSVParser.parse((InputStream) pushbackInputStream0, charset0, cSVFormat4);
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      File file0 = MockFile.createTempFile("?fDAFD)RG!=Rcp@s", "?fDAFD)RG!=Rcp@s");
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      CSVFormat cSVFormat4 = cSVFormat0.withTrim();
      CSVParser cSVParser0 = CSVParser.parse(file0, charset0, cSVFormat3);
      cSVParser0.getFirstEndOfLine();
      CSVParser cSVParser1 = CSVParser.parse("`", cSVFormat0);
      cSVParser1.close();
      CSVParser cSVParser2 = CSVParser.parse("`", cSVFormat4);
      cSVParser2.nextRecord();
      assertEquals(1L, cSVParser2.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockFile.createTempFile("%vJXL/", "%vJXL/");
      Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      cSVFormat2.withTrim();
      CSVParser cSVParser0 = CSVParser.parse("%vJXL/", cSVFormat2);
      cSVParser0.iterator();
      CSVParser cSVParser1 = CSVParser.parse("=;+*XPVy[", cSVFormat0);
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      File file0 = MockFile.createTempFile("%vJXL/", "?fDAFD)RG!=Rcp@s");
      MockFile mockFile0 = new MockFile("%vJXL/", "%vJXL/");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      file0.renameTo(mockFile0);
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVParser.parse(file0, charset0, cSVFormat1);
      CSVParser cSVParser0 = CSVParser.parse("org.apache.commons.csv.Token", cSVFormat2);
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      File file0 = MockFile.createTempFile("%vJXL/", "?fDAFD)RG!=Rcp@s");
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      CSVParser cSVParser0 = CSVParser.parse(file0, charset0, cSVFormat3);
      cSVParser0.getFirstEndOfLine();
      assertEquals(0L, cSVParser0.getRecordNumber());
      
      cSVParser0.nextRecord();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Charset charset0 = Charset.defaultCharset();
          CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
          cSVFormat0.withIgnoreEmptyLines();
          CSVFormat cSVFormat1 = cSVFormat0.withEscape('c');
          CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
          CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
          Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
          CSVFormat cSVFormat4 = cSVFormat3.withHeader(class0);
          CSVParser.parse("^@jQ?", cSVFormat4);
          MockFile mockFile0 = new MockFile("org.apache.commons.csv.CSVParser$2");
          Path path0 = mockFile0.toPath();
          // Undeclared exception!
          try { 
            cSVFormat2.print(path0, charset0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"org.apache.commons.csv.CSVParser$2\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // java.nio.file.Files.newBufferedWriter(Files.java:2860)
             // org.apache.commons.csv.CSVFormat.print(CSVFormat.java:1130)
             // sun.reflect.GeneratedMethodAccessor282.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:261)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:224)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      CSVParser cSVParser0 = CSVParser.parse("?fDAFD)RG!=Rcp@s", cSVFormat2);
      cSVParser0.getRecords();
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
          Charset charset0 = Charset.defaultCharset();
          CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
          CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
          Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
          CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
          CSVParser.parse("org.apache.commons.csv.CSVParser$2", cSVFormat2);
          MockFile mockFile0 = new MockFile("org.apache.commons.csv.CSVParser$2");
          Path path0 = mockFile0.toPath();
          // Undeclared exception!
          try { 
            cSVFormat2.print(path0, charset0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"org.apache.commons.csv.CSVParser$2\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // java.nio.file.Files.newBufferedWriter(Files.java:2860)
             // org.apache.commons.csv.CSVFormat.print(CSVFormat.java:1130)
             // sun.reflect.GeneratedMethodAccessor282.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:261)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:224)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      File file0 = MockFile.createTempFile("%vJXL/", "?fDAFD)RG!=Rcp@s");
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      cSVFormat1.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      cSVFormat2.withFirstRecordAsHeader();
      cSVFormat1.withTrim();
      // Undeclared exception!
      try { 
        CSVParser.parse(file0, charset0, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockFile.createTempFile("%vJXL/", "?fDAFD)RG!=Rcp@s");
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      cSVFormat1.withFirstRecordAsHeader();
      URL uRL0 = MockURL.getHttpExample();
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockFile.createTempFile("%vJXL/", "?fDAFD)RG!=Rcp@s");
      Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      cSVFormat2.withTrim();
      Object[] objectArray0 = new Object[0];
      cSVFormat2.withHeaderComments(objectArray0);
      CSVParser cSVParser0 = CSVParser.parse("?fDAFD)RG!=Rcp@s", cSVFormat2);
      cSVParser0.getFirstEndOfLine();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockFile.createTempFile("%vJXL/", "?fDAFD)RG!=Rcp@s");
      Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      cSVFormat2.withTrim();
      Object[] objectArray0 = new Object[0];
      cSVFormat2.withHeaderComments(objectArray0);
      cSVFormat0.withSkipHeaderRecord(false);
      CSVParser cSVParser0 = CSVParser.parse("?fDAFD)RG!=Rcp@s", cSVFormat2);
      cSVParser0.getFirstEndOfLine();
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertEquals(0L, cSVParser0.getRecordNumber());
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("MO/1wKG)4}?,4X^");
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(false);
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(false);
      cSVFormat3.withDelimiter('x');
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVParser cSVParser0 = cSVFormat2.parse(pipedReader0);
      cSVParser0.getHeaderMap();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 589);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      char char0 = 'e';
      Character character0 = new Character('e');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      Character character1 = new Character('e');
      cSVFormat1.withEscape(character1);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat2);
      cSVParser0.getHeaderMap();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        Charset.forName("$VALUES");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // $VALUES
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat2, (-1L), (-5647L));
      long long0 = cSVParser0.getRecordNumber();
      assertEquals((-5648L), long0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      try { 
        CSVParser.parse((File) mockFile1, charset0, cSVFormat0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      StringReader stringReader0 = new StringReader("Vb;0:~IgS6U'u");
      CSVParser cSVParser0 = cSVFormat1.parse(stringReader0);
      cSVParser0.getFirstEndOfLine();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(96);
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat2);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(1324);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat1);
      cSVParser0.getCurrentLineNumber();
      cSVParser0.getFirstEndOfLine();
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase(false);
      CSVParser cSVParser1 = CSVParser.parse((Reader) pipedReader0, cSVFormat0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      cSVParser1.close();
      cSVParser0.getFirstEndOfLine();
      cSVParser0.getHeaderMap();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        CSVParser.parse((URL) null, charset0, cSVFormat2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'url' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      File file0 = MockFile.createTempFile("%vJXL/", "?fDAFD)RG!=Rcp@s");
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVParser cSVParser0 = CSVParser.parse(file0, charset0, cSVFormat1);
      cSVParser0.getFirstEndOfLine();
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, "Unexpected Token type: ");
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL1, charset0, cSVFormat2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("{Y  ", "{Y  ", 1719, "{Y  ", uRLStreamHandler0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL0, charset0, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.withSystemRecordSeparator();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      cSVFormat1.withTrailingDelimiter(true);
      cSVFormat1.withEscape((Character) null);
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      cSVFormat1.withSystemRecordSeparator();
      cSVFormat1.withTrailingDelimiter();
      cSVFormat0.withHeader(class0);
      Character character0 = new Character('U');
      cSVFormat1.withAllowMissingColumnNames(true);
      cSVFormat0.withCommentMarker(character0);
      cSVFormat1.withNullString("hZDf8");
      // Undeclared exception!
      try { 
        CSVParser.parse((String) null, cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'string' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      File file0 = MockFile.createTempFile("%vJXL/", "?fDAFD)RG!=Rcp@s");
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withFirstRecordAsHeader();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "9d^fhO/");
      CSVFormat cSVFormat1 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat0.withRecordSeparator("%vJXL/");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      CSVParser cSVParser0 = CSVParser.parse(file0, charset0, cSVFormat2);
      cSVParser0.getFirstEndOfLine();
      cSVParser0.isClosed();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('K');
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = cSVFormat1.parse(pipedReader0);
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat0.withQuoteMode(quoteMode0);
      cSVParser0.isClosed();
      cSVParser0.close();
      try { 
        MockURL.URL(";3", ";3", ";3");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: ;3
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      File file0 = MockFile.createTempFile("%vJXL/", "?fDAFD)RG!=Rcp@s");
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat1.withTrim();
      CSVParser cSVParser0 = CSVParser.parse(file0, charset0, cSVFormat1);
      cSVParser0.getFirstEndOfLine();
      cSVParser0.close();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.withTrim(false);
      CSVParser.parse((Reader) pipedReader0, cSVFormat0);
      try { 
        MockURL.URL("", "", (-3317), "path");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid port number :-3317
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString((String) null);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.withIgnoreEmptyLines(false);
      cSVFormat1.withQuote('$');
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat0;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat3, 2461L, 0L);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        MockURL.URL((String) null, (String) null, (-1899), (String) null, uRLStreamHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVParser cSVParser0 = CSVParser.parse("iYn79p':#", cSVFormat1);
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MockFile mockFile0 = new MockFile("~Lo!m;:l06qvW");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      try { 
        CSVParser.parse(path0, charset0, cSVFormat0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      cSVFormat0.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser((Reader) null, cSVFormat3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }
}
