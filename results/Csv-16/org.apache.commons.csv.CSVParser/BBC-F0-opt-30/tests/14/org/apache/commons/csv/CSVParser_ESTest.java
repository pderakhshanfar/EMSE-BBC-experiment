/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 17:41:00 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.file.FileSystemException;
import java.nio.file.NoSuchFileException;
import java.nio.file.Path;
import java.sql.ResultSetMetaData;
import java.util.Enumeration;
import java.util.Map;
import java.util.function.Consumer;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVParser_ESTest extends CSVParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String string0 = "java.io.PipedReader@0000000001,java.io.PipedReader@000?000001,,,org.apace.commons.csv.CSVFormat@0000000002,java.lang.Object@0000000003,java.io.PipedReader@0000000001,java.lang.Object@0000000004";
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      // Undeclared exception!
      try { 
        CSVParser.parse("java.io.PipedReader@0000000001,java.io.PipedReader@000?000001,,,org.apace.commons.csv.CSVFormat@0000000002,java.lang.Object@0000000003,java.io.PipedReader@0000000001,java.lang.Object@0000000004", cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate name: \"java.io.PipedReader@0000000001\" in [java.io.PipedReader@0000000001, java.io.PipedReader@000?000001, , , org.apace.commons.csv.CSVFormat@0000000002, java.lang.Object@0000000003, java.io.PipedReader@0000000001, java.lang.Object@0000000004]
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      String string0 = "java.io.PipedReader@0000000001,java.io.PipedReader@000?000001,,,org.apace.commons.csv.CSVFormat@0000000002,java.lang.Object@0000000003,java.io.PipedReader@0000000001,java.lang.Object@0000000004";
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      // Undeclared exception!
      try { 
        CSVParser.parse("java.io.PipedReader@0000000001,java.io.PipedReader@000?000001,,,org.apace.commons.csv.CSVFormat@0000000002,java.lang.Object@0000000003,java.io.PipedReader@0000000001,java.lang.Object@0000000004", cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate name: \"null\" in [java.io.PipedReader@0000000001, java.io.PipedReader@000?000001, null, null, org.apace.commons.csv.CSVFormat@0000000002, java.lang.Object@0000000003, java.io.PipedReader@0000000001, java.lang.Object@0000000004]
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      // Undeclared exception!
      try { 
        CSVParser.parse("java.io.PipedReader@0000000001,java.io.PipedReader@0000000001,,,org.apache.commons.csv.CSVFormat@0000000002,java.lang.Object@0000000003,java.io.PipedReader@0000000001,java.lang.Object@0000000004", cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate name: \"java.io.PipedReader@0000000001\" in [java.io.PipedReader@0000000001, java.io.PipedReader@0000000001, , , org.apache.commons.csv.CSVFormat@0000000002, java.lang.Object@0000000003, java.io.PipedReader@0000000001, java.lang.Object@0000000004]
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser.parse("N", cSVFormat1);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFile mockFile1 = new MockFile(mockFile0, "N");
      Path path0 = mockFile1.toPath();
      Charset charset0 = Charset.defaultCharset();
      try { 
        CSVParser.parse(path0, charset0, cSVFormat0);
        fail("Expecting exception: FileSystemException");
      
      } catch(FileSystemException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockFile mockFile0 = new MockFile("\"`");
      File file0 = MockFile.createTempFile("org.apache.commons.csv.CSVParser$1", "\"`", (File) mockFile0);
      Charset charset0 = null;
      // Undeclared exception!
      try { 
        CSVParser.parse(file0, (Charset) null, cSVFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException("java.io.InputStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVParser cSVParser0 = CSVParser.parse(" reading next record: ", cSVFormat0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PipedReader pipedReader0 = new PipedReader(1388);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);
      try { 
        CSVParser.parse((Reader) pipedReader0, cSVFormat3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      String[] stringArray0 = new String[8];
      stringArray0[1] = "~Q\"sQpysJ/SYwTC$}(U";
      stringArray0[2] = "<AKEJ65@9a=$Sx.p";
      stringArray0[4] = "uyDMH(2'9,ug8L?";
      stringArray0[5] = "T[EfmMgY";
      stringArray0[6] = "T[EfmMgY";
      stringArray0[7] = "B`tKf\"";
      cSVFormat0.printRecord(pipedWriter0, stringArray0);
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat0);
      cSVParser0.nextRecord();
      CSVParser cSVParser1 = CSVParser.parse("InformixUnloadCsv", cSVFormat0);
      cSVParser0.getCurrentLineNumber();
      assertEquals(1L, cSVParser0.getRecordNumber());
      
      cSVParser1.iterator();
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withFirstRecordAsHeader();
      URL uRL0 = MockURL.getHttpExample();
      Charset charset0 = Charset.defaultCharset();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "K_#6");
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = Character.valueOf('*');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      try { 
        CSVParser.parse("\"ve,", cSVFormat4);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (startline 1) EOF reached before encapsulated token finished
         //
         verifyException("org.apache.commons.csv.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String string0 = "{Q";
      CSVParser cSVParser0 = CSVParser.parse("{Q", cSVFormat0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat0.withIgnoreSurroundingSpaces();
      CSVParser.parse("->a> ct]MKk[&q", cSVFormat1);
      MockFile mockFile0 = new MockFile("{Q");
      mockFile0.toPath();
      mockFile0.mkdir();
      Charset charset0 = Charset.defaultCharset();
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      try { 
        CSVParser.parse((InputStream) pipedInputStream0, charset0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse("~", cSVFormat1);
      cSVParser0.nextRecord();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      CSVParser.parse(path0, charset0, cSVFormat1);
      cSVParser0.getFirstEndOfLine();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.printer();
      cSVFormat0.withTrailingDelimiter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      cSVFormat3.withQuote('r');
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter();
      CSVParser cSVParser0 = CSVParser.parse((InputStream) bufferedInputStream0, charset0, cSVFormat4);
      cSVParser0.close();
      try { 
        MockURL.URL("Cw.Y", "\"r=IXJm1lw,R,(j[", (-94), "\"r=IXJm1lw,R,(j[");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid port number :-94
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat1.withIgnoreSurroundingSpaces();
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat1);
      cSVParser0.nextRecord();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "^3pH&(c,ZJ42H@9";
      pipedWriter0.append((CharSequence) "^3pH&(c,ZJ42H@9");
      stringArray0[1] = "~Q\"sQpysJ/SYwTC$}(U";
      stringArray0[2] = "<AKEJ65@9a=$Sx.p";
      stringArray0[4] = "url";
      stringArray0[5] = "T[EfmMgY";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[6] = "^u]9g(k<N{";
      stringArray0[7] = "B`tKf\"";
      cSVFormat0.printRecord(pipedWriter0, stringArray0);
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat0);
      cSVParser0.nextRecord();
      cSVParser0.getFirstEndOfLine();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "^3pH&(c,ZJ42H@9";
      stringArray0[1] = "~Q\"sQpysJ/SYwTC$}(U";
      stringArray0[2] = "<AKEJ65@9a=$Sx.p";
      stringArray0[4] = "uyDMH(2'9,ug8L?";
      stringArray0[5] = "T[EfmMgY";
      stringArray0[6] = "^u]9g(k<N{";
      stringArray0[7] = "B`tKf\"";
      cSVFormat0.printRecord(pipedWriter0, stringArray0);
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat0);
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Reader reader0 = null;
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser((Reader) null, cSVFormat0, (-1110L), (-1110L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      cSVFormat0.withHeader((String[]) null);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      StringReader stringReader0 = new StringReader("Index for header '%s' is %d but CSVRecord only has %d values!");
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat1, 0L, 0L);
      cSVParser0.nextRecord();
      cSVParser0.getRecords();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('=');
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat3);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0);
      cSVParser0.close();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      try { 
        cSVParser0.nextRecord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      PipedReader pipedReader0 = new PipedReader();
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVParser cSVParser0 = CSVParser.parse("0", cSVFormat1);
      cSVParser0.isClosed();
      cSVParser0.nextRecord();
      InputStream inputStream0 = null;
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        CSVParser.parse((InputStream) null, charset0, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'inputStream' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("b");
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse("b", cSVFormat2);
      cSVParser0.isClosed();
      cSVParser0.nextRecord();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("~0");
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte) (-27);
      byteArray0[4] = (byte)104;
      byteArray0[5] = (byte)110;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Character.valueOf('W');
      String[] stringArray0 = new String[2];
      stringArray0[0] = "~0";
      stringArray0[1] = "^3pH&K(c,ZJ42H@9";
      cSVFormat0.withHeader(stringArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        CSVParser.parse((File) null, charset0, cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-108);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), (-406));
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      Charset charset0 = Charset.defaultCharset();
      CSVParser cSVParser0 = CSVParser.parse((InputStream) bufferedInputStream0, charset0, cSVFormat0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      MockFile mockFile0 = new MockFile("");
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = CSVFormat.POSTGRESQL_TEXT;
      Character.valueOf('W');
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('W');
      CSVParser cSVParser0 = CSVParser.parse("~0", cSVFormat1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Character.valueOf('');
      String[] stringArray0 = new String[2];
      stringArray0[0] = "~0";
      stringArray0[1] = "G$d%Q|V";
      cSVFormat2.withHeader(stringArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVParser cSVParser1 = new CSVParser(pipedReader0, cSVFormat1, 2546L, 0L);
      cSVParser0.getHeaderMap();
      cSVParser0.getRecordNumber();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        Charset.forName("~0");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ~0
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVParser cSVParser0 = CSVParser.parse("@zj", cSVFormat0);
      cSVParser0.close();
      MockFile mockFile0 = new MockFile("@zj");
      mockFile0.toPath();
      mockFile0.toPath();
      cSVParser0.isClosed();
      try { 
        cSVParser0.nextRecord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.withNullString("0");
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVParser0.forEach((Consumer<? super CSVRecord>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("~0");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte) (-27);
      byteArray0[5] = (byte)2;
      byteArray0[5] = (byte)110;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Character.valueOf('W');
      String[] stringArray0 = new String[2];
      stringArray0[0] = "~0";
      stringArray0[1] = "^3pH&(c,ZJ42H@9";
      cSVFormat0.withHeader(stringArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = CSVParser.parse("^3pH&(c,ZJ42H@9", cSVFormat1);
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.withNullString("~0");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte) (-27);
      byteArray0[4] = (byte)104;
      byteArray0[5] = (byte)110;
      String string0 = ":tN1K`;";
      StringReader stringReader0 = new StringReader(":tN1K`;");
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat1, (byte) (-27), 256L);
      CSVParser cSVParser1 = new CSVParser(stringReader0, cSVFormat0, (byte)104, (byte)6);
      cSVParser1.nextRecord();
      cSVParser0.getRecords();
      cSVParser0.getHeaderMap();
      MockFile mockFile0 = new MockFile("~0", "~0");
      mockFile0.toPath();
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "~0";
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      Character character0 = Character.valueOf('W');
      cSVFormat0.withEscape(character0);
      CSVParser cSVParser0 = CSVParser.parse("~0", cSVFormat1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      MockFile mockFile0 = new MockFile("");
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.withIgnoreSurroundingSpaces();
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVParser cSVParser0 = CSVParser.parse("b", cSVFormat1);
      cSVParser0.getHeaderMap();
      cSVParser0.getFirstEndOfLine();
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVParser0.nextRecord();
      cSVParser0.nextRecord();
      cSVParser0.getFirstEndOfLine();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "~0";
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat1, (-374L), (-374L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cSVParser0.forEach(consumer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // IOException reading next record: java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("~0");
      Character.valueOf('W');
      cSVFormat1.withDelimiter('W');
      CSVParser cSVParser0 = CSVParser.parse("~0", cSVFormat1);
      StringReader stringReader0 = new StringReader("Excel");
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      cSVFormat2.withQuoteMode(quoteMode0);
      CSVParser cSVParser1 = CSVParser.parse("0Cib#eloj`+EHflPxW", cSVFormat1);
      cSVParser1.isClosed();
      cSVParser0.nextRecord();
      cSVParser0.getFirstEndOfLine();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("~0");
      Character.valueOf('W');
      cSVFormat1.withDelimiter('W');
      CSVParser cSVParser0 = CSVParser.parse("~0", cSVFormat1);
      StringReader stringReader0 = new StringReader("Excel");
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      CSVParser cSVParser1 = new CSVParser(stringReader0, cSVFormat2, (-1L), (-1L));
      cSVParser1.nextRecord();
      cSVParser1.getRecords();
      assertEquals((-1L), cSVParser1.getRecordNumber());
      
      cSVParser0.getHeaderMap();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.newFormat('}');
      CSVParser cSVParser0 = CSVParser.parse("@zj", cSVFormat1);
      cSVParser0.nextRecord();
      String string0 = "_2_ f^i5Ii*jpd<}g7o";
      MockFile mockFile0 = new MockFile("@zj", "_2_ f^i5Ii*jpd<}g7o");
      mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      Path path0 = mockFile0.toPath();
      try { 
        CSVParser.parse(path0, charset0, cSVFormat0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      cSVFormat0.withSkipHeaderRecord(false);
      StringReader stringReader0 = new StringReader("Excel");
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat1, 0L, 0L);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        CSVParser.parse((InputStream) dataInputStream0, (Charset) null, cSVFormat1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException("java.io.InputStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      cSVFormat0.withRecordSeparator('n');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1);
      pipedReader0.close();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.withQuote('t');
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0, 0L, 0L);
      long long0 = new Character('t');
      try { 
        CSVParser.parse((Reader) pipedReader0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe closed
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "^3pH&(c,ZJ42H@9";
      stringArray0[1] = "~Q\"sQpysJ/SYwTC$}(U";
      stringArray0[2] = "<AKEJ65@9a=$Sx.p";
      stringArray0[4] = "uyDMH(2'9,ug8L?";
      stringArray0[5] = "org.apache.commons.csv.CSVParser$2";
      stringArray0[6] = "^u]9g(k<N{";
      stringArray0[7] = "B`tKf\"";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      cSVFormat1.printRecord(pipedWriter0, stringArray0);
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat1);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      cSVFormat0.withSkipHeaderRecord(false);
      StringReader stringReader0 = new StringReader("Excel");
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat1, (-1134L), 1035L);
      cSVParser0.nextRecord();
      assertEquals(1035L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String string0 = "@zj";
      CSVFormat cSVFormat1 = CSVFormat.newFormat('}');
      CSVParser cSVParser0 = CSVParser.parse("@zj", cSVFormat1);
      cSVParser0.close();
      MockFile mockFile0 = new MockFile("'{sT", "@zj");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      mockFile0.toPath();
      try { 
        CSVParser.parse(path0, charset0, cSVFormat0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      URL uRL0 = MockURL.getFileExample();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String string0 = "@zj";
      CSVFormat cSVFormat1 = CSVFormat.newFormat('}');
      CSVParser cSVParser0 = CSVParser.parse("@zj", cSVFormat1);
      cSVParser0.close();
      try { 
        cSVParser0.nextRecord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "^3pH&(c,ZJ42H@9";
      stringArray0[1] = "~Q\"sQpysJ/SYwTC$}(U";
      stringArray0[2] = "^3pH&(c,ZJ42H@9";
      cSVFormat0.printRecord(pipedWriter0, stringArray0);
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat0);
      cSVParser0.nextRecord();
      MockFile mockFile0 = new MockFile("c", "lngKRY\"@m0");
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      try { 
        CSVParser.parse(path0, (Charset) null, cSVFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("0");
      cSVFormat1.withQuote('W');
      Character.valueOf('W');
      PipedReader pipedReader0 = new PipedReader();
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVParser cSVParser0 = CSVParser.parse("0", cSVFormat2);
      cSVParser0.isClosed();
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = "~0";
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("~0");
      Character character0 = Character.valueOf('W');
      cSVFormat0.withEscape(character0);
      CSVParser cSVParser0 = CSVParser.parse("~0", cSVFormat1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      MockFile mockFile0 = new MockFile("");
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      PipedReader pipedReader0 = new PipedReader();
      Charset charset0 = Charset.defaultCharset();
      String string0 = "L";
      ByteBuffer byteBuffer0 = charset0.encode("L");
      charset0.decode(byteBuffer0);
      charset0.aliases();
      Charset charset1 = Charset.defaultCharset();
      MockFile mockFile0 = new MockFile("org.apache.commons.csv.CSVParser$1", "org.apache.commons.csv.CSVParser$1");
      try { 
        CSVParser.parse((File) mockFile0, charset1, cSVFormat0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      cSVFormat0.withSystemRecordSeparator();
      boolean boolean0 = true;
      cSVFormat1.withIgnoreEmptyLines(true);
      PipedReader pipedReader0 = new PipedReader(119);
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat2);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      // Undeclared exception!
      try { 
        CSVParser.parse((URL) null, charset0, cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'url' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      Character character0 = new Character(',');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('L');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      pipedReader0.close();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat4 = cSVFormat3.withQuote(',');
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat4, (-670L), 0L);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = "MF\"YG4@9FV>kQ}f=Z";
      CSVFormat cSVFormat0 = null;
      // Undeclared exception!
      try { 
        CSVParser.parse("MF\"YG4@9FV>kQ}f=Z", (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = null;
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(pipedReader0, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat1.withSkipHeaderRecord();
      cSVFormat0.withDelimiter('I');
      cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      cSVFormat2.withSystemRecordSeparator();
      cSVFormat2.withIgnoreEmptyLines(true);
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser((Reader) null, cSVFormat2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      StringReader stringReader0 = new StringReader("Excel");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0, 314L, 2171L);
      cSVParser0.getRecords();
      // Undeclared exception!
      try { 
        CSVParser.parse((Path) null, charset0, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'path' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.withNullString("~0");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte) (-27);
      byteArray0[4] = (byte)104;
      byteArray0[5] = (byte)110;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Character.valueOf('W');
      String[] stringArray0 = new String[2];
      stringArray0[0] = "~0";
      stringArray0[1] = "^3pH&(c,ZJ42H@9";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader((byte)104);
      PipedWriter pipedWriter1 = new PipedWriter(pipedReader0);
      PipedReader pipedReader1 = new PipedReader();
      CSVParser cSVParser0 = new CSVParser(pipedReader1, cSVFormat1, 0L, (-309L));
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertEquals((-310L), cSVParser0.getRecordNumber());
      assertNotNull(map0);
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "^3pH&(c,ZJ42H@9";
      stringArray0[1] = "~Q\"sQpysJ/SYwTC$}(U";
      stringArray0[2] = "<AKEJ65@9a=$Sx.p";
      stringArray0[3] = "T[EfmMgY";
      stringArray0[4] = "uyDMH(2'9,ug8L?";
      stringArray0[5] = "org.apache.commons.csv.CSVParser$2";
      stringArray0[6] = "^u]9g(k<N{";
      stringArray0[7] = "B`tKf\"";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat1);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse(", mapping=", cSVFormat1);
      cSVParser0.nextRecord();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      Character character0 = new Character(',');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('b');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      pipedReader0.close();
      cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.withQuote(',');
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat1, 0L, (-962L));
      cSVParser0.getRecordNumber();
      CSVParser.parse((Reader) pipedReader0, cSVFormat2);
      cSVParser0.isClosed();
      try { 
        cSVParser0.getRecords();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("~0");
      Character.valueOf('W');
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('W');
      CSVParser cSVParser0 = CSVParser.parse("~0", cSVFormat1);
      StringReader stringReader0 = new StringReader("~0");
      CSVFormat cSVFormat3 = CSVFormat.RFC4180;
      CSVParser cSVParser1 = new CSVParser(stringReader0, cSVFormat3, (-1L), (-1L));
      CSVParser cSVParser2 = new CSVParser(stringReader0, cSVFormat2, (-804L), (-804L));
      cSVParser2.nextRecord();
      cSVParser2.iterator();
      cSVParser0.getCurrentLineNumber();
      cSVParser2.iterator();
      cSVParser2.nextRecord();
      assertEquals((-804L), cSVParser2.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      try { 
        cSVParser0.nextRecord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = "{Bm\"LO8'T3";
      File file0 = MockFile.createTempFile("{Bm\"LO8'T3", "{Bm\"LO8'T3");
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) null);
      charset0.encode("{Bm\"LO8'T3");
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('w');
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);
      CSVParser cSVParser0 = CSVParser.parse(file0, charset0, cSVFormat3);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      cSVParser0.getRecords();
      cSVParser0.getHeaderMap();
      String string1 = "";
      MockFile mockFile0 = new MockFile(file0, "");
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "", 946, 946);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = "{Bm\"LO8'T3";
      File file0 = MockFile.createTempFile("{Bm\"LO8'T3", "{Bm\"LO8'T3");
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) null);
      charset0.encode("{Bm\"LO8'T3");
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('w');
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);
      CSVParser cSVParser0 = CSVParser.parse(file0, charset0, cSVFormat3);
      cSVParser0.getRecords();
      cSVParser0.getHeaderMap();
      String string1 = "";
      MockFile mockFile0 = new MockFile(file0, "");
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "", 946, 946);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      // Undeclared exception!
      try { 
        CSVParser.parse((Reader) null, cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }
}
