/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 04:29:10 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.nio.file.NoSuchFileException;
import java.nio.file.Path;
import java.sql.ResultSetMetaData;
import java.util.Enumeration;
import java.util.Locale;
import java.util.function.Consumer;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import sun.nio.cs.US_ASCII;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVParser_ESTest extends CSVParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      pipedWriter0.write(" reading next record: ");
      cSVFormat0.println(pipedWriter0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0, 0L, (-2767L));
      cSVParser0.nextRecord();
      MockFile mockFile0 = new MockFile("inputStream");
      mockFile0.toPath();
      // Undeclared exception!
      try { 
        Charset.forName("inputStream");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // inputStream
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('I');
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat3, (-2219L), (-2219L));
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("s");
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat2, (-391L), 2786L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.nextRecord();
      cSVParser0.forEach(consumer0);
      cSVParser0.nextRecord();
      assertEquals(2786L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("s");
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat2, (-391L), 2786L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      cSVParser0.nextRecord();
      assertEquals(2786L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "O:2MV4Ks{P0MwUr|");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      try { 
        CSVParser.parse("oGGK&I%MB>PQb\"", cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // EOF whilst processing escape sequence
         //
         verifyException("org.apache.commons.csv.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cSVParser0.forEach(consumer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // IOException reading next record: java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Y.C&nJ pQ^W5m)vFF");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVParser.parse("Y.C&nJ pQ^W5m)vFF", cSVFormat1);
      File file0 = MockFile.createTempFile("The header contains a duplicate name: \"", "Y.C&nJ pQ^W5m)vFF");
      Charset charset0 = null;
      // Undeclared exception!
      try { 
        CSVParser.parse(file0, (Charset) null, cSVFormat1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException("java.io.InputStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      stringReader0.mark(689);
      CSVFormat cSVFormat1 = CSVFormat.POSTGRESQL_CSV;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 689);
      Charset charset0 = Charset.defaultCharset();
      bufferedInputStream0.available();
      try { 
        CSVParser.parse((InputStream) bufferedInputStream0, charset0, cSVFormat2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat0 = CSVFormat.valueOf("InformixUnload");
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      CSVFormat cSVFormat4 = cSVFormat3.withTrim(true);
      CSVParser cSVParser0 = CSVParser.parse("InformixUnload", cSVFormat4);
      cSVParser0.nextRecord();
      MockFile mockFile0 = new MockFile("G%|tLf,E}");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      try { 
        CSVParser.parse(path0, charset0, cSVFormat3);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":");
      stringReader0.mark(689);
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      cSVFormat0.println(pipedWriter0);
      cSVFormat1.withRecordSeparator('n');
      cSVFormat0.printer();
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat1);
      cSVParser0.getFirstEndOfLine();
      long long0 = cSVParser0.getCurrentLineNumber();
      assertEquals(0L, cSVParser0.getRecordNumber());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":");
      StringReader stringReader1 = new StringReader("");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl1);
      CSVParser cSVParser0 = new CSVParser(stringReader1, cSVFormat1);
      CSVParser.parse((Reader) stringReader0, cSVFormat1);
      cSVParser0.getHeaderMap();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("Q+3#xit<");
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat1);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      CSVParser.parse((Reader) stringReader0, cSVFormat2);
      String string0 = "TDF";
      try { 
        MockURI.URI("string", "string", "string", "TDF", "string");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: string://stringstring?TDF#string
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      StringReader stringReader0 = new StringReader("Q+3#xit<");
      CSVParser cSVParser0 = CSVParser.parse("G%|tLf,E}", cSVFormat1);
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("CN?5X`YmJRSIY");
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      stringReader0.mark(689);
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\'');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "CN?5X`YmJRSIY");
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(689);
      charArrayWriter0.close();
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) charArrayWriter0;
      PipedReader pipedReader0 = new PipedReader(1900);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      cSVFormat0.println(pipedWriter0);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('\'');
      cSVFormat3.printer();
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat2);
      cSVParser0.getFirstEndOfLine();
      try { 
        MockURI.URI("string", (String) null, "Unexpected Quote value: ", 689, "V:'j", "V:'j", (String) null);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: string://[Unexpected Quote value: ]:689V:'j?V:'j
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringReader stringReader0 = new StringReader("v/_|");
      CSVParser.parse((Reader) stringReader0, cSVFormat0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      CSVParser cSVParser0 = CSVParser.parse("v/_|", cSVFormat0);
      cSVParser0.nextRecord();
      pipedOutputStream0.close();
      CSVParser cSVParser1 = new CSVParser(stringReader0, cSVFormat0);
      // Undeclared exception!
      try { 
        CSVParser.parse((InputStream) pipedInputStream0, (Charset) null, cSVFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException("java.io.InputStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      pipedReader0.markSupported();
      StringReader stringReader0 = new StringReader("' must not be null!");
      stringReader0.mark(3);
      CSVFormat cSVFormat1 = CSVFormat.POSTGRESQL_CSV;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      PipedReader pipedReader1 = new PipedReader(1900);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      cSVFormat1.println(pipedWriter0);
      cSVFormat0.withRecordSeparator('p');
      cSVFormat1.printer();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      // Undeclared exception!
      try { 
        CSVParser.parse((Reader) pipedReader0, cSVFormat3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      stringReader0.mark(689);
      CSVFormat cSVFormat1 = CSVFormat.POSTGRESQL_CSV;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      PipedReader pipedReader0 = new PipedReader(1900);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      cSVFormat1.println(pipedWriter0);
      cSVFormat2.withRecordSeparator('n');
      cSVFormat1.printer();
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat2);
      CSVParser cSVParser1 = CSVParser.parse((Reader) stringReader0, cSVFormat1);
      cSVParser1.nextRecord();
      assertEquals(1L, cSVParser1.getRecordNumber());
      
      CSVFormat cSVFormat3 = CSVFormat.POSTGRESQL_CSV;
      CSVParser cSVParser2 = CSVParser.parse((Reader) pipedReader0, cSVFormat3);
      cSVParser0.getHeaderMap();
      cSVParser2.getCurrentLineNumber();
      assertEquals(0L, cSVParser2.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      CSVFormat cSVFormat4 = cSVFormat3.withQuote('N');
      cSVFormat4.printer();
      StringReader stringReader0 = new StringReader("Q+3##xt<");
      CSVParser.parse((Reader) stringReader0, cSVFormat2);
      CSVParser.parse((Reader) pipedReader0, cSVFormat3);
      CSVParser cSVParser0 = CSVParser.parse((Reader) stringReader0, cSVFormat2);
      cSVParser0.close();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      stringReader0.mark(689);
      CSVFormat cSVFormat1 = CSVFormat.POSTGRESQL_CSV;
      Character character0 = Character.valueOf('@');
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker(character0);
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat2, 689, 689);
      cSVParser0.getHeaderMap();
      CSVFormat cSVFormat3 = CSVFormat.RFC4180;
      cSVFormat0.printer();
      StringReader stringReader1 = new StringReader(":");
      Character character1 = new Character('`');
      CSVFormat cSVFormat4 = cSVFormat1.withCommentMarker(character1);
      CSVParser cSVParser1 = CSVParser.parse((Reader) stringReader1, cSVFormat4);
      MockFile mockFile0 = new MockFile("YOt,-#G>(md0");
      mockFile0.toPath();
      cSVParser0.nextRecord();
      assertEquals(689L, cSVParser0.getRecordNumber());
      
      cSVParser1.close();
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile("PostgreSQLCsv", "PostgreSQLCsv");
      Path path0 = mockFile0.toPath();
      Charset charset0 = null;
      CSVFormat cSVFormat0 = null;
      // Undeclared exception!
      try { 
        CSVParser.parse(path0, (Charset) null, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("CN?5X`YmJRSIY");
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("CN?5X`YmJRSIY");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.printer();
      CSVParser.parse((Reader) stringReader0, cSVFormat0);
      StringReader stringReader1 = new StringReader("0ez#J,O%su4g");
      CSVParser cSVParser0 = CSVParser.parse((Reader) stringReader1, cSVFormat2);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("CN?5XCYmJgSIY");
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("CN?5XCYmJgSIY");
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) stringReader0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) cSVFormat0;
      cSVFormat1.withHeaderComments(objectArray0);
      CSVParser cSVParser0 = CSVParser.parse(" IgnoreHeaderCase:ignored", cSVFormat1);
      cSVParser0.isClosed();
      cSVParser0.getRecordNumber();
      PipedReader pipedReader0 = new PipedReader();
      StringReader stringReader1 = new StringReader(" IgnoreHeaderCase:ignored");
      CSVParser cSVParser1 = CSVParser.parse((Reader) stringReader1, cSVFormat0);
      cSVParser1.getRecords();
      assertEquals(1L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("Sv/[6an-JH/S");
      CSVFormat.newFormat('(');
      MockPrintStream mockPrintStream0 = new MockPrintStream("Sv/[6an-JH/S");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Locale locale0 = Locale.JAPANESE;
      locale0.getDisplayScript();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) "Sv/[6an-JH/S";
      MockPrintStream mockPrintStream1 = (MockPrintStream)mockPrintStream0.format(locale0, "Sv/[6an-JH/S", objectArray0);
      mockPrintStream1.append('b');
      cSVFormat0.print((Appendable) mockPrintStream1);
      Object[] objectArray1 = new Object[0];
      cSVFormat0.withHeaderComments(objectArray1);
      CSVParser.parse("Sv/[6an-JH/S", cSVFormat0);
      cSVFormat1.withFirstRecordAsHeader();
      String string0 = "No quotes mode set but no escape character is set";
      US_ASCII uS_ASCII0 = (US_ASCII)Charset.defaultCharset();
      CSVParser.parse("No quotes mode set but no escape character is set", cSVFormat1);
      // Undeclared exception!
      try { 
        CSVParser.parse((URL) null, (Charset) uS_ASCII0, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'url' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("CN?5X`YmJRSIY");
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      stringReader0.mark(689);
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\'');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "CN?5X`YmJRSIY");
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(689);
      Object[] objectArray0 = new Object[7];
      objectArray0[3] = (Object) charArrayWriter0;
      objectArray0[1] = (Object) charArrayWriter0;
      PipedReader pipedReader0 = new PipedReader(1900);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      cSVFormat0.println(pipedWriter0);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('\'');
      cSVFormat3.printer();
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat2);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("CN?5X`YmJRSIY");
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      stringReader0.mark(689);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("CN?5X`YmJRSIY");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(689);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat2);
      cSVFormat0.printer();
      CSVParser.parse((Reader) stringReader0, cSVFormat0);
      StringReader stringReader1 = new StringReader("0ez#J,O%su4g");
      CSVParser cSVParser1 = CSVParser.parse((Reader) stringReader1, cSVFormat2);
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      stringReader0.mark(689);
      CSVFormat cSVFormat1 = CSVFormat.POSTGRESQL_CSV;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVParser cSVParser0 = CSVParser.parse((Reader) stringReader0, cSVFormat0);
      cSVParser0.nextRecord();
      CSVFormat cSVFormat3 = CSVFormat.POSTGRESQL_CSV;
      CSVParser cSVParser1 = CSVParser.parse((Reader) stringReader0, cSVFormat0);
      cSVParser1.getHeaderMap();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        CSVParser.parse((InputStream) null, charset0, cSVFormat2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'inputStream' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("CN?5X`YmJRSIY");
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      stringReader0.mark(689);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("CN?5X`YmJRSIY");
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      Charset charset0 = Charset.defaultCharset();
      CSVParser.parse((InputStream) dataInputStream0, charset0, cSVFormat1);
      CSVFormat cSVFormat2 = cSVFormat0.withEscape('a');
      CSVParser cSVParser0 = CSVParser.parse((Reader) stringReader0, cSVFormat2);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = null;
      // Undeclared exception!
      try { 
        CSVParser.parse((InputStream) dataInputStream0, charset0, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      cSVFormat1.format(objectArray0);
      URI uRI0 = MockURI.aFTPURI;
      StringReader stringReader0 = new StringReader("");
      CSVParser.parse((Reader) stringReader0, cSVFormat1);
      MockFile mockFile0 = new MockFile("eX1Qmn", "");
      MockFile mockFile1 = new MockFile(mockFile0, "eX1Qmn");
      // Undeclared exception!
      try { 
        Charset.forName("JK9@$/;P8A1Zv");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // JK9@$/;P8A1Zv
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat.newFormat('(');
      MockPrintStream mockPrintStream0 = new MockPrintStream("Sv/[6an-JH/S");
      Locale locale0 = Locale.JAPANESE;
      locale0.getDisplayScript();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) "Sv/[6an-JH/S";
      mockPrintStream0.format(locale0, "Sv/[6an-JH/S", objectArray0);
      cSVFormat1.printer();
      PipedReader pipedReader0 = new PipedReader(5);
      try { 
        CSVParser.parse((Reader) pipedReader0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("CN?5X`YmJRSIY");
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      stringReader0.mark(689);
      char char0 = '\'';
      cSVFormat0.withNullString("crb~ _>$w");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(689);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);
      mockPrintWriter0.printf("", (Object[]) null);
      cSVFormat1.println(mockPrintWriter0);
      PipedReader pipedReader0 = new PipedReader(2052);
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withRecordSeparator("Sv/[6an-JH/S");
      CSVFormat.newFormat('(');
      MockPrintStream mockPrintStream0 = new MockPrintStream("Sv/[6an-JH/S");
      Locale locale0 = Locale.JAPANESE;
      locale0.getDisplayScript();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) "Sv/[6an-JH/S";
      PrintStream printStream0 = mockPrintStream0.format(locale0, "Sv/[6an-JH/S", objectArray0);
      cSVFormat0.print((Appendable) printStream0);
      Object[] objectArray1 = new Object[0];
      cSVFormat0.withHeaderComments(objectArray1);
      CSVParser cSVParser0 = CSVParser.parse("Sv/[6an-JH/S", cSVFormat0);
      cSVParser0.isClosed();
      cSVParser0.getRecordNumber();
      PipedReader pipedReader0 = new PipedReader();
      CSVParser.parse((Reader) pipedReader0, cSVFormat0);
      cSVParser0.getRecords();
      cSVParser0.getRecords();
      cSVParser0.getRecordNumber();
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("CN?5X`YmJRSIY");
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      stringReader0.mark(689);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("CN?5X`YmJRSIY");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(689);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);
      mockPrintWriter0.printf("", (Object[]) null);
      cSVFormat1.println(charArrayWriter0);
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat2);
      cSVFormat2.printer();
      CSVParser cSVParser1 = CSVParser.parse((Reader) stringReader0, cSVFormat1);
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("CN?5X`YmJRSIY");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('q');
      MockPrintStream mockPrintStream0 = new MockPrintStream("CN?5X`YmJRSIY");
      Locale locale0 = Locale.JAPANESE;
      locale0.getDisplayScript();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) cSVFormat0;
      Object object2 = new Object();
      objectArray0[4] = object2;
      objectArray0[5] = (Object) cSVFormat0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "'TIhfx2W-@b!.7}3HZQ", objectArray0);
      cSVFormat0.print((Appendable) printStream0);
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVParser cSVParser0 = CSVParser.parse("CN?5X`YmJRSIY", cSVFormat1);
      cSVParser0.isClosed();
      URI uRI0 = MockURI.aHttpURI;
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      URL uRL0 = MockURI.toURL(uRI1);
      Charset charset0 = Charset.defaultCharset();
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: foo.bar
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.printer();
      CSVParser.parse((Reader) pipedReader0, cSVFormat0);
      // Undeclared exception!
      try { 
        CSVParser.parse((String) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'string' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withRecordSeparator("Sv/[6an-JH/S");
      CSVFormat cSVFormat1 = CSVFormat.newFormat('(');
      MockPrintStream mockPrintStream0 = new MockPrintStream("Sv/[6an-JH/S");
      Locale locale0 = Locale.JAPANESE;
      locale0.getDisplayScript();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) "Sv/[6an-JH/S";
      PrintStream printStream0 = mockPrintStream0.format(locale0, "Sv/[6an-JH/S", objectArray0);
      cSVFormat0.print((Appendable) printStream0);
      Object[] objectArray1 = new Object[0];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Sv/[6an-JH/S");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      cSVFormat1.withNullString("Sv/[6an-JH/S");
      CSVParser cSVParser0 = CSVParser.parse("Sv/[6an-JH/S", cSVFormat0);
      cSVParser0.isClosed();
      cSVParser0.getRecordNumber();
      PipedReader pipedReader0 = new PipedReader();
      CSVParser.parse((Reader) pipedReader0, cSVFormat0);
      cSVParser0.getRecords();
      cSVParser0.getRecords();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withRecordSeparator("Sv/[6an-JH/S");
      CSVFormat.newFormat('(');
      MockPrintStream mockPrintStream0 = new MockPrintStream("Sv/[6an-JH/S");
      Locale locale0 = Locale.JAPANESE;
      locale0.getDisplayScript();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) "Sv/[6an-JH/S";
      PrintStream printStream0 = mockPrintStream0.format(locale0, "Sv/[6an-JH/S", objectArray0);
      cSVFormat0.print((Appendable) printStream0);
      Object[] objectArray1 = new Object[0];
      cSVFormat0.withHeaderComments(objectArray1);
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat0);
      cSVParser0.getFirstEndOfLine();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      String string0 = "path";
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator("path");
      // Undeclared exception!
      try { 
        CSVParser.parse((Reader) null, cSVFormat4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("CN?5X`YmJRSIY");
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      stringReader0.mark(689);
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\'');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(689);
      MockPrintStream mockPrintStream0 = new MockPrintStream("CN?5X`YmJRSIY");
      PrintStream printStream0 = mockPrintStream0.append('\'');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Locale locale0 = Locale.forLanguageTag("SkhYkC(2");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockPrintStream0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "Unexpected Quote value: ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      mockPrintWriter0.printf("", objectArray0);
      cSVFormat2.println(mockPrintWriter1);
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat1);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVParser cSVParser1 = cSVFormat3.parse(stringReader0);
      cSVParser1.nextRecord();
      cSVParser1.close();
      cSVParser1.isClosed();
      try { 
        cSVParser1.nextRecord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("CN?5X`YmJRSIY");
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      stringReader0.mark(689);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(689);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) charArrayWriter0;
      objectArray0[1] = (Object) charArrayWriter0;
      objectArray0[2] = (Object) stringReader0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) "CN?5X`YmJRSIY";
      objectArray0[6] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      cSVFormat0.println(printWriter0);
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat1);
      assertEquals(0L, cSVParser0.getRecordNumber());
      
      CSVParser cSVParser1 = new CSVParser(stringReader0, cSVFormat0, 689, 689);
      cSVParser1.nextRecord();
      cSVParser1.close();
      assertEquals(688L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("CN?5X`YmJRSIY");
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      stringReader0.mark(689);
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\'');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(689);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);
      charArrayWriter0.reset();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) charArrayWriter0;
      objectArray0[1] = (Object) charArrayWriter0;
      objectArray0[2] = (Object) stringReader0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[5] = (Object) "CN?5X`YmJRSIY";
      objectArray0[6] = (Object) "_";
      PrintWriter printWriter0 = mockPrintWriter0.printf("_", objectArray0);
      printWriter0.printf("EOF whilst processing escape sequence", objectArray0);
      cSVFormat1.println(printWriter0);
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat2);
      cSVParser0.nextRecord();
      cSVParser0.close();
      cSVParser0.iterator();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockFile mockFile0 = new MockFile(">'%eOX\"W.H}e9fj*", ")PM&qYiBP{");
      File file0 = MockFile.createTempFile("6DamP[{mU#KRVb_HI&N", "++];i]5by", (File) mockFile0);
      MockFile mockFile1 = new MockFile(mockFile0, "qxtU_*EMIQ4$");
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat1 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat1.withEscape('[');
      cSVFormat1.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse(file0, charset0, cSVFormat1);
      cSVParser0.nextRecord();
      cSVParser0.close();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("CN?5X`YmJRSIY");
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      stringReader0.mark(689);
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\'');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(689);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);
      Object[] objectArray0 = new Object[7];
      mockPrintWriter0.printf("810f\u0004]+C6:", objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("810f\u0004]+C6:");
      cSVFormat3.println(mockPrintWriter0);
      CSVFormat cSVFormat4 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat4);
      cSVParser0.nextRecord();
      cSVParser0.close();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("Sv/[6an-JH/S");
      CSVFormat.newFormat('(');
      MockPrintStream mockPrintStream0 = new MockPrintStream("Sv/[6an-JH/S");
      Locale locale0 = Locale.JAPANESE;
      locale0.getDisplayScript();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) "Sv/[6an-JH/S";
      PrintStream printStream0 = mockPrintStream0.format(locale0, "Sv/[6an-JH/S", objectArray0);
      cSVFormat0.print((Appendable) printStream0);
      Object[] objectArray1 = new Object[0];
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      mockPrintWriter0.printf("", objectArray1);
      cSVFormat1.println(mockPrintStream0);
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0);
      try { 
        cSVParser0.nextRecord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("CN?5X`YmJRSIY");
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      stringReader0.mark(689);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("CN?5X`YmJRSIY");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(689);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat1);
      cSVParser0.getHeaderMap();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) rowSetMetaDataImpl0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) charArrayWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf("Unexpected Token type: ", objectArray0);
      cSVFormat2.println(charArrayWriter0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVParser cSVParser1 = null;
      try {
        cSVParser1 = new CSVParser(stringReader0, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'TIhfx2W-@b!.7}3HZQ");
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      cSVFormat2.withEscape('G');
      Character character0 = new Character('g');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('j');
      cSVFormat2.withAllowMissingColumnNames();
      cSVFormat2.withIgnoreSurroundingSpaces(false);
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat4, 0L, 0L);
      cSVParser0.isClosed();
      cSVParser0.getRecordNumber();
      cSVParser0.getRecords();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      boolean boolean0 = true;
      cSVFormat0.withNullString((String) null);
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
      CSVFormat cSVFormat3 = cSVFormat2.withSystemRecordSeparator();
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat3.withHeader(class0);
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser((Reader) null, cSVFormat3, (-2333L), 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withRecordSeparator("Sv/[6an-JH/S");
      CSVFormat.newFormat('(');
      MockPrintStream mockPrintStream0 = new MockPrintStream("Sv/[6an-JH/S");
      Locale locale0 = Locale.JAPANESE;
      locale0.getDisplayScript();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) "Sv/[6an-JH/S";
      PrintStream printStream0 = mockPrintStream0.format(locale0, "Sv/[6an-JH/S", objectArray0);
      cSVFormat0.print((Appendable) printStream0);
      Object[] objectArray1 = new Object[0];
      cSVFormat0.withHeaderComments(objectArray1);
      CSVParser cSVParser0 = CSVParser.parse("Sv/[6an-JH/S", cSVFormat0);
      cSVParser0.getHeaderMap();
      cSVParser0.close();
      URI uRI0 = MockURI.aFTPURI;
      String string0 = null;
      // Undeclared exception!
      try { 
        MockURI.resolve(uRI0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      cSVFormat1.withTrim();
      cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker((Character) null);
      cSVFormat3.toString();
      // Undeclared exception!
      try { 
        CSVParser.parse((File) null, charset0, cSVFormat3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = "rS];iA_C||83VJ";
      MockFile mockFile0 = new MockFile("J'i^ qVp`s=", "rS];iA_C||83VJ");
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      MockFile.createTempFile("=2@YPnsGco6\"=J<(*", "rS];iA_C||83VJ");
      boolean boolean0 = false;
      mockFile0.setExecutable(false);
      try { 
        CSVParser.parse((File) mockFile0, charset0, cSVFormat0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.withEscape('Q');
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('{');
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockFile mockFile0 = new MockFile("D");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      try { 
        CSVParser.parse(path0, charset0, cSVFormat0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader("CN?5X`YmJRSIY");
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      stringReader0.mark(689);
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\'');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(689);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) charArrayWriter0;
      objectArray0[1] = (Object) charArrayWriter0;
      objectArray0[2] = (Object) stringReader0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) "CN?5X`YmJRSIY";
      objectArray0[6] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      cSVFormat1.println(printWriter0);
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat2);
      cSVParser0.nextRecord();
      cSVParser0.close();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('p');
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      CSVFormat.newFormat('^');
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(false);
      CSVParser cSVParser0 = CSVParser.parse(path0, charset0, cSVFormat4);
      cSVParser0.getCurrentLineNumber();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockFile mockFile0 = new MockFile("\"Mr@(s0_Hp7[RHyh");
      File file0 = MockFile.createTempFile("~X(=]maq*UL*D%m5#", "~X(=]maq*UL*D%m5#", (File) mockFile0);
      MockFile mockFile1 = new MockFile(file0, "");
      Path path0 = mockFile1.toPath();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Character character0 = new Character('2');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("Cw");
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);
      // Undeclared exception!
      try { 
        CSVParser.parse(path0, (Charset) null, cSVFormat3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("The quoteChar cannot be a line break");
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat1);
      cSVParser0.isClosed();
      cSVFormat0.printer();
      cSVParser0.getRecordNumber();
      CSVParser.parse((Reader) pipedReader0, cSVFormat0);
      try { 
        cSVParser0.getRecords();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }
}
