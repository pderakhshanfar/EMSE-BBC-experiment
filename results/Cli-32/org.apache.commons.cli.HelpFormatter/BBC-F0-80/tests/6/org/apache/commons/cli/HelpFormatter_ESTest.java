/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:22:01 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = null;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      int int0 = (-4156);
      helpFormatter0.defaultLeftPad = (-4156);
      helpFormatter0.getDescPadding();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getNewLine();
      helpFormatter0.getWidth();
      MockFile mockFile0 = new MockFile("");
      File file0 = MockFile.createTempFile("9t:XD{", "usage: ", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(file0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("org.ap#che.commons.cli.Option");
      helpFormatter0.findWrapPos(" ", 0, 0);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.Option");
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "\n", "\n", options0, "\n");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-749));
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setArgName("");
      helpFormatter0.defaultNewLine = "org.apache.commons.cli.HelpFormatter$1";
      helpFormatter0.getArgName();
      String string0 = "rBx7,@9";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("org.apache.commons.cli.HelpFormatter$1", "--", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.HelpFormatter$1' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "org.apache.commons.cli.HelpFormatter$1", true, "org.apache.commons.cli.HelpFormatter$1");
      option0.setArgName("");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("Q3:j9myIKi'iHNh3t1", options1, true);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 3, "\n");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp("' contains an illegal character : '", options0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("arg", "nRVcg4D-]o$d", true, "usage: ");
      Option option1 = new Option("O$0hu", "=$#+AL2J2-AIdc", true, "");
      option1.setArgName("arg");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      OptionGroup optionGroup2 = optionGroup1.addOption(option1);
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "--");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("arg", "_39{97\"4K", true, "");
      options3.addOptionGroup(optionGroup2);
      helpFormatter0.printHelp("=$#+AL2J2-AIdc", options2);
      Options options4 = options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("w!_<Z)6[OB6%_", options4, true);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.setWidth(63);
      helpFormatter0.defaultWidth = (-1076);
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("V");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "V";
      objectArray0[1] = (Object) "org.apache.commons.cli.HelpFormatter$1";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) "V";
      objectArray0[7] = (Object) "org.apache.commons.cli.HelpFormatter$1";
      PrintWriter printWriter0 = mockPrintWriter0.format("org.apache.commons.cli.HelpFormatter$1", objectArray0);
      int int0 = 5008;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 5008, "org.apache.commons.cli.HelpFormatter$1", "org.apache.commons.cli.HelpFormatter$1", options0, (-1076), 63, "V");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-978);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      options0.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("R", "--", true, "");
      option0.setArgName("");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", false, "'");
      Options options3 = options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("org.apache.commons.cli.Util", options1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options3, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "org.apache.commons.cli.Util", true, "usage: ");
      option0.setArgName("--");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("' contains an illegal character : '", options0);
      helpFormatter0.printHelp("' contains an illegal character : '", options1, true);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "org.apache.commons.cli.Util", true, "usage: ");
      option0.setArgName("arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("4ZtBC#<", options1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "' contains an illegal character : '";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 2318, "' contains an illegal character : '");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      int int0 = 15;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("x5$@`dO%", "'%e", (Options) null, "'%e", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(1088, "`_%N", " [ARG]", options0, "x(j#KV5>{a9^rp9O^(?");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 31, "$P58", "-", options0, 1, (-4714), "--");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("Vqb~h2w[jRZ2dA", options0, true);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      String string0 = "jQa$kjC%Q!:~yLJbD";
      Option option0 = new Option("arg", "' was specified but an option from this group ", false, "jQa$kjC%Q!:~yLJbD");
      OptionGroup optionGroup1 = new OptionGroup();
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3, "(L", "E{QO4tLCku-UeZ#", options0, 3, 3, "(L");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 74;
      helpFormatter0.setLeftPadding((-1));
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2301, "=", "-", options0, 1, 3, "=", false);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("=", options1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-2000));
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 44, "~", (String) null, options0, (-1191), 44, "}6'<XP9T*H", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-567);
      helpFormatter0.setArgName("T+<p>tJ!I");
      helpFormatter0.getOptPrefix();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getDescPadding();
      helpFormatter0.rtrim("-");
      helpFormatter0.rtrim("-");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setLeftPadding(3);
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[2N$0&ZgtMp");
      Options options1 = options0.addOption("arg", false, "-");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) options1;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) helpFormatter2;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      options2.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-1179), "\n", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.renderWrappedText(stringBuffer0, 63, 33, "");
      String string0 = null;
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.setArgName((String) null);
      int int0 = 29;
      helpFormatter0.createPadding(29);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLeftPadding();
      File file0 = MockFile.createTempFile("WU\"kA,@oDGiY]*F", (String) null);
      String string1 = ")M {rMK$~4&yyQ;-:YQ";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(file0, ")M {rMK$~4&yyQ;-:YQ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // )M {rMK$~4&yyQ;-:YQ
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      boolean boolean0 = true;
      options0.addOption("arg", true, "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 387;
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) helpFormatter1;
      objectArray0[2] = (Object) "'";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) options0;
      objectArray0[5] = (Object) "'";
      objectArray0[6] = (Object) options0;
      objectArray0[7] = (Object) "'";
      objectArray0[8] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "'", objectArray0);
      // Undeclared exception!
      helpFormatter1.printUsage(printWriter0, 0, "[", options0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "\n", true, "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      options0.addOption("", true, "Ulf\"BP@Qhth9<Z>m");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-2146), "arg", "[ Options: [ short ", options2, (-2455), 3, "--", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "\n", true, "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      options2.addOption("", true, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "8;U'u", "--", options1, (-123), 3, "-", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setArgName("arg");
      helpFormatter1.setLeftPadding(74);
      helpFormatter0.setWidth(32);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      stringBuffer0.ensureCapacity((-2559));
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 3, "usage: ");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 9, "usage: ", "arg", options1, 3, 74, (String) null, true);
      helpFormatter0.rtrim("Cq");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-118);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.defaultWidth = 3180;
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 521, 783, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("T8SDe6]Bl_H1zK");
      helpFormatter0.setSyntaxPrefix(" | ");
      helpFormatter0.setDescPadding(1024);
      helpFormatter0.defaultOptPrefix = "Hc83,F";
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Options options1 = options0.addOption("", " 1HP,", false, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (-1843), options1, 104, 32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding(3);
      helpFormatter0.setWidth(3);
      Options options0 = new Options();
      helpFormatter1.printHelp(5, "arg", "", options0, "N3Fu");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", options0, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Option option0 = new Option("arg", "");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption((String) null, false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      Options options4 = options3.addOption("", ")mjh~+:@_&HX1", false, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 32, options4, 32, 1043);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Options options1 = options0.addOption("arg", true, "--");
      options1.hasOption("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 1, options1, 3, 2175);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setArgName("\n");
      helpFormatter1.setLeftPadding(3);
      Options options0 = new Options();
      int int0 = 5;
      helpFormatter1.printHelp(5, "\n", "", options0, "N3Fu");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, (-708), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.setSyntaxPrefix("");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.rtrim("[");
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("-", "YTK2wi[C8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 1;
      helpFormatter0.defaultLongOptPrefix = " ]";
      String string0 = ")}d#QY0d";
      helpFormatter0.defaultLeftPad = 32;
      Options options0 = new Options();
      options0.hasOption("+(jO6P|nF&t`0");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("p{;sBOhsO;S?", " ]", options0, ")}d#QY0d");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      Option option0 = new Option("gHK", false, "");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", false, " | ");
      options2.addOption("", "", false, "org.apache.commons.cli.HelpFormatter");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("@@a,*", options2, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      helpFormatter1.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth(1);
      String string0 = "1\\&E-XJlKa>=g";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("1&E-XJlKa>=g", "1&E-XJlKa>=g", options0, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "SIIRr";
      helpFormatter0.defaultLongOptPrefix = null;
      Options options0 = new Options();
      helpFormatter0.rtrim((String) null);
      // Undeclared exception!
      try { 
        options0.addOption("cmdLineSyntax not provided", "%zw", true, "[ option: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'cmdLineSyntax not provided' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("Pppe<");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Pppe<", (String) null, (Options) null, "[");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("Pppe<");
      helpFormatter0.getSyntaxPrefix();
      int int0 = (-1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = Locale.UK;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "!xj$8", (Object[]) null);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1), (String) null, "", options0, (-1), (-1), "usage: ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(74);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(101, "--", "*bWOM4;|j\":3O0Qc}-r", (Options) null, "arg", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 78, "usage: ", "", options0, 11, 668, "[", false);
      helpFormatter0.getArgName();
      helpFormatter0.rtrim("arg");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("--");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, (-1576), "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(10);
      helpFormatter0.setLongOptSeparator("          ");
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("@*GAtg'u0Q3K<pv", options1, true);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options2, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "usage: ";
      objectArray0[3] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("41", objectArray0);
      Options options0 = new Options();
      options0.addOption((String) null, true, (String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(printWriter0, 88, "-", "NZPLLcWnh?J", options0, 3, 74, "", true);
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.printUsage(printWriter0, 44, "");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "usage: ";
      objectArray0[3] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      Options options0 = new Options();
      options0.addOption((String) null, true, (String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(printWriter0, 88, "-", "", options0, 3, 74, "", true);
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.printUsage(printWriter0, 44, "");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("ppe");
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(7, "jSN/u3", "jSN/u3", options1, "line.separator");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.ParseException";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.ParseException");
      Object[] objectArray0 = new Object[5];
      String string1 = "[";
      mockPrintWriter0.format("[", objectArray0);
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "[", "org.apache.commons.cli.ParseException", options0, 0, 0, "Xz", true);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.ParseException");
      Object[] objectArray0 = new Object[5];
      PrintWriter printWriter0 = mockPrintWriter0.format("[", objectArray0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "\n");
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = options0.addOption("", true, "71@pb+kv");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage(printWriter0, 1, "arg", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.defaultSyntaxPrefix = "$";
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setArgName("u| vNg9NMI]`=N");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ", "hg");
      helpFormatter1.createPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 0, "--");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 44, "-", "", options0, (-3105), 74, " ", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) ",{rI<i,8>HWy/ LN[x|";
      objectArray0[3] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      Options options0 = new Options();
      options0.addOption((String) null, false, (String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(printWriter0, 88, "-", "", options0, 3, 74, "", false);
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLongOptSeparator("");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("LMx:)M", 1, (-4742));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setLeftPadding(3);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      helpFormatter2.renderOptions(stringBuffer0, 74, options0, 1, 74);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage(printWriter0, (-429), "@4\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.ParseException";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.ParseException");
      Object object0 = new Object();
      helpFormatter0.defaultSyntaxPrefix = "";
      int int0 = 245;
      Options options0 = new Options();
      options0.addOption("", true, "");
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int1 = (-1622);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1175, options0, 1, (-1622));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("o8g.apache.common:.cli.Parseyxceotion");
      int int0 = (-1473);
      helpFormatter0.setLeftPadding((-1473));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(16, "zl'`Te-~Q;cX_:Mna", "#J`Rr&iu", options0, "zl'`Te-~Q;cX_:Mna");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setArgName("zQWy/y");
      helpFormatter0.setLeftPadding(31);
      Options options0 = new Options();
      helpFormatter0.printHelp(1394, " ", " ", options0, " ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3, " ", "arg", options0, 74, 3, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("Pppe<");
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "JG|coNqF!K8W]yq4");
      Options options2 = options1.addOption("", (String) null, false, (String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("-", options2, false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, (-2), 1202, "Al9-<IefG9y3_y");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.defaultSyntaxPrefix = "$";
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setArgName("u| vNg9NMI]`=N");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ", "hg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 0, "--");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.ParseException");
      Object[] objectArray0 = new Object[5];
      mockPrintWriter0.format("[", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "71@pb+kv");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "-", " ] [ long ", options1, 3, 1, "usage: ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("zQWy/y");
      Options options0 = new Options();
      helpFormatter0.setArgName("u| vNg9NMI]`=N");
      int int0 = 1394;
      helpFormatter0.setLeftPadding(1394);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(10, "N3Fu", " ", options1, "zl'`Te-~Q;cX_:Mna");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      mockPrintWriter0.append((CharSequence) "usage: ");
      Options options0 = new Options();
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setArgName("arg");
      helpFormatter0.setLeftPadding(2);
      Options options1 = new Options();
      helpFormatter2.printHelp(2, "\"", "", options1, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 2, "KKP|i,QEr4u9ZM ?");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      OptionGroup optionGroup1 = new OptionGroup();
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getWidth();
      helpFormatter0.createPadding(32);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptSeparator();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte) (-118);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      helpFormatter1.getOptPrefix();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter1.renderOptions((StringBuffer) null, (-630), options1, (byte)117, (byte)42);
      String string0 = "org.apache.commons.cli.AlreadySelectedException";
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText((StringBuffer) null, 44, 3, "org.apache.commons.cli.AlreadySelectedException");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setArgName("zQWy/y");
      helpFormatter0.setLeftPadding(31);
      Options options0 = new Options();
      helpFormatter0.printHelp(1394, " ", " ", options0, " ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter1.renderOptions(stringBuffer0, 74, options0, 1, 65);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 74, "4");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      mockPrintWriter0.append((CharSequence) "usage: ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "\n", "", options1, "org.apache.commons.cli.HelpFormatter");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("zQWy/y");
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, (String) null);
      options1.addOption("arg", " ", false, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 2779, 2089);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 0;
      String string0 = "(L";
      String string1 = "E{QO4tL\\Cku-UeZ#";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      optionGroup0.toString();
      String string2 = "jQa$kjC%Q!:~yLJbD";
      Option option0 = new Option("arg", "' was specified but an option from this group ", false, "jQa$kjC%Q!:~yLJbD");
      optionGroup0.addOption(option0);
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", (-2), (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "arg";
      helpFormatter0.defaultSyntaxPrefix = "";
      objectArray0[4] = (Object) "usage: ";
      mockPrintWriter0.format("", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("V", true, " ");
      options1.addOption("", " ", false, "[ARG...]");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      OptionGroup optionGroup1 = new OptionGroup();
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getWidth();
      int int0 = 32;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 32, 783, "-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-118);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultWidth = 3180;
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 521, 783, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.defaultOptPrefix = "PHCHt#";
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText((StringBuffer) null, 74, (-203), " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      URI uRI0 = MockURI.aHttpURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      Options options1 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.printHelp("org.apache.commons.cli.OptionGroup", options1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("zQWy/y");
      Options options0 = new Options();
      helpFormatter0.findWrapPos("\n", 2779, (-1));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.defaultSyntaxPrefix = "$u|";
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setArgName("u| vNg9NMI]`=N");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", true, "u| vNg9NMI]`=N");
      helpFormatter0.printHelp("line.separator", options1, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(34);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('O');
      helpFormatter0.printWrapped(printWriter0, 34, 808, "#wy@u");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1355), "u| vNg9NMI]`=N", "u| vNg9NMI]`=N", options0, (-1355), (-3872), "   ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "arg";
      helpFormatter0.defaultSyntaxPrefix = "";
      objectArray0[4] = (Object) "usage: ";
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "NO_ARGS_ALLOWED");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 862, "", "", options1, 245, 862, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("zQWy/y");
      helpFormatter0.setArgName("zQWy/y");
      helpFormatter0.setLeftPadding(1394);
      Options options0 = new Options();
      helpFormatter0.printHelp(57, "ZO7RScEf_Vy`+g 6tT", "ap.@3k|nOv}yIj8GU|", options0, "ZO7RScEf_Vy`+g 6tT");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 57, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("zQWy/y");
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, (String) null);
      Options options2 = options1.addOption("arg", " ", false, "-");
      helpFormatter0.printHelp("line.separator", options2, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 2779, 2779, "lJjm]- W1ZR;1xD");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setArgName((String) null);
      helpFormatter0.setLeftPadding(1394);
      Options options0 = new Options();
      Options options1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(12, "j'C|", "u| vNg9NMI]`=N", (Options) null, "$");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.defaultSyntaxPrefix = "$u|";
      helpFormatter0.getLongOptSeparator();
      String string0 = "u| vNg9NMI]`=N";
      helpFormatter0.setArgName("u| vNg9NMI]`=N");
      helpFormatter0.setLeftPadding(1394);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "u| vNg9NMI]`=N", "<iQ;", options0, "u| vNg9NMI]`=N");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.defaultSyntaxPrefix = "$";
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setArgName("u| vNg9NMI]`=N");
      helpFormatter0.setLeftPadding(1394);
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-711), "wnS ciMF4<1U|$zx_E", "$", options0, "u| vNg9NMI]`=N", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding(74);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "_=3B1;", "--", options1, "[]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.defaultSyntaxPrefix = "$u|";
      helpFormatter0.getLongOptSeparator();
      String string0 = "u| vNg9NMI]`=N";
      helpFormatter0.setArgName("u| vNg9NMI]`=N");
      int int0 = 1394;
      helpFormatter0.setLeftPadding(1394);
      String string1 = "";
      Options options0 = new Options();
      options0.addOption((String) null, false, "");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "u| vNg9NMI]`=N", "IKZ#.C5' VXuncS*2]", options0, "", true);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.defaultSyntaxPrefix = "$u|";
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setArgName("$u|");
      int int1 = 73;
      helpFormatter0.setLeftPadding(73);
      Options options0 = new Options();
      helpFormatter0.printHelp(1394, " ", "", options0, "$u|");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("|");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 73, " ");
      String string0 = "-";
      StringBuffer stringBuffer0 = new StringBuffer("-");
      int int2 = (-856);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-856), (-856), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.defaultLeftPad = 0;
      String string0 = "$";
      helpFormatter0.defaultSyntaxPrefix = "$";
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setArgName("u| vNg9NMI]`=N");
      helpFormatter0.setLeftPadding(0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "IKZ#.C5' VXuncS*2]", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter0.renderWrappedText(stringBuffer0, 1394, 1516, "u| vNg9NMI]`=N");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getDescPadding();
      StringWriter stringWriter0 = new StringWriter(1);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringBuffer0.append("-");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1198), 3, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(2187);
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = false;
      String string1 = "";
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      helpFormatter0.printHelp("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options0, true);
      helpFormatter0.getArgName();
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.defaultArgName = "arg";
      int int0 = (-1831);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead.", (-1831), (-1831));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.defaultSyntaxPrefix = "$u|";
      helpFormatter0.getLongOptSeparator();
      String string0 = "u| vNg9NMI]`=N";
      helpFormatter0.setArgName("u| vNg9NMI]`=N");
      int int0 = 1394;
      helpFormatter0.setLeftPadding(1394);
      String string1 = "";
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "u| vNg9NMI]`=N", "IKZ#.C5' VXuncS*2]", options0, "", true);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.defaultSyntaxPrefix = "$";
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setArgName("u| vNg9NMI]`=N");
      helpFormatter0.setLeftPadding(1394);
      Options options0 = new Options();
      helpFormatter0.printHelp(1394, "u| vNg9NMI]`=N", "d", options0, "d");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-995), "u| vNg9NMI]`=N");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = helpFormatter1.defaultNewLine;
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
      Options options0 = new Options();
      helpFormatter0.setNewLine("--");
      OptionGroup optionGroup0 = new OptionGroup();
      printWriter0.print((Object) optionGroup0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(printWriter0, 1904, ".v0bm?7<P2", "usage: ", options1, 74, 1, "arg");
      String string1 = "Y/`^4qm";
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("\n", "--", true, "KpSW+Ow7^e87[[4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.defaultSyntaxPrefix = "$u|";
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setArgName("u| vNg9NMI]`=N");
      helpFormatter0.setLeftPadding((-2571));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2571), "u| vNg9NMI]`=N", "", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      OptionGroup optionGroup1 = new OptionGroup();
      Options options2 = options0.addOptionGroup(optionGroup1);
      options2.addOption("arg", "arg", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 2175, options2, 74, 115);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.ParseException");
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "org.apache.commons.cli.ParseException";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "org.apache.commons.cli.ParseException";
      mockPrintWriter0.format("", objectArray0);
      Options options0 = new Options();
      options0.addOption("", true, "");
      helpFormatter0.printHelp("Illegal option name '", "", options0, "", true);
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.ParseException");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix((String) null);
      Options options0 = new Options();
      options0.getMatchingOptions("\n");
      options0.getOptionGroups();
      Option option0 = new Option("", "hW#A2EwHD/K;", true, "hW#A2EwHD/K;");
      helpFormatter0.rtrim("");
      File file0 = MockFile.createTempFile(": ok9", ": ok9");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options1 = new Options();
      options0.addOption("", false, "2f");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.defaultLongOptPrefix = "org.apache.commons.cli.OptionGroup";
      helpFormatter0.setWidth(0);
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setOptPrefix(":");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", false, ":");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Options options2 = options1.addOption("", true, ":");
      String string0 = "line.separator";
      Option option0 = new Option("", true, "line.separator");
      Options options3 = options2.addOption(option0);
      options3.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options3.addOptionGroup(optionGroup0);
      options2.helpOptions();
      option0.setLongOpt("");
      options2.getOptions();
      OptionGroup optionGroup1 = new OptionGroup();
      Options options4 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      helpFormatter0.printHelp("&>PX^{_]xwMe(G'dU_v", options4, true);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("-");
      Options options0 = new Options();
      options0.getMatchingOptions("\n");
      String string0 = "hW#A2EwHD/K;";
      options0.getOptionGroups();
      Option option0 = new Option("", "hW#A2EwHD/K;", true, "hW#A2EwHD/K;");
      Options options1 = options0.addOption(option0);
      options1.helpOptions();
      helpFormatter0.defaultLeftPad = (-2);
      options1.hasShortOption("&lsWAg$w5h8'{$yAvH|");
      option0.setLongOpt("V");
      options1.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("vxN^", options1, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = helpFormatter1.defaultNewLine;
      mockPrintWriter0.append((CharSequence) "usage: ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions(mockPrintWriter0, 990, options1, 63, (-262));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("Cannot add value, list full.", 2248, (-451));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("has already been selected: '", ";5&J8x>W0$09C", options0, ";5&J8x>W0$09C");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = helpFormatter1.defaultNewLine;
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "\n", true, "");
      helpFormatter0.printOptions(printWriter0, 1, options2, 3, 2175);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      String string1 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      Option option0 = new Option("", false, "usage: ");
      options1.addOption(option0);
      String string2 = "aI0?p-liB";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options1, "aI0?p-liB", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      char[] charArray0 = new char[2];
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderWrappedText(stringBuffer0, 1356, 1356, "");
      charArray0[0] = '6';
      charArray0[1] = '[';
      // Undeclared exception!
      try { 
        mockPrintWriter0.write(charArray0, 1, 74);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      try { 
        MockURI.URI("#$twX5YU", " |v=h!PoOFk<bn/", "usage: ", "r0Sz}.3QtnB");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: #$twX5YU:// |v=h!PoOFk<bn/usage:%20#r0Sz%7D.3QtnB
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      options0.hasOption("");
      String string0 = null;
      Option option0 = new Option("", "--", true, (String) null);
      option0.setLongOpt("--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.toString();
      helpFormatter0.defaultArgName = "z^W9~F-e7_L";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = ";/CfRBRa>;$5'c";
      Options options0 = new Options();
      Options options1 = options0.addOption("", "\n", true, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-413), "", ";/CfRBRa>;$5'c", options2, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      String string0 = "jQa$kjC%Q!:~yLJbD";
      Option option0 = new Option("arg", "' was specified but an option from this group ", false, "jQa$kjC%Q!:~yLJbD");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "(L", "E{QO4tLCku-UeZ#", options0, 0, 0, "(L");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.setLongOptPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2332), (String) null, "org.apache.commons.cli.HelpFormatter", options0, 1904, 1904, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.ParseException");
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "org.apache.commons.cli.ParseException";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "org.apache.commons.cli.ParseException";
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "");
      helpFormatter0.printUsage(printWriter0, 245, "org.apache.commons.cli.ParseException", options1);
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, int0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("[ option: ", "[ option: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.println((float) 1);
      mockPrintWriter0.println(0.0F);
      mockPrintWriter0.println();
      helpFormatter0.setLongOptSeparator("[ option: ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 56, "[ option: ");
      String string0 = " ";
      String string1 = "";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption(" ", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.defaultOptPrefix = "usage: ";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(10, (String) null, (String) null, options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix((String) null);
      Options options0 = new Options();
      options0.getMatchingOptions("\n");
      options0.getOptionGroups();
      Option option0 = new Option("", "hW#A2EwHD/K;", true, "hW#A2EwHD/K;");
      Options options1 = options0.addOption(option0);
      options1.helpOptions();
      helpFormatter0.defaultLeftPad = (-2);
      option0.setLongOpt("V");
      options1.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("vxN^", options1, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1832));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "fqk/b/=[Y|:tyvc[#fT";
      helpFormatter0.setOptPrefix("fqk/b/=[Y|:tyvc[#fT");
      int int0 = 1963;
      Options options0 = new Options();
      String string1 = ":KGL5v]8Nt.";
      helpFormatter0.printHelp(1963, "-5a", "-5a", options0, ":KGL5v]8Nt.", true);
      String string2 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-1906);
      helpFormatter0.rtrim("");
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("+M%i RX`_j_m*", " [ARG]", (Options) null, "]");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      options0.hasOption("usage: ");
      Option option0 = new Option("", "--", true, (String) null);
      option0.setLongOpt("--");
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      stringBuffer0.append((CharSequence) "-");
      // Undeclared exception!
      try { 
        stringBuffer0.insert(941, "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 941
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.defaultOptPrefix = "arg";
      helpFormatter0.setLongOptPrefix("usage: ");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", false, "--");
      Option option0 = new Option("", false, "usage: ");
      Options options3 = options2.addOption(option0);
      Options options4 = options3.addOption("", "qr$U", true, (String) null);
      helpFormatter0.printHelp(44, "arg", "4*]TyojW@X", options4, "");
      assertEquals("usage: ", helpFormatter0.getLongOptPrefix());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      helpFormatter0.setOptPrefix("zQWy/y");
      int int0 = 2779;
      String string0 = "C";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("q;osM(L%56 ", false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'q;osM(L%56 ' contains an illegal character : ';'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      String string0 = "org.apache.commons.cli.OptionGroup";
      helpFormatter0.defaultLongOptPrefix = "org.apache.commons.cli.OptionGroup";
      helpFormatter0.setWidth(0);
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setOptPrefix(":");
      helpFormatter0.rtrim(":");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("--", "C@tpQqte(4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2600);
      helpFormatter0.setOptPrefix("org.apache.commons.cli.ParseException");
      helpFormatter0.defaultDescPad = (-2600);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator1).toString();
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-2090));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.defaultSyntaxPrefix = "$u|";
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setArgName("u| vNg9NMI]`=N");
      helpFormatter0.setLeftPadding(1394);
      Options options0 = new Options();
      helpFormatter0.printHelp(1394, "u| vNg9NMI]`=N", "", options0, "");
      assertEquals(1394, helpFormatter0.defaultLeftPad);
  }
}
