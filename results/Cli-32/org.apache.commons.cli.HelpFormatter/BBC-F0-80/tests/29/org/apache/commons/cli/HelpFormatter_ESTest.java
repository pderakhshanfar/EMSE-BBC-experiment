/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:33:48 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.CharBuffer;
import java.util.Comparator;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-961);
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("usage: ", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "c[~";
      int int0 = 1;
      helpFormatter0.defaultWidth = 1;
      helpFormatter0.defaultLeftPad = 1;
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      helpFormatter0.setNewLine("arg");
      helpFormatter0.setWidth(0);
      Options options0 = null;
      // Undeclared exception!
      helpFormatter0.printHelp("   ", (Options) null);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.optionComparator = null;
      options0.addOption("arg", "arg", true, "4");
      helpFormatter0.defaultSyntaxPrefix = "\"2 \"Cn'-r9nD(~r+";
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      options0.addOption((String) null, "\n", true, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, " ", " ", options0, " ", true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.cli.Option cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.ComparableTimSort", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "   ");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          HelpFormatter helpFormatter0 = new HelpFormatter();
          StringWriter stringWriter0 = new StringWriter();
          MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
          Options options0 = new Options();
          // Undeclared exception!
          helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, " | ", options0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("w", "usage: ", true, "RGtz0?%/C,");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      Option option1 = new Option("arg", " ", true, "-");
      optionGroup1.addOption(option1);
      options0.addOptionGroup(optionGroup1);
      Options options1 = options0.addOption((String) null, "\n", false, "-");
      options0.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), (String) null, options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "--");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      option0.setArgs(1744);
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printHelp(115, "dI", "", options1, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.findWrapPos(" | ", 1, (-1));
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 2861, "&9G|XW0wACFB@", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.setLongOptPrefix("cmdLineSyntax not provided");
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = " ";
      Options options0 = new Options();
      boolean boolean0 = true;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 91, "[ARG...]", "", options0, 1713, 91, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("Knpt=Rf8=JR=fzBXr");
      String string0 = "gSOkZX";
      helpFormatter0.defaultArgName = "gSOkZX";
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.setArgName("gSOkZX");
      String string1 = "-";
      helpFormatter0.setLongOptPrefix("-");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.getNewLine();
      helpFormatter0.getNewLine();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      int int0 = (-399);
      int int1 = 3906;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-399), 3906, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setOptPrefix("");
      helpFormatter0.rtrim("");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.optionComparator = null;
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(";{2e", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      mockFileOutputStream0.getChannel();
      mockPrintWriter0.write("\n");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 83, 83, ";{2e");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("usage: ", "").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setOptPrefix("usage: ");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptPrefix();
      String string0 = "t$ p4KeqVr";
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 83, "t$ p4KeqVr");
      helpFormatter0.setDescPadding((-1));
      Options options0 = new Options();
      String string1 = "org.apache.commons.cli.HelpFormatter";
      helpFormatter0.setSyntaxPrefix("-");
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 83, "\n", "nGjiI", options0, (-1), 0, "org.apache.commons.cli.HelpFormatter", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.getOptionComparator();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.setLongOptSeparator("cmdLineSyntax not provided");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      helpFormatter0.printHelp("'", options0, true);
      int int0 = (-2444);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2444));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption((String) null, "\n", true, "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(8, "arg", "T{=zP'h<ew<&", options0, "M", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      helpFormatter0.defaultLeftPad = (-3827);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" | ", "", options0, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "--";
      Options options0 = new Options();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.printHelp(3, "\n", "arg", options0, "\n", false);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = null;
      helpFormatter0.defaultSyntaxPrefix = " ";
      Options options0 = new Options();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      String string0 = null;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, (-3684), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", false, "-");
      helpFormatter0.defaultSyntaxPrefix = "B_gO/B2Z`Q ";
      OptionGroup optionGroup0 = new OptionGroup();
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options1, 0, 9);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('3');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter1;
      objectArray0[2] = (Object) printWriter0;
      objectArray0[3] = (Object) null;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) mockFileOutputStream0;
      objectArray0[8] = (Object) mockFileOutputStream0;
      PrintWriter printWriter1 = mockPrintWriter1.printf("-", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "--", true, "   ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", "Rv=o]U.O+,6#(+", true, " ");
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter1, (-1058), options3, (-1058), 2785);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption(" ");
      helpFormatter0.printHelp(13, "7+9@`H2ko|tu+5P", "H UeH}R/qOo@Q2G", options0, "usage: ", true);
      helpFormatter0.getOptPrefix();
      helpFormatter0.renderOptions((StringBuffer) null, 13, options0, 13, 13);
      helpFormatter0.rtrim("-");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("");
      helpFormatter0.printHelp(68, "-", "+Q5fkK", options0, " ", false);
      helpFormatter0.findWrapPos("L6KoF7I +Q<bBT:oH`S", 1, 1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-938));
      Options options0 = new Options();
      helpFormatter0.rtrim("");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", (String) null, false, (String) null);
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", "arg", true, "k\"I");
      Options options3 = options2.addOption((String) null, false, "B!)7q[P+tq4p%c<");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(":vcdE#l/IsL=^OxN!", "B!)7q[P+tq4p%c<", options3, ":vcdE#l/IsL=^OxN!", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "The option '";
      PrintWriter printWriter0 = null;
      helpFormatter0.defaultArgName = "The option '";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 80, (-2024), "org.apache.commons.cli.Util");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption((String) null, "\n", true, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, " ", " ", options0, " ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "mza,G '{L{^l", false, (String) null);
      Options options1 = options0.addOption(option0);
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.printHelp("o'mX^vq 8`_tv`YN", options1, false);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.rtrim("");
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      options0.addOption("arg", true, "arg");
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, (-2), "8jbF2ej,JE $v^Z_");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 1162;
      int int0 = 3605;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3605, "]", "]", (Options) null, "]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      options0.getOptions();
      Option option0 = new Option("", "+>b[");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("EN77~*E>Sr&Gz)_`wao", options0, true);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "Xw}KM";
      Options options0 = new Options();
      helpFormatter0.printHelp(103, "org.apache.commons.cli.Option", "org.apache.commons.cli.Option", options0, " ", true);
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = " ";
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.printHelp(3, "\n", "arg", options0, "\n", false);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "~<'4ioM;Hi", "--", options0, "--");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = " ";
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.printHelp(3, "\n", "arg", options0, "\n", false);
      helpFormatter0.rtrim("");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-899), (-899));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 1863, (Options) null, 1863, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "QdbgA";
      helpFormatter0.setLeftPadding((-2103));
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.defaultArgName = "NxX";
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", 2, (-2103));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-2));
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", options0, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.printHelp(4817, "]{", "]{", options0, "uS~1_[ZhQY`", false);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "uS~1_[ZhQY`";
      Object object3 = new Object();
      objectArray0[1] = object3;
      objectArray0[2] = object1;
      char[] charArray0 = new char[4];
      charArray0[0] = 'B';
      charArray0[1] = 'T';
      charArray0[2] = '3';
      charArray0[3] = 'r';
      mockPrintWriter0.println(charArray0);
      objectArray0[3] = (Object) options0;
      objectArray0[4] = (Object) "]{";
      PrintWriter printWriter0 = mockPrintWriter0.format(" ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 1, (String) null, "ku^<)-5-mZtK", options0, 1, 1, "!--@0z", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("arg", options0, true);
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) option0;
      objectArray0[1] = (Object) optionGroup0;
      mockFile0.toURL();
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) options1;
      objectArray0[5] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "\n", objectArray0);
      helpFormatter0.printUsage(printWriter0, 9, " ", options0);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      helpFormatter0.printHelp(printWriter0, 812, "(x]RtOL@a", "org.apache.commons.cli.ParseException", options0, 812, 812, (String) null, true);
      helpFormatter0.printHelp(3, "\n", "", options0, "\n", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
      Options options1 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      PrintWriter printWriter0 = mockPrintWriter0.append('8');
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 3, "|H9", "--", options1, 74, 0, "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = false;
      helpFormatter1.printHelp(74, "#/i", "--", options0, "*y:&vUY~az'oF{", false);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter0, false);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter0;
      Object object3 = new Object();
      objectArray0[1] = object3;
      objectArray0[2] = object0;
      Object object4 = new Object();
      objectArray0[3] = object4;
      objectArray0[4] = (Object) helpFormatter1;
      objectArray0[5] = (Object) mockPrintWriter0;
      Object object5 = new Object();
      objectArray0[6] = object5;
      objectArray0[7] = (Object) "*y:&vUY~az'oF{";
      mockPrintWriter0.format("arg", objectArray0);
      int int0 = 68;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 1003, "[", "-", options0, (-1973), 38, " ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setWidth((-2848));
      Option option0 = new Option("arg", "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", options0, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setArgName("arg");
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.setSyntaxPrefix("arg");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 431, "usage: ", "", options1, 36, 63, "&?([$QO~<#2Qh");
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "--");
      Options options1 = options0.addOptionGroup(optionGroup0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter$OptionComparator");
      PrintWriter printWriter0 = mockPrintWriter0.append('a');
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 0, "", "org.apache.commons.cli.HelpFormatter$OptionComparator", options1, 383, (-6144), "org.apache.commons.cli.HelpFormatter$OptionComparator");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ]";
      Options options0 = null;
      helpFormatter0.setLongOptPrefix(" ]");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ]", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setArgName("arg");
      Options options0 = new Options();
      boolean boolean0 = true;
      options0.addOption("arg", true, "arg");
      StringBuffer stringBuffer0 = new StringBuffer("");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, options0, 48, 9);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setArgName("arg");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "arg");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "-", "arg", options1, 63, 1, "-", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(63, "", "usage: ", options1, "-", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "--");
      String string0 = "(&*$G2)lE[5hC*U\\";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("(&*$G2)lE[5hC*U");
      PrintWriter printWriter0 = mockPrintWriter0.append('r');
      String string1 = "aDDKg_z<8>\\";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-2460), "aDDKg_z<8>");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = false;
      int int0 = 0;
      String string0 = "HYr?LF2u2A=";
      String string1 = null;
      Options options1 = new Options();
      String string2 = ":'+|37-^/y*w9";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", true, "org.apache.commons.cli.Option");
      helpFormatter0.printHelp("hY>|%-uj", "hY>|%-uj", options1, " ] [ long ");
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = (-1310);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "\n", "arg", options0, "\n", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(";{2e", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      mockFileOutputStream0.getChannel();
      mockPrintWriter0.write("\n");
      Options options0 = new Options();
      String string0 = "";
      Options options1 = options0.addOption("", false, "The option '");
      String string1 = null;
      helpFormatter0.setSyntaxPrefix((String) null);
      int int0 = (-3421);
      options1.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1242, ";{2e", "33n", options1, 83, (-3421), "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(";{2e", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      mockFileOutputStream0.getChannel();
      mockPrintWriter0.write("\n");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 83, 83, ";{2e");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.createPadding(3);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("arg", "", " ").when(comparator0).toString();
      doReturn(0, 0).when(comparator0).compare(anyString() , anyString());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "--");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption((String) null, "cOi]:f@p", true, "");
      helpFormatter0.printHelp(83, "usage: ", "~RSa5TF<P$q,7*a:U$", options3, "", true);
      int int0 = helpFormatter0.defaultWidth;
      helpFormatter0.rtrim("d2%[v");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "-");
      option0.setArgs(1);
      options0.addOption(option0);
      helpFormatter0.printHelp(3, "\n", "", options0, "\n", false);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "-");
      option0.setArgs(1);
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(3, "\n", "", options0, "\n", false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) pipedOutputStream0;
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) options0;
      objectArray0[4] = (Object) options0;
      objectArray0[5] = (Object) helpFormatter0;
      mockPrintWriter0.format("--", objectArray0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3887, (String) null, options1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 34, options1, (-2), 34);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("7");
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      mockPrintWriter0.print((Object) helpFormatter1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "W%";
      Option option0 = new Option("", true, "W%");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption("", "~Y/*9'X,8", false, "arg");
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 74, "~Y/*9'X,8", "--", options2, 421, (-827), "arg", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", "Wf`@w3^");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('(');
      helpFormatter1.printHelp(printWriter0, 74, "org.apache.commons.cli.Option", "-", options0, 3, 1, "usage: ", true);
      helpFormatter0.setSyntaxPrefix("*.");
      helpFormatter1.printHelp(printWriter0, 74, " ", "", options0, 74, 2127, "*.", true);
      Locale locale0 = Locale.CHINA;
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getArgName();
      helpFormatter2.rtrim("usage: ");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(";{2e", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      mockPrintWriter0.write("\n");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 83, 83, ";{2e");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("arg", "").when(comparator0).toString();
      doReturn(0).when(comparator0).compare(anyString() , anyString());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setOptPrefix("usage: ");
      helpFormatter0.getOptionComparator();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 83, "t$ p4KeqVr");
      Options options0 = new Options();
      Options options1 = options0.addOption("", ";{2e", true, "0G#J5");
      Options options2 = options1.addOption("arg", true, (String) null);
      options2.addOption("arg", true, "AwJuY");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-907), ";{2e", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("w", "usage: ", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      Option option1 = new Option("arg", " ", false, "-");
      optionGroup1.addOption(option1);
      options0.addOptionGroup(optionGroup1);
      options0.addOption((String) null, "\n", true, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, " ", " ", options0, " ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(";{2e", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      mockFileOutputStream0.getChannel();
      mockPrintWriter0.write("\n");
      Options options0 = new Options();
      Option option0 = new Option("", "--", true, "");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", false, "arg");
      Options options3 = options2.addOption("arg", "", false, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options4 = options3.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(83, ";{2e", "", options4, ";{2e", true);
      helpFormatter0.getWidth();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setArgName("arg");
      Options options0 = new Options();
      helpFormatter0.setDescPadding((-2554));
      Options options1 = new Options();
      helpFormatter0.setSyntaxPrefix("arg");
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 0, "--", "nGjiI", options0, 1252, 74, "--", true);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", "");
      Options options1 = new Options();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 10, (String) null, options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setArgName("arg");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "arg");
      helpFormatter0.setSyntaxPrefix("arg");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1098, "arg", "-", options1, 74, 1, "", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-871), "14>9Ev", "/2", options1, "arg", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", true, ".)l2bv-<{=4#:2");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) helpFormatter1;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("usage: ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-1551), "e O5!gE!9a)lnzjr", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 4075, options0, 1, 1);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 3, 1, "[");
      helpFormatter0.renderOptions(stringBuffer2, 1868, options0, 74, 1868);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter1.rtrim("\n");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp(1, " ", "", options1, "-", false);
      helpFormatter0.printHelp(74, "jU)", "jU)", options0, "jU)", false);
      helpFormatter0.getWidth();
      helpFormatter0.rtrim(",M99 }1");
      helpFormatter0.getLeftPadding();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(64);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) byteArrayOutputStream0;
      objectArray0[2] = (Object) "jU)";
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) bufferedOutputStream0;
      objectArray0[5] = (Object) byteArrayOutputStream0;
      objectArray0[6] = (Object) bufferedOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.format(",M99 }1", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Object[] objectArray1 = new Object[9];
      objectArray1[0] = (Object) mockPrintWriter0;
      objectArray1[1] = object0;
      objectArray1[2] = (Object) ",M99 }1";
      objectArray1[3] = (Object) options0;
      objectArray1[4] = (Object) ",M99 }1";
      objectArray1[5] = object1;
      objectArray1[6] = (Object) byteArrayOutputStream0;
      objectArray1[7] = (Object) options0;
      Object object2 = new Object();
      objectArray1[8] = object2;
      PrintWriter printWriter1 = mockPrintWriter1.printf("--", objectArray1);
      helpFormatter0.printOptions(printWriter1, 64, options1, 1, 96);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("arg");
      helpFormatter0.rtrim("-");
      helpFormatter0.getNewLine();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("@");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockFileOutputStream0;
      objectArray0[2] = (Object) "@";
      PrintWriter printWriter0 = mockPrintWriter0.printf("usage: ", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(printWriter0, 1136, "arg", (String) null, options1, 1136, 97, "", true);
      helpFormatter0.createPadding(97);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("Ci10X<4HsFRI]q&", 117, (-1984));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(";{2e", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      mockFileOutputStream0.getChannel();
      mockPrintWriter0.write("\n");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 83, 83, ";{2e");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.createPadding(3);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("arg", "", (String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setOptPrefix("usage: ");
      helpFormatter0.getOptionComparator();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 83, "t$ p4KeqVr");
      helpFormatter0.setDescPadding(46);
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("-");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 83, "   ", "nGjiI", options0, 46, 0, "org.apache.commons.cli.HelpFormatter", true);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "<", "", options0, "-", true);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("arg");
      helpFormatter0.rtrim("-");
      helpFormatter0.getNewLine();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("@");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockFileOutputStream0;
      objectArray0[2] = (Object) "@";
      mockPrintWriter0.printf("usage: ", objectArray0);
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.setSyntaxPrefix("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 2, "org.apache.commons.cli.HelpFormatter$1", "-", options1, 3, 1, "SBmU", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(";{2e", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      mockFileOutputStream0.getChannel();
      mockPrintWriter0.write("\n");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 83, 83, ";{2e");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("arg").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setOptPrefix("'P*L0]ub}<pCV$wf7}p");
      helpFormatter0.getOptionComparator();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 83, ";{2e");
      helpFormatter0.setDescPadding(83);
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, "-", "'P*L0]ub}<pCV$wf7}p", options0, (-1), 33, "$/6!0bz<", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 4075, options0, 1, 1);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 3, 1, "[");
      helpFormatter0.renderOptions(stringBuffer2, 1868, options0, 74, 1868);
      options0.addOption("arg", "~82s", true, "");
      String string0 = "-!)";
      stringBuffer2.append('9');
      helpFormatter0.printHelp("-!)", " ] [ long ", options0, "hY>|%-uj");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-1070), "F$~s", "F$~s", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("arg").when(comparator0).toString();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 70, ";{2e");
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setOptPrefix("usage: ");
      helpFormatter0.getOptionComparator();
      helpFormatter0.setDescPadding((-1));
      helpFormatter0.rtrim("usage: ");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(458, "-", "", options0, "", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(74, "-", "-", options0, "arg", true);
      helpFormatter0.rtrim("rg#_?#RvS]nBW@Wf)");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "rg#_?#RvS]nBW@Wf)";
      objectArray0[2] = (Object) null;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) "rg#_?#RvS]nBW@Wf)";
      objectArray0[5] = (Object) bufferedOutputStream0;
      objectArray0[6] = (Object) bufferedOutputStream0;
      objectArray0[7] = (Object) bufferedOutputStream0;
      objectArray0[8] = (Object) null;
      PrintStream printStream0 = mockPrintStream0.printf((Locale) null, "-", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getWidth();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, "Fh1#CdH +-", "--", options0, "arg", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setOptPrefix("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, "5!RVa1uGA e1KgxHTG", "", options0, ":U-\"%YoNO", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "--", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(3);
      Options options0 = new Options();
      helpFormatter1.setSyntaxPrefix("usage: ");
      Option option0 = new Option("arg", false, " ");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 74, "", "--", options1, 11, (-2009), "-", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setArgName("arg");
      helpFormatter1.setLongOptPrefix("6;d");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-1764), "org.apache.commons.cli.HelpFormatter$1", "pU%yy8z~f", (Options) null, "<", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.defaultWidth = 32;
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", false, "org.apache.commons.cli.Option");
      helpFormatter0.printHelp("hY>|%-uj", "hY>|%-uj", options1, " ] [ long ");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('V');
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 32, 32, " ] [ long ");
      assertEquals(10, stringBuffer0.length());
      assertEquals("arg", helpFormatter0.getArgName());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 32, "hY>|%-uj", options0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "--", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", true, "--");
      helpFormatter1.printUsage(printWriter0, 74, "'(IKnB", options1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      String string0 = "(~";
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("(~", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      mockPrintWriter0.write("\n");
      int int0 = 11;
      String string1 = "(|&]sw}gTu^kg):\\VPI";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 83, 11, "(|&]sw}gTu^kg):VPI");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      String string2 = "";
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.getOptionComparator();
      int int1 = 10;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 10, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getWidth();
      Options options1 = new Options();
      helpFormatter0.printHelp(1, " ", "", options1, "-", false);
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("usage: ");
      helpFormatter1.getWidth();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      StringBuffer stringBuffer1 = new StringBuffer(74);
      StringBuffer stringBuffer2 = helpFormatter1.renderWrappedText(stringBuffer0, 3, 44, "");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer2, (-1258), 74, "]V=17u");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 4075, options0, 1, 1);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 3, 1, "[");
      helpFormatter0.renderOptions(stringBuffer2, 1868, options0, 74, 1868);
      Options options1 = options0.addOption("arg", "~82s", true, "");
      helpFormatter0.printHelp("-!)", " ] [ long ", options0, "hY>|%-uj");
      helpFormatter0.printHelp(63, "~82s", "Illegal option name '", options1, "'agO");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(";{2e", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      mockFileOutputStream0.getChannel();
      mockPrintWriter0.write("\n");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 83, 83, ";{2e");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("\n", "~`Hahblp,BY\"C").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setOptPrefix("usage: ");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptPrefix();
      String string0 = "t$ p4KeqVr";
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 83, "t$ p4KeqVr");
      helpFormatter0.setDescPadding((-1));
      Options options0 = new Options();
      String string1 = "org.apache.commons.cli.HelpFormatter";
      helpFormatter0.setSyntaxPrefix("-");
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 83, "\n", "nGjiI", options0, (-1), 0, "org.apache.commons.cli.HelpFormatter", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.printHelp(566, "org.apache.commons.cli.HelpFormatter", "", options0, "B.~yd", false);
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      helpFormatter1.createPadding(1);
      helpFormatter1.getLongOptPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", true, "org.apache.commons.cli.Option");
      options1.addOption("arg", true, "");
      helpFormatter0.printHelp("hY>|%-uj", "hY>|%-uj", options1, " ] [ long ");
      int int0 = 63;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(63, "", "org.apache.commons.cli.Option", options0, "org.apache.commons.cli.Option");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "org.apache.commons.cli.HelpFormatter";
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("CAC8&b");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "org.apache.commons.cli.HelpFormatter");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 9, (-119), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = "";
      Options options0 = new Options();
      options0.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "org.apWche.commonc.clg.HelpFormatter", "", options0, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("--", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Options options0 = new Options();
      helpFormatter0.printHelp("[", "[", options0, "[", false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, 9, "");
      mockPrintWriter0.printf(locale0, "arg", (Object[]) null);
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", false, "org.apache.commons.cli.Option");
      helpFormatter0.printHelp("hY>|%-uj", "hY>|%-uj", options1, " ] [ long ");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "Xw}KM";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(103, "", "", options0, " ", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(947);
      helpFormatter0.findWrapPos("", 1, 1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", true, "org.apache.commons.cli.Option");
      helpFormatter0.printHelp("hY>|%-uj", "hY>|%-uj", options1, " ] [ long ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(63, "", "org.apache.commons.cli.Option", options0, "org.apache.commons.cli.Option");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.printHelp(566, "org.apache.commons.cli.HelpFormatter", "", options0, "", true);
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(1);
      helpFormatter1.getLongOptPrefix();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      options0.addOption("", "", false, "usage: ");
      Options options1 = options0.addOption((String) null, "", false, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (String) null, options1, " ] [ long ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(";{2e", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      mockFileOutputStream0.getChannel();
      mockPrintWriter0.write("\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(" | ");
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 3, options0, 13, 13);
      helpFormatter1.renderWrappedText(stringBuffer1, 1953, 1, "cIf>^GM^_:");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-1);
      int int1 = 13;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1), 13, "L*!gd?Yw7ZgYs:HQHP");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      String string0 = "c[~";
      helpFormatter0.defaultNewLine = "c[~";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "c[~");
      mockPrintWriter0.checkError();
      int int1 = 1;
      helpFormatter0.defaultWidth = 1;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 1, 31, "c[~");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1106);
      helpFormatter0.getDescPadding();
      int int0 = (-874);
      helpFormatter0.setWidth((-874));
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("-", false, "x_=^y=;VE(:!l");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", (-504), (-504));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "]", false, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, (-1528), options1, 410, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("-");
      StringBuffer stringBuffer0 = new StringBuffer("FtCn e");
      int int0 = 0;
      int int1 = 3115;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, (Options) null, 1172, 3115);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setOptPrefix("");
      helpFormatter0.rtrim("[");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      int int0 = 114;
      String string0 = "vA-hEeVSg\\h3HhK.?B";
      String string1 = "ni;02Xk21.c_*]2";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("-", (String) null, false, "[RkBu");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      String string0 = "hY>|%-uj";
      Options options0 = new Options();
      boolean boolean0 = true;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter1.renderOptions(stringBuffer0, 3, options0, 1, 1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setDescPadding(64);
      Options options1 = new Options();
      helpFormatter2.setSyntaxPrefix("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 376, "arg", "nGjiI", options0, (-1), 1, "org.apache.commons.cli.HelpFormatter$OptionComparator", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("w", "usage: ", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      Option option1 = new Option("arg", " ", false, "-");
      optionGroup1.addOption(option1);
      options0.addOptionGroup(optionGroup1);
      options0.hasOption("'*3maVS");
      Options options1 = options0.addOption((String) null, "\n", true, "-");
      options0.toString();
      helpFormatter0.printHelp("\n", options0, true);
      helpFormatter0.rtrim((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "Xw}KM";
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "org.apache.commons.cli.HelpFormatter", "", options0, " ", false);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 4075, options0, 1, 1);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 3, 1, "[");
      helpFormatter0.renderOptions(stringBuffer2, 1868, options0, 74, 1868);
      Options options1 = options0.addOption("arg", "~82s", true, "");
      stringBuffer2.append('9');
      helpFormatter0.printHelp("-!)", " ] [ long ", options0, "hY>|%-uj");
      helpFormatter0.printHelp(63, "~82s", "Illegal option name '", options1, "'agO");
      helpFormatter1.renderWrappedText(stringBuffer2, 74, 74, " ");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-2032));
      String string0 = null;
      int int0 = (-1847);
      helpFormatter0.setLeftPadding((-1847));
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption((String) null, false, " | ");
      // Undeclared exception!
      try { 
        options2.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      MockFile mockFile0 = new MockFile("--", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, 9, "");
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", (Object[]) null);
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-2), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2067;
      String string0 = "<";
      helpFormatter0.defaultWidth = 2067;
      helpFormatter0.setNewLine("<");
      Options options0 = null;
      String string1 = "org.apache.commons.cli.OptionGroup";
      String string2 = "cmdLineSyntax not provided";
      helpFormatter0.defaultLongOptPrefix = "<";
      String string3 = "TF<Mn*?xY*L sN~e!E[";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("cmdLineSyntax not provided", "", (Options) null, "TF<Mn*?xY*L sN~e!E[");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      helpFormatter1.printHelp(723, "\n", "=y2`P,~n=EBhY4", options0, "nD`8ST#H{?@", false);
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.rtrim("");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getWidth();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "Xw}KM";
      Options options0 = new Options();
      helpFormatter0.printHelp("G0P&c9vk/$yNN*HGr_", options0, true);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "org.apache.commons.cli.HelpFormatter", "\n", options0, " ", false);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getOptionComparator();
      helpFormatter0.createPadding(0);
      helpFormatter0.defaultSyntaxPrefix = "FgOmLJ]17!6P(>0[vdG";
      helpFormatter0.setWidth(0);
      helpFormatter0.setLongOptSeparator("+!eZ][eD");
      helpFormatter0.setOptPrefix("<");
      helpFormatter0.setLeftPadding((-4138));
      assertEquals(0, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.createPadding(677);
      assertEqualsstring0);
      
      String string1 = helpFormatter0.getLongOptPrefix();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("--", string1);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 15, 44, "cmdLineSyntax not provided");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("usage: ", "\n");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-6361), "\n", " ", options1, "usage: ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(";{2e", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      mockFileOutputStream0.getChannel();
      mockPrintWriter0.write("\n");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 83, 83, ";{2e");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setOptPrefix("usage: ");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptPrefix();
      String string0 = "t$ p4KeqVr";
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 83, "t$ p4KeqVr");
      helpFormatter0.setDescPadding((-1));
      Options options0 = new Options();
      String string1 = "org.apache.commons.cli.HelpFormatter";
      helpFormatter0.setSyntaxPrefix("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 83, "\n", "nGjiI", options0, (-1), 0, "org.apache.commons.cli.HelpFormatter", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.printHelp("cmdLineSyntax not provided", options0);
      helpFormatter0.setArgName("cmdLineSyntax not provided");
      helpFormatter0.setWidth(0);
      assertEquals("cmdLineSyntax not provided", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setSyntaxPrefix("");
      String string0 = "";
      String string1 = "";
      Options options0 = new Options();
      String string2 = "\\;)McT)~ksIFpf";
      // Undeclared exception!
      try { 
        options0.addOption(" 9w|L$G]a`", false, ";)McT)~ksIFpf");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ' 9w|L$G]a`' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      pipedOutputStream0.flush();
      pipedOutputStream0.flush();
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-2);
      pipedOutputStream0.write(byteArray0, 1, 0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      mockPrintWriter0.println(0);
      String string0 = "zsN *I";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2035), (-2035), "zsN *I");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
