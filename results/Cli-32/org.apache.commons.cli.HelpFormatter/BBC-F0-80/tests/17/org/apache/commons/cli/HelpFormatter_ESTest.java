/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:24:34 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileDescriptor;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.URI;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "usage: ");
      int int0 = (-2);
      helpFormatter0.setLeftPadding((-2));
      Options options1 = new Options();
      String string0 = "~{36si5gU?[01&2";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("~{36si5gU?[01&2");
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) option0;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", "<CKy", options1, "arg");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding((-182));
      boolean boolean0 = true;
      Option option0 = new Option("arg", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", options0, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "'";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(777, "'", "", (Options) null, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.optionComparator = null;
      helpFormatter0.setLongOptPrefix("[");
      helpFormatter0.getWidth();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptionComparator();
      int int0 = 41;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 41, "Mj\"ehYVot");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-682);
      helpFormatter0.getWidth();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("~B]PmWw<&v![M7", "0&3^<+HY],>l;90<Q", (Options) null, "~B]PmWw<&v![M7");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-326));
      String string0 = "line.separator";
      int int0 = (-175);
      helpFormatter0.defaultWidth = (-175);
      helpFormatter0.defaultOptPrefix = "line.separator";
      helpFormatter0.defaultWidth = (-361);
      helpFormatter0.setLongOptSeparator("[ARG...]");
      helpFormatter0.setWidth((-326));
      String string1 = "'";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[ARG...]", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(34);
      helpFormatter0.getLeftPadding();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setArgName((String) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.rtrim("Jz<");
      helpFormatter0.setOptPrefix("(f&]D9 hUUt2");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setLongOptPrefix((String) null);
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 34, options0, 34, 34);
      helpFormatter0.getNewLine();
      helpFormatter0.getArgName();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = new Option("arg", true, "usage: ");
      helpFormatter0.setDescPadding((-2));
      helpFormatter0.setSyntaxPrefix("arg");
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(5177, "Bj\":f.", "Bj\":f.", options0, (String) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      String string0 = "|h?&5Jb";
      helpFormatter0.setSyntaxPrefix("|h?&5Jb");
      MockFile.createTempFile("|h?&5Jb", "--");
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 34, "|h?&5Jb", "|h?&5Jb", (Options) null, 34, (-1), "[");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "arg");
      Option option0 = new Option("arg", "usage: ", false, "");
      options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption(option0);
      OptionGroup optionGroup1 = new OptionGroup();
      optionGroup1.addOption(option0);
      options3.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      helpFormatter1.renderWrappedText(stringBuffer0, 74, 1, "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("   ");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "org.apache.commons.cli.HelpFormatter");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.setWidth((-890));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\">B@$>mqC", options0, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", "", true, "org.apache.commons.cli.Option");
      option0.setArgName("arg");
      Options options0 = new Options();
      Option option1 = new Option("arg", "arg", true, "arg");
      Options options1 = options0.addOption(option1);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption(option0);
      Locale.getISOLanguages();
      optionGroup1.addOption(option1);
      Options options4 = options3.addOption("", "ic", true, "L}O}*k?,RC[j:2#");
      helpFormatter0.printHelp(" -]", (String) null, options3, "   ", true);
      helpFormatter0.createPadding(0);
      helpFormatter0.printHelp(32, "eT3chpzEJ^-bx", (String) null, options2, "eT3chpzEJ^-bx");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), " ] [ long ", options4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", true, "#B)UBF");
      Options options1 = options0.addOption(option0);
      option0.setArgName("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", options1, true);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          HelpFormatter helpFormatter0 = new HelpFormatter();
          Options options0 = null;
          helpFormatter0.getOptPrefix();
          helpFormatter0.setSyntaxPrefix("|h?&5Jb");
          // Undeclared exception!
          helpFormatter0.printHelp(0, "\n", "\n", (Options) null, "\n");
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Options options0 = new Options();
      Option option0 = new Option("arg", "");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption((String) null, true, (String) null);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, ">", ">", options3, (-1), (-39), "");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setArgName(" ");
      helpFormatter0.getArgName();
      helpFormatter0.getOptPrefix();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "]c|Q88a`v");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // ]c|Q88a`v
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "arg");
      Option option0 = new Option("arg", "usage: ", false, "");
      options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption(option0);
      OptionGroup optionGroup1 = new OptionGroup();
      optionGroup1.addOption(option0);
      options3.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", options3, true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getSyntaxPrefix();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      String string0 = helpFormatter1.defaultLongOptPrefix;
      mockPrintWriter0.append((CharSequence) "--", 1, 1);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter3.printUsage((PrintWriter) mockPrintWriter0, 3, "<uJg;M3U^", options3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getSyntaxPrefix();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      int int0 = helpFormatter0.defaultLeftPad;
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      Options options0 = null;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "\n", "\n", (Options) null, "\n");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.lookupTag(linkedList0, set0);
      objectArray0[1] = object0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) helpFormatter0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "--", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 1354, (Options) null, 479, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "GhQPSYxaO&4U&", options0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.findWrapPos(" ", 0, 0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("wqs9");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3834, "wqs9", "", (Options) null, 33, 3, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Options options0 = new Options();
      Option option0 = new Option("", true, "7A9rp2QnPOP");
      options0.addOption(option0);
      option0.setArgName("6gdkp;");
      Options options1 = options0.addOption(option0);
      option0.getValues();
      helpFormatter0.printHelp("Q^fV#&]>Y23?", "6gdkp;", options1, "line.separator", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptPrefix();
      helpFormatter1.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getSyntaxPrefix();
      assertEquals(0, helpFormatter0.defaultDescPad);
      
      helpFormatter0.createPadding(0);
      helpFormatter0.findWrapPos("usage: ", 0, 0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      String string0 = "I#";
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = new Option("arg", true, "usage: ");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "I#", options0, "I#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "usage: ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(" ", options1, true);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Options options0 = new Options();
      Option option0 = new Option("", true, "org.apache.commons.cli.HelpFormatter");
      Options options1 = options0.addOption(option0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte) (-55);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte) (-1);
      option0.setArgName("6gdkp;");
      byteArray0[5] = (byte)36;
      options0.addOption(option0);
      option0.getValues();
      Options options2 = options1.addOption("arg", true, "\n");
      helpFormatter0.printHelp(63, "org.apache.commons.cli.OptionGroup", "--", options2, "org.apache.commons.cli.HelpFormatter");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "", (String) null, options0, "= W");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Options options0 = new Options();
      Option option0 = new Option("", false, "org.apache.commons.cli.HelpFormatter");
      options0.addOption(option0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)64;
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 1, (-2), "~3^Hi5< 6aIPmDEt-A");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-250), options1, (-679), (-250));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "usage: ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1049), "hI#", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "}F(";
      helpFormatter0.printHelp("}F(", options0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("}F(");
      int int0 = 62;
      String string1 = "o.|2<U*'U)kkKk";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 32, (String) null, "}F(", options0, 33, 3, "o.|2<U*'U)kkKk", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "", "8RWm2q&\"-ceU{R", options0, "usage: ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "", true, "-");
      helpFormatter0.printHelp("w:N)pAS'5uL1Jo?", options0);
      String string0 = "#_&Pghs";
      String string1 = "&`1";
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "XN~G{6rN=D", "#_&Pghs", options1, 62, 43, "&`1", true);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", true, "\n");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options1 = new Options();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      helpFormatter0.defaultWidth = (-1185);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", "--", options0, "usage: ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", true, "\n");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options1 = new Options();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      options0.addOption("arg", "-", true, "usage: ");
      helpFormatter0.printHelp(" ", "{ww-u*", options0, "usage: ", true);
      helpFormatter0.setNewLine("-");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "\n");
      StringBuffer stringBuffer0 = new StringBuffer(74);
      StringBuffer stringBuffer1 = stringBuffer0.append(0.0F);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer1, (-161), options1, 74, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Options options0 = new Options();
      Option option0 = new Option("", false, "' contains an illegal character : '");
      Options options1 = options0.addOption("arg", "usage: ", false, "-");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)64;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte)39;
      helpFormatter0.defaultLeftPad = (int) (byte) (-1);
      option0.setArgName("6gdkp;");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("' contains an illegal character : '", "", options1, "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 63, "D3Z");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "2&";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 74, 1714);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 32;
      String string0 = "[ARG...]";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 32, 32, "[ARG...]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Options options0 = new Options();
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.setLongOptSeparator("]");
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options1 = new Options();
      helpFormatter0.renderWrappedText(stringBuffer0, 63, 63, "-");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("--", options0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      options0.helpOptions();
      helpFormatter1.setOptionComparator(comparator0);
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options1 = new Options();
      mockPrintWriter0.print((-1.0));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      helpFormatter0.printHelp("usage: ", "arg", options0, "usage: ", true);
      helpFormatter0.getLongOptSeparator();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 9, "-");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("--", options0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.setLongOptPrefix("d,(cw|");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options1 = new Options();
      helpFormatter0.renderWrappedText(stringBuffer0, 2414, 655, "");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter2.getLongOptSeparator();
      helpFormatter1.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, (-1020), "arg", "|NB+A[ez`bJe1", (Options) null, 74, (-1437), " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("--", options0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 655, "usage: ", " ", options0, 1, 74, "--", false);
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append(1658.1F);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer1 = helpFormatter2.renderOptions(stringBuffer0, 2386, options0, 3, 26);
      helpFormatter1.renderWrappedText(stringBuffer1, 3, 74, "-");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      String string0 = helpFormatter3.defaultArgName;
      helpFormatter3.getLongOptSeparator();
      helpFormatter2.getSyntaxPrefix();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 321, "--", (String) null, options0, 1564, 112, "", false);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator0);
      helpFormatter1.setLongOptPrefix(" ");
      helpFormatter1.setLongOptSeparator((String) null);
      helpFormatter1.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 74, "\n");
      helpFormatter1.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setLongOptPrefix("I1S");
      helpFormatter0.setLongOptSeparator(";=E@nZc&@%\"I}xD*p");
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      Options options0 = new Options();
      options0.addOption("", "", true, "");
      helpFormatter0.renderWrappedText(stringBuffer0, 8, 8, "U>DVcO0k<Oa3& oR|\"");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, " ", "cmdLineSyntax not provided", options0, "li\".S?E;{50@A");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      Locale locale0 = Locale.GERMAN;
      mockPrintWriter0.format(locale0, "-", (Object[]) null);
      stringWriter0.flush();
      Option option0 = new Option("d", false, "d");
      option0.clearValues();
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-662), "", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("   ", "   ", (Options) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Tc&Uf[vL$H";
      int int0 = 0;
      String string1 = "   ";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Tc&Uf[vL$H", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options1 = new Options();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderOptions((StringBuffer) null, (-287), options0, 1, 3);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 3, 3156, "--");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLongOptPrefix(")q).bWZg");
      helpFormatter0.setLongOptSeparator("li\".S?E;{50@A");
      helpFormatter0.getOptPrefix();
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
      helpFormatter1.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = stringBuffer0.append(1889.22F);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.renderWrappedText(stringBuffer1, 3, 1, "");
      helpFormatter1.renderWrappedText(stringBuffer0, 32, 1, "(l?");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter2.printOptions(mockPrintWriter0, 3, options1, 14, 3);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", true, "\n");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options1 = new Options();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      helpFormatter0.defaultDescPad = 63;
      helpFormatter0.printHelp(" ", "{ww-u*", options0, "usage: ", true);
      helpFormatter0.setNewLine("-");
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("--", options0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 655, "usage: ", " ", options0, 1, 74, "--", false);
      mockPrintWriter0.println((float) 74);
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator0);
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("--");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "\n");
      stringWriter0.append('\'');
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("-", options0, true);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1, "\n");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "-");
      helpFormatter0.printHelp("org.apache.commons.cli.OptionGroup", options1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("' contains an illegal character : '");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "usage: ", (String) null, options0, 63, 3, (String) null, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      helpFormatter0.defaultLongOptPrefix = "";
      FileSystemHandling.shouldAllThrowIOExceptions();
      Option option0 = new Option((String) null, true, (String) null);
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("|FJ+)$%*nkK+", "", options1, "|FJ+)$%*nkK+", true);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("WW:9-c$qnR]eyfqB", "8*o/1+t");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1761, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 105, "", options0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-666));
      helpFormatter0.getArgName();
      helpFormatter0.getDescPadding();
      int int0 = 34;
      StringWriter stringWriter0 = new StringWriter(34);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      int int1 = 1404;
      String string0 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      helpFormatter0.setLongOptPrefix("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1404, "arg");
      helpFormatter0.rtrim("u+H]~Y@i`");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "u+H]~Y@i`");
      stringBuffer0.append((double) (-666));
      stringBuffer0.chars();
      // Undeclared exception!
      try { 
        stringBuffer0.deleteCharAt(74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 74
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 6060, 1500, "I ");
      helpFormatter0.setNewLine("I ");
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 6060, options0, 2411, 6060);
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(9);
      stringWriter0.getBuffer();
      String string0 = " ";
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-2548);
      helpFormatter0.renderWrappedText(stringBuffer0, 2357, (-2548), " ");
      Options options0 = new Options();
      options0.hasOption("NO_ARGS_ALLOWED");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1039), (String) null, " ", options0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-307), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options1 = new Options();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      helpFormatter0.printHelp("j D<m", "j D<m", options0, "<", false);
      String string0 = "--";
      helpFormatter0.setNewLine("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("-");
      helpFormatter1.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-341));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix(")q).bWZg");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(";=E@nZc&@%\"I}xD*p").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLongOptPrefix(")q).bWZg");
      helpFormatter0.createPadding(108);
      helpFormatter0.rtrim("luwBsNi");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(pipedOutputStream0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 78, 61, "luwBsNi");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 34, "org.apache.commons.cli.HelpFormatter", "luwBsNi", options1, 1, 78, (String) null, false);
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter1, 1, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, " ");
      helpFormatter0.printHelp("d>$qWY9!{P", "d>$qWY9!{P", options1, "", true);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.createPadding(34);
      helpFormatter0.rtrim("");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 78, 78, "");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "d>$qWY9!{P", "", options0, 78, 1, "<FbZyk`FgT", false);
      helpFormatter0.getLeftPadding();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 34, "line.separator");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-3351), "\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "NO_ARGS_ALLOWED";
      helpFormatter0.setLongOptSeparator("NO_ARGS_ALLOWED");
      int int0 = 2;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "9T");
      helpFormatter0.createPadding(2);
      PrintWriter printWriter0 = null;
      int int1 = 10;
      String string1 = "-";
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      options0.hasLongOption("  ");
      option0.setType("  ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 10, "-", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("X2MHBC^j2C", options0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 655, "usage: ", (String) null, options0, 1, 74, "--", true);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator0);
      helpFormatter1.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = stringBuffer0.append((float) 1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.renderWrappedText(stringBuffer1, 2357, 1500, " ");
      helpFormatter2.getSyntaxPrefix();
      helpFormatter2.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, " ");
      helpFormatter0.defaultLeftPad = 1626;
      helpFormatter0.printHelp("d>$qWY9!{P", "d>$qWY9!{P", options1, ">", true);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.createPadding(34);
      helpFormatter0.rtrim(">");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      Options options2 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(34);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 74, 10, "                                  ");
      Options options3 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, (-2112), (Options) null, 34, 47);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-3726), "^~4I", "gpM0", (Options) null, "}&!*");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("=Jt6)2)mk{Y0");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      int int0 = 3;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-819), "-", "--", options0, 3, 174, "*D3lZAiGpAJZ\"2L", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setWidth((-1));
      helpFormatter0.setNewLine(">");
      Options options0 = new Options();
      Option option0 = new Option("", "E=0tC");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(436, "`", "\"}})1", options1, "irr^cg$.J");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1761, "arg");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 124, (String) null, (String) null, options0, 124, (-2373), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("w:N)pAS'5uL1Jo?", options0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 655, "w:N)pAS'5uL1Jo?", "w:N)pAS'5uL1Jo?", options0, 10, 13, "arg", true);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 31, 13, "-");
      helpFormatter0.renderWrappedText(stringBuffer1, 3040, (-464), " 9?@P & ,U");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 34, " 9?@P & ,U", "", options0, 2, 14, "");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "w:N)pAS'5uL1Jo?";
      Options options0 = new Options();
      helpFormatter0.printHelp("w:N)pAS'5uL1Jo?", options0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      options0.helpOptions();
      String string1 = "usage: ";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "W@ph\"9", options0, "usage: ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 15, "usage: ", "^HD1/';-*Cs+iqML", options0, 13, 10, "usage: ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("--", options0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      int int0 = 20;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 655, "usage: ", "usage: ", options0, 10, 20, "^HD1/';-*Cs+iqML", false);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("--", (-1), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ")q).bWZg";
      Options options0 = new Options();
      helpFormatter0.printHelp(")q).bWZg", options0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("w:N)pAS'5uL1Jo?");
      int int0 = 655;
      String string1 = "j?)S#";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 655, "j?)S#", "j?)S#", options0, (-487), (-1879), "' was specified but an option from this group ", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2271), (-2271), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("X2MHBC^j2C", options0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 655, "usage: ", (String) null, options0, 1, 74, "--", true);
      helpFormatter0.findWrapPos("", 74, 655);
      helpFormatter1.setNewLine("-");
      Options options1 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(74, ")?#h#TZ_,/rB3} 3tS", "--", options0, "-", false);
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter2.printHelp("vq(GxNa5jt|:(|?v", "", options0, "`9VKN%#I[}bZX(Wh2):");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix(")q).bWZg");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) " 3\"#i]";
      objectArray0[2] = (Object) stringWriter0;
      char[] charArray0 = new char[0];
      stringWriter0.write(charArray0);
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      mockPrintWriter0.format(" 3\"#i]", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp(124, " ", "", options0, " ", false);
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("{VWlpz\"KZ=/(", " | ", options0, "--");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 13, "P<i5]OQlj29T>? R");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "|?{0r?y@EL*+Wz";
      helpFormatter0.setSyntaxPrefix("|?{0r?y@EL*+Wz");
      Options options1 = new Options();
      options0.helpOptions();
      String string1 = "";
      helpFormatter0.printHelp("|?{0r?y@EL*+Wz", "", options0, "", false);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      int int0 = 0;
      // Undeclared exception!
      try { 
        stringBuffer0.insert((-1107), '\\');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix(")q).bWZg");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) " 3\"#i]";
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter0.renderWrappedText(stringBuffer0, 1500, 1500, "i");
      Options options0 = new Options();
      helpFormatter0.printHelp("i", options0, false);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("w:N)pAS'5uL1Jo?", options0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 655, "w:N)pAS'5uL1Jo?", "w:N)pAS'5uL1Jo?", options0, 10, 13, "arg", true);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 31, 13, "-");
      helpFormatter0.renderWrappedText(stringBuffer1, 3040, 655, " 9?@P & ,U");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 34, "", (String) null, options0, 559, 3040, "0=Z>Y )VHh]5j'/ ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix(")q).bWZg");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.setLongOptPrefix(")q).bWZg");
      helpFormatter0.setLongOptSeparator("li\".S?E;{50@A");
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      char[] charArray0 = new char[4];
      charArray0[0] = 'k';
      charArray0[1] = 'a';
      charArray0[2] = 'c';
      charArray0[3] = 'b';
      stringBuffer0.append(charArray0);
      Options options1 = options0.addOption("", "", false, "li\".S?E;{50@A");
      helpFormatter0.renderOptions(stringBuffer0, 44, options1, 44, 0);
      helpFormatter0.findWrapPos("[ARG...]", 0, 44);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("A CloneNotSupportedException was thrown: ");
      StringBuffer stringBuffer1 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, (-93), options1, (-3940), 44);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1500, 6060, "i");
      helpFormatter0.renderWrappedText(stringBuffer1, 6060, 1500, "I ");
      helpFormatter0.setNewLine("I ");
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer1, 6060, options0, 2411, 6060);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setLongOptPrefix("");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'p';
      stringWriter0.write(charArray0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) 'p';
      objectArray0[3] = (Object) " 3\"#i]";
      stringWriter0.write(charArray0);
      PrintWriter printWriter0 = mockPrintWriter0.format("\n", objectArray0);
      String string1 = "<fl+";
      helpFormatter0.printWrapped(printWriter0, 2025, 2025, "<fl+");
      StringBuffer stringBuffer0 = new StringBuffer(74);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1292), 0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ")q).bWZg";
      String string1 = "   ";
      Options options0 = null;
      int int0 = 1213;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1213, ")q).bWZg", ")q).bWZg", (Options) null, "   ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("w:N)pAS'5uL1Jo?", options0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      int int0 = 655;
      int int1 = 10;
      String string0 = "^HD1/';-*Cs+iqML";
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 655, "w:N)pAS'5uL1Jo?", "w:N)pAS'5uL1Jo?", options0, 10, 13, "^HD1/';-*Cs+iqML", true);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 10, (-435), "w:N)pAS'5uL1Jo?");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("wy/`:<*P[mf>V.");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "w:N)pAS'5uL1Jo?";
      Options options0 = new Options();
      options0.addOption("arg", "", true, "-");
      helpFormatter0.printHelp("w:N)pAS'5uL1Jo?", options0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\n");
      StringWriter stringWriter2 = stringWriter1.append('\'');
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      // Undeclared exception!
      try { 
        stringWriter2.append((CharSequence) "-", (-989), 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.OptionGroup";
      Options options0 = new Options();
      Option option0 = new Option("", false, "org.apache.commons.cli.HelpFormatter");
      Options options1 = options0.addOption(option0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)36;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      options0.addOption(option0);
      option0.getValues();
      Options options2 = options1.addOption("arg", false, (String) null);
      helpFormatter0.printHelp(63, "org.apache.commons.cli.OptionGroup", "NNivVCgx", options2, (String) null);
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix(")q).bWZg");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.setLongOptPrefix(")q).bWZg");
      helpFormatter0.setLongOptSeparator("li\".S?E;{50@A");
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 44;
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", false, "li\".S?E;{50@A");
      helpFormatter0.renderOptions(stringBuffer0, 44, options1, 44, 0);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 31, "");
      helpFormatter0.renderWrappedText(stringBuffer1, 31, 44, "");
      MockPrintWriter mockPrintWriter1 = null;
      try {
        mockPrintWriter1 = new MockPrintWriter((Writer) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "d>$qWY9!{P";
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, " ");
      String string1 = ">";
      helpFormatter0.printHelp("d>$qWY9!{P", "d>$qWY9!{P", options1, ">", true);
      helpFormatter0.getLongOptPrefix();
      int int0 = 34;
      helpFormatter0.createPadding(34);
      helpFormatter0.rtrim(">");
      StringBuffer stringBuffer0 = new StringBuffer(127);
      int int1 = 115;
      int int2 = 78;
      // Undeclared exception!
      try { 
        stringBuffer0.insert(78, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 78
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, " ");
      helpFormatter0.printHelp("d>$qWY9!{P", "d>$qWY9!{P", options1, ">", true);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.createPadding(34);
      helpFormatter0.rtrim(">");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 78, 78, "");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "d>$qWY9!{P", ">", options0, 78, 1, "<FbZyk`FgT", false);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("w:N)pAS'5uL1Jo?", options0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      int int0 = 78;
      int int1 = 34;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(pipedOutputStream0);
      String string0 = "[ARG...]";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1), (-1), "[ARG...]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "\\r`";
      int int0 = 0;
      helpFormatter0.setSyntaxPrefix("\r`");
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.printHelp("\r`", "\r`", options0, "\r`", false);
      int int1 = (-2388);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-2388));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 14;
      String string0 = "E IAaAg";
      StringBuffer stringBuffer0 = new StringBuffer("E IAaAg");
      Options options0 = new Options();
      String string1 = "";
      options0.hasShortOption("usage: ");
      options0.hasLongOption("");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 14, options0, 14, 0);
      stringBuffer1.append('1');
      StringBuffer stringBuffer2 = helpFormatter0.renderOptions(stringBuffer1, 0, options0, 14, 0);
      helpFormatter0.createPadding(14);
      helpFormatter0.getNewLine();
      MockFile mockFile0 = new MockFile("9A<F6LnD<Z4?JDG#t2");
      MockFile mockFile1 = new MockFile(mockFile0, "              ");
      mockFile1.toPath();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      String string2 = "*]G1;$4sj";
      String string3 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer2, (-255), options0, (-3213), (-3213));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-824), "T0uIDk-", "", (Options) null, "T0uIDk-", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("I ", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      int int0 = 921;
      int int1 = 0;
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
      stringBuffer0.append(stringBuffer1);
      Options options0 = new Options();
      char[] charArray0 = new char[2];
      charArray0[0] = 'h';
      charArray0[1] = 'L';
      stringBuffer0.insert(1, charArray0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("-", true, "o=`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('/');
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 3, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("!DMI\"f");
      int int0 = 0;
      String string0 = "s_/d5k#l!u:LX";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = null;
      try {
        option0 = new Option("--", "XB2v#sAxkF");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix(")q).bWZg");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) " 3\"#i]";
      objectArray0[2] = (Object) stringWriter0;
      char[] charArray0 = new char[0];
      stringWriter0.write(charArray0);
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(" 3\"#i]", objectArray0);
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, 0, " 3\"#i]");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", "", true, "-");
      helpFormatter0.printHelp("w:N)pAS'5uL1Jo?", options0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\n");
      stringWriter1.append('\'');
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = (-1543);
      String string0 = "";
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1543), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 1971, options0, 1971, 0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", true, " ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append(1.0F);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer1 = helpFormatter2.renderWrappedText(stringBuffer0, 3, 1640, "--");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer1, 49, options0, 74, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "_co#DRTBx8YtrId-/v";
      String string1 = "=^P!";
      Options options0 = new Options();
      String string2 = "psfVp";
      options0.addOption("psfVp", "--", true, "usage: ");
      Option option0 = null;
      try {
        option0 = new Option("-", "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("2vc\"Vm./|Kp/Gd#P{*d");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      stringBuffer0.append((CharSequence) "2vc\"Vm./|Kp/Gd#P{*d");
      stringBuffer0.insert(0, 'O');
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 13, options0, 1, (-503));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(9);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "TcUf[vL$H";
      Options options0 = null;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "   ", "   ", (Options) null, "^~4I");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "\\r`";
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "39grkC");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      int int0 = 74;
      String string0 = "";
      MockFile mockFile0 = new MockFile("usage: ", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('F');
      int int1 = (-100);
      String string1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-100), "", (String) null, options0, 361, 361, "w:N)pAS'5uL1Jo?", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = "a*nIRzY#awuYj$";
      helpFormatter0.setNewLine("a*nIRzY#awuYj$");
      helpFormatter0.getDescPadding();
      helpFormatter0.getWidth();
      PrintWriter printWriter0 = null;
      helpFormatter0.setLongOptPrefix("org.apache.commons.cli.HelpFormatter$1");
      String string1 = "";
      Options options0 = new Options();
      String string2 = "";
      String string3 = null;
      options0.addOption("", "-", true, (String) null);
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("[", "[", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setWidth((-1));
      helpFormatter0.setNewLine(">");
      Options options0 = new Options();
      Option option0 = new Option("", "E=0tC");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-4637), "", "", options1, (-2), (-1), "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          HelpFormatter helpFormatter0 = new HelpFormatter();
          helpFormatter0.getLeftPadding();
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.GeneratedConstructorAccessor77.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:234)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:189)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("w:N)pAS'5uL1Jo?", options0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 655, "w:N)pAS'5uL1Jo?", "w:N)pAS'5uL1Jo?", options0, 10, 13, "^HD1/';-*Cs+iqML", true);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("w:N)pAS'5uL1Jo?", (-1), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Options options0 = new Options();
      Option option0 = new Option("", false, "org.apache.commons.cli.HelpFormatter");
      Options options1 = options0.addOption(option0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)36;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      options0.addOption(option0);
      option0.getValues();
      Options options2 = options1.addOption("arg", false, "\n");
      helpFormatter0.printHelp(63, "org.apache.commons.cli.OptionGroup", "NNivVCgx", options2, "org.apache.commons.cli.HelpFormatter");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "", (String) null, options0, "= W");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.setOptPrefix("@");
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "O2pXqO8oN11)^u[*:[", false, "org.apache.commons.cli.HelpFormatter$1");
      Option option0 = new Option("arg", true, "7l@.ZX-,$Fn\"@}DUt");
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, options3, (-687), 1023);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", true, ">");
      Option option0 = new Option("", true, "lu[.}W!U");
      Options options3 = options2.addOption(option0);
      Options options4 = options3.addOption("", "-", true, "");
      // Undeclared exception!
      helpFormatter0.printHelp(0, ">", "", options4, "", false);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.defaultOptPrefix = "";
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", (-1821), (-1821));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2);
      String string0 = "E aAg";
      StringBuffer stringBuffer0 = new StringBuffer("E aAg");
      Options options0 = new Options();
      int int1 = 0;
      String string1 = "";
      options0.hasLongOption("");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2), options0, (-2), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("org.apache.commons.cli.HelpFormatter$1");
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-326));
      String string0 = "line.separator";
      int int0 = (-175);
      helpFormatter0.defaultWidth = (-175);
      helpFormatter0.defaultOptPrefix = "line.separator";
      helpFormatter0.defaultWidth = (-361);
      helpFormatter0.setLongOptSeparator("[ARG...]");
      helpFormatter0.setWidth((-326));
      String string1 = "'";
      Options options0 = new Options();
      boolean boolean0 = true;
      options0.addOption("arg", true, "arg");
      String string2 = "XLw]ux]v|0xr98j";
      Option option0 = null;
      try {
        option0 = new Option("XLw]ux]v|0xr98j", "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'XLw]ux]v|0xr98j' contains an illegal character : ']'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(" ", "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }
}
