* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: org.apache.commons.cli.HelpFormatter
* Starting Client-0
* Connecting to master process on port 4073
* Analyzing classpath: 
  - subjects/buggy-versions/Cli-32/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.cli.HelpFormatter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1151
* Using seed 271367278
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 400 / 1151
[MASTER] 16:56:31.561 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 601s and 663 generations, 241905 statements, best individual has fitness: 117.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
[MASTER] 17:07:47.580 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Coverage of criterion LINE: 100%
* Total number of goals: 203
* Number of covered goals: 203
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 94%
* Total number of goals: 157
* Number of covered goals: 148
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 55
* Number of covered goals: 55
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 94%
* Total number of goals: 508
* Number of covered goals: 475
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 76%
* Total number of goals: 46
* Number of covered goals: 35
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 98%
* Total number of goals: 40
* Number of covered goals: 39
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 98%
* Total number of goals: 40
* Number of covered goals: 39
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 94%
* Total number of goals: 157
* Number of covered goals: 148
* Generated 130 tests with total length 1626
* Resulting test suite's coverage: 88% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 17:08:41.766 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.8669666666666667% of time used, but only 22/130 tests minimized), falling back to using all assertions
[MASTER] 17:08:49.761 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 13%
* Compiling and checking tests
[MASTER] 17:09:06.600 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:09:06.649 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:09:06.692 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:09:08.494 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_179_tmp__ESTest.test0(HelpFormatter_179_tmp__ESTest.java:48)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 17:09:08.496 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(74, helpFormatter0.getWidth());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(74, helpFormatter0.defaultWidth);
assertNotNull(helpFormatter0);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
assertNotNull(mockPrintWriter0);

MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
assertNotNull(mockPrintWriter1);
assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));

mockPrintWriter1.print(1);
assertFalse(fileDescriptor0.valid());
assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
assertNotSame(mockPrintWriter0, mockPrintWriter1);
assertNotSame(mockPrintWriter1, mockPrintWriter0);

boolean boolean0 = mockPrintWriter1.checkError();
assertFalse(fileDescriptor0.valid());
assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
assertTrue(boolean0);
assertNotSame(mockPrintWriter0, mockPrintWriter1);
assertNotSame(mockPrintWriter1, mockPrintWriter0);

Object[] objectArray0 = new Object[4];
objectArray0[0] = (Object) mockFileOutputStream0;
objectArray0[1] = (Object) mockPrintWriter1;
objectArray0[2] = (Object) helpFormatter0;
objectArray0[3] = (Object) fileDescriptor0;
PrintWriter printWriter0 = mockPrintWriter1.printf("-", objectArray0);
assertFalse(fileDescriptor0.valid());
assertNotNull(printWriter0);
assertEquals(4, objectArray0.length);
assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
assertFalse(printWriter0.equals((Object)mockPrintWriter0));
assertNotSame(mockPrintWriter0, printWriter0);
assertNotSame(mockPrintWriter0, mockPrintWriter1);
assertSame(mockPrintWriter1, printWriter0);
assertNotSame(mockPrintWriter1, mockPrintWriter0);
assertSame(printWriter0, mockPrintWriter1);
assertNotSame(printWriter0, mockPrintWriter0);

helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 44, "*K+HCN", "GMJ", (Options) null, 44, 42, ":i'L<58.", true);

[MASTER] 17:09:15.849 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_200_tmp__ESTest.test0(HelpFormatter_200_tmp__ESTest.java:52)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 17:09:15.850 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Options options0 = new Options();
assertNotNull(options0);

HelpFormatter helpFormatter0 = new HelpFormatter();
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals(74, helpFormatter0.getWidth());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertNotNull(helpFormatter0);

int int0 = 0;
FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
assertNotNull(mockPrintWriter0);

helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "0i}vk$k}", "", options0, 65, 56, "|]Q8* 6fk5", true);

[MASTER] 17:09:22.743 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_215_tmp__ESTest.test0(HelpFormatter_215_tmp__ESTest.java:48)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 17:09:22.744 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals(74, helpFormatter0.getWidth());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, helpFormatter0.defaultWidth);
assertNotNull(helpFormatter0);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
assertNotNull(mockPrintWriter0);

MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
assertNotNull(mockPrintWriter1);
assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));

mockPrintWriter1.print(1);
assertFalse(fileDescriptor0.valid());
assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
assertNotSame(mockPrintWriter0, mockPrintWriter1);
assertNotSame(mockPrintWriter1, mockPrintWriter0);

boolean boolean0 = mockPrintWriter1.checkError();
assertFalse(fileDescriptor0.valid());
assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
assertTrue(boolean0);
assertNotSame(mockPrintWriter0, mockPrintWriter1);
assertNotSame(mockPrintWriter1, mockPrintWriter0);

Object[] objectArray0 = new Object[4];
objectArray0[0] = (Object) mockFileOutputStream0;
objectArray0[1] = (Object) mockPrintWriter1;
objectArray0[2] = (Object) helpFormatter0;
objectArray0[3] = (Object) fileDescriptor0;
PrintWriter printWriter0 = mockPrintWriter1.printf("-", objectArray0);
assertFalse(fileDescriptor0.valid());
assertNotNull(printWriter0);
assertEquals(4, objectArray0.length);
assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
assertFalse(printWriter0.equals((Object)mockPrintWriter0));
assertNotSame(mockPrintWriter0, mockPrintWriter1);
assertNotSame(mockPrintWriter0, printWriter0);
assertNotSame(mockPrintWriter1, mockPrintWriter0);
assertSame(mockPrintWriter1, printWriter0);
assertNotSame(printWriter0, mockPrintWriter0);
assertSame(printWriter0, mockPrintWriter1);

Options options0 = null;
int int0 = 44;
String string0 = "*K+HCN";
helpFormatter0.printHelp("", (Options) null);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 3
* Writing tests to file
* Writing JUnit test case 'HelpFormatter_ESTest' to results/Cli-32/org.apache.commons.cli.HelpFormatter/BBC-F0-50/tests/30
* Done!

* Computation finished
