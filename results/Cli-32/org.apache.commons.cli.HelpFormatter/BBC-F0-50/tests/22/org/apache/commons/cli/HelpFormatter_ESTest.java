/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 17:49:22 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Comparator;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = null;
      helpFormatter0.optionComparator = null;
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptionComparator();
      String string0 = " ";
      helpFormatter0.rtrim(" ");
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "\"";
      helpFormatter0.defaultDescPad = (-2663);
      int int0 = (-4222);
      helpFormatter0.defaultWidth = (-4222);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getDescPadding();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      helpFormatter0.getOptionComparator();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      Options options0 = new Options();
      String string0 = "_Iz}B";
      // Undeclared exception!
      try { 
        options0.addOption("!UnV", "\n", false, "_Iz}B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '!UnV' contains an illegal character : '!'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 74, "usage: ");
      stringBuffer0.append('#');
      helpFormatter0.setDescPadding((-776));
      helpFormatter0.renderWrappedText(stringBuffer0, 64, 2, "`[Iz5C99cR=*W%94");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("C>ir~.QD#jZ", options0, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, 74, " ");
      Options options0 = new Options();
      helpFormatter0.printHelp(34, " ", " ] [ long ", options0, " ] [ long ", false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('}');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      stringBuffer0.append(false);
      helpFormatter0.renderWrappedText(stringBuffer0, 28, 34, " ");
      helpFormatter0.findWrapPos(" ] [ long ", 1, 0);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      int int0 = 977;
      StringBuffer stringBuffer0 = new StringBuffer(977);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "$1-<Uvp", true, "   ");
      Options options2 = options1.addOption("arg", true, ">");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options2, 10, 0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 645;
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.defaultLongOptPrefix = "IQJ~_HAKMWz].?[d4u";
      helpFormatter0.setLeftPadding((-3099));
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.rtrim("");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.setArgName("");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("-", "-", options0, "", true);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(29);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 4074, "'l5b\"n4Qpw_:V?f|R#");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Options options0 = new Options();
      Options options1 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp("[61.!6Jv0", "--", options1, "--");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getDescPadding();
      Option option0 = new Option("", (String) null);
      Options options2 = options0.addOption(option0);
      options2.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(".", "--", options3, "--", false);
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, "", options3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.defaultSyntaxPrefix = "I:R5B.IQ=)";
      helpFormatter0.printHelp("eEa'{v", "eEa'{v", options0, "eEa'{v", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 78, options0, 78, 78);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.setSyntaxPrefix("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      int int0 = (-625);
      helpFormatter0.defaultWidth = (-625);
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      int int1 = 32;
      String string1 = "line.separator";
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        stringBuffer0.insert(74, 1267.2543F);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 74
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "z(M@Q]l`Qo)b>_\"X", true, "usage: ");
      helpFormatter0.printHelp("z(M@Q]l`Qo)b>_\"X", "org.apache.commons.cli.Option", options1, "org.apache.commons.cli.Option");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 3, 2, "");
      options1.getMatchingOptions("--");
      helpFormatter0.renderWrappedText(stringBuffer1, 74, 17, "c=S~nDq6nNh");
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 17, "-", "arg", options1, 3, 74, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Object object0 = new Object();
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("BidIx8C,,iW5wdtbG", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1, 3, "\n");
      stringBuffer0.append((Object) stringBuffer1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(3);
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, (-1), 1, "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1, 3, "\n");
      stringBuffer0.append((Object) stringBuffer1);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 42, 117, "/\"+e#tf{'&{/%GmmK;");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 5, "'C8_#F&Z!`");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.defaultSyntaxPrefix = null;
      String string0 = "org.apache.commons.cli.Options";
      helpFormatter0.setLongOptPrefix("");
      Options options0 = new Options();
      options0.getMatchingOptions("(t 'ktVuOio");
      Options options1 = options0.addOption((String) null, true, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(238, "Enw\"MReyubXYu`@!", "Illegal option name '", options1, "KYM4A{$*{k0`7Td", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1506;
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.createPadding(1506);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      try { 
        MockURI.URI("", "\n", "'KSWqcJc_cObA_Y-b", "", "--");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: ://%0A'KSWqcJc_cObA_Y-b?#--
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      int int0 = (-1213);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1213), (-1213), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.renderOptions((StringBuffer) null, 3, options1, 44, 3);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockFile mockFile0 = new MockFile("", " ");
      helpFormatter0.defaultDescPad = 736;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      mockFileOutputStream0.getChannel();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 127, "", options0);
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      Options options1 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 125, "l6Dd.k/=jKKK", (String) null, options0, 127, 127, (String) null, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockFile mockFile0 = new MockFile("-", "\n");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      mockFileOutputStream0.getChannel();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 127, "1,(%='~+Jb*%y", options0);
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      Options options1 = new Options();
      options1.getOption("OGpX54lMi(?}%?I4r");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1041, "@q:Tk.|", "~{p*m7DJSlxq:%U%vZw", options1, 127, 1041, "`", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getDescPadding();
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos((String) null, 127, 127);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-29));
      helpFormatter0.setLongOptSeparator("WJ3isL2Am'");
      MockFile mockFile0 = new MockFile("usage: ", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Illegal option name '", "WJ3isL2Am'", (Options) null, "WJ3isL2Am'", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("WJf2cm'");
      helpFormatter0.setLongOptSeparator("WJf2cm'");
      MockFile mockFile0 = new MockFile("usage: ", "-");
      MockFile mockFile1 = new MockFile("usage: ", "WJf2cm'");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 39, "&\"uckbiG`Jl<");
      Options options0 = new Options();
      helpFormatter0.printHelp("4", "Q", options0, ">");
      helpFormatter0.getDescPadding();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "Q", "", options0, 3078, 3078, "-", true);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-13));
      Options options0 = new Options();
      options0.getOptionGroups();
      String string0 = "a2Tt'WSpfX";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("%frI7W~f(FG{pj", "a2Tt'WSpfX", options0, "Hs3@>&");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 12, "Y", "arg", (Options) null, 3, 3, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "zM@Q]l`Qo)b>_\"X", false, "usage: ");
      helpFormatter0.printHelp("zM@Q]l`Qo)b>_\"X", "org.apache.commons.cli.Option", options1, "org.apache.commons.cli.Option");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter1.getSyntaxPrefix();
      Options options2 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      PrintWriter printWriter0 = mockPrintWriter0.append('J');
      helpFormatter1.printOptions(printWriter0, 9, options0, 9, 74);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options2, "--", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      stringBuffer0.append(1);
      String string0 = "<";
      helpFormatter0.getDescPadding();
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 818, (Options) null, 0, 818);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(74);
      helpFormatter0.setLongOptPrefix("WJf2cm'");
      helpFormatter0.setLongOptSeparator("WJf2cm'");
      MockFile mockFile0 = new MockFile("WJf2cm'", "--");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      mockFile1.mkdirs();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 32, "");
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      String string0 = "8f<#3\\WuZ/K:ag ?rX";
      Option option0 = new Option("", true, "8f<#3WuZ/K:ag ?rX");
      Options options1 = options0.addOption(option0);
      String string1 = "*!A9rC7";
      Options options2 = options1.addOption("", "*!A9rC7", true, "*!A9rC7");
      options0.hasLongOption("*!A9rC7");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string2 = ":JzvLm4Zc QD";
      int int0 = 10;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, (-2513), options2, 3, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockFile mockFile0 = new MockFile("arg", "--");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 25, "1,(%='~+Jb*%y", options0);
      optionGroup0.toString();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-414), "", "", options1, 127, 52, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setLongOptSeparator("WJf2cm'");
      MockFile mockFile0 = new MockFile("usage: ", "-");
      MockFile mockFile1 = new MockFile(mockFile0, "?");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 10, "Illegal option name '");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('J');
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "arg", 13, 2355);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setLongOptPrefix("WJf2cm'");
      helpFormatter0.setLongOptSeparator("WJf2cm'");
      MockFile mockFile0 = new MockFile("WJf2cm'", "--");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      mockFile0.getAbsoluteFile();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      mockFile1.mkdirs();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", false, "arg");
      helpFormatter0.printHelp("kfU9;)^z<-(lf_n>", options2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      helpFormatter0.setWidth(3);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('8');
      stringWriter0.append((CharSequence) "kfU9;)^z<-(lf_n>");
      helpFormatter1.defaultDescPad = (-1045);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", "kfU9;)^z<-(lf_n>", options0, "arg", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setLongOptPrefix("WJf2cm'");
      helpFormatter0.setLongOptSeparator("WJf2cm'");
      MockFile mockFile0 = new MockFile("WJf2cm'", "--");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      mockFile1.mkdirs();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 32, "");
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "WJf2cm'", options0, " l@}:%I+82735u/", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setLongOptPrefix("WJf2cm'");
      helpFormatter0.setLongOptSeparator("WJf2cm'");
      MockFile mockFile0 = new MockFile("usage: ", "-");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("I+iSI<8sMV", "jlXtP<|", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setLongOptPrefix("WJf2cm'");
      helpFormatter0.setLongOptSeparator("WJf2cm'");
      MockFile mockFile0 = new MockFile("usage: ", "-");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 32, "");
      helpFormatter0.setOptPrefix("arg");
      Options options0 = new Options();
      helpFormatter0.printHelp("4", "<", options0, "E`z%EW_uKQT}guMD");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getDescPadding();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3078, "-", " | ", options0, 3, 0, "WJf2cm'", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter1.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Options options0 = new Options();
      options0.getOptionGroups();
      StringWriter stringWriter1 = new StringWriter();
      stringWriter1.getBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 1, (-1019), "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setLongOptPrefix("WJf2cm'");
      helpFormatter0.setLongOptSeparator("WJf2cm'");
      MockFile mockFile0 = new MockFile("usage: ", "-");
      MockFile mockFile1 = new MockFile(mockFile0, "?");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Options options0 = new Options();
      boolean boolean0 = false;
      Options options1 = options0.addOption("arg", false, " ");
      Option option0 = new Option("?", "=~,_KNm jMsGVMzX&");
      Options options2 = options1.addOption("arg", "WJf2cm'", false, "Lg_*rsEqj;Fr'&/)v.");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "", options2);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", "z(M@Q]l`Qo)b>_\"X", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("org.apache.commons.cli.Option", options1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("usage: ").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      helpFormatter0.setWidth((-727));
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('8');
      stringWriter0.append((CharSequence) "^lZD{P\"D?SWF");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("#nl4", "z(M@Q]l`Qo)b>_\"X", options0, "org.apache.commons.cli.Option", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp("a2Tt'WSpfX", "W55=}T$2({@b!hq{V^", options0, "W55=}T$2({@b!hq{V^");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      helpFormatter0.printHelp("arg", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options1, " | ");
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 1, "-", "--", options0, 1236, (-777), "usage: ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("", true, "");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", "*!A9rC7", true, "*!A9rC7");
      options0.hasLongOption("*!A9rC7");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-1), options2, 32, 32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setLongOptPrefix("WJfcm'");
      helpFormatter0.setLongOptSeparator("WJfcm'");
      MockFile mockFile0 = new MockFile("usage: ", "-");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 32, "");
      helpFormatter0.setOptPrefix("\"");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("4", "<", options0, "E`z%EW_uKQT}guMD");
      helpFormatter1.getLeftPadding();
      helpFormatter1.getDescPadding();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3078, "-", " | ", options0, 3, 1, "\"", true);
      StringWriter stringWriter0 = new StringWriter(15);
      stringWriter0.append((CharSequence) "arg");
      StringWriter stringWriter1 = new StringWriter(3);
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "\"", (-945), 64);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(39);
      char char0 = 'l';
      StringWriter stringWriter1 = stringWriter0.append('l');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 786, 786, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setLongOptPrefix("WJf2cm'");
      helpFormatter0.setLongOptSeparator("WJf2cm'");
      MockFile mockFile0 = new MockFile("WJf2cm'", "--");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      mockFile1.mkdirs();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 32, "");
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      Option option0 = new Option("", true, "8f<#3WuZ/K:ag ?rX");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", "*!A9rC7", true, "*!A9rC7");
      options0.hasLongOption("*!A9rC7");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "", "--", options2, "hn1z8hFn=OEm");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setLongOptPrefix("WJf2cm'");
      helpFormatter0.setLongOptSeparator("WJf2cm'");
      MockFile mockFile0 = new MockFile("usage: ", "-");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 32, "");
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("4", "<", options0, "E`z%EW_uKQT}guMD");
      helpFormatter1.getLeftPadding();
      helpFormatter1.getDescPadding();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3078, "-", " | ", options0, 3, 1, "", true);
      helpFormatter0.printHelp("Illegal option name '", "", options0, "", true);
      helpFormatter0.getDescPadding();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter1.getDescPadding();
      helpFormatter1.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)42;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options0 = new Options();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options1 = new Options();
      options1.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, 74, " ");
      Options options0 = new Options();
      helpFormatter0.printHelp(34, " ", " ] [ long ", options0, " ] [ long ", false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('}');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 28, 34, " ");
      helpFormatter0.findWrapPos(" ] [ long ", 1, 0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.setArgName((String) null);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", (String) null, false, (String) null);
      options0.addOption("sAG1d", true, (String) null);
      options0.helpOptions();
      StringBuffer stringBuffer0 = new StringBuffer("[");
      helpFormatter0.renderWrappedText(stringBuffer0, 4189, (-1799), "");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 4189, options1, (-1799), 117);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.setArgName((String) null);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", (String) null, false, (String) null);
      Options options2 = options0.addOption("sAG1d", true, (String) null);
      List list0 = options0.helpOptions();
      helpFormatter0.printHelp("[", options2);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("(4T/)Of V'u`X ", (String) null).when(comparator0).toString();
      doReturn(74, 0).when(comparator0).compare(anyString() , anyString());
      helpFormatter0.setOptionComparator(comparator0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      helpFormatter0.setWidth(78);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('g');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) list0;
      objectArray0[1] = (Object) options2;
      objectArray0[2] = (Object) "G8@Ug]";
      objectArray0[3] = (Object) options1;
      PrintWriter printWriter0 = mockPrintWriter0.printf("G8@Ug]", objectArray0);
      helpFormatter0.printUsage(printWriter0, 78, "[", options0);
      helpFormatter0.printHelp(87, "(4T/)Of V'u`X ", "[", options1, (String) null);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      StringBuffer stringBuffer1 = stringBuffer0.append(1);
      stringBuffer1.chars();
      stringBuffer0.append((Object) stringBuffer1);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      helpFormatter0.setWidth(78);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('8');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      String string0 = "G8@Ug]";
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) fileDescriptor0;
      objectArray0[1] = (Object) fileDescriptor0;
      objectArray0[2] = (Object) "G8@Ug]";
      Object object0 = new Object();
      objectArray0[3] = object0;
      mockPrintWriter0.printf("usage: ", objectArray0);
      int int0 = 1981;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1981, "^!`hDir<}", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "WJf2cm'";
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setLongOptPrefix("WJf2cm'");
      helpFormatter0.setLongOptSeparator("WJf2cm'");
      MockFile mockFile0 = new MockFile("usage: ", "-");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 32;
      int int1 = 43;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 43, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1, 3, "\n");
      stringBuffer0.append((Object) stringBuffer1);
      char char0 = 'a';
      stringBuffer0.setCharAt(0, 'a');
      Option option0 = null;
      try {
        option0 = new Option("ogRQ+9Ut3=ncbKn}", "org.apache.commons.cli.HelpFormatter$1", false, "0\";b82e}~'f'*u+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'ogRQ+9Ut3=ncbKn}' contains an illegal character : '+'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1, 3, "\n");
      stringBuffer0.append((Object) stringBuffer1);
      int int0 = 0;
      stringBuffer0.setCharAt(0, 'a');
      boolean boolean0 = false;
      String string0 = "O\"AHi3akKkohR@";
      Option option0 = null;
      try {
        option0 = new Option("--", (String) null, false, ">Rs\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      StringBuffer stringBuffer1 = stringBuffer0.append(1);
      stringBuffer0.append((Object) stringBuffer1);
      stringBuffer0.setCharAt(0, 'a');
      Options options0 = new Options();
      options0.hasOption("--");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "org.apache.commons.cli.Option", "Jq", options0, "`pf|S64C`SdCZ!", false);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      stringBuffer0.append(1);
      stringBuffer0.appendCodePoint(2);
      stringBuffer0.setCharAt(0, 'a');
      Options options0 = new Options();
      options0.getOption("-");
      options0.hasOption(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options0 = new Options();
      Option option0 = new Option((String) null, " ", true, "");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("0/$Z),smC9sMY", "?O<$x,p&EKi_0=ipW%", options1, "?O<$x,p&EKi_0=ipW%", true);
      helpFormatter0.renderWrappedText(stringBuffer0, 7, 7, "'9!Dn,Xy<;$}S 5");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("--");
      File file0 = MockFile.createTempFile("k_l-P.2}xGHfp6(\u0000e", "arg", (File) mockFile0);
      MockFile mockFile1 = new MockFile(file0, "k_l-P.2}xGHfp6(\u0000e");
      MockFile mockFile2 = new MockFile(mockFile0, "\"hI{");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 10, "Illegal option name '");
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[7];
      charArray0[0] = 'U';
      charArray0[1] = 'E';
      charArray0[2] = 'A';
      charArray0[3] = 'I';
      charArray0[4] = '4';
      charArray0[5] = 'y';
      charArray0[6] = 'K';
      stringWriter0.write(charArray0);
      stringWriter0.append('^');
      Options options1 = new Options();
      Options options2 = options0.addOption((String) null, false, "--");
      helpFormatter0.printHelp("z(M@Q]l`Qo)b>_\"X", "Illegal option name '", options2, "", true);
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 2821, 0, "*eTuQaT{MA~");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("   ", "   ", options1, "-", true);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", "m@@q/?ZPnXmkO >cpd", false, "usage: ");
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      Options options1 = new Options();
      helpFormatter0.printHelp("kA*n*y|{} Q$dD[l", "m@@q/?ZPnXmkO >cpd", options0, "", true);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.setArgName((String) null);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", (String) null, false, (String) null);
      Options options2 = options0.addOption("sAG1d", true, (String) null);
      List list0 = options0.helpOptions();
      helpFormatter0.printHelp("[", options2);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      doReturn(0).when(comparator0).compare(anyString() , anyString());
      helpFormatter0.setOptionComparator(comparator0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      helpFormatter0.setWidth(78);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('g');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) list0;
      objectArray0[1] = (Object) options2;
      objectArray0[2] = (Object) "G8@Ug]";
      objectArray0[3] = (Object) options1;
      PrintWriter printWriter0 = mockPrintWriter0.printf("G8@Ug]", objectArray0);
      helpFormatter0.printUsage(printWriter0, 78, "[", options0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1, 3, "\n");
      stringBuffer0.append((Object) stringBuffer1);
      stringBuffer0.setCharAt(0, 'a');
      Option option0 = new Option("", "org.apache.commons.ci.HelpFormatter$", false, "0\";b82e}~'f'*u+");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption(option0);
      option0.setValueSeparator('a');
      options0.hasLongOption("zxF(yK@`71bHJkz9(BD");
      Options options2 = options1.addOption("", true, "arg");
      options2.addOption("", "org.apache.commons.ci.HelpFormatter$", true, "-");
      helpFormatter0.printHelp("]G9>slh!p", ",g`=F'", options2, "", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("-");
      helpFormatter1.getDescPadding();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getOptionComparator();
      helpFormatter1.getDescPadding();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setLongOptPrefix("WJf2cm'");
      helpFormatter0.setLongOptSeparator("WJf2cm'");
      MockFile mockFile0 = new MockFile("usage: ", "-");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 32, "");
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("4", "<", options0, "E`z%EW_uKQT}guMD");
      helpFormatter1.getLeftPadding();
      helpFormatter1.getDescPadding();
      helpFormatter0.printHelp("Illegal option name '", "", options0, "", true);
      helpFormatter0.getDescPadding();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, 74, " ");
      Options options0 = new Options();
      helpFormatter0.printHelp(34, " ", " ] [ long ", options0, " ] [ long ", false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)42;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options1 = new Options();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      options1.getOptionGroups();
      helpFormatter0.printHelp(" ", " ", options1, (String) null);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getDescPadding();
      helpFormatter0.printHelp("zaSbM!7e[0JZ", (String) null, options1, (String) null, true);
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1119), "6TZJn2Hy@", " ", options1, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("#UP=z");
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer("y>U");
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = new Option("", "NO_ARGS_ALLOWED", false, "O\"AHi3akKkohR@");
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(44, " ", "", options0, "arg", false);
      helpFormatter0.getSyntaxPrefix();
      Options options1 = new Options();
      MockFile mockFile0 = new MockFile("5~! Q?x^B%(`\">Bo1.{");
      MockFile mockFile1 = new MockFile(mockFile0, "usage: ");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile1, "pbbOi*A");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // pbbOi*A
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockFile mockFile0 = new MockFile("-", "\n");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 127, "1,(%='~+Jb*%y", options0);
      optionGroup0.toString();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 79, "[VVK", "[VVK", options1, (-1030), 3463, (String) null, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getOptPrefix();
      helpFormatter0.getDescPadding();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.findWrapPos("", 3, 3);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getArgName();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      String string1 = "org.apache.commons.cli.OptionValidator";
      // Undeclared exception!
      try { 
        options0.addOption("\n", "org.apache.commons.cli.OptionValidator", false, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.setArgName((String) null);
      Options options0 = new Options();
      options0.addOption("arg", (String) null, false, (String) null);
      Options options1 = options0.addOption("sAG1d", true, (String) null);
      options0.helpOptions();
      helpFormatter0.printHelp("[", options1);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      helpFormatter0.setWidth(78);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      stringBuffer0.append(1);
      stringBuffer0.setCharAt(0, 'a');
      Options options0 = new Options();
      options0.getOption("-");
      options0.hasOption("--");
      helpFormatter0.createPadding(0);
      helpFormatter0.printHelp(284, "qMxN91<.(", "AnGVC*&e~u1-'@lh", options0, "Jq", false);
      helpFormatter0.getSyntaxPrefix();
      Options options1 = new Options();
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "5dnPaMHvz`t['vN<Td");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile1, "j'LgRJ9=~g,-zC%7FF");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // j'LgRJ9=~g,-zC%7FF
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      StringBuffer stringBuffer1 = stringBuffer0.append(1);
      stringBuffer0.append((Object) stringBuffer1);
      stringBuffer0.setCharAt(0, 'a');
      Options options0 = new Options();
      options0.hasOption("--");
      helpFormatter0.printHelp(284, "qMxN91<.(", "AnGVC*&e~u1-'@lh", options0, "Jq", false);
      helpFormatter0.getSyntaxPrefix();
      Options options1 = new Options();
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding(13);
      helpFormatter0.findWrapPos("/IV[s9;E\"`PR,xX", 284, 18);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)25;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options0 = new Options();
      byte[] byteArray1 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      options0.getOptionGroups();
      helpFormatter0.printHelp("DIRMEi]mtPi#](", "LgIomC#,H;6`sXQU9x", options0, "a2Tt'WSpfX");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getDescPadding();
      helpFormatter0.printHelp("DIRMEi]mtPi#](", "", options0, "zaSbM!7e[0JZ", false);
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-516), "a2Tt'WSpfX", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "NO_ARGS_ALLOWED");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ] [ long ");
      Locale locale0 = Locale.KOREAN;
      mockPrintWriter0.format(locale0, "<", (Object[]) null);
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", (Object[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      mockPrintWriter0.append('1');
      helpFormatter0.printUsage(printWriter0, 44, "");
      helpFormatter0.getLeftPadding();
      helpFormatter0.createPadding(1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      StringBuffer stringBuffer1 = stringBuffer0.append(1);
      stringBuffer0.append((Object) stringBuffer1);
      stringBuffer0.setCharAt(0, 'a');
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("' was specified but an option from this group ", "' was specified but an option from this group ", (Options) null, "cmdLineSyntax not provided", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      StringBuffer stringBuffer1 = stringBuffer0.append(1);
      int int0 = 0;
      StringBuffer stringBuffer2 = stringBuffer0.append((Object) stringBuffer1);
      stringBuffer0.append((CharSequence) stringBuffer2);
      stringBuffer0.setCharAt(0, 'a');
      String string0 = "' was specified but an option from this group ";
      stringBuffer0.setLength(427);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("' was specified but an option from this group ", "' was specified but an option from this group ", (Options) null, "' was specified but an option from this group ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      StringBuffer stringBuffer1 = stringBuffer0.append(1);
      stringBuffer0.append((Object) stringBuffer1);
      helpFormatter0.setOptionComparator((Comparator) null);
      stringBuffer0.setCharAt(0, 'a');
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "' was specified but an option from this group ");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix((String) null);
      Options options0 = new Options();
      Options options1 = options0.addOption("sAG1d", false, "arg");
      FileSystemHandling.shouldAllThrowIOExceptions();
      options1.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "_;Z`%e|kfZ]6NFnYU";
      MockPrintStream mockPrintStream0 = new MockPrintStream("_;Z`%e|kfZ]6NFnYU");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 3);
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      int int0 = 9;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, (-117), "_;Z`%e|kfZ]6NFnYU");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "'";
      int int0 = (-304);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("'", (-304), 14);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "O_HYXq$";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("O_HYXq$", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 770, 770, " ");
      int int0 = 2787;
      String string1 = "U?";
      StringBuffer stringBuffer0 = new StringBuffer("U?");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1955), (-1584), "x}mn^|Gk");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      helpFormatter0.printHelp("fic4Vj\"tJ}@VLjK>SO8", options0, true);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setLongOptPrefix("WJ2cm'");
      helpFormatter0.setLongOptSeparator("WJ2cm'");
      MockFile mockFile0 = new MockFile("WJ2cm'", "--");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      mockFile1.getCanonicalFile();
      mockFile1.mkdirs();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 32, "");
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-69), "line.separator", "", options0, (String) null, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setLongOptPrefix("WJf2cm'");
      helpFormatter0.setLongOptSeparator("WJf2cm'");
      MockFile mockFile0 = new MockFile("WJf2cm'", "--");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      mockFile1.getCanonicalFile();
      mockFile1.mkdirs();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 32, "");
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      Option option0 = new Option("", true, "8f<#3WuZ/K:ag ?rX");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", "*!A9rC7", true, "*!A9rC7");
      options0.hasLongOption("*!A9rC7");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 0, "*!A9rC7", ":JzvLm4Zc QD", options2, 3, 10, "8f<#3WuZ/K:ag ?rX");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setLongOptPrefix("WJf2cm'");
      helpFormatter0.setLongOptSeparator("WJf2cm'");
      MockFile mockFile0 = new MockFile("WJf2cm'", "--");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      mockFile1.getCanonicalFile();
      mockFile1.mkdirs();
      int int1 = 32;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 32, "");
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      Option option0 = new Option("", true, "8f<#3WuZ/K:ag ?rX");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      options1.addOption("", "*!A9rC7", true, "*!A9rC7");
      options1.hasLongOption("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "line.separator", "8U[8?4|j", options0, (-1), (-1282), "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = true;
      MockFile mockFile0 = new MockFile("-", "\n");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 127, "1,(%='~+Jb*%y", options0);
      optionGroup0.setRequired(true);
      optionGroup0.toString();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.setLeftPadding((-865));
      int int0 = 960;
      int int1 = 4;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 271, "", "OByQTl", (Options) null, 4, 1898, "zR]h[NdI7R~0P");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockFile mockFile0 = new MockFile("-", "\n");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 127, "1,(%='~+Jb*%y", options0);
      optionGroup0.setRequired(true);
      optionGroup0.toString();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 79, "[VVK", "[VVK", options1, (-1030), 3463, (String) null, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1621);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptPrefix();
      MockFile mockFile0 = new MockFile(" ", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "vp?{~b6)CxZJjaF&jL", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-2852), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      int int0 = 31;
      String string0 = "";
      stringBuffer0.reverse();
      helpFormatter0.renderWrappedText(stringBuffer0, 31, 31, "");
      int int1 = (-3143);
      Options options0 = new Options();
      boolean boolean0 = false;
      String string1 = null;
      // Undeclared exception!
      try { 
        options0.addOption("\n", "arg", false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 127;
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockFile mockFile0 = new MockFile("-", "\n");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 127, "1,(%='~+Jb*%y", options0);
      optionGroup0.setRequired(true);
      optionGroup0.toString();
      options0.addOptionGroup(optionGroup0);
      String string1 = "u\"Q\\I>-|2/!OlZfPgZF";
      optionGroup0.toString();
      // Undeclared exception!
      try { 
        options0.addOption("|lB", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '|lB' contains an illegal character : '|'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 0, 0, "");
      helpFormatter0.renderWrappedText(stringBuffer2, 0, (-2), "");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 1438;
      helpFormatter0.setDescPadding(1438);
      int int1 = 1;
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "");
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      String string1 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      String string2 = "cW2MFkZ";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("cW2MFkZ");
      mockPrintWriter0.append((CharSequence) "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      Options options0 = new Options();
      stringBuffer0.insert(0, "arg");
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setSyntaxPrefix("%QQL6QJK");
      helpFormatter0.defaultSyntaxPrefix = "org.apache.commons.cli.Option";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf(locale0, "", objectArray0);
      int int0 = 0;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("--", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.HelpFormatter";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "org.apache.commons.cli.HelpFormatter";
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "org.apache.commons.cli.HelpFormatter";
      objectArray0[6] = (Object) "org.apache.commons.cli.HelpFormatter";
      objectArray0[7] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 985, (String) null, "[VVK", options0, 3463, (-1030), (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Options options0 = new Options();
      options0.getMatchingOptions("--");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1298), options1, (-1298), (-1298));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.getNewLine();
      helpFormatter0.getWidth();
      String string0 = "USia3?;I?`,lrm{$";
      StringBuffer stringBuffer0 = new StringBuffer("USia3?;I?`,lrm{$");
      int int0 = 3;
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("\n", true, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultNewLine = "";
      int int0 = (-2476);
      helpFormatter0.setDescPadding((-2476));
      helpFormatter0.setOptPrefix("rUZda");
      String string1 = " [ARG]";
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = options0.addOption("\u0002n", true, "");
      String string2 = "";
      // Undeclared exception!
      try { 
        options1.addOption(helpFormatter0.DEFAULT_SYNTAX_PREFIX, string2, boolean0, helpFormatter0.DEFAULT_ARG_NAME);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("G#]\"`6AZlBbZx?O-9&");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "G#]\"`6AZlBbZx?O-9&");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, (String) null, "kv*lxHz`~k8&XCH", options1, " :: ", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setLongOptPrefix("WJf2cm'");
      helpFormatter0.setLongOptSeparator("WJf2cm'");
      MockFile mockFile0 = new MockFile("WJf2cm'", "--");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      mockFile1.getCanonicalFile();
      mockFile1.mkdirs();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 32, "");
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      Option option0 = new Option("", true, "8f<#3WuZ/K:ag ?rX");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", "*!A9rC7", true, "*!A9rC7");
      options2.hasLongOption("8U[8?4|j");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-69), "line.separator", "aD{$ez+atJt\"T%cc", options2, (-1282), (-69), "uR8,");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("NO_ARGS_ALLOWED");
      helpFormatter0.setLongOptSeparator("nP5 x$6L1");
      helpFormatter0.defaultArgName = "NO_ARGS_ALLOWED";
      helpFormatter0.setArgName("has already been selected: '");
      helpFormatter0.rtrim("");
      String string0 = "cZ!=5:KH`4aU ";
      String string1 = "- Rs-+F qJ ^";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "has already been selected: '");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      StringBuffer stringBuffer1 = stringBuffer0.append(1);
      stringBuffer0.append((Object) stringBuffer1);
      int int0 = 0;
      stringBuffer0.setCharAt(0, 'a');
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "' was specified but an option from this group ");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-339), (-339), "{b^/)D0.H");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-2210));
      String string0 = "E*FfbaTUA~Qu&x%FP1q";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.createPadding(3122);
      Options options1 = options0.addOption("arg", " ", true, "arg");
      options1.addOption("f$E1eV", false, (String) null);
      helpFormatter0.printHelp(" ", " ", options1, " ", true);
      helpFormatter0.findWrapPos("=d=IGgHG2", 3122, 3122);
      String string0 = helpFormatter0.getLongOptPrefix();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("--", string0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("c&If-/-vCkyGyK\"");
      Options options0 = new Options();
      options0.addOption("arg", "z(M@Q]l`Qo)b>_\"X", true, "usage: ");
      helpFormatter0.getLeftPadding();
      options0.addOption("", true, "");
      helpFormatter0.printHelp("X&/fl,L+pv", "", options0, "usage: ", true);
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      int int1 = (-1880);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-1880));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      
      Options options0 = new Options();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      options0.getOptionGroups();
      helpFormatter0.printHelp("DIRMEi]mtPi#](", "LgIomC#,H;6`sXQU9x", options0, "a2Tf'`WSpxX");
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals(1, int0);
      
      helpFormatter0.getDescPadding();
      options0.addOption((String) null, false, "");
      helpFormatter0.printHelp("DIRMEi]mtPi#](", "", options0, "zaSbM!7e[0JZ", false);
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptionComparator();
      assertEquals(1, helpFormatter0.getLeftPadding());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(74);
      helpFormatter0.setLongOptPrefix("WJf2cm'");
      helpFormatter0.setLongOptSeparator("WJf2cm'");
      MockFile mockFile0 = new MockFile("WJf2cm'", "--");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      mockFile1.mkdirs();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 32, "");
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      Option option0 = new Option("", true, "8f<#3WuZ/K:ag ?rX");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", "*!A9rC7", true, "*!A9rC7");
      options0.hasLongOption("*!A9rC7");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "*!A9rC7", ":JzvLm4Zc QD", options2, 3, 10, "8f<#3WuZ/K:ag ?rX");
      helpFormatter0.getSyntaxPrefix();
      assertEquals("WJf2cm'", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setLongOptPrefix("WJf2cm'");
      helpFormatter0.setLongOptSeparator("WJf2cm'");
      MockFile mockFile0 = new MockFile("WJf2cm'", "--");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      mockFile1.getCanonicalFile();
      mockFile1.mkdirs();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 32, "");
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      helpFormatter0.printHelp(32, "%ba$j9i", "WJf2cm'", options0, "WJf2cm'", true);
      helpFormatter0.getSyntaxPrefix();
      Options options1 = new Options();
      Options options2 = options0.addOption("", true, "");
      helpFormatter0.printHelp("usage: ", options2, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(32);
      helpFormatter0.setDescPadding(63);
      assertEquals(63, helpFormatter0.defaultDescPad);
      
      helpFormatter1.setWidth(52);
      int int0 = helpFormatter1.getWidth();
      assertEquals(52, int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      StringBuffer stringBuffer1 = stringBuffer0.append(1);
      stringBuffer0.append((Object) stringBuffer1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringBuffer0.setCharAt(0, 'a');
      Options options0 = new Options();
      options0.hasOption("--");
      options0.addOption("arg", "", false, "qMxN91<.(");
      helpFormatter0.printHelp(284, "qMxN91<.(", "AnGVC*&e~u1-'@lh", options0, "Jq", false);
      helpFormatter0.getSyntaxPrefix();
      Options options1 = new Options();
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "5dnPaMHvz`t['vN<Td");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile1, "j'LgRJ9=~g,-zC%7FF");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // j'LgRJ9=~g,-zC%7FF
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("#UP=z");
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer("y>U");
      Options options0 = new Options();
      Option option0 = new Option("", "NO_ARGS_ALLOWED", false, "O\"AHi3akKkohR@");
      Options options1 = options0.addOption(option0);
      option0.setValueSeparator('');
      Options options2 = options1.addOption("arg", true, "--");
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      doReturn(0).when(comparator0).compare(any(org.apache.commons.cli.Option.class) , any(org.apache.commons.cli.Option.class));
      helpFormatter0.optionComparator = comparator0;
      int int0 = 0;
      helpFormatter0.renderOptions(stringBuffer0, 91, options2, 0, 0);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          HelpFormatter helpFormatter0 = new HelpFormatter();
          helpFormatter0.setOptPrefix((String) null);
          helpFormatter0.setArgName((String) null);
          Options options0 = new Options();
          options0.addOption("sAG1d", false, (String) null);
          options0.helpOptions();
          helpFormatter0.printHelp("[", options0);
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.GeneratedConstructorAccessor67.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:234)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:189)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("arg", "usage: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // usage: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, (-532), options0, 0, 0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      int int0 = 770;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 770, 770, " ");
      helpFormatter0.rtrim("~x");
      String string0 = "qMxN91<.(";
      Options options0 = new Options();
      options0.hasOption("-");
      helpFormatter0.printHelp(2787, "qMxN91<.(", "~x", options0, "AnGVC*&e~u1-'@lh", false);
      helpFormatter0.getSyntaxPrefix();
      Options options1 = new Options();
      Options options2 = options1.addOption("", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("[ option: ");
      helpFormatter0.getSyntaxPrefix();
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("A*()W", "--", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'A*()W' contains an illegal character : '*'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          HelpFormatter helpFormatter0 = new HelpFormatter();
          String string0 = null;
          helpFormatter0.setOptPrefix((String) null);
          helpFormatter0.setArgName((String) null);
          String string1 = "[";
          Options options0 = new Options();
          options0.helpOptions();
          helpFormatter0.printHelp("[", options0);
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.GeneratedConstructorAccessor67.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:234)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:189)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = null;
      int int0 = (-334);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("-", "5p", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 32;
      String string0 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 32, 1827, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
