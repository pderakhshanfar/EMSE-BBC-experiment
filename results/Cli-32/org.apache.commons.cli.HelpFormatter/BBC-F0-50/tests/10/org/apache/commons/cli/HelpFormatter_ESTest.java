/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 17 17:07:15 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.net.URISyntaxException;
import java.util.Collection;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 3;
      helpFormatter0.setArgName("");
      Options options0 = new Options();
      helpFormatter0.printHelp(3, " ", "usage: ", options0, "usage: ");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      options0.addOption("arg", "arg", true, "arg");
      helpFormatter0.printHelp(13, "' was specified but an option from this group ", "", options0, "");
      StringBuffer stringBuffer0 = new StringBuffer(1);
      Locale locale0 = Locale.forLanguageTag("");
      StringBuffer stringBuffer1 = stringBuffer0.append((Object) locale0);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer1, 0, 34, "' contains an illegal character : '");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte) (-2);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (int) (byte) (-40);
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getDescPadding();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getWidth();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      String string0 = "The option '";
      try { 
        MockURI.URI("The option '", "-", "--", "--");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: The option '://---#--
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("Di", false, "org.apache.commons.cli.Util");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 7, options2, 7, 1277);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1308);
      helpFormatter0.getArgName();
      helpFormatter0.findWrapPos("has already been selected: '", 0, 0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultSyntaxPrefix = "";
      String string1 = null;
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
      helpFormatter0.createPadding(74);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "arg", true, "arg");
      // Undeclared exception!
      try { 
        options1.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "$g";
      helpFormatter0.setDescPadding((-3061));
      Options options1 = options0.addOption("arg", (String) null, true, "x32-t)J5dj>bH+& ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("x32-t)J5dj>bH+& ", (String) null, options1, "$g", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 1370, options0, 1370, 1370);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1390));
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(14, "jXJ5}", "Illegal option name '", (Options) null, ",g:9?\u0002BG+|vX@", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockFileOutputStream0;
      mockPrintWriter0.checkError();
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) " ";
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, " ", objectArray0);
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, " | ", " ", options0, 0, 125, "<Wz80Ut$");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim((String) null);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      StringBuffer stringBuffer1 = helpFormatter2.renderWrappedText(stringBuffer0, 2089, 32, "arg");
      stringBuffer1.append("");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "arg", true, "-");
      // Undeclared exception!
      try { 
        helpFormatter2.renderOptions(stringBuffer1, 1, options1, 74, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      options0.addOption("", "arg", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "qLPpN75<bFz$*FX1xC", "arg", options0, 74, 74, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options1 = options0.addOption("", "", true, "arg");
      options1.getOption("-");
      helpFormatter0.printHelp("IjI;!kQu/gt", "", options0, "", true);
      helpFormatter0.rtrim(" :: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 0, "\n", options1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptionComparator();
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      helpFormatter0.setWidth((-1746));
      helpFormatter0.getWidth();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "-", false, "");
      Option option0 = new Option("", "-", true, "-");
      option0.addValueForProcessing("");
      Options options2 = options1.addOption(option0);
      helpFormatter0.renderOptions(stringBuffer0, 107, options2, 0, 1266);
      helpFormatter0.createPadding(0);
      StringWriter stringWriter0 = new StringWriter(1266);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      PrintWriter printWriter1 = mockPrintWriter1.append('~');
      helpFormatter0.printUsage(printWriter1, 1779, "=aCi4R\"^", options0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      options0.helpOptions();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[*m?Y");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "usage: ", true, "");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 35, "arg", (String) null, options1, 31, 32, "v{G 'PI", false);
      helpFormatter1.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options1 = options0.addOption("", "", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      Option option0 = new Option("", "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("arg", "-", options0, "-", true);
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2), 35, "{{*5wSbkF");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(74, "-", (String) null, (Options) null, "!", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("1Th", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.addOption((String) null, "Th_(W?F:]2_#v4", true, "-");
      Options options3 = options2.addOption("arg", false, "arg");
      helpFormatter0.printHelp("]", (String) null, options3, "Th_(W?F:]2_#v4", true);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("ykcDj=6[!Aid;, wHl");
      StringBuffer stringBuffer0 = new StringBuffer("]_2");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("_B6!F", "[", (Options) null, "[");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = null;
      String string0 = "tKZ4jD\\";
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions(mockPrintWriter0, 1068, (Options) null, 1, 1068);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "R `\"<mBIh8{S";
      int int0 = 11;
      MockFile mockFile0 = new MockFile((String) null, "arg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 11);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-3107), options0, (-3107), 11);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setArgName("   ");
      int int0 = (-2859);
      File file0 = MockFile.createTempFile("+Yo]FxJ", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) file0;
      objectArray0[1] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("\n", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-2859), " | ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", "P!#}VdxoQ", true, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      optionGroup2.toString();
      OptionGroup optionGroup3 = optionGroup1.addOption(option0);
      options0.addOptionGroup(optionGroup3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("arg", "--", options0, "!Va$@,(;&4f", true);
      Options options1 = new Options();
      options1.hasLongOption("");
      helpFormatter0.getOptPrefix();
      helpFormatter1.getWidth();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      options0.helpOptions();
      Options options1 = options0.addOption("", "", true, "$Me?]LfROAM&9EA");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("FZtgF6YL", "*IjI;!kQu/t");
      optionGroup0.addOption(option0);
      OptionGroup optionGroup1 = new OptionGroup();
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      optionGroup2.addOption(option0);
      optionGroup0.setSelected(option0);
      optionGroup2.toString();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("arg", " | ", options0, "mmv=%jj#B7", false);
      options1.hasLongOption((String) null);
      helpFormatter0.rtrim("$Me?]LfROAM&9EA");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      options0.addOption("", "", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderOptions(stringBuffer0, 1894, options1, 3, 407);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options1 = options0.addOption("", "", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.toString();
      options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("IjI;!kQu/gt", "X/", options0, "X/", true);
      options1.hasLongOption("\n");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(2745);
      StringBuffer stringBuffer0 = new StringBuffer("^7p:03N;[uy<:g|5q");
      int int0 = (-1);
      helpFormatter0.renderWrappedText(stringBuffer0, 2745, (-1), "^7p:03N;[uy<:g|5q");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.defaultDescPad = (-1);
      File file0 = MockFile.createTempFile("usage: ", "kLk#UmBj>72^cj.+|n");
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        MockFile.createTempFile(" ", "usage: ", file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile(":", "-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) helpFormatter1;
      objectArray0[2] = (Object) "org.apache.commons.cli.ParseException";
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter1.format("org.apache.commons.cli.ParseException", objectArray0);
      helpFormatter1.printHelp(printWriter0, 3, "--", "-", options0, 10, 1275, "", true);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("x4gI<i", "3b/o(}k;7p1%");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Options options1 = options0.addOption("", "P}g8'c2MqHV>", true, "");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 21, "=", "", options1, 14, 14, "=", false);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(2);
      String string0 = null;
      Options options1 = options0.addOption((String) null, "\n", true, "-");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, options1, "<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      mockPrintWriter0.println(true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, (String) null, (String) null, options0, (-153), (-153), "=", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("", "", true, "arg");
      helpFormatter1.printHelp("IjI;!kQu/gt", "X/", options0, "X/", true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2800, "q@Fhhz;:T", "usage: ", options1, 74, 74, "org.apache.commons.cli.HelpFormatter$OptionComparator", false);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("arg");
      Options options1 = options0.addOption("", false, ": n:I8`z]ISbEs ");
      helpFormatter0.setWidth(0);
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      helpFormatter0.printHelp(".1", options1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      int int0 = 2286;
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "<", "V@gmm&YBhAf8XQF+}=", options0, 63, 119, "org.apache.commons.cli.Option", true);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("nDEOR0h}zx{{awScfbp", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      Option option0 = new Option("", (String) null);
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), "", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 9, "   ", "", options1, 9, 4001, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("zRhR");
      helpFormatter0.rtrim("--");
      helpFormatter1.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("e&iS!GnbGBJ,+OT^", "-");
      mockFile0.createNewFile();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1256), "", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      helpFormatter0.defaultWidth = (-669);
      Options options1 = options0.addOption("gw", "arg", true, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("IjI;!kQu/gt", "arg", options1, "--", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.getLongOptSeparator();
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", string0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "o7";
      objectArray0[2] = (Object) " ";
      objectArray0[3] = (Object) "o7";
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) "o7";
      Object object0 = new Object();
      mockPrintWriter0.print('n');
      objectArray0[6] = object0;
      mockPrintWriter0.format("--", objectArray0);
      mockPrintWriter0.printf("[ Options: [ short ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Options options0 = new Options();
      Options options1 = new Options();
      String string1 = " | ";
      helpFormatter0.printHelp(9, "[x'MigUA#~yR5vbJ_x", "2KPK\"Yz&", options0, " | ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "o7", " | ", options1, "o7", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.findWrapPos(">q.V", 2156, 9);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setNewLine("arg");
      Options options0 = new Options();
      helpFormatter1.printHelp(95, "[ option: ", "arg", options0, (String) null, true);
      helpFormatter1.setWidth(1);
      helpFormatter2.setLongOptSeparator("]");
      StringBuffer stringBuffer0 = new StringBuffer(3);
      // Undeclared exception!
      try { 
        helpFormatter2.renderWrappedText(stringBuffer0, 9, 105, "q$FE[-=YA{!JL1u\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = null;
      MockFile mockFile0 = new MockFile("e&iS!GnbGBJ,+OT^", "-");
      mockFile0.createNewFile();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, " | ", "=", (Options) null, 35, (-1256), "arg", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(2);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('K');
      helpFormatter1.printHelp(printWriter0, 2506, "M<W^.bn", "9ne1+L|", options0, 2286, 3, "<", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2286, (String) null, "RCGaez.3l", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("gw", "", true, "arg");
      helpFormatter1.printHelp("IjI;!kQu/gt", "", options1, "--", false);
      options1.hasLongOption("\n");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.findWrapPos("-", 1, 9);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 2, "usage: ", "usage: ", options0, 1996, 74, "usage: ", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("b", "-", false, "\n");
      Option option0 = new Option("", "--");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      Options options4 = options3.addOption("arg", false, "-");
      OptionGroup optionGroup1 = new OptionGroup();
      options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("4'Z?n0DAAg.'!Fh6", options4);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2991), "g~>gV_+vR%t4/g", "M!6<c-GMCUuPp", options3, ": n:I8`z]ISbEs ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultWidth = (-1774);
      Options options0 = new Options();
      String string1 = "";
      options0.hasOption("");
      boolean boolean0 = false;
      String string2 = ": n:I8`z]ISbEs ";
      Options options1 = options0.addOption("", false, ": n:I8`z]ISbEs ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("", "", true, "arg");
      helpFormatter1.printHelp("IjI;!kQu/gt", "--", options0, "--", true);
      options1.hasLongOption("\n");
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("5Dt}W=6~17ZZq", "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) printWriter0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) file0;
      objectArray0[3] = (Object) file0;
      objectArray0[4] = (Object) "5Dt}W=6~17ZZq";
      objectArray0[5] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) helpFormatter0;
      mockPrintWriter0.printf(locale0, "arg", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 157, 157, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("", "", true, "arg");
      helpFormatter1.printHelp("IjI;!kQu/gt", "", options1, "--", false);
      options1.hasLongOption("\n");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      String string0 = "";
      Options options0 = null;
      int int0 = 10;
      String string1 = "e&iS!GnbGBJ,+O\\T^";
      MockFile mockFile0 = new MockFile("arg", "\n");
      mockFile0.createNewFile();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 35, " ", "e&iS!GnbGBJ,+OT^", (Options) null, (-370), 10, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = null;
      String string1 = "e&iS!GnbGBJ,+O\\T^";
      MockFile mockFile0 = new MockFile("--", "");
      mockFile0.createNewFile();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = 35;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "", "org.apache.commons.cli.HelpFormatter$1", (Options) null, 35, (-2789), "e&iS!GnbGBJ,+OT^", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(63, "-", "-", options0, (String) null);
      File file0 = MockFile.createTempFile("arg", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 667, "", "QcJZP+[o*", options0, 74, 74, "-", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "eu[B*&<*");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("", "", true, "arg");
      options0.hasLongOption("--");
      helpFormatter1.getSyntaxPrefix();
      helpFormatter0.findWrapPos(" ", 2, 3);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, options1, 3, (-952));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", "\n", (Options) null, "\n", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(33);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "m<qNS}S8Fd7y.`$Fl");
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      helpFormatter0.createPadding(0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "");
      helpFormatter0.printOptions(printWriter0, 0, options0, 972, 33);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "+63^]XQ`)aXe!x?e");
      Options options2 = options1.addOption((String) null, (String) null, true, ">");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      options2.hasShortOption("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) helpFormatter1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) options2;
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      helpFormatter2.printWrapped(printWriter0, 74, (-3948), "");
      helpFormatter2.printHelp("|7q2yz", (String) null, options0, "`D{ge_W", false);
      options0.addOption("", "", true, "arg");
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("arg");
      options0.addOption((String) null, "", true, "arg");
      helpFormatter0.printHelp("arg", "", options0, "gw", false);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.rtrim("<");
      helpFormatter0.rtrim(" ");
      String string0 = ":3K4+-Oinjg'\\-";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption(":3K4+-Oinjg'-", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ':3K4+-Oinjg'-' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-420), "\n", "K!]2/KS#!R]jLPb_\"IX", options1, "DO@8");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.AlreadySelectedException");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 894, 83, "");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, "usage: ", "usage: ", options0, 3312, 3312, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-235));
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(894, "[", "", (Options) null, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 10);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.format("\n", (Object[]) null);
      mockPrintWriter0.printf("arg", (Object[]) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-1067), "org.apache.commons.cli.HelpFormatter$OptionComparator", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos(">.V", 2156, 9);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("arg");
      Options options0 = new Options();
      helpFormatter0.printHelp(520, "\n", " ", options0, "arg");
      helpFormatter0.setWidth(1);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 61, "");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", "-", options0, "--", true);
      options0.hasLongOption(" ");
      helpFormatter1.printHelp(63, "usage: ", "", options0, "");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(9, "jbqt-y9GZ}`n", " ", options0, "_T");
      helpFormatter0.createPadding(31);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter2.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("");
      Options options1 = options0.addOption("", false, ": n:I8`z]ISbEs ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(".1", options2);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "", "", (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      mockPrintWriter0.append((CharSequence) "arg", 0, 3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine(" ");
      Options options0 = new Options();
      String string0 = "`'iL:";
      helpFormatter0.printHelp(114, "`'iL:", "usage: ", options0, "");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "--", "B.|L[_qj", options0, "arg");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-107);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-87);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.append('6');
      helpFormatter0.printWrapped(printWriter0, 10, "");
      byteArray1[1] = (byte)86;
      byteArray1[2] = (byte)34;
      byteArray1[3] = (byte) (-26);
      byteArray1[4] = (byte)60;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(894, "", "", (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix(" ");
      helpFormatter0.setLongOptPrefix(" ");
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 63;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int1 = (-3585);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-3585), (-3585), "' was specified but an option from this group ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      mockPrintWriter0.append((CharSequence) "arg", 0, 3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine((String) null);
      Options options0 = new Options();
      helpFormatter0.printHelp(114, "`'iL:", "usage: ", options0, "");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLongOptSeparator("--");
      StringBuffer stringBuffer0 = new StringBuffer("org.apache.commons.cli.AlreadySelectedException");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 98, options0, 3, 74);
      helpFormatter2.renderOptions(stringBuffer1, 3, options0, 0, 3);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = Locale.TAIWAN;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("e");
      Options options0 = new Options();
      Options options1 = options0.addOption("o7", true, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 10, "", "e", options1, (-1983), 1, "rb]AYOu");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      mockPrintWriter0.append((CharSequence) "arg", 0, 3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine((String) null);
      Options options0 = new Options();
      helpFormatter0.printHelp(114, "`'iL:", "usage: ", options0, "");
      helpFormatter0.setWidth((-1));
      helpFormatter0.setLongOptSeparator("`'iL:");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-996), "", "", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(8);
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter(8);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      int int0 = 0;
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg", 0, 3);
      helpFormatter0.printWrapped(printWriter0, 8, 8, "\n");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      Options options0 = new Options();
      int int1 = 1;
      helpFormatter0.printUsage(printWriter0, 10, "<");
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options2.addOption("|aT", "'XKsw}fc*(U", false, "'XKsw}fc*(U");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '|aT' contains an illegal character : '|'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      mockPrintWriter0.append((CharSequence) "arg", 0, 3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine((String) null);
      Options options0 = new Options();
      helpFormatter0.printHelp(114, "`'iL:", "usage: ", options0, "");
      helpFormatter0.setWidth((-1));
      helpFormatter0.setLongOptSeparator("arg");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("' was specified but an option from this group ");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 10, "usage: ", "id", options0, 130, (-1), ">vy");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]");
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) helpFormatter0;
      mockPrintWriter0.format(locale0, "Illegal option name '", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(4, "Illegal option name '", "5", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "", options0, 10, (-1983), "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("o7");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) " ";
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) helpFormatter0;
      objectArray1[1] = (Object) "o7";
      objectArray1[2] = (Object) "o7";
      mockPrintWriter0.format("usage: ", objectArray1);
      PrintWriter printWriter0 = mockPrintWriter0.printf("arg", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 9, "o7", options0);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "+$d;r:eS*3~4iM";
      helpFormatter0.setLeftPadding(547);
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("-", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.findWrapPos("", 74, 74);
      helpFormatter0.setNewLine("");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Locale locale0 = Locale.ENGLISH;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "-";
      objectArray0[1] = (Object) pipedOutputStream0;
      objectArray0[2] = (Object) pipedOutputStream0;
      objectArray0[3] = (Object) "";
      mockPrintWriter0.format(locale0, "arg", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(197, "org.apache.commons.cli.AlreadySelectedException", " ", (Options) null, "[ Options: [ short ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(125);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 125, (Options) null, 148, 148);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = Locale.TAIWAN;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "", (Options) null, "%l2`(+4&>{H>3D", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.findWrapPos(">.V", 2156, 9);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setNewLine("arg");
      Options options0 = new Options();
      helpFormatter1.printHelp(520, "\n", " ", options0, "arg");
      helpFormatter1.setWidth(1);
      helpFormatter2.setLongOptSeparator("]");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("(~Wk");
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter(0);
      int int1 = (-2696);
      Options options0 = new Options();
      helpFormatter0.getWidth();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("A']bb+mn~~a68qaE.", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "A']bb+mn~~a68qaE.";
      objectArray0[1] = (Object) "YgMu";
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter0.format("org.apache.commons.cli.HelpFormatter$1", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 74, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.rtrim("<");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "<";
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 677, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultNewLine = "A CloneNotSupportedException was thrown: ";
      options0.toString();
      options0.getOptionGroups();
      Collection collection0 = options0.getOptions();
      Collection collection1 = options0.getOptions();
      options0.hasShortOption("A CloneNotSupportedException was thrown: ");
      helpFormatter0.printHelp("A CloneNotSupportedException was thrown: ", options0, false);
      helpFormatter0.setOptPrefix("\\#Q1L~3qL.DzIk:Id");
      helpFormatter0.getArgName();
      helpFormatter0.findWrapPos("arg", 2630, 2630);
      helpFormatter0.setLongOptSeparator("FoICu?uE");
      helpFormatter0.getArgName();
      helpFormatter0.setWidth((-2));
      helpFormatter0.setNewLine("");
      helpFormatter0.setWidth(789);
      assertEquals("\\#Q1L~3qL.DzIk:Id", helpFormatter0.getOptPrefix());
      
      helpFormatter0.printHelp("A CloneNotSupportedException was thrown: ", "Bc=5hVJ#F<7;3!%)", options0, "Bc=5hVJ#F<7;3!%)");
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "arg";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) collection1;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "FoICu?uE";
      objectArray0[5] = (Object) collection0;
      objectArray0[6] = (Object) "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1), "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", (String) null, options0, (-1), (-2), "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(2745);
      Options options0 = new Options();
      helpFormatter0.printHelp(" | ", options0, false);
      helpFormatter0.getOptPrefix();
      helpFormatter0.printHelp("on,~wgJ4|#Z9Kvdm&", options0);
      helpFormatter0.getLeftPadding();
      helpFormatter0.setWidth((-486));
      String string0 = "-";
      try { 
        MockURI.URI("arg", "", "cmdLineSyntax not provided", "NO_ARGS_ALLOWED");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: arg://cmdLineSyntax%20not%20provided#NO_ARGS_ALLOWED
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("ykcDj=6[!Aid;, wHl");
      StringBuffer stringBuffer0 = new StringBuffer("]_2");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1), 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.defaultWidth = 611;
      helpFormatter0.setSyntaxPrefix("");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = "_";
      Options options0 = new Options();
      String string1 = "Qs8-SxD";
      Option option0 = new Option("", "Qs8-SxD", true, "");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption((String) null, false, "");
      String string2 = "";
      Options options3 = options2.addOption("", "", false, "tgwTr];t0z_dU[");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.toString();
      Options options4 = options3.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        options4.addOption(".s", " ", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '.s' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(2745);
      StringBuffer stringBuffer0 = new StringBuffer("^7p:03N;[uy<:g|5q");
      int int0 = (-1);
      helpFormatter0.renderWrappedText(stringBuffer0, 2745, (-1), "^7p:03N;[uy<:g|5q");
      helpFormatter0.getLongOptSeparator();
      File file0 = MockFile.createTempFile("usage: ", "kLk#UmBj>72^cj.+|n");
      // Undeclared exception!
      try { 
        MockFile.createTempFile(" ", "usage: ", file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "2U0KJK:K}8E3T#tonvM";
      helpFormatter0.setOptPrefix("2U0KJK:K}8E3T#tonvM");
      String string1 = null;
      helpFormatter0.defaultSyntaxPrefix = null;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-4508), (String) null, "2U0KJK:K}8E3T#tonvM", (Options) null, "2U0KJK:K}8E3T#tonvM");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.defaultNewLine = "Jscb)S*E;>b";
      String string1 = "]dxu>Y!So4vd)JIR";
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2074));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("\n");
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.rtrim("");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setWidth(0);
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg", 0, 3);
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.findWrapPos("", 44, 44);
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      helpFormatter0.printHelp(1669, " ", " ", options0, "-");
      helpFormatter0.setWidth((-2));
      helpFormatter0.setLongOptSeparator("de.I7k :+G@Hyqaf/");
      assertEquals("de.I7k :+G@Hyqaf/", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(894, "", "", (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.findWrapPos("", 0, 0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals((-1), int0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 629;
      helpFormatter0.setLongOptPrefix("|=jE.Vf=5hH,@P[Mkb=");
      helpFormatter0.createPadding(0);
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-1228), (-1228));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-122);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getMatchingOptions("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-122), "O/m", (String) null, options1, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      String string0 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = (-1124);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-715), (-1124), "s$Vl'c&P");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Ws\\$Vl'c&P";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-715), (-1124), "Ws$Vl'c&P");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "eYvA0W<?";
      helpFormatter0.defaultSyntaxPrefix = "q.EJ?HoR8";
      helpFormatter0.setArgName("eYvA0W<?");
      helpFormatter0.getOptPrefix();
      int int0 = (-1774);
      String string1 = "8HKr)nJt%y(xhDP+l";
      Options options0 = new Options();
      boolean boolean0 = true;
      String string2 = "&ir";
      // Undeclared exception!
      try { 
        options0.addOption("org.apache.commons.cli.HelpFormatter$1", "usage: ", true, "&ir");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.HelpFormatter$1' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.getArgName();
      helpFormatter0.setOptPrefix((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", (-1157), (-1157));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 978;
      helpFormatter0.defaultDescPad = 978;
      helpFormatter0.setNewLine("");
      helpFormatter0.getNewLine();
      String string0 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("' was specified but an option from this group ", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.getLongOptPrefix();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("--", string0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      int int0 = 4549;
      helpFormatter0.createPadding(4549);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = Locale.TAIWAN;
      String string0 = "line.separator";
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) "line.separator";
      objectArray0[5] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "line.separator", objectArray0);
      int int0 = 1;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 1, "<");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-548);
      helpFormatter0.setWidth((-548));
      int int1 = (-501);
      helpFormatter0.setDescPadding((-501));
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }
}
