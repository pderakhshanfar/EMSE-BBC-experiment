/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:14:49 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.URI;
import java.util.Comparator;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.getLongOptSeparator();
      URI uRI0 = MockURI.URI("--");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", true, "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 2758, " ");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.setLeftPadding(103);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(false);
      Option option0 = new Option("arg", "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      helpFormatter0.getWidth();
      Option option1 = new Option("", "usage: ", true, ",qiI QwIu4(pyL@");
      optionGroup1.addOption(option1);
      options0.addOptionGroup(optionGroup1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "-", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.optionComparator = null;
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter1.append('o');
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, (-785), (-954), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("I(K>\"m}2dSAca");
      helpFormatter0.rtrim("I(K>\"m}2dSAca");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 26, ".@}!S", "I(K>\"m}2dSAca", options0, 706, 44, ".@}!S", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("79}ZaHPb{");
      String string0 = "";
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getLeftPadding();
      helpFormatter0.defaultOptPrefix = "79}ZaHPb{";
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getWidth();
      helpFormatter0.rtrim("");
      helpFormatter0.getDescPadding();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      int int0 = 88;
      helpFormatter0.defaultDescPad = 88;
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.getLongOptPrefix();
      String string1 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null, "usage: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // usage: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.createPadding(3746);
      helpFormatter0.setWidth((-785));
      helpFormatter0.getWidth();
      StringWriter stringWriter0 = new StringWriter(45);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringBuffer0.reverse();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 3456, string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("I(K>t\"m}2dSAca");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "\n", "D", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-785));
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setDescPadding((-968));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "$n!j9", "$n!j9", options0, "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      boolean boolean0 = false;
      Options options0 = new Options();
      helpFormatter0.printHelp(" [ARG]", ";P%Lks", options0, ";P%Lks");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      helpFormatter0.setLeftPadding(2606);
      int int0 = (-797);
      helpFormatter0.defaultLeftPad = (-797);
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Options options1 = null;
      int int1 = 32;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 2606, (Options) null, (-797), 32);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.toString();
      helpFormatter0.defaultWidth = 9;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("&5\"t(3V/(M8>", "9U9(FQ:[HOvj>c?", options0, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 928, options0, 928, 928);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 1926;
      String string0 = "";
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions((PrintWriter) null, 74, options1, 1926, (-1035));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix(" ");
      helpFormatter0.setLeftPadding(3);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", " ", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "-");
      Options options3 = options2.addOption(option0);
      String string0 = "q";
      Options options4 = options3.addOption("q", false, "--");
      helpFormatter0.printHelp(74, "org.apache.commons.cli.HelpFormatter", "arg", options4, "arg", false);
      helpFormatter1.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, "\n", "--", options1, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 1, options0, 1, 126);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 4, 1817, "6sb\"_/");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.getNewLine();
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-1424);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.hasOption(" ");
      helpFormatter1.defaultWidth = (-2085);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("usage: ", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 10;
      helpFormatter0.getNewLine();
      helpFormatter0.setArgName("\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("\n");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("", "", false, "Wq-Y\rJ'oYc{_");
      // Undeclared exception!
      try { 
        helpFormatter2.renderOptions((StringBuffer) null, 1628, options3, 64, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", false, "d%.@L-#(qU)m1");
      Options options2 = options1.addOption("", false, "Z>");
      helpFormatter0.printHelp("Z>", options2, false);
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("*wGtBZ;];yL~9");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 44, "IK6\u0002x)9,S}<T]].", options1);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getNewLine();
      String string0 = "xEc9I3>BOU";
      helpFormatter0.setArgName("xEc9I3>BOU");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("*mZ3Zd");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLeftPadding(1);
      StringBuffer stringBuffer0 = new StringBuffer(1980);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 3, options0, 3, 1);
      Options options1 = options0.addOption("", "arg", false, "--");
      // Undeclared exception!
      try { 
        helpFormatter2.renderOptions(stringBuffer1, 1, options1, 0, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "arg");
      optionGroup0.setRequired(true);
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, " ", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getLongOptSeparator();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1224, options1, 74, 12);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 53, 1224, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = 31;
      helpFormatter0.getNewLine();
      helpFormatter0.setArgName("\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("\n");
      helpFormatter0.setLeftPadding((-260));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      int int0 = (-2854);
      helpFormatter0.defaultDescPad = (-2854);
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getMatchingOptions("The option '");
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getMatchingOptions("org.apache.commons.cli.AlreadySelectedException");
      options1.hasShortOption("The option '");
      options1.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("`2U-S|!X", "`2U-S|!X", options1, "`2U-S|!X");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.defaultDescPad = (-2375);
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", options0, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix(" ");
      helpFormatter0.setLeftPadding((-2208));
      options0.toString();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "arg", "[ Options: [ short java.util.HashMap@0000000006 ] [ long {} ]", options1, "org.apache.commons.cli.HelpFormatter", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", true, "--");
      Option option0 = new Option("", "wc)hlf,e4_NN4;;Zy%");
      options0.getOption(" ");
      options0.addOption(option0);
      options0.hasLongOption("\n");
      options1.getOptionGroups();
      helpFormatter0.printHelp(45, "wc)hlf,e4_NN4;;Zy%", ".,d=+1PhoS%m-*26i", options1, "wc)hlf,e4_NN4;;Zy%", true);
      helpFormatter0.findWrapPos("f>} ", (-2), 5);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-268);
      helpFormatter0.setArgName("\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      helpFormatter0.createPadding(0);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      int int0 = 1;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, (-937), " | ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getNewLine();
      helpFormatter0.setLongOptSeparator("\n");
      helpFormatter0.printHelp(97, "[", "", options0, "org.apache.commons.cli.Options", true);
      helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      Option option0 = new Option("arg", true, (String) null);
      Options options1 = options0.addOption(option0);
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 97, options1, 1, 3);
      helpFormatter0.renderOptions(stringBuffer1, 97, options0, 3143, 13);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) helpFormatter0;
      helpFormatter0.getNewLine();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(5, "sGLa4y&", "", (Options) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.defaultDescPad = (-268);
      helpFormatter0.getNewLine();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.hasOption("|%!B}RF~,cW,");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", "\n", options0, "\n", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "   ";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "   ");
      helpFormatter0.getDescPadding();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getNewLine();
      Options options1 = new Options();
      helpFormatter0.getLongOptSeparator();
      MockFile mockFile0 = new MockFile(" ", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      helpFormatter0.printWrapped(printWriter0, 1540, "cmdLineSyntax not provided");
      helpFormatter0.printHelp(95, "-", "-", options0, "hI)<Eq6TE]W]up-", true);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-180), 1540, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      char[] charArray0 = new char[9];
      charArray0[0] = ':';
      charArray0[1] = ' ';
      charArray0[2] = 'w';
      charArray0[3] = '9';
      charArray0[4] = ',';
      charArray0[5] = '!';
      charArray0[6] = 'D';
      charArray0[7] = '!';
      charArray0[8] = '{';
      mockPrintWriter0.write(charArray0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 98, "");
      int int0 = 1055;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1055, ">4BGDg8a>CY5=ArC[\"u");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-51), "org.apache.commons.cli.OptionValidator");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", true, "--");
      Option option0 = new Option("", "wc)hlf,e4_NN4;;Zy%");
      options0.getOption(" ");
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("-", "wc)hlf,e4_NN4;;Zy%", options1, "org.apache.commons.cli.HelpFormatter", true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 34, "", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "";
      Option option0 = new Option("", "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.getLongOptSeparator();
      Options options1 = null;
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", "", (Options) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options0 = new Options();
      helpFormatter0.printHelp("RI", options0, false);
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setLongOptPrefix("sh4Bsu3z");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2401, ",T%8YWMBm", "org.apache.commons.cli.HelpFormatter", options0, 3, 10, "\n", false);
      helpFormatter2.createPadding(74);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getNewLine();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, (String) null, options0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      helpFormatter0.printHelp("--", options0, false);
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setLongOptPrefix("' was specified but an option from this group ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 74, " ", " ", options0, 0, 58, "-", false);
      helpFormatter1.createPadding(74);
      helpFormatter1.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-2), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      boolean boolean0 = true;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      Options options0 = new Options();
      Option option0 = new Option("arg", "f4OW!32+-2S00", true, "usage: ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption("arg", "\n", true, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 87, "' was specified but an option from this group ", "' was specified but an option from this group ", options3, 1715, (-1), "f4OW!32+-2S00");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = false;
      Option option0 = new Option("arg", "arg", false, "");
      optionGroup0.toString();
      String string0 = "[";
      helpFormatter0.rtrim((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setArgName("--");
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(10, "[]", "-", (Options) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "arg", false, "");
      optionGroup0.toString();
      helpFormatter0.rtrim((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(" ", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      helpFormatter0.printHelp("--", options0, false);
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setLongOptPrefix("' was specified but an option from this group ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, (String) null, "-", options1, 1, 0, "'", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", true, "--");
      Option option0 = new Option("", "wc)hlf,e4_NN4;;Zy%");
      options0.getOption(" ");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasLongOption("\n");
      options0.hasOption(" Te45MQ('^{i!?`");
      helpFormatter0.rtrim("YP#TLh sEC;T4Fo7");
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options1.hasOption("|;.ej_9+0*");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("#iP,oa^u8UU%iSOx");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, false);
      mockPrintWriter1.println(3);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter2, 74, "arg", (String) null, options0, 14, 1, "7woby`Sq-", true);
      helpFormatter0.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockFileOutputStream0;
      mockPrintWriter0.printf("--", objectArray0);
      Options options0 = new Options();
      options0.addOption("arg", true, "--");
      helpFormatter0.rtrim((String) null);
      helpFormatter0.setArgName("usage: ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.hasOption("[$W4au~5]n~x8");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 27, " ", "+v%/tTf(6fg0T,Gj#d", options0, 2641, 575, (String) null, true);
      helpFormatter1.createPadding(3);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, false, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      options1.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("+Ko)XfqNIq8p)fsyCM", "+Ko)XfqNIq8p)fsyCM", options2, "Cannot add value, list full.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", "-", true, "--");
      Option option0 = new Option("", "wc)hlf,e4_NN4;;Zy%");
      options0.getOption(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-2), 2637, "wc)hlf,e4_NN4;;Zy%");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      helpFormatter0.printHelp("--", options0, false);
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setLongOptPrefix("' was specified but an option from this group ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 1890, "'[M*`/}", "<", options0, 74, (-1), "\n", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      helpFormatter0.setNewLine("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getNewLine();
      Options options1 = new Options();
      helpFormatter1.getNewLine();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLongOptPrefix(" ");
      helpFormatter0.getNewLine();
      helpFormatter0.printHelp(1, "\n", "-", options0, "\n", true);
      helpFormatter2.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockFileOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "--");
      helpFormatter0.rtrim((String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.hasOption("");
      helpFormatter0.printHelp(printWriter0, 34, "[", ";:%oIe8Q$WK^N^8)#", options1, 74, 575, "--", true);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1616));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("mU]$p,7/wfh1");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 3, (Options) null, 44, 1124);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "~CY/8IH(df^d*P$y";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("~CY/8IH(df^d*P$y", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockFileOutputStream0;
      mockPrintWriter0.printf("--", objectArray0);
      Options options0 = new Options();
      options0.addOption("arg", true, "--");
      helpFormatter0.setNewLine("hz( |g-gbxJU:^~cuRO");
      helpFormatter0.getNewLine();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getNewLine();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLongOptPrefix("hz( |g-gbxJU:^~cuRO");
      helpFormatter1.getLongOptPrefix();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      helpFormatter3.printHelp((PrintWriter) mockPrintWriter1, 31, "-", "arg", options1, 3, 64, ";:%oIe8Q$WK^N^8)#", false);
      helpFormatter2.createPadding(10);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      mockPrintWriter0.println();
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockFileOutputStream0;
      mockPrintWriter0.printf("--", objectArray0);
      Options options0 = new Options();
      options0.addOption("arg", true, "--");
      helpFormatter0.rtrim((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("--", (String) null, "").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setArgName("arg");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options1 = new Options();
      helpFormatter0.printHelp("]", "--", options0, "]", true);
      helpFormatter0.printHelp(116, "jJsYE&qq&mv?", "[", options0, "--", false);
      helpFormatter1.rtrim("dOVfFi[L,^p R7~= ");
      helpFormatter1.getOptPrefix();
      helpFormatter0.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "arg", false, "");
      optionGroup0.setSelected(option0);
      optionGroup0.toString();
      helpFormatter0.rtrim((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
      helpFormatter0.setArgName("--");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options1 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      options1.hasOption("");
      helpFormatter0.printHelp("*^[$DQ05", "BRUw$+0zTem&[]eL", options1, "usage: ", false);
      helpFormatter0.printHelp(4, "\n", "[", options1, (String) null, true);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-2), "-", "--", options1, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          HelpFormatter helpFormatter0 = new HelpFormatter();
          MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
          Options options0 = new Options();
          helpFormatter0.printHelp("--", options0, false);
          OptionGroup optionGroup0 = new OptionGroup();
          helpFormatter0.getNewLine();
          // Undeclared exception!
          helpFormatter0.printHelp(0, "\n", " :: ", options0, ".,d=+1PhoS%m-*26i", false);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      stringBuffer0.codePoints();
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.Options", options0, false);
      int int0 = 74;
      helpFormatter0.setNewLine("org.apache.commons.cli.Options");
      String string0 = "]h[l2qbpZ~;$SI;3";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) stringBuffer0);
      int int1 = 4;
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "]h[l2qbpZ~;$SI;3", "", options0, 4, 74, "^\"rn$,HezPySMc");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[4];
      helpFormatter0.setDescPadding(2269);
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockFileOutputStream0;
      objectArray0[3] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf("--", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getNewLine();
      helpFormatter0.getNewLine();
      helpFormatter0.findWrapPos("", 2269, 2269);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1), (-1), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.setSyntaxPrefix("@");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      helpFormatter0.defaultSyntaxPrefix = "Wcm";
      helpFormatter0.getWidth();
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append('K');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 74, 63, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockFileOutputStream0;
      objectArray0[3] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "arg", false, "");
      optionGroup0.setSelected(option0);
      optionGroup0.toString();
      helpFormatter0.setNewLine("[]");
      helpFormatter0.getNewLine();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-2), "^*ZS}Dft9u9RV1aR", "9i[Qm^K/*e%", options1, 103, 103, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.getNewLine();
      helpFormatter0.printHelp(251, "--", "_QG5", options0, "/ JBdD}F", false);
      StringBuffer stringBuffer0 = new StringBuffer("");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2), options1, (-1), 251);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", true, "--");
      Option option0 = new Option("", "\n");
      options0.getOption(" ");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasLongOption("\n");
      options1.getOptionGroups();
      FileSystemHandling.shouldAllThrowIOExceptions();
      options1.addOption((String) null, "--", true, "");
      optionGroup0.toString();
      helpFormatter0.printHelp("[ option: ", options1, true);
      helpFormatter0.findWrapPos("`Sl0W", 65, 2);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption((String) null, (String) null, false, "\n");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(dataOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, false);
      helpFormatter0.printHelp(58, "$", "f<Sb`u-Cm.E", options0, "$");
      OptionGroup optionGroup0 = new OptionGroup();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      stringBuffer0.codePoints();
      Options options0 = new Options();
      helpFormatter0.printHelp("t~RM;v[|P", "", options0, "");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "t~RM;v[|P", "'uf1sG-p^c?FBot'H", options0, "");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      options0.getOptionGroups();
      FileSystemHandling.shouldAllThrowIOExceptions();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = null;
      Options options1 = options0.addOption((String) null, (String) null, true, ">");
      helpFormatter0.printHelp(">", options1, false);
      helpFormatter0.defaultOptPrefix = "org.apache.commons.cli.HelpFormatter$1";
      helpFormatter0.setNewLine("GQ.[ $Mt+i317@_");
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", true, "--");
      Option option0 = new Option("", "wc)hlf,e4_NN4;;Zy%");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasLongOption("\n");
      options1.getOptionGroups();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(5, "Q=~z$Wd9Oll/B5i4z", "arg", options0, (String) null, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      boolean boolean0 = true;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockFileOutputStream0;
      objectArray0[3] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      helpFormatter0.getNewLine();
      Options options1 = new Options();
      Options options2 = new Options();
      helpFormatter0.defaultNewLine = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 13, "", "X>#o;YN&lWBEL4&", options2, 13, 13, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 64, 64, "");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockFileOutputStream0;
      mockPrintWriter0.printf("--", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "");
      optionGroup0.addOption(option0);
      helpFormatter0.printHelp(46, "T{>s\u0000-", "T{>s\u0000-", options0, "", true);
      helpFormatter0.rtrim("");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockFileOutputStream0;
      objectArray0[3] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "arg", false, "");
      optionGroup0.setSelected(option0);
      optionGroup0.toString();
      helpFormatter0.setNewLine("[]");
      helpFormatter0.printHelp(printWriter0, 62, "^*ZS}Dft9u9RV1aR", "", options0, 13, 103, "9i[Qm^K/*e%");
      helpFormatter0.getNewLine();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-2), "^*ZS}Dft9u9RV1aR", "9i[Qm^K/*e%", options1, 103, 103, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter0.renderWrappedText(stringBuffer0, 71, 71, "");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "", 1, (-4));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockFileOutputStream0;
      mockPrintWriter0.printf("--", objectArray0);
      Options options0 = new Options();
      options0.addOption("arg", true, "--");
      helpFormatter0.rtrim((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setArgName("arg");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options1 = new Options();
      helpFormatter0.printHelp("]", "--", options0, "]", true);
      helpFormatter0.printHelp(116, "jJsYE&qq&mv?", "[", options0, "--", false);
      helpFormatter1.rtrim("dOVfFi[L,^p R7~= ");
      helpFormatter1.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockFileOutputStream0;
      objectArray0[3] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf("--", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(13, "", "HS;!?n", options0, "'uf1sG-p^c?FBot'H");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2006));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", true, "--");
      Option option0 = new Option("", "wc)hlf,e4_NN4;;Zy%");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options0.toString();
      options0.hasLongOption("\n");
      options1.getOptionGroups();
      options1.addOption((String) null, "wc)hlf,e4_NN4;;Zy%", true, "");
      optionGroup0.toString();
      helpFormatter0.printHelp("[ option: ", options1, true);
      helpFormatter0.setNewLine("wc)hlf,e4_NN4;;Zy%");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockFileOutputStream0;
      objectArray0[3] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      Option option0 = new Option("", false, "");
      OptionGroup optionGroup1 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup1);
      options0.getOption("");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printUsage(printWriter0, 13, "T{>s\u0000-", options2);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      stringBuffer0.codePoints();
      Options options0 = new Options();
      Object object0 = new Object();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "]");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      MockFile mockFile0 = new MockFile("--", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "--";
      objectArray0[1] = (Object) "t~RM;v[|P";
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "has already been selected: '";
      objectArray0[5] = (Object) mockPrintStream0;
      objectArray0[6] = (Object) mockPrintWriter0;
      mockPrintWriter0.format("has already been selected: '", objectArray0);
      // Undeclared exception!
      helpFormatter0.printOptions(mockPrintWriter0, 0, options0, 0, 2);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockFileOutputStream0;
      objectArray0[3] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf("--", objectArray0);
      Options options0 = new Options();
      mockPrintWriter0.printf(" ", objectArray0);
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      optionGroup1.toString();
      helpFormatter0.setNewLine("[]");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2), "", ".I[/&5", options0, (-2859), 13, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "wc)hlf,e4_NN4;;Zy%");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOption("arg", "", true, "");
      options2.hasLongOption("V^mG.k=J1)af_`");
      Options options3 = new Options();
      options3.getOptionGroups();
      optionGroup0.toString();
      helpFormatter0.printHelp("[]", options0, true);
      helpFormatter0.setNewLine("a{]T^_9Ngkh");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-527), "[ option: ", "a{]T^_9Ngkh", options3, (-1730), (-639), "GU$\"~.");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      Option option0 = new Option("", "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "Q=~z$Wd9Oll/B5i4z", "\n", options1, "|`(j9BwR", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockFileOutputStream0;
      objectArray0[3] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf("--", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      Option option0 = new Option("", false, "");
      helpFormatter0.rtrim("[");
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter1.setOptionComparator(comparator0);
      helpFormatter0.setArgName("' contains an illegal character : '");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options1 = new Options();
      helpFormatter0.printHelp("--", "yl", options1, "usage: ", false);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, "' contains an illegal character : '", "org.apache.commons.cli.OptionGroup", options0, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(",B:^O|0]LY1-1tVmS");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(",B:^O|0]LY1-1tVmS", options1, true);
      helpFormatter0.setNewLine("qR/n'6atx|S$EvWgG");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 101, " :: ", (String) null, options1, 1133, 74, "org.apache.commons.cli.Options");
      helpFormatter0.getNewLine();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1133, 74, "org.apache.commons.cli.Options");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      boolean boolean0 = true;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockFileOutputStream0;
      objectArray0[3] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf("--", objectArray0);
      String string0 = "T{>s\\0-";
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp("T{>s\u0000-", options1, true);
      Option option0 = null;
      // Undeclared exception!
      try { 
        options0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.ParseException");
      Options options0 = new Options();
      options0.getOptionGroups();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      helpFormatter0.setNewLine("*%%%");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 12, "RL98m~a^", "Oy0Px{", options0, 12, 74, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockFileOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      Option option0 = new Option("", false, "");
      String string0 = helpFormatter0.defaultOptPrefix;
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter1.setOptionComparator(comparator0);
      helpFormatter0.setArgName("");
      Options options1 = new Options();
      helpFormatter0.printHelp("--", "yl", options1, "usage: ", false);
      PrintWriter printWriter1 = printWriter0.format("", objectArray0);
      helpFormatter1.printOptions(printWriter1, 62, options0, 1, 0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockFileOutputStream0;
      objectArray0[3] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      helpFormatter0.setNewLine("[]");
      helpFormatter0.printHelp(printWriter0, 62, "^*ZS}Dft9u9RV1aR", "", options0, 13, 103, "9i[Qm^K/*e%");
      helpFormatter0.getNewLine();
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage(printWriter0, 1, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 44;
      String string0 = null;
      Options options0 = new Options();
      String string1 = "org.apache.commons.cli.HelpFormatter";
      helpFormatter0.printHelp(44, "org.apache.commons.cli.HelpFormatter", (String) null, options0, (String) null);
      String string2 = "Bq(@2xDjx";
      // Undeclared exception!
      try { 
        options0.addOption(" ", true, "Bq(@2xDjx");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.ParseException");
      Options options0 = new Options();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 937, 84, "org.apache.commons.cli.ParseException");
      helpFormatter0.printHelp("org.apache.commons.cli.ParseException", options0, false);
      helpFormatter0.setNewLine("qR/n'6atx|S$EvWgG");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 937, "org.apache.commons.cli.ParseException", "", options0, 74, 74, "]h[l2qbpZ~;$SI;3");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", true, "--");
      Option option0 = new Option("", "wc)hlf,e4_NN4;;Zy%");
      Options options2 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasLongOption("\n");
      options1.getOptionGroups();
      optionGroup0.toString();
      helpFormatter0.printHelp("[ option: ", options1, true);
      helpFormatter0.setNewLine("wc)hlf,e4_NN4;;Zy%");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1), ";", "", options2, 4, 788, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.ParseException");
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.ParseException", options0, false);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("JN", true, "-");
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-5580), "\n", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(894);
      StringWriter stringWriter1 = stringWriter0.append('z');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Locale locale0 = Locale.ROOT;
      String string0 = "";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", (Object[]) null);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "arg", false, "");
      optionGroup0.toString();
      helpFormatter0.rtrim((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.rtrim(" ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      options0.getMatchingOptions("[");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("'`:PuE}7eJSyOI:zHit", (String) null, false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ''`:PuE}7eJSyOI:zHit' contains an illegal character : '''
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.ParseException");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.ParseException");
      Options options0 = new Options();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      helpFormatter0.printHelp("org.apache.commons.cli.ParseException", options0, false);
      helpFormatter0.setNewLine("qR/n'6atx|S$EvWgG");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 937, "org.apache.commons.cli.ParseException", "", options0, 74, 74, "]h[l2qbpZ~;$SI;3");
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockFileOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "--");
      String string0 = "[";
      helpFormatter0.rtrim((String) null);
      int int0 = 545;
      helpFormatter0.printUsage(printWriter0, 545, "' contains an illegal character : '");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setArgName("usage: ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter1.printHelp("arg", "-", options1, " ", true);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, "[k?", "kTNlmtyE92YHe&3:1((", options0, "]", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockFileOutputStream0;
      objectArray0[3] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf("--", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      Option option0 = new Option("", false, "");
      helpFormatter0.rtrim("[");
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator0);
      helpFormatter0.setArgName("");
      Options options1 = new Options();
      helpFormatter0.printHelp("--", "yl", options1, "usage: ", false);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, "", "org.apache.commons.cli.OptionGroup", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.ParseException";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.ParseException");
      Options options0 = new Options();
      options0.getOptionGroups();
      String string1 = "R))";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-545), "--", "", options0, "R))", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.hasOption("The option '");
      Options options2 = options1.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      Option option0 = new Option("a", "--");
      options2.addOption(option0);
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", options2);
      helpFormatter0.setLongOptPrefix("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "M*Z", "M*Z", options2, "a");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockFileOutputStream0;
      objectArray0[3] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-546), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockFileOutputStream0;
      objectArray0[3] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf("--", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "--");
      helpFormatter0.printHelp("T{>s\u0000-", options1, true);
      // Undeclared exception!
      try { 
        options0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockFileOutputStream0;
      objectArray0[3] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      Option option0 = new Option("", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options0.getOption("");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printUsage(printWriter0, 13, "T{>s\u0000-", options2);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      String string1 = "JKlb]\":<`x-b";
      helpFormatter0.setNewLine("JKlb]\":<`x-b");
      String string2 = null;
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.defaultLeftPad = (-5654);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", (-5654), 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("+Gvbyn0B^uhGa2hQ");
      helpFormatter0.defaultNewLine = "line.separator";
      helpFormatter0.getOptionComparator();
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      helpFormatter0.defaultLongOptPrefix = "line.separator";
      helpFormatter0.getArgName();
      helpFormatter0.rtrim("arg");
      helpFormatter0.getWidth();
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.findWrapPos("1wd5X", 6329, 6329);
      helpFormatter0.getArgName();
      helpFormatter0.setDescPadding((-1));
      helpFormatter0.setOptPrefix((String) null);
      PrintWriter printWriter0 = null;
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1, 1, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      Options options0 = new Options();
      String string1 = "l|";
      Options options1 = options0.addOption((String) null, " ", false, "l|");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "", options1, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-741), "", "", options1, "v}<<fYDC3xa88.", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("--");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      String string0 = "";
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.defaultLeftPad = 0;
      String string1 = null;
      helpFormatter0.rtrim((String) null);
      helpFormatter0.defaultWidth = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.setSyntaxPrefix("@");
      helpFormatter0.defaultSyntaxPrefix = "Wcm";
      helpFormatter0.getWidth();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLongOptSeparator("}[Q<^b9\")iycxKuL;");
      helpFormatter0.getDescPadding();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 9, 9, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      String string1 = "";
      String string2 = "&";
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options1, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2910;
      String string0 = "1F4y$,%:0.n~[kE|a";
      int int1 = 1258;
      helpFormatter0.setWidth(1258);
      Options options0 = new Options();
      boolean boolean0 = false;
      String string1 = null;
      // Undeclared exception!
      try { 
        options0.addOption("#", false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '#'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      int int0 = 3;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "", true, "h rC/hH}");
      // Undeclared exception!
      try { 
        options2.addOption("0\"U;</liN^DF(h#T9#", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '0\"U;</liN^DF(h#T9#' contains an illegal character : '\"'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(894);
      StringWriter stringWriter1 = stringWriter0.append('z');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Locale locale0 = Locale.ROOT;
      String string0 = "";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", (Object[]) null);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "I[}ij-?,iv{y@k@.");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.ParseException");
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.ParseException", options0, false);
      helpFormatter0.setNewLine("qR/n'6atx|S$EvWgG");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 937, "org.apache.commons.cli.ParseException", "", options0, 74, 74, "]h[l2qbpZ~;$SI;3");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setSyntaxPrefix("}3vI,Q;cKl;3b$ D|U");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "Q>LmhMD*,IwC~+l";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = null;
      try {
        option0 = new Option("-", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      int int0 = 3163;
      stringBuffer0.codePoints();
      Options options0 = new Options();
      String string0 = "t~RM;v[|P";
      String string1 = "";
      // Undeclared exception!
      helpFormatter0.printHelp(0, "t~RM;v[|P", "'uf1sG-p^c?FBot'H", options0, "");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(31);
      String string0 = "[";
      Options options0 = new Options();
      String string1 = "";
      OutputStream outputStream0 = null;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2422;
      String string0 = "\\A8";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options1.addOption("usage: ", "-", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "]ye=|WY4Ozo5{V:";
      Options options0 = new Options();
      options0.getMatchingOptions("\n");
      String string1 = "+Fhs$9dez%g`)";
      helpFormatter0.defaultNewLine = "+Fhs$9dez%g`)";
      helpFormatter0.setOptPrefix((String) null);
      // Undeclared exception!
      try { 
        options0.addOption("Ja2 I>/{Ip^m(E8C?V", "", false, "p^GVS?~m'N !6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'Ja2 I>/{Ip^m(E8C?V' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
