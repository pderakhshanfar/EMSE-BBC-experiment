/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 17:44:08 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("\n");
      String string0 = helpFormatter0.createPadding(1610);
      helpFormatter0.defaultSyntaxPrefix = string0;
      helpFormatter0.createPadding(1610);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      helpFormatter0.defaultLongOptPrefix = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 5, (-1402), string0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "arg");
      options0.toString();
      helpFormatter0.defaultOptPrefix = "[ Options: [ short java.util.HashMap@0000000005 ] [ long {} ]";
      helpFormatter0.printHelp("*|[F\f8Iy@:", "", options1, "*|[F\f8Iy@:", true);
      StringBuffer stringBuffer0 = new StringBuffer("_-b%7wvrLMTni");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2059, options0, 2059, 2059);
      helpFormatter0.renderWrappedText(stringBuffer1, 175, 175, "_-b%7wvrLMTni");
      Option option0 = new Option("", true, "\n");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp("_-b%7wvrLMTni", " ]", options2, "|eIG(s8Y~I", true);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption((String) null, false, "");
      helpFormatter0.setWidth((-1037));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", " ", options0, "*9[aXC)!$;09;kwZz^e", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp(58, "[", "[", options1, "_Sp\"BQoN|.l_N&qLa", false);
      options0.addOption("arg", true, "--");
      helpFormatter0.defaultLeftPad = (-38);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("*9[aX)W!$;P09;kwz^e", "*9[aX)W!$;P09;kwz^e", options0, "*9[aX)W!$;P09;kwz^e", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("nmK\bR)?Q>A6^sf),{g", "nmK\bR)?Q>A6^sf),{g", (Options) null, "org.apache.commons.cli.AlreadySelectedException", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultWidth = (-2347);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", " ", options0, " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg");
      Options options1 = options0.addOption(option0);
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.printHelp("|T;{1", "", options1, "|T;{1");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-2390);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", "arg", options0, "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      int int0 = (-375);
      helpFormatter0.defaultWidth = (-375);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.defaultLongOptPrefix = "NO_ARGS_ALLOWED";
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, " ] [ long ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  ] [ long 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.createPadding(18);
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setNewLine("");
      helpFormatter0.setNewLine("");
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.findWrapPos(".NK:!)]{Oi<p+9", 18, 1252);
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      helpFormatter0.findWrapPos("", 995, 18);
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 3, options0, (-236), 18);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("--", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, 3, "usage: ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "--", false, (String) null);
      optionGroup0.addOption(option0);
      Option option1 = new Option((String) null, "-", true, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options0.hasLongOption("]qfaxw3$}Axi;.DjF<#");
      optionGroup1.setRequired(false);
      helpFormatter0.setSyntaxPrefix("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "usage: ", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1153));
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("arg", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, 3, "usage: ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "--", false, (String) null);
      optionGroup0.addOption(option0);
      Option option1 = new Option((String) null, "-", true, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup1.setRequired(true);
      helpFormatter0.setSyntaxPrefix("arg");
      Options options2 = options1.addOption("", "arg", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1184), "-", (String) null, options2, 10, 3, "usage: ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, " ] [ long ");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Locale locale0 = Locale.CANADA_FRENCH;
      mockPrintWriter0.write(2458);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) options0;
      objectArray0[6] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "<", objectArray0);
      helpFormatter0.printHelp(printWriter0, 2740, "<", "--", options1, 40, 76, (String) null, false);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1604));
      Options options0 = new Options();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 2283;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions((PrintWriter) null, 74, options0, 2283, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 734, "?Xj");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "3py5$xd1~k", (String) null, options0, 115, 74, "N", false);
      helpFormatter1.getArgName();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.setWidth((-626));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("M6jq(s\"", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("u!+lhU|-].>", "u!+lhU|-].>", (Options) null, "ARCm:");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.createPadding(8);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getDescPadding();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "\n");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "MABE}_}RGb4XK`2T");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printUsage(printWriter0, 8, (String) null, options2);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      Options options0 = new Options();
      helpFormatter0.printHelp("Ceq", "Ceq", options0, "");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = (-1);
      options0.addOption("arg", true, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("l", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) ";G";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "\n", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped(printWriter0, (-2), "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "";
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 32, options0, 32, 1914);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      String string0 = "";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "", options0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      helpFormatter0.createPadding(0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(128, "Kb1u%LO", "Kb1u%LO", options0, (String) null, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 91, "", "Kb1u%LO", options0, 1, 1, "-", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options0 = null;
      int int0 = 29;
      int int1 = 48;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (-326), (Options) null, 29, 48);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "\n", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(1);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 3, options0, 74, 63);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-2));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      helpFormatter0.createPadding(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(11, "-", "usage: ", options0, "usage: ", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("{Cv(-[_Us&s");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Options options0 = new Options();
      helpFormatter0.createPadding(1043);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) "ZsuX,gjP!";
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options1 = options0.addOption((String) null, " | ", true, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      String string0 = "   ";
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp(18, "Y5ziP", "   ", options1, "   ", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "]", false, "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Locale.forLanguageTag("Sr9|=A>/fF$P");
      options1.addOption("", false, (String) null);
      helpFormatter0.printHelp("usage: ", "", options0, "arg");
      helpFormatter0.printHelp("<", options0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = false;
      Options options1 = options0.addOption("", false, "usage: ");
      options1.addOption("", "]", false, "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", options1);
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText((StringBuffer) null, 32, 314, "]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("{Cv(-[_Us&s");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim((String) null);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      helpFormatter0.createPadding(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) options0;
      mockPrintWriter0.printf((Locale) null, ">", objectArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, 74, "\n");
      helpFormatter1.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      boolean boolean0 = false;
      Options options1 = new Options();
      options1.addOption("", "]", false, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-148), options0, (-148), (-2659));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Locale.forLanguageTag("arg");
      options0.helpOptions();
      Locale locale0 = new Locale("-", "' was specified but an option from this group ", ":!");
      Object[] objectArray0 = new Object[0];
      mockPrintWriter1.printf(locale0, "--", objectArray0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printWrapped((PrintWriter) mockPrintWriter0, 3, (-260), "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.getArgName();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Ad7j");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0, false);
      Object object0 = new Object();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 3, "2", (String) null, options0, 10, 1, "<", false);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "arg";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setDescPadding(2742);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(480, "-", "-", (Options) null, "ar[*Gih{9iFEz_N");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "usage: ");
      Options options2 = options1.addOption("", "]", false, "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", options1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Locale.forLanguageTag("Sr9|=A>/fF$P");
      helpFormatter1.defaultSyntaxPrefix = "' contains an illegal character : '";
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) options1;
      objectArray0[1] = (Object) "";
      options1.helpOptions();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, 3, "usage: ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "_<Ru~TX+_", options2);
      helpFormatter1.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 12, "%Uj&`m}`H$F,A", "Rq7!V\"l2P:Q;K", options2, 3, 8, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)27;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      options0.addOption("", "]", false, "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", options0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Locale locale0 = Locale.forLanguageTag("Sr9|=A>/fF$P");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) "";
      options0.helpOptions();
      objectArray0[2] = (Object) helpFormatter1;
      PrintWriter printWriter0 = mockPrintWriter1.printf(locale0, "org.apache.commons.cli.Util", objectArray0);
      helpFormatter1.printWrapped(printWriter0, 1, 74, "\n");
      StringBuffer stringBuffer0 = new StringBuffer(1);
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, (-1269), 13, "; HP-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      options0.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "usage: ");
      Options options2 = options1.addOption("", "]", false, "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", options1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Locale.forLanguageTag("Sr9|=A>/fF$P");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) options1;
      objectArray0[1] = (Object) "";
      options1.helpOptions();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, 3, "usage: ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "_<Ru~TX+_", options2);
      helpFormatter1.getDescPadding();
      helpFormatter1.getDescPadding();
      Option option0 = new Option("arg", "");
      Options options3 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 3, options3, 1, (-2546));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      int int0 = 1043;
      helpFormatter0.createPadding(1043);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1753), "W~");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      options0.getOption(";G");
      helpFormatter0.setOptPrefix(";G");
      options0.addOption("arg", true, "");
      helpFormatter0.printHelp(";G", ";G", options0, "-");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "arg", "+O#(7{m ", options0, "+O#(7{m ", true);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      options0.addOption("arg", true, "");
      helpFormatter0.printHelp(";G", ";G", options0, "-");
      helpFormatter0.createPadding(74);
      StringBuffer stringBuffer0 = new StringBuffer("--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-292), options0, 74, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(72, "6@#7KG{r", "^FKMKi]<d7", (Options) null, "^FKMKi]<d7", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.optionComparator = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("\n");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLeftPadding();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "usage: ", false, "");
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 4, "?<_MQy@rh,BYW.", "", options1, 31, 6, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "usage: ");
      Options options2 = options1.addOption("", "]", false, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1352, "", "", options2, "]", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      options0.getOption("--");
      helpFormatter0.printHelp(";G", options0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
      mockFileOutputStream0.release();
      Object object0 = new Object();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 924, "arg", "bS1", options0, 9, 28, "", false);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "usage: ");
      options1.addOption("", "]", false, "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", options1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Locale locale0 = Locale.forLanguageTag("Sr9|=A>/fF$P");
      Object[] objectArray0 = new Object[3];
      options0.helpOptions();
      mockPrintWriter0.printf(locale0, "--", objectArray0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "--", objectArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 2385, 1672, "KPq@T/a");
      helpFormatter1.printUsage(printWriter0, 2385, "X6s}ErfI_8D'");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.createPadding(1691);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.findWrapPos(string0, 1691, (-234));
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      int int0 = (-2628);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2628));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "usage: ");
      options1.addOption("", "]", false, "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", options1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Locale.forLanguageTag("Sr9|=A>/fF$P");
      options0.helpOptions();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 3, "arg", "\n", options0, 3, 1120, "!h+u|>C!1&,)ID7E>2", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "usage: ");
      Options options2 = options1.addOption("", "]", false, "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", options1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Locale locale0 = Locale.forLanguageTag("Sr9|=A>/fF$P");
      options2.helpOptions();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) options2;
      objectArray0[4] = (Object) "]";
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) "";
      Object object0 = new Object();
      objectArray0[8] = object0;
      mockPrintWriter0.printf(locale0, "arg", objectArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, 3, " | ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "\n", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("{Cv(-[_Us&s");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Options options0 = new Options();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.createPadding(74);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "arg", "arg", options0, "                                                                          ", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Object object0 = new Object();
      Locale locale0 = Locale.GERMAN;
      locale0.stripExtensions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("|wt3;aL]T9%w8Y-cdb");
      Object object1 = new Object();
      int int0 = 35;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 35, "|wt3;aL]T9%w8Y-cdb", " ", options0, 101, 10, "R9a\"", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.getArgName();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.getOptions();
      options1.addOption("arg", true, "--");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1142, "arg", options0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 53, "65uj");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      String string0 = ";G";
      Options options0 = new Options();
      options0.getOption(";G");
      helpFormatter0.setOptPrefix(";G");
      String string1 = "";
      Options options1 = options0.addOption("arg", true, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", ";G", options1, ";G");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "   ";
      String string0 = helpFormatter0.defaultNewLine;
      helpFormatter0.getOptionComparator();
      PrintWriter printWriter0 = null;
      int int0 = 1142;
      Options options0 = new Options();
      helpFormatter0.printHelp(656, "\n", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, "", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 656, "qLaI|", (String) null, options0, 97, 2484, "   ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", (String) null, true, ", ");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", "", true, "'zt");
      options2.addOption("PXv", true, "--");
      Locale locale0 = Locale.UK;
      Object object0 = new Object();
      locale0.stripExtensions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("has already been selected: '");
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1840), (String) null, (String) null, options0, 1435, (-1), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", options0);
      options0.getOption("arg");
      helpFormatter0.printHelp("arg", options0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.cli.OptionGroup");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      Locale locale0 = Locale.UK;
      Object object0 = new Object();
      locale0.stripExtensions();
      Locale locale1 = Locale.FRANCE;
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.printf(locale1, "", objectArray0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "org.apache.commons.cli.HelpFormatter$OptionComparator", "Sp|SD1Y-[G=4evq", options0, 23, (-925), "", false);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", false, "usage: ");
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getOptions();
      Options options2 = options0.addOption("arg", true, "   ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 49, (String) null, options2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("{Cv(-[_Us&s");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1300, " ", options1);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      options0.addOption(option0);
      Locale locale0 = new Locale("Q=a?+GQBY\"\"C)", "");
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale1, "o/#B{L+N14M $z3*", objectArray0);
      helpFormatter0.printHelp(printWriter0, 74, "<`>a0G9E1U]Q9Kkg6", "9ngD", options0, 3528, 74, "<");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "usage: ");
      Options options2 = options1.addOption("", "]", false, "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", options1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Locale locale0 = Locale.forLanguageTag("Sr9|=A>/fF$P");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) options1;
      objectArray0[1] = (Object) "";
      options1.helpOptions();
      objectArray0[2] = (Object) helpFormatter1;
      PrintWriter printWriter0 = mockPrintWriter1.printf(locale0, "org.apache.commons.cli.Util", objectArray0);
      helpFormatter1.printWrapped(printWriter0, 1, 74, "\n");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      helpFormatter0.renderOptions(stringBuffer0, 74, options2, 101, 1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "usage: ");
      options1.addOption("", "]", false, "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", options1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Locale locale0 = Locale.forLanguageTag("Sr9|=A>/fF$P");
      Object[] objectArray0 = new Object[3];
      options0.helpOptions();
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "!h+u|>C!1&,)ID7E>2", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped(printWriter0, 1, 2385, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      int int0 = 1967;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 1967, 1967);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", (String) null, true, ", ");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", "", true, "'zt");
      options2.addOption("PXv", true, "--");
      Locale locale0 = Locale.UK;
      Object object0 = new Object();
      locale0.stripExtensions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("has already been selected: '");
      Object object1 = new Object();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 346, "has already been selected: '", "E;?SN", options1, 354, 354, "=Y4dbK1&O?cE?;tpJ", true);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "   ";
      helpFormatter0.getArgName();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("   ");
      Object object0 = new Object();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 32, "", (String) null, options0, 1, (-3542), "usage: ", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("' contains an illegalcharacter : '");
      helpFormatter0.printHelp("' contains an illegalcharacter : '", options0);
      options0.getOption("ZMxK\"%n8BM0y'?");
      helpFormatter0.printHelp("arg", options0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Locale locale0 = Locale.UK;
      Object object0 = new Object();
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "usage: ";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = object0;
      objectArray0[4] = (Object) locale1;
      objectArray0[5] = (Object) filterOutputStream0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) options0;
      mockPrintWriter0.printf(locale1, " ", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 6, "--", "'b", options0, 6, (-1184), "' contains an illegalcharacter : '", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "   ";
      helpFormatter0.getArgName();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getOptions();
      Options options2 = options1.addOption((String) null, true, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1142, "   ", options2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.GERMANY;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 103, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      options0.getOption(";G");
      options0.addOption("arg", false, "");
      helpFormatter0.printHelp(";G", ";G", options0, "org.apache.commons.cli.OptionGroup");
      helpFormatter0.findWrapPos(";G", 74, 74);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLeftPadding((-1));
      helpFormatter0.rtrim("");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.printf(locale0, "", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, (String) null, "-", options0, 2269, 1, "Cannot add value, list full.", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 8, (-646), "");
      helpFormatter0.defaultWidth = 64;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      options0.getOption(";G");
      options0.addOption("", true, "");
      Locale locale0 = Locale.UK;
      Object object0 = new Object();
      locale0.stripExtensions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("L^nl\u0007(:Re4|Y 4w");
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1184), "g", "arg", options0, 74, (-3542), "=Y4dbK1&O?cE?;tpJ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Options options0 = new Options();
      Option option0 = new Option("", (String) null);
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1522), "", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("{Cv(-[_Us&s/2^.OVZ");
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1300, "{Cv(-[_Us&s/2^.OVZ", options1);
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.findWrapPos("", (-66), 74);
      helpFormatter0.createPadding(74);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", false, "usage: ");
      Options options1 = options0.addOption("", (String) null, false, "");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "5=96\t-rB$C", (String) null, options1, "0XP*a?SEC,d=V XQ");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.createPadding(2665);
      options0.getMatchingOptions("-");
      helpFormatter0.printHelp("?29>5F", "+?at+e", options0, "}+k,kcO4G<h]>q]DV");
      Options options1 = new Options();
      helpFormatter0.printHelp("?29>5F", options1, true);
      helpFormatter0.setLeftPadding(2665);
      helpFormatter0.defaultNewLine = "8zPNJnD5.8Bp,e}Y";
      Options options2 = options0.addOption((String) null, "-", false, (String) null);
      MockFile mockFile0 = new MockFile("lLBCJfd3A^MB2Sh~");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2665, "],e3>|c,tylV>", (String) null, options2, (-1), 36, "+?at+e");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.createPadding(2665);
      options0.getMatchingOptions("-");
      helpFormatter0.setWidth(2665);
      helpFormatter0.printHelp("?29>5F", "+?at+e", options0, "}+k,kcO4G<h]>q]DV");
      Options options1 = new Options();
      helpFormatter0.printHelp("}+k,kcO4G<h]>q]DV", options1, false);
      helpFormatter0.setLeftPadding((-942));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2665, "}+k,kcO4G<h]>q]DV", (String) null, options0, "cmdLineSyntax not provided");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-458), " /u^", " /u^", (Options) null, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("{Cv(-[_Us&s");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1300, " ", options1);
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.findWrapPos("", (-66), 74);
      helpFormatter0.createPadding(74);
      helpFormatter0.printHelp(2665, "arg", "", options0, "                                                                          ", false);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      options0.getMatchingOptions("arg");
      helpFormatter0.printHelp("\n", options0);
      options0.getOption("arg");
      helpFormatter0.createPadding(74);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.printHelp("--", options0);
      helpFormatter0.printHelp("]", "Za!B1kKp:8W,jf", options0, "D:nd8ZXs^oa{", true);
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "line.separator";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.findWrapPos("", 1107, 1107);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", (-1), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("' contains an illegal character : '");
      helpFormatter0.printHelp("' contains an illegal character : '", options0);
      options0.getOption("ZMxK\"%n8BM0y'?");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.printHelp("--", options0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Locale locale0 = Locale.UK;
      Object object0 = new Object();
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "--";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = object0;
      objectArray0[4] = (Object) locale1;
      objectArray0[5] = (Object) filterOutputStream0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) options0;
      mockPrintWriter0.printf(locale1, " ", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 6, "--", "", options0, 6, (-1184), "' contains an illegal character : '", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      PrintWriter printWriter0 = null;
      String string0 = null;
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.setArgName("Q");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1598, "{%@NG8", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("S", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.createPadding(2665);
      options0.getMatchingOptions("-");
      helpFormatter0.printHelp("?29>5F", "+?at+e", options0, "}+k,kcO4G<h]>q]DV");
      Options options1 = new Options();
      helpFormatter0.printHelp("?29>5F", options1, true);
      helpFormatter0.setLeftPadding(2665);
      helpFormatter0.defaultNewLine = "8zPNJnD5.8Bp,e}Y";
      helpFormatter0.printHelp(2665, "}+k,kcO4G<h]>q]DV", "}+k,kcO4G<h]>q]DV", options1, (String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(74);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getWidth();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setDescPadding((-1));
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter0.renderWrappedText(stringBuffer0, 1300, 74, "org.apache.commons.cli.OptionGroup");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.getArgName();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(1);
      helpFormatter0.setOptionComparator(comparator0);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "aV9=p:0)V&", "aV9=p:0)V&", options0, "", false);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.createPadding(2665);
      options0.getMatchingOptions("-");
      helpFormatter0.setWidth(2665);
      helpFormatter0.printHelp("?29>5F", "+?at+e", options0, "}+k,kcO4G<h]>q]DV");
      Options options1 = new Options();
      helpFormatter0.printHelp("?29>5F", options1, false);
      helpFormatter0.setLongOptPrefix("?29>5F");
      helpFormatter0.setLeftPadding(2665);
      helpFormatter0.defaultNewLine = "8zPNJnD5.8Bp,e}Y";
      helpFormatter0.printHelp(2665, "}+k,kcO4G<h]>q]DV", "}+k,kcO4G<h]>q]DV", options1, (String) null);
      helpFormatter0.printHelp("~)mw", options0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("usage: ", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getArgName();
      helpFormatter0.rtrim("1j)Hz;gKMxVz(HU<%");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setDescPadding(2742);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(480, "", "", (Options) null, "ar[*Gih{9iFEz_N");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      options0.getMatchingOptions("arg");
      helpFormatter0.printHelp("\n", options0);
      options0.getOption("arg");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.printHelp("--", options0);
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.getLongOptPrefix();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("--", string0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      helpFormatter0.rtrim("--");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-2), (-2), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "usage: ");
      Options options2 = options1.addOption("", "]", false, "--");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "]", "]", options2, 0, (-2915), "");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
      String string0 = "U";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(">", "U");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // U
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("pU`_@(p-!rWgL");
      helpFormatter0.setNewLine("pU`_@(p-!rWgL");
      helpFormatter0.getNewLine();
      String string0 = "gck% B!z";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("pU`_@(p-!rWgL", "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'pU`_@(p-!rWgL' contains an illegal character : '`'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      options0.getMatchingOptions("usage: ");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setOptPrefix(",feBQe");
      options0.getMatchingOptions((String) null);
      Option option0 = null;
      try {
        option0 = new Option("*B_B-", "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '*B_B-' contains an illegal character : '*'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      helpFormatter0.setDescPadding((-1));
      int int0 = helpFormatter0.getWidth();
      assertEquals((-1), helpFormatter0.defaultDescPad);
      assertEquals(74, int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      options0.getOption(";G");
      options0.addOption("", false, "");
      helpFormatter0.printHelp(";G", ";G", options0, "org.apache.commons.cli.OptionGroup");
      helpFormatter0.findWrapPos(";G", 74, 74);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLeftPadding((-1));
      helpFormatter0.rtrim("");
      PipedOutputStream pipedOutputStream0 = null;
      try {
        pipedOutputStream0 = new PipedOutputStream((PipedInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(44);
      Options options0 = new Options();
      String string0 = "%#?D_l9 ";
      options0.hasShortOption("%#?D_l9 ");
      helpFormatter0.printHelp(" ] [ long ", options0);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("--", "%~GiiR^eu;B:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.createPadding(2665);
      options0.getMatchingOptions("-");
      helpFormatter0.printHelp("?29>5F", "+?at+e", options0, "}+k,kcO4G<h]>q]DV");
      Options options1 = new Options();
      helpFormatter0.printHelp("?29>5F", options1, false);
      helpFormatter0.setLeftPadding(2665);
      helpFormatter0.defaultNewLine = "8zPNJnD5.8Bp,e}Y";
      helpFormatter0.printHelp(2665, "}+k,kcO4G<h]>q]DV", "}+k,kcO4G<h]>q]DV", options1, (String) null);
      helpFormatter0.getWidth();
      helpFormatter0.printHelp("Yz7kRwEE*a", options0, false);
      helpFormatter0.getOptionComparator();
      helpFormatter0.setLeftPadding(74);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.defaultDescPad = 44;
      helpFormatter0.setArgName("y~@=5!_T7v7q)%-@Wv5");
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-604));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      String string0 = "";
      int int0 = 0;
      String string1 = "'";
      Options options0 = new Options();
      boolean boolean0 = false;
      Options options1 = options0.addOption("arg", "+WX6", false, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      Option option0 = null;
      try {
        option0 = new Option("--", "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-25);
      String string0 = "=X";
      helpFormatter0.setLongOptPrefix("=X");
      String string1 = "/Ox";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "=X", options0, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      int int0 = 31;
      String string0 = "idM9L|K`5$M;W";
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("3a-qbDpfd", "--", false, ":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '3a-qbDpfd' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.format("Ts1KDYYi:cY.Zxu", objectArray0);
      int int0 = 548;
      String string0 = "";
      String string1 = "arg";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("", "", false, "--");
      String string2 = "8";
      Option option0 = null;
      try {
        option0 = new Option("Ts1KDYYi:cY.Zxu", true, "8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'Ts1KDYYi:cY.Zxu' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ")1R _fw(N!F";
      helpFormatter0.setLongOptSeparator(")1R _fw(N!F");
      helpFormatter0.setLongOptPrefix("H,R/MFc>");
      String string1 = ", ";
      Options options0 = new Options();
      boolean boolean0 = false;
      String string2 = "cmdLineSyntax not provided";
      Options options1 = options0.addOption("arg", false, "cmdLineSyntax not provided");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      String string3 = "[ Options: [ short ";
      // Undeclared exception!
      try { 
        options2.addOption("usage: ", "arg", false, "[ Options: [ short ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      PrintWriter printWriter0 = null;
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.setArgName("0p74/Uq}owN1M");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1598, "{%@NG8", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Options options0 = new Options();
      helpFormatter0.printOptions(mockPrintWriter0, 32, options0, 0, 0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "iEsP209\"gW+'k 'nf`";
      helpFormatter0.defaultArgName = "iEsP209\"gW+'k 'nf`";
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("-", (String) null, true, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }
}
