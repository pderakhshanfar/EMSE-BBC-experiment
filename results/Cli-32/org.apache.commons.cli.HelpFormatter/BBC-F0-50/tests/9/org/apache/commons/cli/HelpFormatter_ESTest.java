/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:13:59 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.CharBuffer;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.rtrim("");
      String string0 = "";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          HelpFormatter helpFormatter0 = new HelpFormatter();
          HelpFormatter helpFormatter1 = new HelpFormatter();
          helpFormatter1.setWidth(0);
          Options options0 = new Options();
          // Undeclared exception!
          helpFormatter1.printHelp("arg", options0, false);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "usage: ");
      helpFormatter0.setDescPadding((-280));
      helpFormatter0.rtrim(" ");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      String string0 = null;
      helpFormatter0.defaultNewLine = null;
      String string1 = "";
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.setSyntaxPrefix((String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getNewLine();
      helpFormatter0.getOptPrefix();
      int int0 = 1343;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 1343, 2175);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("2bNN8$`}?rOG?6");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockFileOutputStream0;
      objectArray0[1] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "2bNN8$`}?rOG?6");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "$0|<";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "\n", "$0|<", options0, "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, "W /");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      stringBuffer0.ensureCapacity(64);
      helpFormatter0.renderWrappedText(stringBuffer0, 105, 9, "");
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getWidth();
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      boolean boolean0 = false;
      Options options1 = options0.addOption("", (String) null, false, "-");
      Option option0 = new Option((String) null, true, "V/,xkY#Z94,O8d>V");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options2.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(105, " ", "2\"4PCJ\"TDfp", options2, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "--", true, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Option option1 = new Option("arg", "");
      optionGroup1.addOption(option1);
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup1);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 34, "", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-906), "", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setOptPrefix(" ");
      String string0 = "7.qv*=JS1.^";
      helpFormatter0.setWidth((-698));
      int int0 = 0;
      helpFormatter0.createPadding(0);
      Options options0 = new Options();
      String string1 = "+-^z=(ghvd2oj\\g";
      options0.hasShortOption("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("7.qv*=JS1.^", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(72);
      helpFormatter0.setLongOptPrefix("");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 72, 72, "[ARG...]");
      helpFormatter0.renderWrappedText(stringBuffer1, 1493, 1411, "[ARG...]");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "-";
      int int0 = 74;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 74, 74, "-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      // Undeclared exception!
      helpFormatter0.printHelp(0, "&Xp~^", "", options0, ")f", false);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1, (-2), "Illegal option name '");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "5W2v", true, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options0 = new Options();
      options0.addOptionGroup(optionGroup1);
      StringWriter stringWriter0 = new StringWriter();
      option0.setArgName("");
      helpFormatter0.getArgName();
      helpFormatter0.printHelp("arg", "N^{jz=Zgw[aviyG", options0, "", true);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("o0b)!xfK@km5Lh", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "-");
      options1.addOption("arg", "r+mMq", false, "-");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, "1f;A*/4q[Q|kl#1");
      Option option0 = new Option("arg", true, "");
      Options options2 = options1.addOption(option0);
      options0.getOptionGroups();
      Option option1 = new Option("Z", false, "Ga-d&rM");
      Options options3 = options1.addOption(option1);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Options options4 = options2.addOption("", "cd2l_tW?;{!gc*)}W", true, "1f;A*/4q[Q|kl#1");
      options4.hasOption("-");
      OptionGroup optionGroup1 = new OptionGroup();
      optionGroup1.setRequired(false);
      option0.setArgName("\n");
      helpFormatter0.getArgName();
      helpFormatter1.printHelp("\n", "arg", options3, "arg", true);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setNewLine("org.apache.commons.cli.OptionGroup");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      int int0 = 1;
      helpFormatter0.setLeftPadding((-3581));
      String string0 = "$jWJ.zdqv6a8%R,H";
      helpFormatter0.getArgName();
      String string1 = ">{<Kzm[$";
      Options options1 = null;
      String string2 = "xv8n";
      Option option0 = new Option("", "arg", false, "--");
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("   ", "", options0, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", false, "1f;A*/4q[Q|kl#1");
      Option option0 = new Option("arg", false, "");
      Options options2 = options1.addOption(option0);
      options0.getOptionGroups();
      Option option1 = new Option("Z", false, "Ga-d&rM");
      options1.addOption(option1);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOption("", "cd2l_tW?;{!gc*)}W", true, "6TYQ9bR]qJ1BG");
      options3.hasOption("-");
      OptionGroup optionGroup2 = optionGroup1.addOption(option1);
      Options options4 = options2.addOptionGroup(optionGroup2);
      options3.addOption("arg", "usage: ", true, "usage: ");
      optionGroup2.setRequired(false);
      option0.setArgName("\n");
      helpFormatter0.getArgName();
      helpFormatter1.printHelp("6TYQ9bR]qJ1BG", "arg", options4, "arg", true);
      helpFormatter1.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "");
      options0.addOption(option0);
      options0.getOptionGroups();
      Option option1 = new Option("Z", false, "Ga-d&rM");
      Options options1 = options0.addOption(option1);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options1, 691, 1159);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = new Option("arg", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter1.defaultWidth = 1;
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup0.setRequired(true);
      option0.setArgName(",lqDj$Z5kiI");
      helpFormatter1.getArgName();
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.write((String) null);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "J", true, "");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("--", "B<;G[(1tu$", options3, "'", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", true, "1f;A*/4q[Q|kl#1");
      Option option0 = new Option("arg", true, "");
      Options options2 = options1.addOption(option0);
      options0.getOptionGroups();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options2.hasOption("");
      options2.addOptionGroup(optionGroup1);
      Options options3 = options1.addOption(option0);
      helpFormatter1.printHelp("usage: ", "-", options3, (String) null);
      optionGroup0.setRequired(true);
      option0.setArgName(",lqDj$Z5kiI");
      helpFormatter1.getArgName();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      stringWriter0.write((String) null);
      mockPrintWriter0.append((CharSequence) "arg");
      mockPrintWriter0.append((CharSequence) "");
      helpFormatter0.printHelp(" ", "", options3, "--", true);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-2), "arg", " ", options1, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(3);
      Options options0 = new Options();
      helpFormatter0.printHelp(8, "--", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options0, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("&U.{F5.", options0, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      mockPrintWriter0.println(false);
      char[] charArray0 = new char[8];
      charArray0[0] = 'U';
      charArray0[1] = 'i';
      charArray0[2] = '=';
      charArray0[3] = 'L';
      charArray0[4] = '>';
      charArray0[5] = '6';
      charArray0[6] = '^';
      charArray0[7] = '%';
      mockPrintWriter0.println(charArray0);
      mockPrintWriter0.println((Object) null);
      helpFormatter0.defaultArgName = "F[W}~hqM3";
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 792, (Options) null, 792, 121);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "]";
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string1 = helpFormatter0.defaultSyntaxPrefix;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      int int0 = 2;
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 1, "usage: ");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("I)!6;H!'T7$oaY5C1");
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", objectArray0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 66, "   ", "I)!6;H!'T7$oaY5C1", options0, 31, 66, (String) null, false);
      mockPrintWriter0.format(locale0, "   ", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 118, "e");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", "T2#", false, "");
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(false);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption(option0);
      helpFormatter0.printHelp(867, "c~_R_@zS", "c~_R_@zS", options3, (String) null);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("CCneE6rX<DE");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "", options0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      int int0 = 1;
      helpFormatter0.setLeftPadding((-3632));
      String string0 = "$jWJ.zdqv6a8%R,H";
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("$jWJ.zdqv6a8%R,H", options0, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) helpFormatter1;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) "=p5_*&#";
      objectArray0[3] = (Object) mockPrintWriter1;
      objectArray0[4] = (Object) helpFormatter1;
      objectArray0[5] = (Object) helpFormatter1;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) helpFormatter1;
      objectArray0[8] = (Object) locale0;
      mockPrintWriter1.format(locale0, "--", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, ", ", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", (Options) null, (-1922), 2373, "--", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, "--");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 30, options1, (-941), (-454));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("I)!6;H!'T7$oaY5C1");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter1.format(locale0, "=p5_*&#", objectArray0);
      helpFormatter0.printHelp(printWriter0, 9, "I)!6;H!'T7$oaY5C1", "", options0, 9, 1421, "", true);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp(printWriter0, 284, "_|8ha]", (String) null, options0, 1695, 673, "qQ{2{m", true);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 682, 74, "The option '");
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "The option '");
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 682, "usage: ", "", options2, (-710), 284, "6&V6f-J.", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("39Xij_>at-[t$$Na\"u");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1), 64, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("cmdLineSyntax not provided");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("cmdLineSyntax not provided", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "I!7K8aI`0G8\"=";
      objectArray0[1] = (Object) mockFileOutputStream0;
      objectArray0[2] = (Object) mockFileOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.format("I!7K8aI`0G8\"=", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 1948, "]l0*wU{RvoW");
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        options1.addOption("\n", "yuB3@CTuZC&yUWP1", true, " ]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", false, "1f;A*/4q[Q|kl#1");
      Option option0 = new Option("arg", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", options2, true);
      helpFormatter1.printHelp("7~8qn3#\"EfNIV-P@Rz", "", options0, (String) null);
      StringWriter stringWriter0 = new StringWriter(1376);
      Option option1 = new Option("arg", (String) null);
      options1.addOption(option1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Locale locale0 = Locale.CHINA;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 74, (String) null, "--", options1, 74, (-2), "--", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, 0, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "cmdLineSyntax not provided", "", (Options) null, "cmdLineSyntax not provided", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp(",`}~", ",`}~", options0, "I\"LEKkP+'YBPR>$*B");
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      Option option0 = new Option((String) null, true, " | ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-942), "0upg$Z", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      StringWriter stringWriter0 = new StringWriter(74);
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      int int0 = (-509);
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      Options options0 = new Options();
      options0.addOption("", "--", false, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-509), "", "org.apache.commons.cli.ParseException", options0, (-509), 0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 10, "line.separator");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 850;
      helpFormatter0.getLongOptPrefix();
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(1673);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      StringWriter stringWriter2 = stringWriter1.append('v');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "--");
      Option option0 = new Option("", (String) null);
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1673, "--", "--", options2, (-2), (-2), "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "1f;A*/4q[Q|kl#1";
      Options options1 = options0.addOption("vlc", "-", false, "1f;A*/4q[Q|kl#1");
      Option option0 = new Option("arg", false, "");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      Options options4 = options3.addOption("arg", false, "");
      helpFormatter1.printHelp("7~8qn3#\"EfNIV-P@Rz", "", options4, (String) null);
      helpFormatter1.getArgName();
      int int0 = 1376;
      StringWriter stringWriter0 = new StringWriter(1376);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "vlc");
      OptionGroup optionGroup2 = new OptionGroup();
      options1.addOptionGroup(optionGroup2);
      // Undeclared exception!
      helpFormatter1.printHelp(printWriter0, 0, "usage: ", "cmdLineSyntax not provided", options1, (-1), 1376, "usage: ", true);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1066);
      helpFormatter0.setArgName((String) null);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getArgName();
      String string0 = null;
      helpFormatter0.rtrim((String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.append((CharSequence) " ");
      int int0 = 72;
      char[] charArray0 = new char[1];
      helpFormatter0.defaultWidth = (-3674);
      charArray0[0] = 'e';
      mockPrintWriter0.write(charArray0);
      String string1 = "' contains an illegal character : '";
      mockPrintWriter0.println(false);
      Options options0 = new Options();
      options0.getOption("usage: ");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption(" ", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.setDescPadding(3);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "--", "usage: ", options0, "-");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 1267, "-n&`qU", ":XuGohMVr}F?", options0, 74, 1267, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      String string0 = "zOwT";
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "zOwT";
      objectArray0[1] = (Object) locale0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\n");
      objectArray0[2] = objectArray0[0];
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "zOwT";
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) "zOwT";
      objectArray0[7] = (Object) "\n";
      objectArray0[8] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "zOwT", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1560), "zOwT", "usage: ", options0, 31, 32, "q'eYw uD}EFN`", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(74);
      stringWriter0.getBuffer();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      mockPrintWriter0.print('<');
      String string0 = "QGjrC$vhjU";
      Options options1 = options0.addOption("", "--", true, "Yuq");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 3, "--", "ZI8G0]8VYB!#j3!H", options1, 31, 10, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.rtrim("");
      helpFormatter0.printHelp(":,f*e((qYpZz2V", "Ke!.(:5CQy<Y9NxX", options0, "_T#A9~[)");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "_T#A9~[)", "usage: ", options0, "n!M$xwJRR[Ios,I3");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("");
      options0.addOption("arg", "-", false, "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.getMatchingOptions("usage: ");
      int int0 = (-510);
      boolean boolean0 = false;
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-321), options0, 74, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(74);
      stringWriter0.getBuffer();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      mockPrintWriter0.append((CharSequence) "-");
      Options options1 = options0.addOption("", "--", true, "Yuq");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1477, "[", "usage: ", options1, 74, 24, (String) null);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      StringWriter stringWriter1 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 127, "", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      Options options0 = new Options();
      Option option0 = new Option((String) null, false, "org.apache.commons.cli.HelpFormatter$1");
      Options options1 = options0.addOption(option0);
      options1.helpOptions();
      helpFormatter0.printHelp("\n", "'", options1, "org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.getArgName();
      StringWriter stringWriter0 = new StringWriter(42);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      mockPrintWriter0.append((CharSequence) null);
      // Undeclared exception!
      try { 
        options0.addOption("-", "'", true, "hS~y%$\"Mx");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", true, "1f;A*/4q[Q|kl#1");
      Option option0 = new Option("arg", true, "");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options2.addOption((String) null, "", true, "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      Options options4 = options3.addOption("arg", true, "");
      helpFormatter1.printHelp("7~8qn3#\"EfNIV-P@Rz", "", options4, (String) null);
      helpFormatter1.getArgName();
      StringWriter stringWriter0 = new StringWriter(1376);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      mockPrintWriter0.append((CharSequence) "arg");
      mockPrintWriter0.append((CharSequence) "");
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((String) null, options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      PrintStream printStream0 = mockPrintStream0.append('\"');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      Options options0 = new Options();
      helpFormatter0.printOptions(mockPrintWriter0, 10, options0, 9, 10);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, "");
      helpFormatter1.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", true, "1f;A*/4q[Q|kl#1");
      Option option0 = new Option("arg", true, "");
      Options options2 = options1.addOption(option0);
      options0.getOptionGroups();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options2.hasOption("");
      Options options3 = options2.addOptionGroup(optionGroup1);
      Options options4 = options3.addOption("arg", true, "");
      helpFormatter1.printHelp("7~8qn3#\"EfNIV-P@Rz", "", options4, (String) null);
      optionGroup0.setRequired(true);
      helpFormatter1.getArgName();
      StringWriter stringWriter0 = new StringWriter(1376);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      mockPrintWriter0.append((CharSequence) "arg");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "");
      Options options5 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(" ", "org.apache.commons.cli.Util", options5, "--", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1), "", "usage: ", options3, 1, 1545, ", ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", true, "1f;A*/4q[Q|kl#1");
      Option option0 = new Option("arg", true, "");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      Options options4 = options3.addOption("arg", true, "");
      helpFormatter1.printHelp("7~8qn3#\"EfNIV-P@Rz", "", options4, (String) null);
      helpFormatter1.getArgName();
      StringWriter stringWriter0 = new StringWriter(1376);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      mockPrintWriter0.append((CharSequence) "arg");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1), "", "usage: ", options3, 1, 1545, ", ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "[ option: ", "I)!6;H!'T7$oaY5C1", options0, "n!M$xwJRR[Ios,I3");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", false, "1f;A*/4q[Q|kl#1");
      Option option0 = new Option("arg", false, "");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      Options options4 = options3.addOption("arg", false, "");
      helpFormatter1.printHelp("7~8qn3#\"EfNIV-P@Rz", "", options4, (String) null);
      helpFormatter1.getArgName();
      StringWriter stringWriter0 = new StringWriter(1376);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      mockPrintWriter0.append((CharSequence) "");
      options4.addOption("Yuq", "'", false, "QGjrC$vhjU");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 1, "arg", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "=y7Q%avQ|XZ5|$%");
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", options1, false);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = (-1773);
      String string0 = "(a{-j|vAv";
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("(a{-j|vAv", "org.apache.commons.cli.HelpFormatter", (Options) null, "(a{-j|vAv");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "=y7Q%avQ|XZ5|$%");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("?Tl)R7t;M1]i~q#", "=y7Q%avQ|XZ5|$%", options1, "(a{-j|vAv");
      helpFormatter0.getArgName();
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.setDescPadding((-1143));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("bv'C", "line.separator", options0, "line.separator", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "=y7Q%avQ|XZ5|$%");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("?Tl)R7t;M1]i~q#", "=y7Q%avQ|XZ5|$%", options1, "(a{-j|vAv");
      helpFormatter0.getArgName();
      StringWriter stringWriter0 = new StringWriter(2241);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "=y7Q%avQ|XZ5|$%");
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-1), "!88]%yU(f=_)", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", false, "1f;A*/4q[Q|kl#1");
      Option option0 = new Option("arg", false, "");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      Options options4 = options3.addOption("arg", false, "");
      helpFormatter1.printHelp("7~8qn3#\"EfNIV-P@Rz", "", options4, (String) null);
      helpFormatter1.getArgName();
      StringWriter stringWriter0 = new StringWriter(1376);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      mockPrintWriter0.append((CharSequence) "arg");
      // Undeclared exception!
      try { 
        options1.addOption("79e3gu+c_G", ", ", true, "n`3,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '79e3gu+c_G' contains an illegal character : '+'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = (-1838);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      options0.hasLongOption("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "0JFd>\"P;P", "0JFd>\"P;P", options0, "0JFd>\"P;P");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1410);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1410));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1, "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(" ", options0);
      Options options1 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("--");
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp(74, "-", "--", (Options) null, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("J=D", options0);
      Options options1 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("--");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter3.printHelp(3, "\n", "[/GFey-hbb-kc-Qyy|", options1, "org.apache.commons.cli.HelpFormatter$1");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(74);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "");
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) comparator0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      char[] charArray0 = new char[2];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      mockPrintWriter0.write(charArray0);
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.format("arg", objectArray0);
      helpFormatter0.printUsage(printWriter0, 891, "arg", options0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "=y7Q%avQ|XZ5|$%");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("?Tl)R7t;M1]i~q#", "=y7Q%avQ|XZ5|$%", options1, "(a{-j|vAv");
      helpFormatter0.getArgName();
      StringWriter stringWriter0 = new StringWriter(2241);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "=y7Q%avQ|XZ5|$%");
      Options options2 = options0.addOption("arg", "=y7Q%avQ|XZ5|$%", true, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-1), "arg", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("0Y[sR1^^%jsTV[uxY", options0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options1 = new Options();
      int int0 = 1178;
      helpFormatter0.printHelp(1178, "n!M$xwJRR[Ios,I3", "n!M$xwJRR[Ios,I3", options1, "");
      helpFormatter0.printHelp(1178, "n!M$xwJRR[Ios,I3", ")ieR7g[", options1, "Thm optio '");
      String string0 = "Jy'";
      String string1 = "I/`%\"=p<g";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1178, "", "Jy'", options1, "I/`%\"=p<g", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      String string0 = "";
      helpFormatter0.defaultOptPrefix = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(308, "", "", (Options) null, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      Options options0 = new Options();
      Option option0 = new Option("arg", false, ";w@C4");
      helpFormatter0.renderOptions(stringBuffer0, (-2007), options0, 3, 10);
      helpFormatter0.printHelp(763, ";w@C4", "o;\"N/h?Xbc9.Bfd", options0, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "%Xc4Q\rZ,b|@r4+D", "<", options0, "o;\"N/h?Xbc9.Bfd", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) options0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 39, "JrL", "=El2&+/~0,K", options0, (-2653), 2, "--");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options0 = new Options();
      options0.toString();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.Util";
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      helpFormatter1.printHelp("org.apache.commons.cli.Util", options0);
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options1.getOption("&");
      Options options2 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(3, "&", "&", options2, "--");
      helpFormatter1.printHelp(74, "U,J8$F,#", "\n", options1, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "Jy'", "", options0, "$", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setNewLine("`Q36=L|M9mo'?C");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("X;n$;", "_T#A9~[)", (Options) null, "|G)BjBKw%BjmR+", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setOptPrefix((String) null);
      File file0 = MockFile.createTempFile("arg", "[");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      mockFileOutputStream0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "[", 1, 1);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "\n");
      StringWriter stringWriter3 = stringWriter2.append('\'');
      stringWriter2.append('\'');
      StringBuffer stringBuffer0 = stringWriter3.getBuffer();
      stringWriter3.write(74);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1090, options0, (-2460), 1090);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(74);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1126, 1126, "");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, 1090, options0, (-2460), 1126);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1881), "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(1);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 115, 49, "");
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 49, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 3, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 44, 2, "\n");
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer1, 3, (-1), "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(10);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "x62?", true, "");
      options0.hasOption("--");
      option0.setLongOpt("0J%;s_vL*2)FK\u0005ZsA\"");
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      helpFormatter0.getOptPrefix();
      helpFormatter0.setNewLine("GrU*#?#");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (String) null, options0, "X;n$;", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, (Options) null, 3, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      helpFormatter0.setDescPadding(0);
      assertEquals(0, helpFormatter0.defaultDescPad);
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      File file0 = MockFile.createTempFile("usage: ", ">");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.println(0.0);
      mockPrintWriter0.print((-4481.4F));
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2621, 2621, "-");
      helpFormatter0.getNewLine();
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("arg");
      helpFormatter1.getWidth();
      helpFormatter0.findWrapPos("usage: ", 2621, 2621);
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "arg");
      options1.hasShortOption("K9w,fuB68M&[\"~lP7Y");
      helpFormatter0.getDescPadding();
      helpFormatter0.getDescPadding();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setArgName("");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderOptions((StringBuffer) null, 23, options0, 126, 60);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setOptPrefix((String) null);
      String string0 = "[";
      File file0 = MockFile.createTempFile("arg", "[");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) file0;
      objectArray0[1] = (Object) mockFileOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("JrL", objectArray0);
      mockFileOutputStream0.close();
      int int0 = (-2653);
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-2653), "Wg$5u+", (String) null, options0, 99, (-2653), "JrL");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setOptPrefix((String) null);
      File file0 = MockFile.createTempFile("arg", "[");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) mockFileOutputStream0;
      mockPrintWriter0.printf("JrL", objectArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 12, 1, "<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(54);
      String string0 = "t";
      helpFormatter0.rtrim("t");
      helpFormatter0.rtrim(".BNzg()X:Bwg r&");
      Options options0 = new Options();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)64;
      byteArray0[7] = (byte)107;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".BNzg()X:Bwg r&");
      Option option0 = new Option((String) null, (String) null);
      Options options1 = options0.addOption(option0);
      String string1 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      boolean boolean0 = true;
      String string2 = "0;8,R0";
      // Undeclared exception!
      try { 
        options1.addOption("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", true, "0;8,R0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1037);
      helpFormatter0.defaultLeftPad = (-1037);
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("--");
      String string0 = "";
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile1, "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 2002, options0, 2002, 11);
      String string0 = "A CloneNotSupportedException was thrown: ";
      int int0 = 0;
      helpFormatter0.setOptPrefix("A CloneNotSupportedException was thrown: ");
      helpFormatter0.setOptPrefix("A CloneNotSupportedException was thrown: ");
      Options options1 = new Options();
      options1.hasLongOption("BT^ybwR");
      options1.getOptions();
      options1.toString();
      String string1 = "6UmK";
      // Undeclared exception!
      helpFormatter0.printHelp(0, "A CloneNotSupportedException was thrown: ", "org.apache.commons.cli.Options", options1, "6UmK");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("A CloneNotSupportedException was thrown: ", (-3549), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ">";
      Options options0 = new Options();
      helpFormatter0.printHelp(">", ">", options0, "?Tl)R7t;M1]i~q#");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 2, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer(31);
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 1, "#QO");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      String string0 = "<";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1416, (String) null, " | ", (Options) null, "<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setOptPrefix((String) null);
      File file0 = MockFile.createTempFile("arg", "[");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) file0;
      objectArray0[1] = (Object) mockFileOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("JrL", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-2653), "Wg$5u+", (String) null, options0, 99, (-2653), "JrL");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(17, "Nt*x hG$/zE", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options0, "n!M$xwJRR[Ios,I3");
      helpFormatter0.findWrapPos("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", 17, 0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, 12, "q?kSUnF1seMJ,?;|>-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "=y77Q%avQ|XZ5|$%");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("?Tl)R7t;M1]i~q#", "=y77Q%avQ|XZ5|$%", options1, "(a{-j|vAv");
      helpFormatter0.setLongOptPrefix("99tnwj`PcPRGE");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.renderWrappedText(stringBuffer0, 53, 1, "iLmUP4F_dvHv]");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 9;
      String string0 = "I)!6;H!'T7$oaY5C1";
      helpFormatter0.setArgName("#nD~OE($[");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "The option '", "I)!6;H!'T7$oaY5C1", options0, "n!M$xwJR:[Ios,I3");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(">", ">", options0, "");
      MockFile mockFile0 = new MockFile(" ]", " ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[17];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "vy.upon#s=k";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "+aWu1x", objectArray0);
      helpFormatter0.printUsage(printWriter0, 97, "");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.OptionGroup");
      helpFormatter0.setNewLine("");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("S&u#^0QudU.");
      int int0 = 31;
      helpFormatter0.setLeftPadding(31);
      helpFormatter0.defaultDescPad = 31;
      helpFormatter0.setWidth((-2392));
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      boolean boolean0 = true;
      String string0 = "^<enVbE=]3>3v";
      Option option0 = null;
      try {
        option0 = new Option("h;'X", true, "^<enVbE=]3>3v");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'h;'X' contains an illegal character : ';'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "0Y[sR1^^%js\\TV[uxY";
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.printHelp("0Y[sR1^^%jsTV[uxY", options0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      // Undeclared exception!
      try { 
        stringBuffer0.insert(3, 'A');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "=y77Q%avQ|XZ5|$%");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("]&UMRVC#]L]6r<iIX", options1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.printHelp("?Tl)R7t;M1]i~q#", "=y77Q%avQ|XZ5|$%", options1, "(a{-j|vAv");
      helpFormatter0.setLongOptPrefix("99tnwj`PcPRGE");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptPrefix();
      int int0 = 853;
      StringWriter stringWriter0 = new StringWriter(853);
      stringWriter0.getBuffer();
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("-", "org.apache.commons.cli.HelpFormatter", true, "[z_}4u[l~1s=N>lF]=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      int int0 = 1129;
      stringBuffer0.deleteCharAt(1);
      int int1 = (-3201);
      helpFormatter0.setArgName("-");
      int int2 = 762;
      char[] charArray0 = new char[1];
      charArray0[0] = 'i';
      // Undeclared exception!
      try { 
        stringBuffer0.deleteCharAt(9);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 9
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setOptPrefix(" ");
      String string0 = "7.qv*=JS1.^";
      helpFormatter0.setWidth((-698));
      int int0 = 0;
      helpFormatter0.createPadding(0);
      Options options0 = new Options();
      String string1 = "";
      String string2 = "+-^z=(ghvd2oj\\g";
      // Undeclared exception!
      try { 
        options0.addOption("+-^z=(ghvd2ojg", false, "w*4.v9{-=:g7V-6V");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '+-^z=(ghvd2ojg' contains an illegal character : '+'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      int int0 = 1;
      int int1 = 1;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "r.Y+4Y!TfFj");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(">", ">", options0, "?Tl)R7t;M1]i~q#");
      helpFormatter0.setLongOptPrefix("arg");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      helpFormatter0.defaultLongOptPrefix = "org.apache.commons.cli.HelpFormatter";
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      String string0 = "";
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter1.format("", objectArray0);
      mockPrintWriter1.print("");
      helpFormatter0.printUsage(printWriter0, 74, "");
      helpFormatter0.getNewLine();
      helpFormatter0.setNewLine("");
      helpFormatter0.getOptionComparator();
      int int0 = 3798;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options1.addOption("-", true, ">");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      helpFormatter0.setDescPadding(0);
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "A CloneNotSupportedException was thrown: ";
      int int0 = 0;
      helpFormatter0.setOptPrefix("A CloneNotSupportedException was thrown: ");
      Options options0 = new Options();
      helpFormatter0.defaultNewLine = "A CloneNotSupportedException was thrown: ";
      options0.getOptions();
      options0.toString();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "A CloneNotSupportedException was thrown: ", "arg", options0, "6UmK");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "A CloneNotSupportedException was thrown: ";
      int int0 = 0;
      helpFormatter0.setOptPrefix("A CloneNotSupportedException was thrown: ");
      helpFormatter0.setOptPrefix("A CloneNotSupportedException was thrown: ");
      Options options0 = new Options();
      options0.hasLongOption("BT^ybwR");
      options0.getOptions();
      options0.toString();
      String string1 = "6UmK";
      // Undeclared exception!
      helpFormatter0.printHelp(0, "A CloneNotSupportedException was thrown: ", "org.apache.commons.cli.Options", options0, "6UmK");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "]/k0$#", " | ", (Options) null, " | ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      String string0 = "<\">ih@$h--o6~TW[3H";
      Options options0 = new Options();
      Options options1 = options0.addOption("", "usage: ", true, "--");
      String string1 = "sP:.45W`x";
      options1.getOption("sP:.45W`x");
      Option option0 = null;
      try {
        option0 = new Option(" ", true, "q$V#Ng.~PdX*oJ'TID");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("$&;@fr&z{X^Ru|~o29");
      assertEquals("$&;@fr&z{X^Ru|~o29", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "I)!6;H!'T7$oaY5C1";
      helpFormatter0.setOptionComparator((Comparator) null);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      // Undeclared exception!
      try { 
        stringBuffer0.insert((-644), 'y');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      int int0 = 721;
      String string0 = "X";
      String string1 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options1.addOption("--", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      String string0 = "'XgDK;nkar?6h,_Ydx";
      Options options0 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      helpFormatter0.printHelp("'XgDK;nkar?6h,_Ydx", options0);
      helpFormatter0.setOptionComparator(comparator0);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("'XgDK;nkar?6h,_Ydx", (-98), (-98));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      String string0 = "]";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string1 = "";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options1.addOption("usage: ", "", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("B0.}kDQf<BI");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setSyntaxPrefix("mLGC'v%!tzd9a");
      String string0 = "";
      String string1 = "B6=y#)vVv5sjIE%&o&";
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = options0.addOption("", true, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("", true, "-");
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
      try { 
        options3.addOption("\n", "NO_ARGS_ALLOWED", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      int int0 = 1415;
      String string0 = "-";
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("S4md!xb2gdzI", "usage: ", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'S4md!xb2gdzI' contains an illegal character : '!'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 9;
      String string0 = "I)!6;H!'T7$oaY5C1";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "_T#A9~[)", "I)!6;H!'T7$oaY5C1", options0, "n!M$xwJRR[Ios,I3");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "x62?";
      Option option0 = new Option("", "x62?", true, "");
      optionGroup0.toString();
      options0.hasOption("--");
      optionGroup0.addOption(option0);
      optionGroup0.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup0);
      option0.setLongOpt("0J%;s_vL*2)FK\u0005ZsA\"");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      int int0 = (-23);
      int int1 = (-2402);
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "--", (-23), (-2402));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
