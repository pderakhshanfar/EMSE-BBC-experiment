/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:14:33 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(1, "\n", "usage: ", options0, "-");
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, "VU,*zfE{ zcv6**>g&");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-3032);
      helpFormatter0.defaultSyntaxPrefix = "arg";
      helpFormatter0.getWidth();
      Options options0 = new Options();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "arg", true, "");
      option0.setArgs(1);
      option0.setArgName("");
      options0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("hL:KBu");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1810, " | ", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("\n", (-950), 13);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "-", true, "-");
      helpFormatter0.setLeftPadding((-1));
      option0.setArgName(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 29, "", options0);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.getSyntaxPrefix();
      int int0 = 3730;
      String string0 = "w6Y>E%|CX0yUwS<5";
      String string1 = "a`QEK1<~b";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option(" -_{8B", false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ' -_{8B' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.rtrim("");
      helpFormatter0.createPadding(44);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "usage: ", true, "9twnJy?G7:");
      option0.setArgName("");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp(33, ")s~p9%kcAWlm", ")s~p9%kcAWlm", options2, "9twnJy?G7:");
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptPrefix("");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, (String) null);
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
      option0.clearValues();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), (String) null, options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "L&PxHZqJVx=kc |2uY,", "]", options0, 1218, 3, "1");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", " ", (Options) null, "@e}yO-h5Y&", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Option option0 = new Option("", "-", true, "-");
      option0.setArgName(" ");
      Options options1 = options0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.optionComparator = null;
      String string0 = helpFormatter0.defaultArgName;
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("arg", 1, (-1231));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      helpFormatter0.setSyntaxPrefix(", ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Option option0 = new Option("", "org.apache.commons.cli.AlreadySelectedException", true, "@I4\u0001O7ETT5RY\"");
      option0.setArgName("]|Vs'me'50");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp(35, "6\"$5!:NUF/I8]zWH/K", "usage: ", options0, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", 43, (-2957));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-288));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("$O+e", options0, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "--";
      Options options0 = new Options();
      Option option0 = new Option("iO", "usage: ");
      Options options1 = options0.addOption(option0);
      options1.addOption("arg", false, "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", "FDM0M~-Oh~~ElBKNlW", options1, "arg");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "org.apache.commons.cli.AlreadySelectedException", true, "@I4\u0001O7ETT5RY\"");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("XDfdZTsx", "", options0, "@I4\u0001O7ETT5RY\"");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions((StringBuffer) null, (-5305), options2, 74, 981);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-2902);
      Options options0 = new Options();
      int int0 = 1040;
      String string0 = "$B*#$w";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1040, "bxF5*l/z!'q[FUSl<u", "bxF5*l/z!'q[FUSl<u", options0, "$B*#$w", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      String string0 = "";
      Options options1 = options0.addOption("", true, " ");
      // Undeclared exception!
      helpFormatter0.printHelp("-", "-", options1, "");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1313, "m`k7B", "`cXPuQd+\"0fC", (Options) null, "m`k7B", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "--";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("VSA&Ip\"D", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("arg", true, "--");
      option0.addValueForProcessing("arg");
      option0.setArgs((-2568));
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOption("og", "Qs~/hg3d0i=Y", true, "usage: ");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      options3.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2568), "arg", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "-");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("G");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      helpFormatter1.setLongOptPrefix((String) null);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 9, "usage: ", "-", options0, 74, 1354, "[ option: ", true);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1093, " ", options1);
      helpFormatter1.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.getNewLine();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.setLeftPadding(10);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getArgName();
      helpFormatter0.setNewLine("");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getDescPadding();
      helpFormatter0.findWrapPos(", ", 1563, 1563);
      helpFormatter0.getArgName();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Option option1 = new Option((String) null, "--");
      Options options3 = options2.addOption(option1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[", options3, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "--");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "\n", options1);
      StringBuffer stringBuffer0 = new StringBuffer(74);
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 64, 1967);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2380);
      helpFormatter0.setDescPadding((-2380));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", "-", options0, "--", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(12);
      helpFormatter0.defaultSyntaxPrefix = "xsOc$bpe5;,0$Ql";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "\n", "xsOc$bpe5;,0$Ql", options0, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          HelpFormatter helpFormatter0 = new HelpFormatter();
          Options options0 = new Options();
          helpFormatter0.printHelp(2021, "org.apache.commons.cli.HelpFormatter$OptionComparator", "Y$I\"B&=^q[V!l", options0, "_k=cJF5d+K.qJY]03");
          MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
          MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
          MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1);
          // Undeclared exception!
          helpFormatter0.printUsage((PrintWriter) mockPrintWriter2, 0, "org.apache.commons.cli.HelpFormatter$OptionComparator", options0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = (-2);
      Options options1 = options0.addOption("", false, " ");
      options1.hasOption("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", "-", options1, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1);
      String string0 = helpFormatter0.defaultNewLine;
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Options options1 = options0.addOption("u", false, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("9Ly*<$zo*", "\n", options1, "9Ly*<$zo*");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.checkError();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2248, "KC;+_IBP<^4'J1^pd}'", "@0h]w<N!]", options0, 2248, 2248, (String) null, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLeftPadding();
      helpFormatter0.printHelp(">}zz", "fk0Fo)(", options0, " | ");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultNewLine;
      StringBuffer stringBuffer0 = new StringBuffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6OmN.7]hBv '*Mn+=");
      stringBuffer0.trimToSize();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultNewLine;
      StringBuffer stringBuffer0 = new StringBuffer(74);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 907, (-56), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile((File) null, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 58, "G2m", (String) null, options0, 1471, 1, "UMokN", true);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "\n");
      optionGroup0.addOption(option0);
      Option option1 = new Option("", true, "arg");
      optionGroup0.addOption(option1);
      option1.addValueForProcessing("Qs~/hg3di=Y");
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(69, "rJ%3", "rJ%3", options0, "{", true);
      Options options1 = options0.addOption(option1);
      helpFormatter0.printHelp(177, "arg", "", options1, "");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("%[J4Qy[O;8>|[D4`~");
      mockPrintWriter0.checkError();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 56, "eWVt5sJ[%9O()7,?!mg", "-", options0, 2248, 69, "eWVt5sJ[%9O()7,?!mg", true);
      helpFormatter0.renderOptions((StringBuffer) null, 2248, options0, 960, 845);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "arg");
      optionGroup0.addOption(option0);
      option0.addValueForProcessing("Qs~/hg3d0i=Y");
      option0.setArgs(74);
      OptionGroup optionGroup1 = new OptionGroup();
      options0.addOptionGroup(optionGroup1);
      String string0 = "{";
      Options options1 = options0.addOption((String) null, true, "");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "Qs~/hg3d0i=Y", "", options1, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = ",fig_o/AX";
      Options options1 = null;
      String string1 = ":uk";
      helpFormatter0.setLeftPadding((-2612));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(69, ",fig_o/AX", "(xp@}Jn", (Options) null, ":uk");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 10, "JJD}q]T?7Sd1(r1", "usage: ", (Options) null, 18, 0, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "arg");
      optionGroup0.toString();
      optionGroup0.addOption(option0);
      option0.addValueForProcessing("Qs~/hg3d0i=Y");
      option0.setArgs(74);
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(69, "rJ%3", "rJ%3", options0, "{", true);
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(69, "Qs~/hg3d0i=Y", "eh% t^M", options1, "Qs~/hg3d0i=Y");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("m<*G$|}!eSk?");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 69, "Qs~/hg3d0i=Y", "/[uIz0 NHn#Pr)3<", options1, (-845), 69, "Qs~/hg3d0i=Y");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(31);
      Options options0 = new Options();
      int int0 = (-1);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 9, options0, (-1), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.defaultLongOptPrefix = "org.apache.commons.cli.ParseException";
      helpFormatter0.defaultWidth = 74;
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "V#hqRq9`whZV4", "V#hqRq9`whZV4", (Options) null, 0, 83, "", false);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1961);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      stringWriter0.write("|");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) printWriter0;
      objectArray0[4] = (Object) stringWriter0;
      PrintWriter printWriter1 = mockPrintWriter0.format("3zVjk@tN(g9", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter1, false);
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 48, "@!Wp", ">", options0, 74, 1911, "", false);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      stringWriter0.write("usage: ");
      Options options0 = new Options();
      helpFormatter0.printWrapped(printWriter0, 1911, ">");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      StringWriter stringWriter0 = new StringWriter(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Locale locale0 = Locale.GERMANY;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) " :: ";
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) " :: ";
      objectArray0[6] = (Object) stringWriter0;
      objectArray0[7] = (Object) " :: ";
      Object object0 = new Object();
      objectArray0[8] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "--", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 1, 1, " :: ");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, " :: ", "", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "arg");
      optionGroup0.addOption(option0);
      option0.addValueForProcessing("Qs~/hg3d0i=Y");
      option0.setArgs(74);
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("{");
      helpFormatter0.setLongOptPrefix("tp2");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 16, "arg", "arg", options0, 31, 69, "%", true);
      helpFormatter1.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "v.");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "@I4\\1O7ETT5RY\"";
      Option option0 = new Option("", "org.apache.commons.cli.AlreadySelectedException", true, "@I4\u0001O7ETT5RY\"");
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-2), "BupJY/WlO!$Bj#x", "", options0, 8, 8, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      Options options2 = options0.addOption((String) null, false, (String) null);
      helpFormatter0.printHelp(2287, "*!2i}", "8kH(c", options1, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 4576, "%", "", options2, (-59), (-59), "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "3yEq5<>p1v&Dl4]p_=1");
      helpFormatter0.printHelp(2287, "Illegal option name '", "", options1, "Bs0YCD");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("r<-y");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-180), (String) null, (String) null, options0, 2287, (-180), "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "\n", "\n", (Options) null, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2343, 64, ":pFdfr");
      helpFormatter0.renderOptions(stringBuffer1, 2343, options0, 63, 1);
      String string0 = null;
      Option option0 = null;
      try {
        option0 = new Option("#S2^!kK", "S>", false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '#S2^!kK' contains an illegal character : '#'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      options0.addOption((String) null, false, (String) null);
      helpFormatter0.printHelp(2287, "x7)o'8pdr`K", "x7)o'8pdr`K", options0, "x7)o'8pdr`K");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2287, "", "x7)o'8pdr`K", options0, 2287, (-180), "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "\n", "usage: ", options0, "0nUzJ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      Options options1 = new Options();
      Option option0 = new Option("", true, "-@c[_f^\"(m%Y");
      options1.addOption(option0);
      helpFormatter0.printHelp(" | ", (String) null, options1, " :: ");
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 8, 189);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("_P$@@,a[?zli1.zHu");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.setNewLine("");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      helpFormatter0.defaultNewLine = null;
      helpFormatter0.getOptPrefix();
      helpFormatter0.getDescPadding();
      helpFormatter0.getNewLine();
      helpFormatter0.createPadding(3);
      helpFormatter0.createPadding(3);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.rtrim("");
      helpFormatter0.findWrapPos("A6,+Wt{E8lq", 37, 37);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 199;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", (String) null, false, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions((StringBuffer) null, 1, options2, 199, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setDescPadding(3);
      helpFormatter0.setWidth(3);
      FileSystemHandling.shouldAllThrowIOExceptions();
      options0.hasShortOption("usage: ");
      Option option0 = new Option("", "org.apache.commons.cli.AlreadySelectedException", true, "@I4\u0001O7ETT5RY\"");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      String string0 = null;
      helpFormatter0.printHelp("N", "--", options1, "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.printf("usage: ", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage(printWriter0, (-1621), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultLongOptPrefix;
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.renderWrappedText(stringBuffer0, 373, 210, "--");
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      Options options1 = options0.addOption(option0);
      options1.addOption(option0);
      String string1 = "'u0SajQ";
      // Undeclared exception!
      try { 
        options1.addOption("0<a", "'u0SajQ", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '0<a' contains an illegal character : '<'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("Wqws", "", true, "usage: ");
      Options options1 = options0.addOption("", true, "Wqws");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      Options options3 = options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "IN>Fsm<~ZTo*^z5h'", "IN>Fsm<~ZTo*^z5h'", options3, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 55, "", options1);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      Option option0 = new Option("", "org.apache.commons.cli.AlreadySelectedException", true, "@I4\u0001O7ETT5RY\"");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setSelected(option0);
      optionGroup0.setRequired(true);
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", options1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("92W<W>[AO%ap>?#k", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-2), "EjMqiS*nd", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Locale locale0 = Locale.ENGLISH;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) locale0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) options1;
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "";
      mockPrintWriter0.printf(locale0, "[", objectArray0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 136, "", options1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      options0.getOptions();
      MockFile mockFile0 = new MockFile("k&", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "rJ%3";
      objectArray0[2] = (Object) "org.apache.commons.cli.Option";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) options0;
      objectArray0[6] = (Object) locale0;
      objectArray0[7] = (Object) locale0;
      objectArray0[8] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "C9c+uq*_J$]DX#r\"", objectArray0);
      helpFormatter0.printHelp(printWriter0, 69, "org.apache.commons.cli.AlreadySelectedException", "i}5Nf0`~4a", options1, 393, 34, "i}5Nf0`~4a");
      helpFormatter0.printHelp(1736, "'?q+M_", "p#'F}ge97W", options1, "");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-723), "", "", options0, "{", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "-";
      Options options0 = new Options();
      options0.getOptions();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 29, "-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("FmAt", "U|E<{GtVHWQR(RB7Or?", true, "");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, (String) null, true, "org.apache.commons.cli.Util");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = new Options();
      OptionGroup optionGroup1 = new OptionGroup();
      optionGroup1.setRequired(true);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", options2);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "`$V.#eUc@T[7\"vT_am", "d", options2, "e*Z");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "org.apache.commons.cli.AlreadySelectedException", true, "@I4\u0001O7ETT5RY\"");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options0.addOptionGroup(optionGroup0);
      options2.getOption("");
      helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", options1);
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "", "d", options2, "@I4\u0001O7ETT5RY\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 64;
      helpFormatter0.defaultLeftPad = 64;
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      int int1 = 3325;
      StringBuffer stringBuffer0 = new StringBuffer(3325);
      helpFormatter0.renderWrappedText(stringBuffer0, 64, 3325, " ");
      int int2 = 124;
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("-", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      String string0 = "kh+";
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("kh+", options1, true);
      String string1 = "";
      // Undeclared exception!
      try { 
        options1.addOption("usage: ", "kh+", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "kv +|1IIeY\",E1!TG[h", "W^S uf%0", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 69;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      option0.addValueForProcessing("Qs~/hg3di=Y");
      option0.setArgs(74);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.addOptionGroup(optionGroup0);
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1516), "{", "", options0, (-1), 544, "The option '");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 69;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      option0.addValueForProcessing("arg");
      option0.setArgs(3);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.addOptionGroup(optionGroup1);
      optionGroup1.setRequired(true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "cmdLineSyntax not provided", "0ub}-L'Ux", options1, "org.apache.commons.cli.HelpFormatter$OptionComparator", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.HelpFormatter";
      Options options0 = new Options();
      options0.getOptions();
      int int0 = 64;
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1516), "", (String) null, options0, 64, 1175, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, (String) null);
      helpFormatter0.printHelp(" :: ", " :: ", options1, "");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ">";
      Options options0 = new Options();
      String string1 = "";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(69, ",fig_o/AX", "(xp@}Jn", (Options) null, ":uk");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "-";
      Options options0 = new Options();
      options0.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 64, "org.apache.commons.cli.Option", "", options0, (-1516), 64, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", true, "arg");
      options1.toString();
      options0.addOption("", true, "1Vv'$K<D9Uk*");
      Option option0 = new Option("", "6`<NOnnn^(");
      options1.hasLongOption("--");
      Options options2 = options1.addOption(option0);
      List list0 = new LinkedList<String>();
      helpFormatter0.printHelp(">", "org.apache.commons.cli.HelpFormatter", options2, "6`<NOnnn^(", true);
      Options options3 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "6\"oG2eeD3KpZWk", "", options1, "6`<NOnnn^(");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "-";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" o{(mCkQWlWl9", "-", (Options) null, " o{(mCkQWlWl9");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "{S(@I+fH9agGuW$XG+4";
      int int0 = 0;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1427), "@Kv)EGWc", "rY4Ndn", options1, "rY4Ndn", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getOptPrefix();
      helpFormatter0.setDescPadding(0);
      String string0 = "V5rkCB";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1, "-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      option0.addValueForProcessing("Qs~/hg3di=Y");
      option0.setArgs(74);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(69, "rJ%3", "rJ%3", options1, "{", true);
      helpFormatter0.setLongOptSeparator("NfOrzdV9)]$");
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "Qs~/hg3di=Y";
      objectArray0[1] = (Object) optionGroup0;
      objectArray0[2] = (Object) options2;
      Object object0 = new Object();
      int int0 = (-193);
      helpFormatter0.printOptions(mockPrintWriter1, 69, options2, 79, 0);
      StringBuffer stringBuffer0 = new StringBuffer(69);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-595), (-2), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getOptPrefix();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.createPadding(1);
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", " ", options0, "");
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      options0.helpOptions();
      helpFormatter0.renderWrappedText(stringBuffer0, 1029, 44, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, " ", options0, " ", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "HOq=y$Y^/", false, "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2, "", "[ARG...]", options1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("JQrIB3\"7/LS$1A6]ai");
      helpFormatter0.setWidth((-1372));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getOptPrefix();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.createPadding(1);
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", " ", options0, "");
      StringWriter stringWriter0 = new StringWriter(1029);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      options0.helpOptions();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 115, 0, "");
      helpFormatter0.renderOptions(stringBuffer1, 115, options0, 13, 1029);
      helpFormatter0.rtrim("org.apache.commons.cli.HelpFormatter");
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 707, options0, 3, 385);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "org.apache.commons.cli.AlreadySelectedException", true, "@I4\u0001O7ETT5RY\"");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", options1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 67, (-2), ">[ TUeF");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "@I4\\1O7ETT5RY\"";
      Option option0 = new Option("", "org.apache.commons.cli.AlreadySelectedException", true, "@I4\u0001O7ETT5RY\"");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-2380));
      Options options0 = new Options();
      Option option0 = new Option("", "", true, "org.apache.commons.cli.AlreadySelectedException");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      String string0 = " ";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", options2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-3910));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultArgName;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.setWidth((-88));
      helpFormatter0.setOptionComparator((Comparator) null);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.rtrim("arg");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getOptPrefix();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.createPadding(1);
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", " ", options0, "");
      StringWriter stringWriter0 = new StringWriter(1029);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      options0.helpOptions();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 115, 0, "");
      helpFormatter0.renderOptions(stringBuffer1, 115, options0, 13, 1029);
      helpFormatter0.rtrim("org.apache.commons.cli.HelpFormatter");
      helpFormatter0.getArgName();
      StringBuffer stringBuffer2 = new StringBuffer(0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 0, 0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(69, "[", "G", options0, "-");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "V5rkCB";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 0, "V5rkCB");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(" ").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "org.apache.commons.cli.HelpFormatter";
      Options options0 = new Options();
      boolean boolean0 = false;
      String string1 = "|A";
      options0.addOption("arg", "arg", true, "|A");
      options0.getOption("arg");
      Options options1 = options0.addOption("arg", "-", false, "k");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", options1);
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      String string2 = ">";
      mockPrintWriter0.print("\n");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 3, ">");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getOptPrefix();
      helpFormatter0.setDescPadding(0);
      int int1 = 1;
      helpFormatter0.createPadding(1);
      String string0 = "Xt:++`H68d%W>2";
      Options options0 = new Options();
      String string1 = "org.apache.commons.cli.HelpFormatter$1";
      // Undeclared exception!
      try { 
        options0.addOption("org.apache.commons.cli.HelpFormatter$1", "'", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.HelpFormatter$1' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", false, "arg");
      options1.toString();
      options0.addOption("", false, "1Vv'$K<D9Uk*");
      Option option0 = new Option("", "6`<NOnnn^(");
      options1.hasLongOption("--");
      Options options2 = options1.addOption(option0);
      options0.helpOptions();
      helpFormatter0.printHelp(">", "org.apache.commons.cli.HelpFormatter", options2, "6`<NOnnn^(", false);
      MockFile mockFile0 = new MockFile("", "");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-1463);
      String string0 = "&$";
      Options options0 = new Options();
      options0.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1136), "&$", "&$", options0, "&$");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "org.apache.commons.cli.AlreadySelectedException", true, "@I4\u0001O7ETT5RY\"");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(" ]", options2);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-369), 0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-901);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1431));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      options0.addOption("arg", "arg", true, "|A");
      options0.getOption("arg");
      Options options1 = options0.addOption("arg", "-", false, "k");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", options1);
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      mockPrintWriter0.print("\n");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 3, ">");
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 1, "org.apache.commons.cli.HelpFormatter");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      option0.addValueForProcessing("Qs~/hg3di=Y");
      option0.setArgs(74);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(69, "rJ%3", "rJ%3", options1, "{", true);
      helpFormatter0.setLongOptSeparator("NfOrzdV9)]$");
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "Qs~/hg3di=Y";
      objectArray0[1] = (Object) optionGroup0;
      objectArray0[2] = (Object) options2;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "rJ%3";
      objectArray0[5] = (Object) locale0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      helpFormatter0.printHelp("rJ%3", options0);
      objectArray0[7] = (Object) options1;
      mockPrintWriter1.printf(locale0, "arg", objectArray0);
      helpFormatter0.createPadding(69);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getArgName();
      Options options0 = new Options();
      options0.addOption("", "org.apache.commons.cli.Util", true, "--");
      options0.hasLongOption("arg");
      options0.hasLongOption("arg");
      StringWriter stringWriter0 = new StringWriter(0);
      stringWriter0.getBuffer();
      options0.helpOptions();
      helpFormatter0.setOptPrefix("-");
      helpFormatter0.printHelp(1029, ">fc2p", ">fc2p", options0, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
      MockFile mockFile0 = new MockFile("I1R;", "arg");
      MockFile mockFile1 = new MockFile(mockFile0, "org.apache.commons.cli.HelpFormatter$1");
      String string0 = "tj.";
      // Undeclared exception!
      try { 
        MockFile.createTempFile(" ", "tj.", (File) mockFile1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.rtrim(" ]");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.createPadding(1396);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, (Options) null, 1483, (-2816));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2687), (Options) null, (-2444), (-2444));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.createPadding(0);
      String string0 = "+tIj(`Hk[X>:#P&w0'";
      helpFormatter0.setSyntaxPrefix("+tIj(`Hk[X>:#P&w0'");
      StringWriter stringWriter0 = new StringWriter();
      int int1 = (-3523);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "arg", 1, (-3523));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      int int0 = 31;
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 31, "");
      String string0 = "org.apache.commons.cli.Options";
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.Options");
      File file0 = MockFile.createTempFile("usage: ", "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      String string1 = "";
      Options options0 = new Options();
      options0.addOption("arg", "usage: ", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      String string2 = "R!]50eN2e-[0@V<Y8-";
      Option option0 = null;
      try {
        option0 = new Option("R!]50eN2e-[0@V<Y8-", "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'R!]50eN2e-[0@V<Y8-' contains an illegal character : '!'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "YS=*?.KP<qG'8AKH1S", false, "-");
      helpFormatter0.printHelp("VQ&i", options1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "&5RyK#|0u)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("9'TU");
      mockPrintWriter0.checkError();
      helpFormatter0.printHelp(91, ">4gnYkQ{tOj0I", "kp +|1&IIeY\",E1!TU[h", options0, "W,?8.l2");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = null;
      helpFormatter0.setOptPrefix((String) null);
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getDescPadding();
      helpFormatter0.getWidth();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.findWrapPos("", 74, 37);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptionComparator();
      helpFormatter0.rtrim("^@>4x_lB");
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "OE+ohn", true, "line.separator");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "", "--", options1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      String string0 = ")I.@ }HAT^%J";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      String string1 = null;
      boolean boolean0 = false;
      Options options1 = options0.addOption((String) null, false, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", ")I.@ }HAT^%J", options1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      option0.addValueForProcessing("Qs~/hg3di=Y");
      option0.setArgs(74);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(69, "rJ%3", "rJ%3", options1, "{", true);
      helpFormatter0.setLongOptSeparator("NfOrzdV9)]$");
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "Qs~/hg3di=Y";
      objectArray0[1] = (Object) optionGroup1;
      objectArray0[2] = (Object) options2;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "rJ%3";
      objectArray0[5] = (Object) locale0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) options1;
      PrintWriter printWriter0 = mockPrintWriter1.printf(locale0, "arg", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-80), "--", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      String string0 = "-";
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 458, "-");
      int int0 = (-1490);
      int int1 = 577;
      String string1 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("usage: ", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1094), 0, ">");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.getWidth();
      String string0 = "";
      String string1 = "/<]!zcK$R$";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("--", "-", true, "org.apache.commons.cli.ParseException");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ",[jw}sTTM2\\uX|r {p";
      helpFormatter0.defaultNewLine = string0;
      helpFormatter0.setArgName("");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      int int0 = 0;
      String string0 = "org.apache.commons.cli.AlreadySelectedException";
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "org.apache.commons.cli.AlreadySelectedException");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      int int0 = 74;
      String string0 = "";
      Options options0 = new Options();
      String string1 = "*@Dmx\\";
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", "*@Dmx", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2380);
      helpFormatter0.setDescPadding((-2380));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "[ option: ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("9", options0);
      String string0 = "usage: ";
      Options options1 = new Options();
      helpFormatter0.printHelp("usage: ", options1);
      helpFormatter0.setWidth((-755));
      helpFormatter0.setOptPrefix("");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("usage: ", (-755), (-755));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("--");
      String string0 = "\"z`AJ%BuC*& ";
      PrintWriter printWriter0 = null;
      int int0 = (-728);
      Options options0 = new Options();
      options0.getOptions();
      Option option0 = null;
      try {
        option0 = new Option("\"z`AJ%BuC*& ", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '\"z`AJ%BuC*& ' contains an illegal character : '\"'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "-", "-", options0, "-");
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer(0);
      String string0 = "";
      helpFormatter0.setSyntaxPrefix("");
      stringBuffer0.ensureCapacity(3);
      int int1 = 0;
      // Undeclared exception!
      try { 
        stringBuffer0.insert(74, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 74
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 0, 0, "Nout*h(w");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "VQ&i";
      Options options0 = new Options();
      String string1 = "";
      String string2 = "YS=*?.KP<qG'8AKH1S";
      boolean boolean0 = false;
      Options options1 = options0.addOption("", "YS=*?.KP<qG'8AKH1S", false, "-");
      helpFormatter0.printHelp("VQ&i", options1);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "\"Vl\\e";
      helpFormatter0.setLongOptSeparator("\"Vle");
      String string1 = "&?+q5QkaRMPg'<X0";
      helpFormatter0.setWidth((-4544));
      Options options0 = new Options();
      String string2 = ">";
      Option option0 = null;
      try {
        option0 = new Option("usage: ", false, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 1628;
      helpFormatter0.setLongOptPrefix("c0Z@HLi");
      int int0 = 0;
      String string0 = "9IG";
      String string1 = null;
      Options options0 = new Options();
      String string2 = "org.apache.commons.cli.OptionGroup";
      Options options1 = options0.addOption("arg", true, "org.apache.commons.cli.OptionGroup");
      String string3 = ")}Lr{k^>>S_-{zCg";
      // Undeclared exception!
      try { 
        options1.addOption("-", ")}Lr{k^>>S_-{zCg", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.getSyntaxPrefix();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", string0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
  }
}
