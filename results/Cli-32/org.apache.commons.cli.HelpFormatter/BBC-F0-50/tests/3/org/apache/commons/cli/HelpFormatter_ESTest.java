/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 17 17:06:58 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setLongOptPrefix((String) null);
      Options options0 = new Options();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setWidth(0);
      helpFormatter0.defaultDescPad = 237;
      helpFormatter0.setWidth(0);
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setWidth(0);
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('\"');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "");
      stringWriter0.write(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, true);
      Options options0 = new Options();
      helpFormatter0.getNewLine();
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("UYh@G0Hat'L2+u$'H;!");
      helpFormatter0.getNewLine();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.findWrapPos("*6C_", 4865, 4865);
      helpFormatter0.setLongOptPrefix("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptionComparator();
      helpFormatter0.createPadding(4865);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding((-261));
      Options options1 = options0.addOption("", "--", false, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("p", options1, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "   ";
      Options options0 = new Options();
      helpFormatter0.printHelp("   ", options0, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      helpFormatter0.defaultWidth = (-954);
      helpFormatter0.defaultLongOptPrefix = "+1s~yh";
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getNewLine();
      int int0 = 15;
      helpFormatter0.createPadding(15);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 15, 1131, "0~b)`.k");
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream("", false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, ")/`VV`*q&?Yl%", options1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-2);
      helpFormatter0.setArgName("");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getArgName();
      helpFormatter0.findWrapPos("}tatBF ", 125, (-2));
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "ZwAeTJW#c|z){X+/)N", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption("", "US$CeV.{$:7&rZIia<", true, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "", "[", options2, "#/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-3784));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      helpFormatter0.createPadding(93);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getWidth();
      int int0 = 74;
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("org.apache.commons.cli.HelpFormatter", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.HelpFormatter' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("A CloneNotSupportedException was thrown: ", 7, 7);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      Option option0 = new Option("", (String) null);
      options0.addOption(option0);
      option0.setLongOpt("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, (-2), "", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      Option option0 = new Option("", (String) null);
      options0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, (-2), "", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Jyz~\"EL%y;d_Z|hot");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("Xeq!+Kg");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getDescPadding();
      helpFormatter0.defaultArgName = null;
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getLeftPadding();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 0, options0, 34, (-1230));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 0;
      String string0 = "`Dog%7Zfv4OyB";
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('S');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) locale0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      Object object2 = new Object();
      objectArray0[3] = object2;
      objectArray0[4] = (Object) "`Dog%7Zfv4OyB";
      objectArray0[5] = (Object) helpFormatter0;
      Object object3 = new Object();
      objectArray0[6] = object3;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", objectArray0);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = (-1769);
      Options options1 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLongOptPrefix("--");
      helpFormatter2.renderWrappedText(stringBuffer0, 13, 90, "-");
      String string0 = null;
      helpFormatter2.printHelp(81, " ", (String) null, options0, "--");
      helpFormatter0.getDescPadding();
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-3176));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(224);
      helpFormatter0.setLeftPadding((-74));
      helpFormatter0.getLeftPadding();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)8;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.getWidth();
      helpFormatter0.getSyntaxPrefix();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      String string0 = "@9Zpj";
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte) (-19);
      objectArray0[1] = (Object) helpFormatter0;
      mockPrintWriter0.format("@9Zpj", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("jyib3", "usage: ", true, "jyib3");
      Option option0 = new Option((String) null, "jyib3");
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
      try { 
        options3.addOption("usage: ", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      helpFormatter0.printHelp(", ", options0);
      helpFormatter0.defaultLongOptPrefix = " | ";
      MockFile mockFile0 = new MockFile(" | ", "usage: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "usage: ";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) ", ";
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) mockFile0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "-", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "", "", options0, (-1), (-2732), " | ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("(%7q", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]+}g?v3.Nd${tUpY%HL");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 1, " , `b");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 13, (Options) null, 0, 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\"Kn[-%X&uvu-UD_1b_", "\"Kn[-%X&uvu-UD_1b_", (Options) null, "\"Kn[-%X&uvu-UD_1b_", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "org.apache.commons.cli.HelpFormatter$OptionComparator", "org.apache.commons.cli.HelpFormatter$OptionComparator", (Options) null, "V0L", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(10);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("#i", objectArray0);
      helpFormatter0.printHelp(printWriter0, 44, "#i", "F2:lcd", options0, 1440, 1399, (String) null, false);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "arg");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption(option0);
      options0.addOption(option0);
      StringBuffer stringBuffer0 = new StringBuffer("-");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options2, 1, 44);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2778, "", "", options2, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Locale locale0 = new Locale("+YHWn(Ru#p");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "+YHWn(Ru#p";
      locale0.getScript();
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "+YHWn(Ru#p";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printOptions(printWriter0, (-1253), options0, 0, 0);
      helpFormatter0.setSyntaxPrefix("*sf^zVcnM,|$ V{w'AV");
      helpFormatter0.getArgName();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "arg", "X ^)vV{B'Q5nM(.WKo", options0, "[w9e,mCK>TO&6fE ", false);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 93, "--", "[", options0, 93, 93, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "n";
      Options options0 = new Options();
      boolean boolean0 = true;
      String string1 = "L8%K2\\\\Wb";
      Option option0 = new Option("arg", "cd|acH?x2AMW:E/K", true, "L8%K2\\Wb");
      File file0 = MockFile.createTempFile("usage: ", "[2KC;g8w/t", (File) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "has already been selected: '", "", options0, (-1), (-2), "[2KC;g8w/t");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 9;
      StringBuffer stringBuffer0 = new StringBuffer("V$r~3!6N69Vprl!b");
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) "V$r~3!6N69Vprl!b";
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) mockPrintWriter0;
      objectArray0[8] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 9, "V$r~3!6N69Vprl!b");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2149;
      Options options0 = new Options();
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ;ToYn", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding((-2));
      int int0 = 10;
      String string0 = "\"";
      String string1 = "X";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(10, "\"", "--", options0, "X");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.defaultLeftPad;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      File file0 = MockFile.createTempFile("POF) )H2g\"tW_P3:", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1399, "arg", "\n", options0, 74, 93, "POF) )H2g\"tW_P3:", false);
      helpFormatter1.getOptionComparator();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 521, "usage: ", "X+X", options0, 3, (-1), " [ARG]", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.Option");
      int int0 = 2149;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)126;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options0 = new Options();
      String string0 = "";
      helpFormatter0.printHelp("--", "<t}m^(YcA|N/ZKp?", options0, "--", false);
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (int) (byte)126, "<t}m^(YcA|N/ZKp?", "org.apache.commons.cli.Option", options0, (int) (byte)126, 2149, "org.apache.commons.cli.Option");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "cmdLineSyntax not provided");
      options0.addOption(option0);
      StringBuffer stringBuffer0 = new StringBuffer("--");
      File file0 = MockFile.createTempFile("arg", " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "cmdLineSyntax not provided", "{'w5", options0, 103, 3050, "cmdLineSyntax not provided", false);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      File file0 = MockFile.createTempFile("arg", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.append('g');
      Options options1 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 103, "q&g35'P9?$%/n;", "q&g35'P9?$%/n;", options1, 1171, 32, "", true);
      StringBuffer stringBuffer0 = new StringBuffer(250);
      helpFormatter0.renderOptions(stringBuffer0, 1711, options0, 1555, 2149);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("fKB?1$}F`AMcUHL56,", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter1.append('S');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 89, "arg", "", options0, 89, 1428, "", true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter2.renderOptions(stringBuffer0, 2149, options0, 0, 1);
      helpFormatter2.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer(33);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 96, (Options) null, 96, 33);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(943);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp(">", options0, false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer1 = helpFormatter2.renderWrappedText(stringBuffer0, 3, 1, " ");
      helpFormatter2.renderWrappedText(stringBuffer1, 34, 1, "-");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      File file0 = MockFile.createTempFile("arg", "The option '");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append('U');
      int int0 = 93;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 1, "   ", (String) null, options0, 250, 103, "--", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "cmdLineSyntax not provided";
      Option option0 = new Option("", "cmdLineSyntax not provided");
      options0.addOption(option0);
      StringBuffer stringBuffer0 = new StringBuffer("--");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 103, options0, 0, 1874);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 0, (-1657), " :: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(31);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp("usage: ", options0, true);
      StringBuffer stringBuffer1 = new StringBuffer("QQVVAyJlm{C2lc`Fk");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setOptPrefix("arg");
      helpFormatter2.renderWrappedText(stringBuffer0, 1, 1, "\n");
      helpFormatter0.rtrim("' was specified but an option from this group ");
      helpFormatter2.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLeftPadding();
      Option option0 = new Option("arg", "cLnBF;bKs!_3?G");
      Options options0 = new Options();
      options0.addOption(option0);
      String string0 = "arg";
      options0.addOption(option0);
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, options0, 1, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      String string1 = "cmdLineSyntax not provided";
      Option option0 = new Option("", "cmdLineSyntax not provided");
      Option option1 = new Option("", "cmdLineSyntax not provided");
      Options options1 = options0.addOption(option1);
      StringBuffer stringBuffer0 = new StringBuffer("--");
      int int0 = 103;
      int int1 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.Option");
      int int0 = 2149;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)126;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp("--", "<t}m^(YcA|N/ZKp?", options0, "--", false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      int int1 = 93;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format("usage: ", objectArray0);
      int int2 = 0;
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 0, (String) null, "", options1, 31, 31, ":/f)`_V:c$-A>/+A", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "cmdLineSyntax not provided");
      Options options1 = options0.addOption(option0);
      StringBuffer stringBuffer0 = new StringBuffer("]A^D_");
      Option option1 = new Option("", "--", false, "XHJRQy-9kGO>?VN>F");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp("]A^D_", "XHJRQy-9kGO>?VN>F", options2, "L8%K2\\Wb", true);
      helpFormatter0.printHelp(32, ")AMIYEJW,", "", options0, "cmdLineSyntax not provided");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-1), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 2, 10, "wd");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 74;
      int int1 = 0;
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer0, 0, 1, " ");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "c|acH?x2AMW:E/K", true, "L8%K2\\Wb");
      options0.addOption(option0);
      helpFormatter1.renderWrappedText(stringBuffer0, 126, 3223, "");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLongOptSeparator();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      pipedOutputStream0.write(3223);
      helpFormatter2.printWrapped((PrintWriter) mockPrintWriter0, 126, 34, "");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(74, "\n", "\n", options0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2327), ":", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.Option");
      StringBuffer stringBuffer0 = new StringBuffer(2149);
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2149, options0, 2149, 2149);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 2149, 2149, " ");
      helpFormatter0.renderWrappedText(stringBuffer2, 2149, 2149, "");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      PrintStream printStream0 = mockPrintStream0.printf("f;/,0p m[=XM3@m", (Object[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      PrintWriter printWriter0 = mockPrintWriter0.format("org.apache.commons.cli.Option", (Object[]) null);
      helpFormatter0.printUsage(printWriter0, 2149, "", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "f;/,0p m[=XM3@m", options0, "sYNyZ:hP:`#Ua", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.defaultDescPad;
      StringBuffer stringBuffer0 = new StringBuffer(943);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "cd|acH?x2AMW:E/K", true, "L8%K2\\Wb");
      Options options1 = new Options();
      helpFormatter1.printHelp("--", ">", options1, "L8%K2\\Wb", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(470, "arg", " ", (Options) null, "-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(943);
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", options0, true);
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 827, "usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 3, "arg");
      File file0 = MockFile.createTempFile("usage: ", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append('T');
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 201, "", (String) null, options0, 827, 8, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      int int0 = (-2);
      helpFormatter0.findWrapPos("usage: ", (-2), 4062);
      MockFile mockFile0 = new MockFile("", "--");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append(')');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      String string0 = null;
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("-", "usage: ", false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer(943);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp(" ", options0, false);
      helpFormatter1.renderWrappedText(stringBuffer0, 3, 799, "usage: ");
      helpFormatter1.renderWrappedText(stringBuffer0, 74, 3, "arg");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      File file0 = MockFile.createTempFile("POF) )H2g\"tW_P3:", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append('H');
      helpFormatter1.printHelp(printWriter0, 1408, "arg", "\n", options0, 74, 93, "POF) )H2g\"tW_P3:", false);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, options0, 1838, (-3079));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.Option";
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.Option");
      int int0 = 2149;
      StringBuffer stringBuffer0 = new StringBuffer(2149);
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2149, options0, 2149, 2149);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 2149, 2149, " ");
      String string1 = "";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.renderWrappedText(stringBuffer2, 2149, 2149, "");
      Options options1 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options1.addOption("--", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp(" ", options0, true);
      File file0 = MockFile.createTempFile("POF) )H2g\"tW_P3:", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("arg");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 1, "arg", "\n", options0, 74, 93, "POF) )H2g\"tW_P3:", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "}5c!tax");
      StringBuffer stringBuffer0 = new StringBuffer(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.Option");
      StringBuffer stringBuffer0 = new StringBuffer(2149);
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2149, options0, 2149, 2149);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 2149, 2149, " ");
      helpFormatter0.renderWrappedText(stringBuffer2, 2149, 2149, "");
      helpFormatter0.printHelp("--", "-", options0, "--", false);
      helpFormatter0.printHelp("--", "", options0, " ", false);
      MockFile mockFile0 = new MockFile("", "arg");
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer(943);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "cd|acH?x2AMW:E/K", true, "L8%K2\\Wb");
      Options options1 = options0.addOption(option0);
      options1.getOption("-");
      helpFormatter1.printHelp("--", ">", options1, "L8%K2\\Wb", true);
      int int0 = 387;
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter1.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultSyntaxPrefix = "p";
      helpFormatter0.setArgName("p");
      Option option0 = new Option("arg", "", true, "6&'AJR4;hq2NG");
      options0.addOption(option0);
      Options options1 = options0.addOption("p", "--", true, "--");
      helpFormatter0.printHelp("p", options0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "p", "The option '", options1, "b ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("YaE=H7})7H", options0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      options0.hasShortOption("WRV-fPm<kgm!g]>*6 ");
      options0.addOption("arg", "", true, "line.separator");
      Options options1 = options0.addOption("", true, "");
      MockFile mockFile0 = new MockFile("YaE=H7})7H", "WN");
      helpFormatter0.printHelp(1082, "-Ig3{QL'fD4K=__", (String) null, options1, "--");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", true, "--");
      Options options1 = options0.addOption(option0);
      StringBuffer stringBuffer1 = new StringBuffer(" ");
      helpFormatter1.renderWrappedText(stringBuffer1, 1, 74, ", ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("-", "arg", options0, "arg", false);
      helpFormatter2.printHelp(13, " ]", "", options1, "]A^D_");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer(943);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp(" ", options0, true);
      helpFormatter1.renderWrappedText(stringBuffer0, 3, 799, "usage: ");
      helpFormatter1.renderWrappedText(stringBuffer0, 74, 3, "arg");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      File file0 = MockFile.createTempFile("POF) )H2g\"tW_P3:", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append('H');
      helpFormatter1.printHelp(printWriter0, 1408, "arg", "\n", options0, 74, 93, "POF) )H2g\"tW_P3:", true);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, options0, 1838, (-3079));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("p", options0, true);
      helpFormatter0.getNewLine();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.createPadding(37);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.Option");
      StringBuffer stringBuffer0 = new StringBuffer(2149);
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2149, options0, 2149, 2149);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 2149, 2149, "<t}m^aYA|N/ZKp?");
      helpFormatter0.renderWrappedText(stringBuffer2, 2149, 2149, "");
      helpFormatter0.printHelp("--", "<t}m^aYA|N/ZKp?", options0, "--", false);
      helpFormatter0.printHelp("<t}m^aYA|N/ZKp?", "", options0, " ", false);
      MockFile mockFile0 = new MockFile("", "arg");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 113, "has already been selected: '");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      StringBuffer stringBuffer1 = new StringBuffer(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "Cannot add value, list full.", false, "A");
      options0.addOption(option0);
      helpFormatter1.printHelp(">", "", options0, "arg", false);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 3, 1231, "L8%K2\\Wb");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer(943);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "cd|acH?x2AMW:E/K", false, "L8%K2\\Wb");
      Options options1 = options0.addOption(option0);
      helpFormatter1.printHelp("--", ">", options1, "L8%K2\\Wb", false);
      String string0 = "";
      String string1 = "P(S6`<Qle\"5X";
      // Undeclared exception!
      try { 
        options1.addOption("P(S6`<Qle\"5X", false, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'P(S6`<Qle\"5X' contains an illegal character : '('
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getOptionComparator();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "0(Ek");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 2465);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(62, "-", "'mM)>\"q,ltH", options0, "org.apache.commons.cli.Util");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getOptionComparator();
      StringBuffer stringBuffer0 = new StringBuffer(93);
      Option option0 = new Option("", true, "");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, 1864, options2, 34, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.Option");
      StringBuffer stringBuffer0 = new StringBuffer(2149);
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2149, options0, 2149, 2149);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 2149, 2149, "<t}m^aYA|N/ZKp?");
      helpFormatter0.renderWrappedText(stringBuffer2, 2149, 2149, "");
      helpFormatter0.printHelp("--", "<t}m^aYA|N/ZKp?", options0, "--", false);
      helpFormatter0.printHelp("<t}m^aYA|N/ZKp?", "", options0, " ", false);
      MockFile mockFile0 = new MockFile("", "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2149, "", "org.apache.commons.cli.HelpFormatter", options0, "M~*%HJ87gM-9e^y&A E");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp("-", "-", options0, "usage: ");
      Options options1 = new Options();
      helpFormatter0.printHelp("\n", options1, false);
      StringBuffer stringBuffer1 = new StringBuffer("-");
      stringBuffer1.append((CharSequence) stringBuffer0);
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer1, 1, 1, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.Option");
      int int0 = 2149;
      StringBuffer stringBuffer0 = new StringBuffer(2149);
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2149, options0, 2149, 2149);
      String string0 = "<t}m^aYA|N/ZKp?";
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 2149, 2149, "<t}m^aYA|N/ZKp?");
      helpFormatter0.renderWrappedText(stringBuffer2, 2149, 2149, "");
      String string1 = "?/iC3u";
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.printHelp("?/iC3u", "<t}m^aYA|N/ZKp?", options0, "?/iC3u", true);
      helpFormatter0.printHelp("<t}m^aYA|N/ZKp?", "", options0, "?/iC3u", true);
      MockFile mockFile0 = new MockFile("", "arg");
      helpFormatter0.printHelp("ZqJIA2SB6,`/uL0Hn", "", options0, "g,b7I{'Z ;Q$C}S");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "cmdLineSyntax not provided");
      Options options1 = options0.addOption(option0);
      StringBuffer stringBuffer0 = new StringBuffer("]A^D_");
      helpFormatter0.renderWrappedText(stringBuffer0, 38, 9, "");
      helpFormatter0.printHelp("]A^D_", ". 0c", options1, "", false);
      helpFormatter0.printHelp("cmdLineSyntax not provided", "yIL6i]#F7gP61g", options1, "", true);
      MockFile mockFile0 = new MockFile((String) null, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1082, "", "usage: ", options1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.Option");
      StringBuffer stringBuffer0 = new StringBuffer(2149);
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 2149, options0, 2149, 2149);
      helpFormatter0.renderWrappedText(stringBuffer0, 903, (-114), "org.apache.commons.cli.Option");
      helpFormatter0.getArgName();
      helpFormatter0.printHelp(903, "org.apache.commons.cli.Option", ">", options0, ">");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.Option");
      int int0 = 2149;
      StringBuffer stringBuffer0 = new StringBuffer(2149);
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 2149, options0, 2149, 2149);
      String string0 = "<t}m^aYA|N/ZKp?";
      StringBuffer stringBuffer1 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer1, 2149, 2149, "");
      String string1 = "?/iC3u";
      helpFormatter0.printHelp("?/iC3u", "<t}m^aYA|N/ZKp?", options0, "?/iC3u", false);
      helpFormatter0.printHelp("<t}m^aYA|N/ZKp?", "", options0, "?/iC3u", false);
      MockFile mockFile0 = new MockFile("", "arg");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(3);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptPrefix();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.findWrapPos("--", 3, 18);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("--", (-419), 9);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(2149);
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(true);
      helpFormatter0.printHelp(44, "F!0Q/p3", "cmdLineSyntax not provided", options0, "", true);
      helpFormatter0.getWidth();
      helpFormatter0.setArgName("cmdLineSyntax not provided");
      helpFormatter0.printHelp("[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", options1);
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) options1;
      objectArray0[1] = (Object) optionGroup0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]";
      objectArray0[4] = (Object) "F!0Q/p3";
      objectArray0[5] = (Object) "cmdLineSyntax not provided";
      PrintWriter printWriter0 = mockPrintWriter0.printf("cmdLineSyntax not provided", objectArray0);
      mockFile0.setWritable(true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      helpFormatter0.printHelp(printWriter0, 44, "`~4`y2bonxOzLs", "line.separator", options1, 74, 74, "-");
      helpFormatter0.setLongOptPrefix("-");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.Option");
      StringBuffer stringBuffer0 = new StringBuffer(2149);
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(8, ";i46|wpDz{'S7MQ=z~U", (String) null, options2, "org.apache.commons.cli.Option");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.Option");
      int int0 = 2149;
      StringBuffer stringBuffer0 = new StringBuffer(2149);
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2149, options0, 2149, 2149);
      String string0 = "<t}m^aYA|N/ZKp?";
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 2149, 2149, "<t}m^aYA|N/ZKp?");
      helpFormatter0.renderWrappedText(stringBuffer2, 2149, 2149, "");
      String string1 = "?/iC3u";
      helpFormatter0.printHelp("?/iC3u", "<t}m^aYA|N/ZKp?", options0, "?/iC3u", false);
      helpFormatter0.printHelp("<t}m^aYA|N/ZKp?", "", options0, "?/iC3u", false);
      MockFile mockFile0 = new MockFile("", "arg");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 2410;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getOptPrefix();
      helpFormatter0.rtrim("-");
      helpFormatter0.getNewLine();
      int int0 = (-1);
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("*", " ", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '*'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("<");
      String string0 = "2%T!&XQY\\f";
      int int0 = 252;
      helpFormatter0.createPadding(252);
      helpFormatter0.rtrim("2%T!&XQY\f");
      helpFormatter0.getOptPrefix();
      String string1 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-1133);
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1846));
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", ">\")oN;?Jc\"+e", (Options) null, ">\")oN;?Jc\"+e", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer(943);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp(" ", options0, true);
      String string0 = "]A^D_";
      StringBuffer stringBuffer1 = new StringBuffer("");
      String string1 = "";
      int int0 = 2;
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 1400, "nr>:>H^$nz", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.getSyntaxPrefix();
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      PrintWriter printWriter1 = mockPrintWriter1.printf("6PspHk#P'BEymA9`4", (Object[]) null);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter1, (-3397), "usage: ", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "", false, (String) null);
      helpFormatter0.printHelp("Illegal option name '", options1, true);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 9;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = "V$r~3!6N69Vprl!b";
      StringBuffer stringBuffer0 = new StringBuffer(9);
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("V$r~3!6N69Vprl!b", options2, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "V$r~3!6N69Vprl!b", "--", options1, "V$r~3!6N69Vprl!b");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      int int0 = 943;
      StringBuffer stringBuffer0 = new StringBuffer(943);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      int int1 = 799;
      helpFormatter1.renderWrappedText(stringBuffer0, 3, 799, "usage: ");
      helpFormatter1.renderWrappedText(stringBuffer0, 74, 1628, "arg");
      helpFormatter1.printHelp(" ", " ", options0, ">", false);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((String) null, "U|x}~B`S9XY~", options0, " ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "cmdLineSyntax not provided");
      Options options1 = options0.addOption(option0);
      StringBuffer stringBuffer0 = new StringBuffer("]A^D_");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 103, options0, 0, 1874);
      helpFormatter0.renderWrappedText(stringBuffer1, 74, 1240, "");
      helpFormatter0.getArgName();
      helpFormatter0.renderOptions(stringBuffer0, 103, options1, 23, 74);
      StringBuffer stringBuffer2 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.renderOptions(stringBuffer2, 1240, options0, 44, 13);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      String string0 = "V$r~3!6N69Vprl!b";
      StringBuffer stringBuffer1 = new StringBuffer("V$r~3!6N69Vprl!b");
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "V$r~3!6N69Vprl!b", "Z3", options1, "V$r~3!6N69Vprl!b");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      StringBuffer stringBuffer0 = new StringBuffer(9);
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      option0.clone();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup3 = new OptionGroup();
      Option option1 = new Option("", true, "usage: ");
      optionGroup0.addOption(option1);
      Options options2 = options1.addOptionGroup(optionGroup2);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 3, "-", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", options0, true);
      StringBuffer stringBuffer1 = new StringBuffer("-");
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer1, 1484, 1, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "cmdLineSyntax not provided");
      Options options1 = options0.addOption(option0);
      Options options2 = new Options();
      Option option1 = new Option("arg", "xc4L3<Zga?", true, "%fvPeBixkIm=");
      helpFormatter0.setDescPadding(1050);
      options1.addOption(option1);
      helpFormatter0.printHelp("cmdLineSyntax not provided", "?\"y", options1, "The option '", true);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer(943);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "cd|acH?x2AMW:E/K", true, "L8%K2\\Wb");
      Options options1 = options0.addOption(option0);
      helpFormatter1.printHelp("--", ">", options1, "L8%K2\\Wb", true);
      helpFormatter1.printHelp("--", "K)vawsV}&F&N# &", options1, "[ARG...]", true);
      MockFile mockFile0 = new MockFile("-", "[ARG...]");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, ":=_");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // :=_
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("YaE=H7})7H", options0);
      String string0 = "";
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      options0.hasShortOption("WRV-fPm<kgm!g]>*6 ");
      String string1 = "line.separator";
      options0.addOption("arg", "", true, "line.separator");
      options0.addOption("", true, "");
      int int0 = 9;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 9, "", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer(943);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Options options1 = new Options();
      helpFormatter0.printHelp(14, "cd|acH?x2AMW:E/K", "-", options1, ">");
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "-");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 0, "");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "arg");
      Options options2 = options1.addOption("", "usage: ", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "line.separator", "line.separator", options3, "");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.defaultLongOptPrefix = "mAFCJeNr";
      helpFormatter0.setWidth(0);
      helpFormatter0.getDescPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.renderOptions((StringBuffer) null, 0, options0, 0, 0);
      int int0 = (-2);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-2), (-2), "XnT!Pn");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = " ";
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix(" ");
      StringBuffer stringBuffer0 = new StringBuffer(3);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 3653, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(true);
      helpFormatter0.printHelp(44, "F!0Q/p3", "cmdLineSyntax not provided", options0, "", true);
      helpFormatter0.getWidth();
      helpFormatter0.setArgName("cmdLineSyntax not provided");
      helpFormatter0.printHelp("[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", options1);
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) options1;
      objectArray0[1] = (Object) optionGroup0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]";
      objectArray0[4] = (Object) "F!0Q/p3";
      objectArray0[5] = (Object) "cmdLineSyntax not provided";
      PrintWriter printWriter0 = mockPrintWriter0.printf("cmdLineSyntax not provided", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, (-2152), (-2405), "u9to)");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(".a{Z#mU.Hgl@_ei", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.JAPAN;
      Locale locale1 = Locale.JAPANESE;
      locale0.getDisplayVariant(locale1);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) ".a{Z#mU.Hgl@_ei";
      objectArray0[4] = (Object) "z&4";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "z&4", objectArray0);
      mockPrintWriter0.print(false);
      helpFormatter0.printUsage(printWriter0, 31, "");
      helpFormatter0.setArgName(">");
      int int0 = (-755);
      Options options0 = new Options();
      Options options1 = options0.addOption("", ">", false, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options2.addOption(">", true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '>'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "cmdLineSyntax not provided");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", false, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      Options options4 = options3.addOption("", "arg", false, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "]", options4, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.getNewLine();
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("\n", string0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.defaultLeftPad);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      
      Options options0 = new Options();
      helpFormatter0.printHelp("p", options0, true);
      helpFormatter0.getOptionComparator();
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer(943);
      StringBuffer stringBuffer1 = new StringBuffer(16);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp("'", options0, true);
      helpFormatter1.renderWrappedText(stringBuffer0, 74, 3028, "-");
      assertEquals(1, stringBuffer0.length());
      
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer2 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer2, 10, 74, "-");
      helpFormatter0.setOptionComparator((Comparator) null);
      assertEquals(1, helpFormatter0.getLeftPadding());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("|3X%EtJC2", (-1249), (-1249));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.createPadding(0);
      // Undeclared exception!
      try { 
        stringBuffer0.insert(3, 6186.55F);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 3
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("|");
      helpFormatter0.setNewLine("|");
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer1 = stringWriter0.getBuffer();
      Object object0 = new Object();
      stringWriter0.append('e');
      stringBuffer0.append(object0);
      stringBuffer0.append(stringBuffer1);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        stringBuffer0.deleteCharAt(2842);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2842
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", options0, false);
      StringBuffer stringBuffer1 = new StringBuffer("-");
      helpFormatter1.setDescPadding(8);
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer1, 1, 1, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(true);
      helpFormatter0.printHelp(44, "F!0Q/p3", "cmdLineSyntax not provided", options0, "", true);
      helpFormatter0.getWidth();
      helpFormatter0.setArgName("cmdLineSyntax not provided");
      helpFormatter0.printHelp("[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", options1);
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) options1;
      objectArray0[1] = (Object) optionGroup0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]";
      objectArray0[4] = (Object) "F!0Q/p3";
      objectArray0[5] = (Object) "cmdLineSyntax not provided";
      PrintWriter printWriter0 = mockPrintWriter0.printf("cmdLineSyntax not provided", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      helpFormatter0.setLongOptPrefix((String) null);
      assertEquals("cmdLineSyntax not provided", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("|~UkPC", " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      String string0 = "line.separator";
      Locale locale0 = new Locale("line.separator", "-");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) " ";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "--", objectArray0);
      int int0 = 31;
      helpFormatter0.setWidth(31);
      String string1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-1015), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setWidth(0);
      helpFormatter0.defaultDescPad = 237;
      helpFormatter0.setWidth(0);
      String string0 = "";
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setWidth(0);
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('\"');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "");
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, false);
      int int0 = (-4045);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "7l:Q_{<K`2W";
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setOptPrefix("7l:Q_{<K`2W");
      String string1 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Locale locale0 = new Locale("+YHWn(Ru#p");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "+YHWn(Ru#p";
      locale0.getScript();
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "+YHWn(Ru#p";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printOptions(printWriter0, (-1253), options0, 0, 0);
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "arg", "X ^)vV{B'Q5nM(.WKo", options0, "[w9e,mCK>TO&6fE ", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.optionComparator = null;
      String string1 = "?SSkd\\<\"t~!m9P<";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string2 = "}<Nq_ ^MF";
      boolean boolean0 = false;
      String string3 = "";
      // Undeclared exception!
      try { 
        options1.addOption("}<Nq_ ^MF", "}<Nq_ ^MF", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '}<Nq_ ^MF' contains an illegal character : '}'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "WZ7TR,)5O49ngx&r.7";
      String string1 = "4.Q29`0";
      Options options0 = new Options();
      String string2 = null;
      boolean boolean0 = false;
      Option option0 = new Option((String) null, false, "--");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        options1.addOption("4.Q29`0", "--", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '4.Q29`0' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
