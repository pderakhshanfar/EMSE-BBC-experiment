/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:19:34 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          HelpFormatter helpFormatter0 = new HelpFormatter();
          StringWriter stringWriter0 = new StringWriter();
          int int0 = 0;
          helpFormatter0.defaultWidth = 0;
          Options options0 = new Options();
          // Undeclared exception!
          helpFormatter0.printHelp("'_LwqjA+zX_BlH", "", options0, "0", false);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1749);
      helpFormatter0.setDescPadding((-1749));
      helpFormatter0.getDescPadding();
      String string0 = "\"";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("\"", "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Option option0 = new Option("_vM8", "\u0007UdSkAy0Y^_T^L:V", true, "--");
      optionGroup0.addOption(option0);
      option0.setArgName("");
      option0.getValues();
      option0.setArgName("usage: ");
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("q=)C(", options0, true);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      helpFormatter0.setLeftPadding(0);
      assertEquals(0, helpFormatter0.defaultLeftPad);
      
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Option option0 = new Option("_vM8", "--", true, "GP*");
      optionGroup0.addOption(option0);
      option0.setArgName("_vM8");
      Options options1 = options0.addOptionGroup(optionGroup0);
      option0.toString();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultLeftPad = (-1485);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("Zcj38'3t", options1, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, "\n");
      helpFormatter0.printHelp("tk:!p1sF=]st)UU", options1, true);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Option option0 = new Option("_vM8", "\u0007UdSkAy0Y^_T^L:V", true, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      option0.setArgName("");
      Options options1 = options0.addOptionGroup(optionGroup1);
      option0.toString();
      helpFormatter0.printHelp("--", options1, true);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", (-1), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setDescPadding(198);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "y", false, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter1.optionComparator = null;
      helpFormatter0.printHelp(416, "|nXr", "-", options1, "-", true);
      helpFormatter1.getOptionComparator();
      helpFormatter1.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "D\"Muq^=*Y adBC'(:*";
      int int0 = (-818);
      helpFormatter0.setWidth((-818));
      String string1 = "NO_ARGS_ALLOWED";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("D\"Muq^=*Y adBC'(:*", "k", options0, "NO_ARGS_ALLOWED");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) '%';
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) '%';
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "a&[NI6iDA//~+;s";
      mockPrintWriter0.printf(locale0, "a&[NI6iDA//~+;s", objectArray0);
      charArray0[1] = '\'';
      mockPrintWriter0.println(charArray0);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      options0.hasShortOption("usage: ");
      helpFormatter0.printHelp(74, " ", "usage: ", options0, "\n", false);
      helpFormatter0.findWrapPos("[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", 22, (-2));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append('z');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 32, 32, ":G`lJ5aHP6:o");
      stringBuffer0.append(stringBuffer1);
      stringBuffer0.append(386);
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      options0.hasLongOption("usage: ");
      helpFormatter0.getWidth();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setArgName("Y{|b,r`4ks#@l,");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setArgName((String) null);
      helpFormatter0.getOptPrefix();
      helpFormatter0.rtrim((String) null);
      helpFormatter0.setLongOptSeparator("");
      String string0 = "dSu<)a'i/vM";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option(" ", ">", true, "ul}_1!9nK/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      Option option0 = new Option("arg", " ", true, "\n");
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(74, "-", "T,<<SPTc+$", options0, "usage: ", true);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 99, "usage: ");
      helpFormatter0.printHelp(10, "T,<<SPTc+$", "5~Daa>6H/", options0, "w0~[", false);
      helpFormatter1.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-3907));
      helpFormatter0.rtrim(" ");
      helpFormatter0.getLeftPadding();
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1755));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.print('r');
      helpFormatter0.setArgName("");
      int int0 = 4150;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 4150, 5172, "-");
      helpFormatter0.setNewLine("");
      helpFormatter0.setLeftPadding(525);
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getArgName();
      helpFormatter0.rtrim("-");
      StringBuffer stringBuffer0 = new StringBuffer("-");
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 74, "-");
      String string0 = ":GU$ki5lQP;c0hc";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option(">", "J_+).48x1a\"fB6 y/d");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '>'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "1u&3SpIR2&,#", false, "");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2056), options2, 917, 2112);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 13, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName((String) null);
      Options options0 = new Options();
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "yMq`L\",+%4~");
      optionGroup0.addOption(option0);
      Option option1 = new Option("arg", "", true, "\n");
      option1.setRequired(true);
      optionGroup0.addOption(option1);
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(74, "-", "T,<<SPTc+$", options0, "usage: ", true);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter1.renderWrappedText(stringBuffer0, 74, 3, "b8Zw");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "", true, "\n");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("T4}pG9y");
      String string0 = "";
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      option0.setValueSeparator('m');
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-2), (String) null, options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "A CloneNotSupportedException was thrown: ");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, false, "0:?m(");
      option0.clearValues();
      option0.clearValues();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.defaultNewLine = null;
      helpFormatter0.printHelp(1620, "A CloneNotSupportedException was thrown: ", "Vn=[Ry*4eLoF09Pm", options0, "", false);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.rtrim("");
      helpFormatter0.getNewLine();
      helpFormatter0.getArgName();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      String string0 = "";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "--", "", (Options) null, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 0, "");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "y", false, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(416, "|nXr", "-", options1, "-", true);
      helpFormatter1.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-3745);
      helpFormatter0.setWidth((-3745));
      String string0 = "cmdLineSyntax not provided";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      int int1 = 111;
      Options options0 = new Options();
      mockPrintWriter0.print(false);
      options0.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" [ARG]", " [ARG]", options0, " [ARG]", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(74, "\n", "--", options0, "", true);
      helpFormatter0.findWrapPos("--", 3, 74);
      helpFormatter0.getNewLine();
      helpFormatter1.renderOptions((StringBuffer) null, 36, options0, 13, 9);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", "-", true, "\n");
      MockFile mockFile0 = new MockFile("n}QII", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("--");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 13, "n}QII", (String) null, options0, 13, 13, (String) null, true);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(13, "", (String) null, options1, "   ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      boolean boolean0 = false;
      String string0 = "I";
      int int0 = 20;
      String string1 = "";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "I");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 209, (Options) null, 209, 20);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3278, "--", "--", options0, 74, 1282, (String) null, false);
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "?bl", "rrGj", options2, "iz;fb", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      int int0 = 0;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      options0.helpOptions();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "W<{v|NkEtZqa%bh)M\"_", "", options0, 1, 74, "arg");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "EcfAt2B+8`8CQH5q";
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter(1);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      int int0 = 216;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1136, (Options) null, 216, 1136);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      String string0 = "";
      boolean boolean0 = true;
      helpFormatter0.defaultDescPad = (-2484);
      Options options1 = options0.addOption("", "--", true, "z)1O6\"G]Y0)sRn");
      options1.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("z)1O6\"G]Y0)sRn", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.append((CharSequence) "usage: ");
      Options options0 = new Options();
      Option option0 = new Option((String) null, "Cannot add value, list full.");
      Options options1 = options0.addOption("", true, "");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[", options2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      String string0 = "[";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 101, "\n", "-", options0, 3, 0, "--", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 3, "\n");
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getWidth();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      helpFormatter0.defaultDescPad = 0;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" [ARG]");
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 21, "line.separator", "--", options0, 44, 919, " ", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, " ", "j(]M)", options0, "wZB/$2zEsfMS.", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "", (String) null, options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      int int0 = 35;
      int int1 = 0;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 35, "2.4UF'E*h%9", "", options0, 0, (-731), "2.4UF'E*h%9", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      String string0 = "vO=L%+EYGQ";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(":?Z", "gOH/sTKj`e-VM#.M", (Options) null, "org.apache.commons.cli.AlreadySelectedException");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      int int0 = 3278;
      String string0 = "2.4UF'E*h%9";
      boolean boolean0 = false;
      MockFile mockFile0 = new MockFile("FHOu~6Suo9e/", "/hJC|[<2$");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) "/hJC|[<2$";
      objectArray0[3] = (Object) "2.4UF'E*h%9";
      objectArray0[4] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "\"", objectArray0);
      String string1 = "   ";
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "   ", ":qwE3][>gE", options0, 0, 0, "   ", true);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1718, "NO_ARGS_ALLOWED");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("=8u+{0", "=8u+{0", (Options) null, "=8u+{0", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.defaultDescPad = (-27);
      stringWriter0.flush();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      stringWriter1.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      stringWriter0.append((CharSequence) "--");
      mockPrintWriter0.println((float) 1);
      String string0 = "+Ee%S#NS";
      Options options0 = new Options();
      Option option0 = new Option("", "");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1142, "}I", "+Ee%S#NS", options1, "\n", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.defaultDescPad = 0;
      stringWriter0.flush();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      stringWriter1.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      stringWriter0.append((CharSequence) "--");
      boolean boolean0 = false;
      mockPrintWriter0.println((float) 1);
      Options options0 = new Options();
      String string0 = "";
      helpFormatter0.createPadding(1148);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 1, options0, 64, (-936));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockFileOutputStream0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(" ", objectArray0);
      mockPrintWriter0.println("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      int int0 = (-1407);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-1407), "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.defaultDescPad = 0;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 4852);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, " ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 64, "a:XIGmWKM?i/xQ4[", "z", (Options) null, (-434), 4852, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.defaultDescPad = 0;
      Options options0 = new Options();
      helpFormatter0.printHelp("'_LwqjA+zX_BlH", "", options0, "", false);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringBuffer stringBuffer0 = new StringBuffer();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("d~4 ");
      Options options1 = new Options();
      char[] charArray0 = new char[3];
      charArray0[0] = 'L';
      charArray0[1] = 'L';
      charArray0[2] = 'i';
      mockPrintWriter0.println(charArray0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 32, " e8$G[", "Qk}=ddT!Fi{&GkPiqM", options0, 0, 32, "d~4 ");
      helpFormatter0.createPadding(909);
      helpFormatter0.printOptions(mockPrintWriter0, 0, options0, 74, 9);
      Options options2 = options1.addOption("", false, "");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter'_LwqjA+zX_BlH", options2, 1101, 909, "Qk}=ddT!Fi{&GkPiqM", false);
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1));
      Options options0 = new Options();
      boolean boolean0 = false;
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", "", options0, (String) null, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "kO?$@\"EnjiL{C3";
      helpFormatter0.getNewLine();
      helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Locale locale0 = Locale.ROOT;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "kO?$@\"EnjiL{C3", (Object[]) null);
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 13, "-", options0);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter1.renderOptions(stringBuffer0, 74, options0, 13, 1);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 3, "arg", "%", options0, 1896, 809, " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      MockFile mockFile1 = new MockFile("%5]n:FGs}lu", "XV6");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, ",d~os=8%~ w[<McH", true, (String) null);
      Options options2 = options1.addOption("arg", false, "XV6");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 1, "arg", options3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      int int0 = 0;
      Options options0 = new Options();
      String string0 = "";
      options0.addOption("", "--", true, "z)1O6\"G]Y0)sRn");
      String string1 = "'Z3T8NPZi9X*i=N";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 23);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "kO?$@\"EnjiL{C3";
      helpFormatter0.getNewLine();
      helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, (-1938), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "kO?$@\"EnjiL{C3";
      helpFormatter0.getNewLine();
      helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      helpFormatter0.setOptPrefix((String) null);
      Locale locale0 = Locale.ROOT;
      mockPrintWriter0.format(locale0, "kO?$@\"EnjiL{C3", (Object[]) null);
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 13, "-", options0);
      // Undeclared exception!
      try { 
        helpFormatter2.findWrapPos((String) null, 2, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.flush();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      StringWriter stringWriter3 = new StringWriter(3);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 3, "\n");
      stringWriter2.append((CharSequence) "arg");
      stringWriter2.append((CharSequence) "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-298), (-841), "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.defaultDescPad = 0;
      Options options0 = new Options();
      helpFormatter0.printHelp("'_LwqjA+zX_BlH", "", options0, "", false);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringBuffer stringBuffer0 = new StringBuffer();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("d~4 ");
      Options options1 = new Options();
      char[] charArray0 = new char[3];
      charArray0[0] = 'L';
      charArray0[1] = 'U';
      charArray0[2] = 'i';
      mockPrintWriter0.println(charArray0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 32, " e8$G[", "Qk}=ddT!Fi{&GkPiqM", options0, 0, 32, "d~4 ");
      helpFormatter0.createPadding(909);
      helpFormatter0.printOptions(mockPrintWriter0, 0, options0, 2, 9);
      Options options2 = options1.addOption("", false, "");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter'_LwqjA+zX_BlH", options2, 1101, 909, "Qk}=ddT!Fi{&GkPiqM", false);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.defaultDescPad = 0;
      Options options0 = new Options();
      helpFormatter0.printHelp("'_LwqjA+zX_BlH", "", options0, "", false);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter1.printHelp(74, "\n", " ", options0, "usage: ");
      helpFormatter1.renderWrappedText(stringBuffer0, 74, 0, "!XU6gvK<yHg&");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      String string0 = "";
      boolean boolean0 = true;
      int int0 = 2;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2, "}PA,R{at<vvN", "", (Options) null, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-4047), (String) null, (String) null, (Options) null, 51, (-5053), "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.defaultDescPad = 0;
      Options options0 = new Options();
      helpFormatter0.printHelp("'_LwqjA+zX_BlH", "", options0, "", false);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringBuffer stringBuffer0 = new StringBuffer();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("d~4 ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 35, "", "'_LwqjA+zX_BlH", options0, 32, 32, "org.apache.commons.cli.HelpFormatter$OptionComparator", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.defaultDescPad = 0;
      stringWriter0.flush();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      stringWriter1.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      stringWriter0.append((CharSequence) "--");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 0, "\n");
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      mockPrintWriter0.println(74);
      Options options1 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 34, "0", "", options1, 32, 0, "~7mt+$'<lQq\"");
      helpFormatter0.createPadding(32);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp(3, "' contains an illegal character : '", "' contains an illegal character : '", options0, "[", false);
      helpFormatter0.createPadding(74);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("he option '", options0);
      MockFile mockFile0 = new MockFile("arg", "--");
      StringBuffer stringBuffer0 = new StringBuffer(3);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 103, 34, "");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("yrpN)gq*EpYdt47", 3, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = options0.addOption((String) null, "]1C:@", true, (String) null);
      helpFormatter0.printHelp("]1C:@", options1);
      MockFile mockFile0 = new MockFile("usage: ", "\n");
      MockFile mockFile1 = new MockFile("", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "usage: ", false, "x");
      Options options1 = options0.addOption(option0);
      options1.addOption("x", false, " ");
      options1.hasLongOption("usage: ");
      option0.setValueSeparator('\\');
      Options options2 = options1.addOption("arg", "\n", false, "Wp.a..wg-J");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      boolean boolean0 = true;
      helpFormatter0.printHelp("usage: ", options3, true);
      MockFile mockFile0 = new MockFile((String) null, "--");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("cV", "--", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.defaultDescPad = 0;
      Options options0 = new Options();
      helpFormatter0.printHelp("'_LwqjA+zX_BlH", "", options0, "", false);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption((String) null, true, "");
      helpFormatter1.printHelp("usage: ", options1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 34, 3, "R-N(+smt8T^_V=");
      helpFormatter1.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.defaultDescPad = 0;
      stringWriter0.flush();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2);
      stringWriter2.append((CharSequence) "--");
      mockPrintWriter0.println((float) 0);
      Options options0 = new Options();
      Option option0 = new Option((String) null, (String) null);
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(1142, " ", "2^c", options0, "+ib!}}59(?m", true);
      helpFormatter0.createPadding(0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) " ";
      objectArray0[1] = (Object) "2^c";
      PrintWriter printWriter0 = mockPrintWriter0.printf("8wP", objectArray0);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "", options1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.defaultDescPad = 0;
      Options options0 = new Options();
      helpFormatter0.printHelp("'_LwqjA+zX_BlH", "", options0, "", true);
      options0.addOption("", true, "");
      helpFormatter0.printHelp("The option '", options0);
      helpFormatter0.printHelp(3266, "The option '", "usage: ", options0, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.defaultDescPad = 0;
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 3349, options1, 64, (-3189));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      helpFormatter0.getNewLine();
      helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('Q');
      Options options0 = new Options();
      helpFormatter1.printUsage(printWriter0, 13, "hv~U]wI", options0);
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, (-5053), " ", "--", options0, 1, (-636), "--", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.defaultDescPad = 0;
      Options options0 = new Options();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      helpFormatter0.printHelp("'_LwqjA+zX_BlH", "", options0, "", false);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("usage: ").when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      Options options1 = options0.addOption("", "--", true, "");
      helpFormatter0.printHelp("The option '", options1);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 29, "'_LwqjA+zX_BlH");
      helpFormatter0.findWrapPos("'_LwqjA+zX_BlH", 7, 3134);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 7, "0?jFrG#&r[tSP$", "The option '", options1, 74, 3134, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      int int0 = 0;
      helpFormatter0.defaultDescPad = 0;
      stringWriter0.flush();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      stringWriter1.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      stringWriter0.append((CharSequence) "--");
      mockPrintWriter0.println((float) 1);
      String string0 = ")I";
      Options options0 = new Options();
      Option option0 = new Option("", "");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(1142, ")I", "+Ee%S#NS", options1, "\n", true);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.defaultDescPad = 0;
      stringWriter0.flush();
      stringWriter0.append((CharSequence) "--");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, (Options) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.defaultDescPad = 0;
      Options options0 = new Options();
      Options options1 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "The option '", "The option '", options0, "", false);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.getOptionGroups();
      helpFormatter0.defaultSyntaxPrefix = "kO?$@\"EnjiL{C3";
      StringWriter stringWriter0 = new StringWriter(64);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "kO?$@\"EnjiL{C3", 1, 3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      StringWriter stringWriter2 = new StringWriter();
      stringWriter2.append((CharSequence) "-");
      String string0 = "NO_ARGS_ALLOWED";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 64, 0, "NO_ARGS_ALLOWED");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 18, 1891, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      stringWriter0.append((CharSequence) "usage: ");
      String string0 = "";
      boolean boolean0 = false;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "N5P5x=N>#$/", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\n");
      stringWriter1.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      String string0 = helpFormatter0.defaultOptPrefix;
      stringWriter0.append((CharSequence) "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 13, (-548), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("arg", "arg");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('J');
      stringWriter1.flush();
      StringWriter stringWriter2 = stringWriter0.append((CharSequence) "usage: ");
      StringWriter stringWriter3 = stringWriter0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter3);
      stringWriter2.append((CharSequence) "usage: ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, (-2), "");
      StringBuffer stringBuffer0 = new StringBuffer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ny*cK");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("M_ xARjY6*", (-2), 10);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.getOptionGroups();
      helpFormatter0.defaultSyntaxPrefix = "kO?$@\"EnjiL{C3";
      options0.addOption("", "org.apache.commons.cli.HelpFormatter$OptionComparator", false, "#.wQh^zBvUgbCAd+%");
      List list0 = new LinkedList<String>();
      helpFormatter0.printHelp("hv~U]wI", "hv~U]wI", options0, "");
      helpFormatter0.getNewLine();
      helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth((-4425));
      helpFormatter1.getLongOptPrefix();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('Q');
      helpFormatter2.printUsage(printWriter0, 118, "\n", options0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.defaultDescPad = 0;
      Options options0 = new Options();
      helpFormatter0.printHelp("'_LwqjA+zX_BlH", "", options0, "", false);
      options0.addOption("", "", true, "\"ox;Xj-h6bFt[Ti");
      helpFormatter0.printHelp("The option '", options0);
      MockFile mockFile0 = new MockFile("", "ZAf=%wN jID{$})S");
      MockFile mockFile1 = new MockFile("--", "k -T`{]-bfyo7;v");
      MockFile.createTempFile("The option '", "");
      MockFile mockFile2 = new MockFile(mockFile1, "\n");
      MockFile mockFile3 = new MockFile(" | ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "E'LAb~", options0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.defaultDescPad = 0;
      Options options0 = new Options();
      helpFormatter0.printHelp("'_LwqjA+zX_BlH", "", options0, "", false);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      Options options1 = options0.addOption("", "--", true, "");
      helpFormatter0.printHelp("The option '", options1);
      MockFile mockFile0 = new MockFile("k -T`{]-bfyo7;v", "--");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "The option '", options0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.defaultDescPad = 0;
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", true, "");
      helpFormatter0.printHelp("The option '", options1);
      MockFile mockFile0 = new MockFile("k -T`{]-bfyo7;v", "--");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, (-1), "k -T`{]-bfyo7;v");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      StringWriter stringWriter2 = stringWriter0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      stringWriter2.append((CharSequence) "-");
      MockFile mockFile0 = new MockFile("usage: ", "-");
      MockFile mockFile1 = new MockFile(mockFile0, " ");
      File file0 = MockFile.createTempFile("arg", "`-T9BP}`bx~9j7", (File) mockFile1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-1135), "", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.defaultDescPad = 0;
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", true, "");
      helpFormatter0.printHelp("The option '", options1);
      MockFile mockFile0 = new MockFile("k -T`{]-bfyo7;v", "--");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 31, "", "!q1ZIb3+W$", options0, 31, 31, "The option '");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.defaultDescPad = 0;
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", true, "");
      helpFormatter0.printHelp("The option '", options1);
      MockFile mockFile0 = new MockFile("k -T`{]-bfyo7;v", "--");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "The option '", options0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      StringWriter stringWriter2 = stringWriter0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      stringWriter2.append((CharSequence) "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, 74, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      mockPrintWriter0.append((CharSequence) "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3076, "7B", "M0*", (Options) null, 3117, 0, "M0*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("org.apache.commons.cli.OptionGroup", options0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('6');
      helpFormatter0.printWrapped(printWriter0, 528, 9, "org.apache.commons.cli.OptionGroup");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", options0);
      MockFile mockFile0 = new MockFile("--", ",W9OKvs:;zwg");
      MockFile mockFile1 = new MockFile(mockFile0, "-#:hkF;(G{+,");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, (-1401), " ", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1723), "J\" y5C;0KCkFa;1e)M", "J\" y5C;0KCkFa;1e)M", (Options) null, 34, 44, "mi");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.getOptionGroups();
      helpFormatter0.defaultSyntaxPrefix = "kO?$@\"EnjiL{C3";
      options0.addOption("", "org.apache.commons.cli.HelpFormatter$OptionComparator", false, "#.wQ2h^zBvUgbCAd+%");
      options0.getMatchingOptions("IaZ.MG3m");
      helpFormatter0.printHelp("hv~U]wI", "hv~U]wI", options0, "<E:)*");
      helpFormatter0.defaultLeftPad = (-1076);
      helpFormatter0.setSyntaxPrefix("/5TWM6?");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setNewLine("IaZ.MG3m");
      helpFormatter0.setNewLine("IaZ.MG3m");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", options0, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "--";
      Options options0 = new Options();
      helpFormatter0.printHelp("J\"", "--", options0, "");
      helpFormatter0.setArgName("#X]=l\u0001f|");
      MockFile.createTempFile("#X]=l\u0001f|", "--");
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append((Object) "--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "Ajfds?n|");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append('z');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 32, 32, ":G`lJ5aHP6:o");
      stringBuffer0.append(stringBuffer1);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-1673), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(63, "usage: ", "arg", (Options) null, "&3l 6)*u8u>#)\"0g ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "--";
      Options options0 = new Options();
      helpFormatter0.printHelp("J\"", "--", options0, "");
      helpFormatter0.setArgName("#X]=l\u0001f|");
      MockFile.createTempFile("#X]=l\u0001f|", "--");
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-280), "--", "#X]=l\u0001f|", options0, "--", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 427;
      String string0 = "|z:=RX\"i;]9O}]/\\t";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 427, 427, "|z:=RX\"i;]9O}]/\t");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      helpFormatter0.setOptionComparator((Comparator) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "-";
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.setArgName("");
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultWidth = 3948;
      helpFormatter0.defaultDescPad = 3948;
      helpFormatter0.createPadding(3948);
      helpFormatter0.getOptionComparator();
      helpFormatter0.setWidth(3948);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1909);
      helpFormatter0.setWidth(1909);
      helpFormatter0.rtrim("g93dUa2ye(Ml5j5Y4");
      helpFormatter0.setSyntaxPrefix("g93dUa2ye(Ml5j5Y4");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append('z');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 32, 32, ":G`lJ5aHP6:o");
      stringBuffer0.append(stringBuffer1);
      stringBuffer0.append(386);
      String string0 = "";
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
      helpFormatter0.setWidth(0);
      String string1 = "MT}vn'x";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("El Bj!V}#x%f&OM?\"B", "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'El Bj!V}#x%f&OM?\"B' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1663);
      helpFormatter0.setDescPadding((-1663));
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      int int0 = (-1069);
      stringBuffer0.setCharAt(0, '|');
      Options options0 = new Options();
      int int1 = 1724;
      helpFormatter0.setNewLine("c>YQ");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, (-1069), options0, 1724, 1724);
      int int2 = (-2674);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, (-2674), (-2674), "&2=+y");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("TIDGpsKE@YfHy(SY");
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.setLeftPadding(3420);
      helpFormatter0.getDescPadding();
      helpFormatter0.setWidth(3);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("0EdW]9o4a", "0EdW]9o4a", options0, "", true);
      helpFormatter0.getWidth();
      options0.getMatchingOptions("0+=rF");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("--", "0EdW]9o4a");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "]$5sQIr0y.62{#nc";
      helpFormatter0.defaultNewLine = "]$5sQIr0y.62{#nc";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("]$5sQIr0y.62{#nc", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("q@)Ao7bJ$.Y", options0);
      MockFile mockFile0 = new MockFile("q@)Ao7bJ$.Y", "-");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2355, "q@)Ao7bJ$.Y", options0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.defaultDescPad = 0;
      stringWriter0.flush();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      stringWriter1.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      stringWriter0.append((CharSequence) "--");
      int int0 = 0;
      String string0 = "J\" y5C;0KCkFa;1e)M";
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, "J\" y5C;0KCkFa;1e)M");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "J\"";
      String string1 = "--";
      Options options0 = new Options();
      helpFormatter0.printHelp("J\"", "--", options0, "");
      String string2 = "#X]=l\\1f|";
      helpFormatter0.setArgName("#X]=l\u0001f|");
      String string3 = "";
      File file0 = MockFile.createTempFile("#X]=l\u0001f|", "--");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(file0, "_z5QFWFAP'ov/^Zgt");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // _z5QFWFAP'ov/^Zgt
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1076);
      String string0 = "hv~\\U]wI";
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.getOptionGroups();
      helpFormatter0.defaultSyntaxPrefix = "kO?$@\"EnjiL{C3";
      boolean boolean0 = false;
      String string1 = "#.wQ2h^zBvUgbCAd+%";
      options0.addOption("", "org.apache.commons.cli.HelpFormatter$OptionComparator", false, "#.wQ2h^zBvUgbCAd+%");
      options0.getMatchingOptions("IaZ.MG3m");
      helpFormatter0.printHelp("hv~U]wI", "hv~U]wI", options0, "<E:)*");
      helpFormatter0.defaultLeftPad = (-1076);
      helpFormatter0.setSyntaxPrefix("/5TWM6?");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setNewLine("IaZ.MG3m");
      helpFormatter0.setNewLine("IaZ.MG3m");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.Option", "E%PX>Bz$}");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // E%PX>Bz$}
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-", " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.setWritable(false, false);
      String string0 = "";
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1937, "");
      mockPrintWriter0.println((float) 74);
      mockPrintWriter0.append((CharSequence) "usage: ");
      String string1 = "fYcD]k3 -O";
      helpFormatter0.setOptPrefix("fYcD]k3 -O");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1937, "^\"EqB");
      helpFormatter0.getDescPadding();
      helpFormatter0.findWrapPos(">", 3, 32);
      String string2 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("Ixv<u", true, "fYcD]k3 -O");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'Ixv<u' contains an illegal character : '<'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Iw}G2dOj<";
      helpFormatter0.setArgName("Iw}G2dOj<");
      int int0 = (-587);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-587));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 565;
      helpFormatter0.setLongOptSeparator(" ] [ long ");
      String string0 = "DQfP$?%ROTM";
      Options options0 = new Options();
      options0.getMatchingOptions("\n");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("5&)Ng4+", "--", true, "f/ekC8\"&8-4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '5&)Ng4+' contains an illegal character : '&'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
      helpFormatter0.printWrapped(printWriter0, 3117, "7B");
      assertEquals("\n7B\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-3441), 0, "1Kg=^glHWb6x']s");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(13, "", "", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = (-4407);
      helpFormatter0.setLongOptPrefix("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }
}
