/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:21:20 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Comparator;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultDescPad = 74;
      helpFormatter1.setNewLine((String) null);
      helpFormatter1.rtrim("usage: ");
      helpFormatter1.getNewLine();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Option option1 = new Option("arg", "   ");
      OptionGroup optionGroup2 = optionGroup1.addOption(option1);
      Options options1 = new Options();
      options0.addOptionGroup(optionGroup2);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), "", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(861);
      helpFormatter0.defaultOptPrefix = "]x";
      helpFormatter0.getWidth();
      Options options0 = new Options();
      helpFormatter0.createPadding(3);
      helpFormatter0.setLongOptPrefix("   ");
      helpFormatter0.printHelp("   ", "   ", options0, "n^n[x");
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setLongOptSeparator("-F.3%e4C74D}%R0uL{");
      helpFormatter0.setWidth(1);
      helpFormatter0.getLeftPadding();
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-440));
      helpFormatter0.getDescPadding();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getNewLine();
      helpFormatter0.getOptionComparator();
      helpFormatter0.createPadding(1);
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("~YAjvtBw", " ", false, "6+1C(u9Z4HgQ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '~YAjvtBw' contains an illegal character : '~'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-979));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Y", (String) null, options0, (String) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 3942;
      Option option0 = new Option((String) null, "-", true, (String) null);
      option0.setArgName("-");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option1 = new Option("arg", "Et<l~S3rm</P{Y", true, "usage: ");
      option1.setArgName("");
      Options options0 = new Options();
      options0.addOption(option1);
      helpFormatter0.printHelp("J_VJ]SzY_&", options0, true);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 74;
      String string0 = "[";
      options0.toString();
      helpFormatter0.printHelp(74, "[", "X9A04JKyk=", options0, "X9A04JKyk=");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 74, "[", "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", options0, 2300, 2300, "X9A04JKyk=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)68;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "--");
      Option option1 = new Option("", true, "");
      optionGroup0.addOption(option1);
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("usage: ", options1, true);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = "";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.setDescPadding((-1871));
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.createPadding(35);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "                                   ");
      int int0 = 7;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("|wkKxl~!Y", false, "^%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '|wkKxl~!Y' contains an illegal character : '|'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.createPadding(1);
      helpFormatter0.getArgName();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getDescPadding();
      String string0 = "";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("--", false, "cqmz>JeuzIBG8iL+7Y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", "", true, "");
      option0.setArgName("");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      Options options0 = new Options();
      options0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      options0.addOption("arg", false, "]");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(">", options1, false);
      Options options2 = new Options();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      int int0 = 74;
      helpFormatter0.setWidth(74);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptPrefix();
      OutputStream outputStream0 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "\n", true, " ");
      option0.setArgName("[-?01^=");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("", true, "arg");
      helpFormatter0.printHelp("usage: ", options1, true);
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1494, "", "--", options1, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("TBx", "--", false, " ");
      Options options0 = new Options();
      helpFormatter0.setWidth((-1));
      helpFormatter0.getLeftPadding();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      int int0 = 17;
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", false, "");
      Option option0 = new Option("", "", false, " ");
      Options options2 = options1.addOption(option0);
      String string0 = "";
      Options options3 = options2.addOption("", true, "");
      // Undeclared exception!
      try { 
        options3.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "\n", true, "usage: ");
      options1.getOptionGroups();
      helpFormatter0.printHelp("\n", (String) null, options1, (String) null, true);
      helpFormatter0.findWrapPos("\n", (-1), 1);
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("kd 8_!bn", (-1), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.defaultDescPad = (-1337);
      Option option0 = new Option("arg", "\n", true, " ");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("usage: ", options1, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-334);
      helpFormatter0.getDescPadding();
      helpFormatter0.getArgName();
      Options options0 = null;
      helpFormatter0.defaultWidth = 264;
      helpFormatter0.defaultWidth = (-1259);
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte) (-126);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = " :: ";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" :: ", (Options) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.findWrapPos("\n", (-1), 1);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2145, ">", (String) null, (Options) null, 74, (-901), "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.findWrapPos("\n", (-1), 1);
      int int0 = helpFormatter0.defaultDescPad;
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.findWrapPos("v4`$?5b", 36, (-1));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-3241);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getNewLine();
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(31, "\n", "<)V2Xf~x8mhw&O>Fn", options0, "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "0T<oM7?2|}]<@_LRKG");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "";
      Option option0 = new Option("arg", "arg", true, "");
      OptionGroup optionGroup1 = new OptionGroup();
      optionGroup1.setRequired(true);
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      options0.addOptionGroup(optionGroup2);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 2, "", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(74, "arg", "arg", options0, "-", false);
      helpFormatter1.createPadding(39);
      StringWriter stringWriter0 = new StringWriter(2);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 2, (-3319), "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.defaultDescPad = 1;
      Options options0 = new Options();
      helpFormatter0.defaultWidth = (-765);
      helpFormatter0.defaultSyntaxPrefix = "kT9iWXz*B?sMt#g(y)}";
      options0.addOption("arg", true, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", options0, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("");
      String string0 = "(ce%@%pZjB[";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("\n", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth(3657);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "org.apache.commons.cli.ParseException", "org.apache.commons.cli.ParseException", options0, "org.apache.commons.cli.ParseException");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "arg";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      mockPrintWriter0.format(locale0, "NO_ARGS_ALLOWED", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-20), "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      int int0 = 74;
      StringWriter stringWriter0 = new StringWriter(2);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      int int1 = 0;
      String string0 = "has already been selected: '";
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "has already been selected: '");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 44, 44);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-88);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)98;
      byte byte0 = (byte) (-97);
      byteArray0[4] = (byte) (-97);
      byteArray0[5] = (byte)77;
      byteArray0[6] = (byte) (-96);
      byteArray0[7] = (byte)56;
      byteArray0[8] = (byte)30;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      helpFormatter0.setLeftPadding((byte)98);
      helpFormatter0.setSyntaxPrefix("ufJXZDuLqP$wl|");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1404));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("b");
      Options options1 = options0.addOption("", "arg", true, "#ye%=$,1R|:N-");
      helpFormatter0.printHelp(74, "usage: ", "usage: ", options0, "b", true);
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 5, options1, 36, 36);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(1400, "4&5^h?MV~ DoL/", "cmdLineSyntax not rovided", options0, "~s^");
      helpFormatter0.findWrapPos(" iSuB`", 2, (-1));
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "cmdLineSyntax not provided";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(" `WH5S]8", "arg", options0, "usage: ", true);
      helpFormatter1.setSyntaxPrefix("");
      int int0 = 114;
      String string1 = "Xf4X*m)>>xP'";
      options0.addOption("", "arg", true, "#ye%=$,1R|:N-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.format("V@;_zqJwEm0C)kf", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 74, options0, (-205), 3);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "~L!k-48";
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("~L!k-48");
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "~L!k-48", options0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("F{-Cq**!\"CPef6Jv", (String) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, false);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printOptions(mockPrintWriter0, 484, options1, 484, 484);
      Options options2 = null;
      String string0 = "";
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 13, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " :: ");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1650, "line.separator");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      Option option0 = new Option((String) null, true, "A");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      options0.getOptions();
      helpFormatter0.printHelp(1208, ">", " ", options0, "6y|Bq2A?jfS.", false);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 118, "X_", "", options0, 18, 18, (String) null, true);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("'");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "arg", "line.separator", options0, (-758), 390, "", true);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.rtrim("");
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
      helpFormatter0.rtrim("\n");
      int int0 = (-2088);
      Options options0 = null;
      int int1 = 10;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (-2088), (Options) null, 1688, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("x3P$qy4Vc$6G*NXQ=", "6veAD}", (Options) null, "$fff ~R&", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getWidth();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      stringBuffer0.setLength(13);
      Options options0 = new Options();
      int int0 = 3466;
      int int1 = 102;
      helpFormatter0.renderOptions(stringBuffer0, 74, options0, 3466, 102);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(">", "\n", (Options) null, ">", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("o8.I@<Ng!,)x4:");
      Option option0 = new Option("arg", true, "v");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "|{>l<SAr3`rr#Dy|U");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption(option0);
      options3.hasLongOption("");
      option0.setRequired(true);
      helpFormatter1.setSyntaxPrefix("org.apache.commons.cli.HelpFormatter");
      helpFormatter0.printHelp(228, ",h]2,0#f56Ay", "--", options3, "org.apache.commons.cli.AlreadySelectedException", false);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 10, options0, 10, 10);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 74, 74, "arg");
      helpFormatter0.renderWrappedText(stringBuffer2, 64, 1071, "");
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ik:9Dh");
      mockPrintWriter0.format("'", (Object[]) null);
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3051, "", "]',e5C]e^@~", options1, 74, 1064, "ik:9Dh", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "ik:9Dh";
      PrintWriter printWriter0 = mockPrintWriter0.format("arg", objectArray0);
      helpFormatter0.printHelp(printWriter0, 1034, "   ", "", options0, 74, 294, " ", true);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("u");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("rU7K6-&39iB", "rU7K6-&39iB", (Options) null, "u");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("u");
      PrintWriter printWriter0 = mockPrintWriter0.format("arg", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 1034, "rU7K6-&39iB", "V&;E``zc", (Options) null, 1, (-2), "u", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Mg>o.V!Acd-");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options0 = new Options();
      helpFormatter0.printHelp("G9)j~-VsNX3^0w", options0, false);
      helpFormatter0.renderWrappedText(stringBuffer0, 253, 253, "IAAB'aG\"lQ.B");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setSyntaxPrefix("9ZNG%o7)AS%%^#Wb/c");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("x34Y");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, (String) null, "9ZNG%o7)AS%%^#Wb/c", options0, 3, 1, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1935), "B'", "org.apache.commons.cli.Util", options0, 29, 2, "B'", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getArgName();
      helpFormatter0.defaultSyntaxPrefix = "--";
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.rtrim("--");
      helpFormatter0.defaultNewLine = "|2*bU?(1[~qVK";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer();
      char[] charArray0 = new char[0];
      stringBuffer0.append(charArray0);
      helpFormatter0.renderWrappedText(stringBuffer0, 244, (-523), "");
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("l=x8*iT\"dp/-00&#9b@");
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("X_", false, "cmdLineSyntax not provided");
      Options options1 = options0.addOption(option0);
      options0.hasLongOption("--");
      option0.setRequired(false);
      helpFormatter0.setSyntaxPrefix("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options2 = options1.addOption("X_", "\n", false, "");
      helpFormatter0.printHelp(99, "]3Sz=Km", "-", options2, "arg", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("rU7K6-&39iB");
      PrintWriter printWriter0 = mockPrintWriter0.format(" ", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 111, "_k\"9 :8Zj", "V&;E``zc", options1, (-2), 74, "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix((String) null);
      Options options0 = new Options();
      helpFormatter0.printHelp(2478, "=I0PZ`wdc-6;", "A CloneNotSupportedException was thrown: ", options0, "usage: ");
      helpFormatter1.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 2495, options1, 1877, (-4035));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "X_";
      Options options0 = new Options();
      Option option0 = new Option("X_", false, "cmdLineSyntax not provided");
      options0.addOption(option0);
      helpFormatter0.setSyntaxPrefix("o8.I@<Ng!,)x4:");
      int int0 = 13;
      Options options1 = new Options();
      String string1 = "A CloneNotSupportedException was thrown: ";
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2), "cmdLineSyntax not provided", "cmdLineSyntax not provided", options0, (-2), 55, "X_");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("X_", false, "cmdLineSyntax not provided");
      Options options1 = options0.addOption(option0);
      options1.hasLongOption("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "X_";
      objectArray0[1] = (Object) "_k\"9 :8Zj";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) "cmdLineSyntax not provided";
      objectArray0[4] = (Object) "_k\"9 :8Zj";
      Object object0 = new Object();
      objectArray0[5] = object0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("arg");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 1563, "mZ#,o_uP^Cl*f|zR~", (String) null, options0, 1479, 2594, "org.apache.commons.cli.ParseException", true);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "\n", true, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup1.setRequired(true);
      helpFormatter0.printHelp(74, "-", "", options1, "t>!%!a 3&{+an", true);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "@<b)R|Q";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " [ARG]");
      helpFormatter0.defaultWidth = (-1621);
      helpFormatter0.getNewLine();
      helpFormatter0.findWrapPos("\n", 340, (-1621));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("X_", false, "cmdLineSyntax not provided");
      Options options1 = options0.addOption(option0);
      options1.hasLongOption("arg");
      option0.setRequired(true);
      helpFormatter0.setSyntaxPrefix("\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options2 = options1.addOption("arg", ",h]2,0#f56Ay", false, "usage: ");
      helpFormatter1.printHelp(3331, "-", "arg", options2, "", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) options1;
      objectArray0[1] = (Object) option0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.format("_k\"9 :8Zj", objectArray0);
      helpFormatter1.printHelp(printWriter0, 50, "arg", "cmdLineSyntax not provided", options0, 3331, 599, ";WZP'AI}IPdVtWj", false);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage(printWriter0, (-1), "]", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Options options1 = new Options();
      options1.addOption("Qf", "~L!k-48", true, "cmdLineSyntax not provided");
      helpFormatter0.printHelp("04.14 ", options1, false);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.printOptions(mockPrintWriter2, 38, options1, 31, 46);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(" `WH5S]8", "arg", options0, "usage: ", true);
      String string0 = "";
      helpFormatter1.setSyntaxPrefix("");
      options0.addOption("arg", "arg", true, "#ye%=$,1R|:N-");
      helpFormatter0.printHelp("--", options0, true);
      URI uRI0 = MockURI.create("");
      URI uRI1 = MockURI.normalize(uRI0);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("UCxE'-|s4", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "\n", true, "--");
      helpFormatter2.defaultSyntaxPrefix = "arg";
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(74, "-", "", options1, "tY!%!a 3&{+an", true);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 74, 3, "");
      // Undeclared exception!
      try { 
        helpFormatter2.renderOptions(stringBuffer1, (-547), options0, (-3592), (-547));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("~L!k-48", "~L!k-48", options0, "", true);
      helpFormatter0.setSyntaxPrefix("");
      Options options1 = new Options();
      options1.addOption("", "--", false, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "\n");
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(114, "~L!k-48", "ilUyQL4>qj", options1, "cmdLineSyntax not provided", true);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("").when(comparator1).toString();
      helpFormatter0.setOptionComparator(comparator1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 31, "cmdLineSyntax not provided", options0);
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("q-[-ywo]C'I9e2_,i/q");
      helpFormatter0.rtrim("j\"4lC( fP^ErEY.");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(" :: ");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 34, options0, (-1864), 3651);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setSyntaxPrefix("9ZNG%o7)AS%%^#Wb/c");
      helpFormatter1.printHelp(9, "xc:@D`7b<2&r?Yd:F", "usage: ", options0, "--", true);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "--");
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(" `WH5S]8", "arg", options0, "usage: ", false);
      helpFormatter1.setSyntaxPrefix("B");
      Options options1 = options0.addOption("", "arg", true, "#ye%=$,1R|:N-");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOption((String) null, "-", false, "cmdLineSyntax not provided");
      helpFormatter0.printHelp(74, "Xf4X*m)>>xP'", (String) null, options0, "Xf4X*m)>>xP'", false);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setSyntaxPrefix("' was specified but an option from this group ");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-2394), "\n", "usage: ", options0, "--", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setSyntaxPrefix("9ZNG%o7)AS%%^#Wb/c");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n");
      helpFormatter1.printHelp(2, "-", " ", options0, "", true);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Options options1 = new Options();
      Options options2 = options1.addOption("Qf", "~L!k-48", true, "cmdLineSyntax not provided");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 3, "org.apache.commons.cli.Util", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "`wV3 xB7ijnbD53I|EF", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(" `WH5S]8", "arg", options0, "usage: ", true);
      helpFormatter1.setSyntaxPrefix("");
      Options options1 = options0.addOption("", "arg", true, "#ye%=$,1R|:N-");
      helpFormatter1.printHelp(74, "cg]3?\",(<7(?hUQ", "", options1, "?/nqZ");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, "OAL", " `WH5S]8", options1, "usage: ", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix((String) null);
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1724, "b-NH&neFg", "`(&,g8P@}", options0, "b-NH&neFg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("");
      Options options1 = options0.addOption("", "arg", true, "#ye%=$,1R|:N-");
      helpFormatter0.printHelp(114, "cmdLineSyntax not provided", "Xf4X*m)>>xP'", options1, "", true);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "\n");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator1).toString();
      helpFormatter0.setOptionComparator(comparator1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 31, "cmdLineSyntax not provided", options0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("o8.I@<Ng!,)x4:");
      Options options0 = new Options();
      helpFormatter0.printHelp(13, "usage: ", "Ta-(t06>\"th &w2#&", options0, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2700), "", "y!", options0, "q-[-ywo]C'I9e2_,i/q", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(" `WH5S]8", "arg", options0, "usage: ", true);
      helpFormatter1.setSyntaxPrefix("");
      Options options1 = options0.addOption("", "arg", true, "#ye%=$,1R|:N-");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "A CloneNotSupportedException was thrown: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(114, "cmdLineSyntax not provided", "Xf4X*m)>>xP'", options1, "", true);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "cmdLineSyntax not provided";
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) helpFormatter1;
      objectArray0[4] = (Object) helpFormatter1;
      objectArray0[5] = (Object) "cmdLineSyntax not provided";
      mockPrintWriter1.printf(locale0, "cmdLineSyntax not provided", objectArray0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printWrapped((PrintWriter) mockPrintWriter1, (-590), "' contains an illegal character : '");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("has already been selected: '").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)49;
      helpFormatter0.getDescPadding();
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte)56;
      mockFileOutputStream0.write(byteArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 1, "cmdLineSyntax not provided", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("X_", false, "cmdLineSyntax not provided");
      Options options1 = options0.addOption(option0);
      options1.hasLongOption("arg");
      option0.clearValues();
      option0.setRequired(true);
      helpFormatter0.setSyntaxPrefix("\n");
      helpFormatter0.printHelp(44, "S", "Z~6.6^dvd%Ca_", options0, "Z~6.6^dvd%Ca_", false);
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("X_", false, "cmdLineSyntax not provided");
      Options options1 = options0.addOption(option0);
      options1.hasLongOption("arg");
      option0.setRequired(true);
      helpFormatter0.setSyntaxPrefix("\n");
      helpFormatter0.printHelp(972, "arg", "X_", options1, "wP0;#.':");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(286, "Z5eAG5[W9pMAG=K", "", options2, "", true);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 74, "usage: ", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      MockFile mockFile0 = new MockFile("-", "-");
      MockFile mockFile1 = new MockFile(mockFile0, "--");
      mockFile1.deleteOnExit();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      mockFileOutputStream0.write(3);
      Object object0 = new Object();
      Locale locale0 = new Locale("-", "{2<GOz&Z%z=v:");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "\"");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-842), "{2<GOz&Z%z=v:", "N}u3eBGPpz", options2, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("X_", false, "cmdLineSyntax not provided");
      Options options1 = options0.addOption(option0);
      options1.hasLongOption("arg");
      option0.setRequired(true);
      helpFormatter0.setSyntaxPrefix("\n");
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "wP0;#.':", "", options0, "wP0;#.':");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("has already been selected: '").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 1, "cmdLineSyntax not provided", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      MockFile mockFile0 = new MockFile("-", "-");
      MockFile mockFile1 = new MockFile(mockFile0, "--");
      mockFile1.deleteOnExit();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("v@");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      mockPrintWriter0.write(" ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 74, "FMR5", options0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(673, "cmLieSyntax not provied", "wP0;#.':", options0, "~L!k-48", true);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 31;
      String string0 = ",t$7cfKh)C*D^";
      int int1 = 1080;
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1080, 31, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      Option option0 = new Option("", (String) null);
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", "", false, "WSb;Lz+R,Cjdh]+");
      Options options3 = options2.addOption("arg", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "", "", options3, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" | ", " | ");
      MockFile mockFile1 = new MockFile(mockFile0, "=hUwJs");
      MockFile mockFile2 = new MockFile("--", "usage: ");
      mockFile2.deleteOnExit();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile2);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      mockFileOutputStream0.write(3);
      Object object0 = new Object();
      Locale locale0 = new Locale("arg", "gf5[ZBfESeK'`");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) "gf5[ZBfESeK'`";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "T_cN0i,DIR;", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printWrapped(printWriter0, 632, "");
      helpFormatter0.getOptPrefix();
      helpFormatter2.getWidth();
      Options options0 = new Options();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp("", "arg", options0, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1102, "", "", (Options) null, "cmdLineSyntax not provided", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-1256), (Options) null, 74, 75);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "@<b)R|Q";
      helpFormatter0.setLongOptSeparator("q&D DE,z?=7,d@xD;|");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " [ARG]");
      helpFormatter0.defaultWidth = (-1621);
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("usage: ", 340, (-1621));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          HelpFormatter helpFormatter0 = new HelpFormatter();
          int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
          MockFile mockFile0 = new MockFile("-", "-");
          MockFile mockFile1 = new MockFile(mockFile0, "--");
          mockFile1.deleteOnExit();
          MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
          MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
          EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("-/-/--");
          byte[] byteArray0 = new byte[8];
          byteArray0[0] = (byte)74;
          byteArray0[1] = (byte) (-120);
          byteArray0[2] = (byte)41;
          byteArray0[3] = (byte)80;
          byteArray0[4] = (byte)3;
          byteArray0[5] = (byte)97;
          byteArray0[6] = (byte)74;
          byteArray0[7] = (byte) (-49);
          FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
          mockFileOutputStream0.write((-970));
          Options options0 = new Options();
          helpFormatter0.createPadding(25);
          helpFormatter0.setLongOptPrefix("");
          helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 25, "{UEuK?Bj)+uk", "{UEuK?Bj)+uk", options0, 1, 0, "5gkA)lK|*v=>e");
          helpFormatter0.printHelp("lx^Buxw@qi0s8N;", "-", options0, "5gkA)lK|*v=>e");
          helpFormatter0.getOptionComparator();
          helpFormatter0.setLeftPadding(0);
          helpFormatter0.setLongOptSeparator("-");
          helpFormatter0.setWidth(0);
          Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
          helpFormatter0.setOptionComparator(comparator0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.defaultWidth = 31;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 31, 31, "usage: ");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("arg");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, false);
      String string0 = null;
      Options options0 = new Options();
      String string1 = "-LBT|H-c{_yxv]}&";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, (String) null, (String) null, options0, "-LBT|H-c{_yxv]}&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      MockFile mockFile0 = new MockFile("-", "-");
      MockFile mockFile1 = new MockFile(mockFile0, "--");
      mockFile1.deleteOnExit();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      mockFileOutputStream0.write((-970));
      Object object0 = new Object();
      Locale locale0 = new Locale("-", "{2<GOz&Z%z=v:");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "{2<GOz&Z%z=v:";
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockFileOutputStream0;
      mockPrintWriter0.printf(locale0, "T_cN0i,DIR;", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 4, "\n");
      helpFormatter1.getOptPrefix();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(" ", " ", options0, "");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("X_", false, "cmdLineSyntax not provided");
      Options options1 = options0.addOption(option0);
      options1.hasLongOption("arg");
      option0.setRequired(true);
      helpFormatter0.setSyntaxPrefix("\n");
      helpFormatter0.printHelp(972, "arg", "X_", options1, "wP0;#.':");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "wP0;#.':", "", options0, "", true);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 1, "cmdLineSyntax not provided", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2157);
      String string0 = " [ARG]";
      Options options0 = new Options();
      String string1 = "%vN)]mg";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2157), "Lg&+<m<@", "Lg&+<m<@", options0, "%vN)]mg", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getNewLine();
      String string0 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null, "usage: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // usage: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setNewLine("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2967, "4n", "", (Options) null, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      MockFile mockFile0 = new MockFile("-", "-");
      MockFile mockFile1 = new MockFile(mockFile0, "--");
      mockFile1.deleteOnExit();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      mockFileOutputStream0.write((-970));
      int int0 = 0;
      String string0 = "{UEuK?Bj)+uk";
      Options options0 = new Options();
      helpFormatter0.createPadding(0);
      String string1 = "";
      helpFormatter0.setLongOptPrefix("");
      mockFile0.getAbsolutePath();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "{UEuK?Bj)+uk", "{UEuK?Bj)+uk", options0, 74, 0, "5gkA)lK|*v=>e");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(861);
      helpFormatter0.defaultOptPrefix = "]x";
      helpFormatter0.getWidth();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg", false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 10);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      Options options0 = new Options();
      int int0 = 101;
      helpFormatter0.createPadding(101);
      int int1 = 0;
      helpFormatter0.setLongOptPrefix("                                                                                                     ");
      String string0 = "-F.3%e4C74D}%R0uL{";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, (String) null, (String) null, options0, 10, 10, "-F.3%e4C74D}%R0uL{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      String string0 = "-";
      MockFile mockFile0 = new MockFile("-", "-");
      MockFile mockFile1 = new MockFile(mockFile0, "--");
      mockFile1.deleteOnExit();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      mockFileOutputStream0.write((-970));
      Options options0 = new Options();
      helpFormatter0.createPadding(0);
      int int0 = 0;
      helpFormatter0.setLongOptPrefix("");
      String string1 = "5gkA)lK|*v=>e";
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "{UEuK?Bj)+uk", "{UEuK?Bj)+uk", options0, 74, 0, "5gkA)lK|*v=>e");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      MockFile mockFile0 = new MockFile("-", "-");
      MockFile mockFile1 = new MockFile(mockFile0, "--");
      mockFile1.deleteOnExit();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      mockFileOutputStream0.write((-970));
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-970), "[ option: ", "[ option: ", options1, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth((-1854));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2157), "Lg&+<m<@", "Lg&+<m<@", options0, "%vN)]mg", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1625);
      int int0 = (-1765);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      String string0 = "arg";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1765), "arg", "org.apache.commons.cli.AlreadySelectedException", options0, "org.apache.commons.cli.AlreadySelectedException");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.createPadding(0);
      helpFormatter0.setDescPadding(0);
      String string1 = "";
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getLeftPadding();
      helpFormatter0.setSyntaxPrefix("");
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(861);
      helpFormatter0.defaultOptPrefix = "]x";
      helpFormatter0.getWidth();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg", false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 10);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) bufferedOutputStream0;
      objectArray0[1] = (Object) mockFileOutputStream0;
      objectArray0[2] = (Object) "]x";
      objectArray0[3] = (Object) "]x";
      objectArray0[4] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "\n", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 44, "]x");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      helpFormatter0.printHelp("", "]x", options0, "6138~4I1F^M0&_6m");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "cmdLineSyntax not provided";
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('o');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      int int0 = (-3183);
      String string1 = "   ";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-3183), (-3183), "   ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter1;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) mockPrintWriter1;
      objectArray0[7] = (Object) mockPrintWriter0;
      objectArray0[8] = (Object) mockPrintWriter1;
      PrintWriter printWriter0 = mockPrintWriter1.printf("usage: ", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 327, "");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(861);
      helpFormatter0.defaultNewLine = "]x";
      helpFormatter0.getWidth();
      helpFormatter0.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.findWrapPos("\n", (-1), 1);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.defaultLeftPad = 118;
      helpFormatter0.setOptionComparator(comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.setSyntaxPrefix("<");
      helpFormatter0.findWrapPos("<", 118, 118);
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 5842;
      char[] charArray0 = new char[9];
      charArray0[0] = 'W';
      charArray0[1] = ',';
      charArray0[2] = 'K';
      charArray0[3] = ',';
      charArray0[4] = '{';
      charArray0[5] = '\"';
      charArray0[6] = 'd';
      charArray0[7] = '?';
      charArray0[8] = '}';
      // Undeclared exception!
      try { 
        stringBuffer0.append(charArray0, 3, 214);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getLongOptPrefix();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append((double) 3);
      String string0 = "";
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "");
      Comparator comparator1 = helpFormatter0.getOptionComparator();
      helpFormatter0.setOptionComparator(comparator1);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasOption(">G7J.");
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("' contains an illegal character : '", options1);
      helpFormatter0.getLongOptSeparator();
      int int0 = (-2613);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, (-2613), (-2613), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 972;
      String string0 = "~L!k-48";
      String string1 = "X_";
      Options options0 = new Options();
      boolean boolean0 = false;
      String string2 = "cmdLineSyntax not provided";
      Option option0 = new Option("X_", false, "cmdLineSyntax not provided");
      Options options1 = options0.addOption(option0);
      options1.hasLongOption("arg");
      option0.setRequired(true);
      helpFormatter0.setSyntaxPrefix("~L!k-48");
      String string3 = "wP0;#.':";
      helpFormatter0.printHelp(972, "~L!k-48", "X_", options1, "wP0;#.':");
      String string4 = "";
      String string5 = "";
      boolean boolean1 = true;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "wP0;#.':", "", options0, "", true);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      int int0 = 0;
      helpFormatter0.defaultWidth = 31;
      String string0 = ",t$7cfKh)C*D^";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 31, ",t$7cfKh)C*D^");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1832);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter1;
      objectArray0[2] = (Object) mockPrintWriter1;
      objectArray0[3] = (Object) byteArrayOutputStream0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) mockPrintWriter1;
      objectArray0[6] = (Object) filterOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter1.printf(locale0, "\n", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 1832, 0, "usage: ");
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.setArgName("arg");
      int int0 = (-2690);
      helpFormatter0.setLeftPadding((-2690));
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptionComparator();
      MockFile mockFile0 = new MockFile(" ", "-");
      mockFile0.toURI();
      mockFile0.setExecutable(true, true);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "\n");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 2178;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 2178, 2178, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "''JV*8$";
      helpFormatter0.setOptPrefix("''JV*8$");
      helpFormatter0.getOptPrefix();
      String string1 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "X..)?V";
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.printHelp("X..)?V", options0);
      String string0 = "b9gS?gZOVA+81!7S&(J";
      options0.getMatchingOptions("b9gS?gZOVA+81!7S&(J");
      helpFormatter0.printHelp("LS&-@7e'iK<", options0);
      helpFormatter0.getLongOptSeparator();
      int int0 = 0;
      helpFormatter0.renderOptions((StringBuffer) null, 0, options0, 0, 0);
      helpFormatter0.setNewLine("");
      helpFormatter0.setOptPrefix("U$/aY ");
      helpFormatter0.printHelp(2790, "LS&-@7e'iK<", "   ", options0, (String) null, false);
      MockFile mockFile0 = new MockFile("-");
      MockFile mockFile1 = new MockFile(mockFile0, "--");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile1, "b9gS?gZOVA+81!7S&(J");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // b9gS?gZOVA+81!7S&(J
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      Options options0 = new Options();
      boolean boolean0 = true;
      String string1 = "";
      helpFormatter0.setOptPrefix((String) null);
      String string2 = "VYhai=xfRz:(CJ0EtI";
      String string3 = "U?pd";
      // Undeclared exception!
      try { 
        options0.addOption("VYhai=xfRz:(CJ0EtI", false, "U?pd");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'VYhai=xfRz:(CJ0EtI' contains an illegal character : '='
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "e+]]x1dK";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("-", true, "<?v1MoU)n-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
