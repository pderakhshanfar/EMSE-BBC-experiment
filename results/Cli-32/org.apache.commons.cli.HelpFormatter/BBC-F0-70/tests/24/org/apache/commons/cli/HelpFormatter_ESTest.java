/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:28:59 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "-");
      option0.setArgName("--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options0 = new Options();
      Options options1 = new Options();
      Options options2 = options1.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(32, "usage: ", "usage: ", options2, "MOU[*1V]ko]x2{4", true);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "-");
      option0.setArgName("--");
      optionGroup0.addOption(option0);
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "\n", "-", options0, "\n", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setSyntaxPrefix("");
      boolean boolean0 = true;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "--");
      options0.addOption(option0);
      optionGroup0.setRequired(true);
      options0.addOptionGroup(optionGroup0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter1, (-2), options0, 1045, 10);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(2);
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setArgName(",^V{yC0u\"");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = true;
      Option option0 = new Option("arg", true, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Option option1 = new Option("a8", false, "s}%oS0cfTU9N6nacMtz");
      optionGroup1.addOption(option1);
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-3083), " ", "Et5_d9:R' ]wur1", options1, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arg");
      helpFormatter0.setWidth(742);
      helpFormatter0.setLeftPadding((-2075));
      MockFile mockFile0 = new MockFile("--", "Z$1dQ)]4D,");
      mockFile0.delete();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 27, "Z$1dQ)]4D,");
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.getWidth();
      helpFormatter0.getWidth();
      helpFormatter0.setLongOptPrefix("]");
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 0, (-2075));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.setArgName("");
      helpFormatter0.getArgName();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-2622);
      Options options0 = new Options();
      String string0 = "";
      Options options1 = options0.addOption("", false, "-");
      String string1 = "<-'<*-c%R0t)5y(;T\".";
      // Undeclared exception!
      try { 
        options1.addOption("<-'<*-c%R0t)5y(;T\".", "org.apache.commons.cli.HelpFormatter$1", true, "[ option: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '<-'<*-c%R0t)5y(;T\".' contains an illegal character : '<'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("*`i\"/zl%R");
      helpFormatter0.setLeftPadding(10);
      boolean boolean0 = true;
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "\n", "\n", options0, "--", false);
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      options0.addOption("J", "arg", true, "-");
      helpFormatter0.rtrim("org.apache.commons.cli.OptionGroup");
      StringWriter stringWriter0 = new StringWriter(74);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 17, "   ");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(" ", " ", options0, " ");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Options options1 = options0.addOption("", " ", false, "xt |bX");
      mockPrintWriter0.println('u');
      int int0 = 0;
      String string0 = "YNi6o*cvsT";
      // Undeclared exception!
      helpFormatter0.printHelp(0, "w", "J", options1, "YNi6o*cvsT");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      options0.getMatchingOptions("");
      String string0 = "y-^Pdw";
      helpFormatter0.getNewLine();
      PrintWriter printWriter0 = null;
      int int0 = 0;
      String string1 = "";
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      int int1 = (-3287);
      int int2 = (-563);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("*`\"/zlM%R");
      helpFormatter0.findWrapPos("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", 10, 29);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.cli.Options");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1);
      byte[] byteArray0 = new byte[1];
      mockFileOutputStream0.write(byteArray0);
      mockPrintStream1.print(true);
      byteArray0[0] = (byte)1;
      mockFileOutputStream0.write(byteArray0);
      mockPrintStream0.print("usage: ");
      mockFileOutputStream0.flush();
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 63, "org.apache.commons.cli.Options", options0);
      helpFormatter0.createPadding(0);
      helpFormatter0.printHelp("&ch", options0, true);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", "--");
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", "arg", options0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      options0.addOption("J", "arg", true, "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "J";
      mockPrintWriter0.format(locale0, "aX#mH=[kEh", objectArray0);
      // Undeclared exception!
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 0, 2, "\n");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      int int0 = 56;
      String string0 = "' contains an illegal character : '";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(56, "' contains an illegal character : '", (String) null, (Options) null, "sZS}y4^2]`4");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 74;
      Options options0 = new Options();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)84;
      helpFormatter0.defaultDescPad = (-2341);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = " m4";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "org.apache.commons.cli.Option", "org.apache.commons.cli.Option", options0, " m4", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("");
      helpFormatter0.defaultArgName = "5wp22";
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "-");
      optionGroup0.setRequired(true);
      optionGroup0.addOption(option0);
      Options options0 = new Options();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "d`{O-HJ@9fm", "E", options0, "d`{O-HJ@9fm", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "k|N34E\"zxJYj7";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2), "k|N34E\"zxJYj7", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getOptPrefix();
      helpFormatter0.getWidth();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      int int0 = 30;
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("usage: ", "-", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arg");
      Options options0 = new Options();
      boolean boolean0 = false;
      options0.addOption("arg", false, "\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      int int0 = (-2);
      String string0 = "[";
      int int1 = 1526;
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) null, 1, "usage: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-880));
      MockFile mockFile0 = new MockFile(" | ", "arg");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" | ", " | ", options0, "t[t1I z.o!WI`5mmDfG");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 403, ")cH!&,I'c9 Pnm");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-849));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("@Y#k,", (String) null, (Options) null, "@Y#k,");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("k", "");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", "", false, "]");
      helpFormatter0.printHelp("]", options2);
      String string0 = helpFormatter0.defaultSyntaxPrefix;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ThE");
      Locale locale0 = Locale.JAPAN;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "\n", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-1577), "", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "org.apacht.f!mmons.cli.Option";
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 1597, options0, 15, 63);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", "--");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption(option0);
      Options options4 = options3.addOption("", "-", false, "--");
      helpFormatter0.printHelp("-", options4);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "usage: ");
      helpFormatter0.setWidth((-916));
      Option option0 = new Option("", "");
      Options options1 = options0.addOption(option0);
      String string0 = "]";
      Options options2 = options1.addOption("arg", "", true, "]");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("]", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("xMPa", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 34, "@3_\":`9D#</d B]MR", "@3_\":`9D#</d B]MR", options0, 34, 34, "@3_\":`9D#</d B]MR");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      String string0 = "!v7g+-81u;1&H'W";
      helpFormatter0.defaultWidth = (-1256);
      helpFormatter0.getWidth();
      int int0 = 3;
      StringBuffer stringBuffer0 = new StringBuffer(3);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1256), 3, ":t0oe!fg?5i3;onx5/");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      helpFormatter0.defaultArgName = "vGZ)g1X|;_Fz!";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("vGZ)g1X|;_Fz!", "", (Options) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("--");
      int int0 = HelpFormatter.DEFAULT_WIDTH;
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      boolean boolean0 = false;
      String string0 = "org.apacht.f!mmons.cli.Option";
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions((PrintWriter) null, 1, options1, 1, 74);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "");
      Options options1 = options0.addOption(option0);
      String string0 = "tYcCTqS3nldMs";
      options1.addOption("tYcCTqS3nldMs", false, "-");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2, "tYcCTqS3nldMs", "tYcCTqS3nldMs", options1, "IV0:f\"B4Mx", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      int int0 = (-1256);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1256), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      String string0 = "";
      String string1 = ">";
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[]}yMZhJl5d!)]MO.", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)108;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setDescPadding((byte) (-1));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)74;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.findWrapPos("", (-1), 185);
      helpFormatter0.getDescPadding();
      helpFormatter0.getNewLine();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getNewLine();
      helpFormatter0.findWrapPos("iBN2,[pD", 185, (-1));
      helpFormatter0.createPadding((byte)55);
      helpFormatter0.rtrim("");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("WkHodOn|W", 1, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("3-U3%yBd>,");
      char[] charArray0 = new char[4];
      charArray0[0] = 'h';
      charArray0[1] = 'J';
      charArray0[2] = 'Q';
      charArray0[3] = 'v';
      mockPrintWriter0.println(charArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      Options options0 = new Options();
      options0.getMatchingOptions("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = new Option("", "");
      options0.addOption(option0);
      helpFormatter1.getNewLine();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp(3, "usage: ", " ", options0, "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "\n", "--", options0, "usage: ", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 2816, "arg", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      options0.getMatchingOptions("usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("E", true, "");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(74, "-", "`qgEd ?<LTke9j-_'", options1, "[ARG...]", true);
      OptionGroup optionGroup1 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("H3");
      int int0 = HelpFormatter.DEFAULT_WIDTH;
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter1;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "org.apacht.f!mmons.cli.Option";
      objectArray0[3] = (Object) "org.apacht.f!mmons.cli.Option";
      objectArray0[4] = (Object) helpFormatter1;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) options0;
      objectArray0[7] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter1.format("usage: ", objectArray0);
      // Undeclared exception!
      helpFormatter1.printUsage(printWriter0, 0, "usage: ", options0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter2.renderOptions(stringBuffer0, (-689), options0, 1, 1);
      // Undeclared exception!
      try { 
        helpFormatter2.renderWrappedText(stringBuffer1, (-25), 3, "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      mockFile0.getAbsolutePath();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "cmdLineSyntax not provided", "@OJEZ>z~L?", options0, 1055, 1106, "@OJEZ>z~L?", false);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 13, (-973), "cmdLineSyntax not provided");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Options options0 = new Options();
      Option option0 = new Option("", "[ option: ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.addOption("ZfAt", "arg", true, "arg");
      helpFormatter0.printHelp("[ option: ", options2);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setSyntaxPrefix("{");
      StringBuffer stringBuffer0 = new StringBuffer("WaA/y");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("");
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      options0.getMatchingOptions("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", (String) null, options0, " ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(" ");
      mockPrintWriter0.append('<');
      Options options1 = options0.addOption((String) null, "usage: ", true, "%(H3ZRP=yL=.e");
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter1, 31, "--", options1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", "--");
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp("\n", "arg", options1, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("v}6DkN0%3,u:");
      mockPrintWriter0.append('N');
      Options options2 = options1.addOption("J", "arg", false, "-");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1076, "", options2);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 1, "usage: ");
      helpFormatter0.findWrapPos("JP", 1, 2797);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.write("\n");
      Options options0 = new Options();
      options0.getMatchingOptions("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = new Option("", "");
      options0.addOption(option0);
      helpFormatter1.getNewLine();
      helpFormatter0.printHelp("usage: ", "\n", options0, "A CloneNotSupportedException was thrown: ");
      helpFormatter1.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      options0.addOption("arg", "ZfAt", true, "arg");
      helpFormatter0.printHelp("$6vh8u5JR7.", options1);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setSyntaxPrefix("usage: ");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 13, ".", options0);
      String string0 = helpFormatter0.defaultArgName;
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      mockPrintWriter1.write("{Y7Wv\"90BByK{ *2");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintStream0, false);
      mockPrintWriter1.println(3);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1958, "EODKY1'AZ-\"=+drwRu?", "/ntfRaQ%1--V'^?wEy,", options0, 1958, 3, "", false);
      helpFormatter1.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 64, "arg", " ", options0, (-1104), (-1104), " ", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      MockFile mockFile0 = new MockFile("", "--");
      mockFile0.setReadOnly();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.write("usage: ");
      Options options0 = new Options();
      options0.getMatchingOptions("The option '");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = new Option((String) null, (String) null);
      Options options1 = options0.addOption(option0);
      helpFormatter1.getNewLine();
      helpFormatter1.printHelp(" ", "eSHRA@_\":{VUhVO@", options1, "'");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", true, (String) null);
      Option option0 = new Option((String) null, "arg", true, "Ei 2bXnK=8aU7?");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(", ", options3, true);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", "--");
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", "arg", options0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options1 = options0.addOption("J", "arg", true, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.setWidth(894);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLeftPadding(31);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, (-2461), "-", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.write("usage: ");
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "_1mX1rnx}{BO", "jtet]x`q`3OFxvM*n", options0, 9, 9, "", false);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "v}6DkN0%3,u:", "%", options0, 1076, 2617, "%");
      Options options1 = new Options();
      helpFormatter0.printHelp("E`~Z_oWnw)>I<Bv", "", options1, "");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("\"<YAK+AYCc'u");
      helpFormatter0.setNewLine("");
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", true, "'");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-625), "E", "'", options1, "#|d$P@", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("--", "usage: ");
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printOptions(mockPrintWriter0, 13, options0, 0, 538);
      int int0 = (-478);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2745, (-478), " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-3371), " ", "o[=:t_@&9-5w%=V17f", options0, 0, (-99), " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("--", "usage: ");
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.printOptions(mockPrintWriter0, 13, options0, 0, 538);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 34, "", "", options0, 0, 34, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.write("\n");
      Options options0 = new Options();
      options0.getMatchingOptions("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = new Option("", "");
      options0.addOption(option0);
      helpFormatter1.getNewLine();
      helpFormatter0.printHelp("tKlB{4f", "v`9H6Ffi*", options0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      options0.getMatchingOptions("");
      String string0 = "y-^Pdw";
      helpFormatter0.getNewLine();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-2353), 0, "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      options0.getMatchingOptions("arg");
      Options options1 = new Options();
      options1.getMatchingOptions("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options2 = new Options();
      helpFormatter1.printHelp(3, "\n", "", options2, "usage: ", true);
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options3 = new Options();
      helpFormatter2.printHelp("arg", (String) null, options0, "");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      String string0 = "8{V";
      options0.getMatchingOptions("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, " ", "[ARG...]", options1, " ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLeftPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      Option option0 = new Option((String) null, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter3.printHelp("i D9ixl_{~cS.", "usage: ", options1, (String) null);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.getMatchingOptions("$6vh8u5JR7.");
      String string0 = helpFormatter0.defaultNewLine;
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(90, "", "S:Q eXyrTuo)", options1, "S:Q eXyrTuo)", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.write("\n");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2210, "_1mX1rnx}{BO", "_1mX1rnx}{BO", options0, 63, 9, "arg", true);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.write("\n");
      Options options0 = new Options();
      helpFormatter0.printHelp(13, "Eu;MTbfewT|5b", "cb\"v\"W", options0, "cb\"v\"W", false);
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("arg", "", options0, "cmdLineSyntax not provided");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("-");
      mockFile0.getCanonicalPath();
      options0.toString();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options1 = new Options();
      options0.getMatchingOptions("].x%y1~f%8X^;,kX");
      helpFormatter0.printHelp(9, ".CmG3t ", ".CmG3t ", options0, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", true);
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", "", options1, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("-");
      options0.toString();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options1 = new Options();
      options0.getMatchingOptions("].x%y1~f%8X^;,kX");
      Options options2 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2210, ").#<(sBGwSH-=", "m,x]^!Ptu:-omHQo", options0, 3285, 2210, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", "", false, "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, (-3169), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      Options options0 = new Options();
      String string0 = "cmdLineSyntax not provided";
      options0.getMatchingOptions("cmdLineSyntax not provided");
      String string1 = "y-^Pdw";
      helpFormatter0.getNewLine();
      PrintWriter printWriter0 = null;
      int int0 = 0;
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator1;
      int int1 = (-2353);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 0, (-2353), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("-");
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 2547, "\n", (String) null, options0, (-5280), 3, "arg", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "kb?v3\"T", "kb?v3\"T", options0, 13, 64, "cmdLineSyntax not provided", false);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1441);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      int int0 = 1;
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "");
      int int1 = 99;
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        options1.addOption("org.apache.commons.cli.HelpFormatter$OptionComparator", "usage: ", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.HelpFormatter$OptionComparator' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setWidth(894);
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.setLeftPadding((-1));
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("0zZ%2G KbS}G");
      PrintWriter printWriter0 = mockPrintWriter0.printf("usage: ", (Object[]) null);
      helpFormatter1.printWrapped(printWriter0, 74, 0, "kb?v3\"T");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("-");
      options0.toString();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printOptions(mockPrintWriter0, 13, options0, 0, 569);
      options0.helpOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "--", "--", options0, 111, 0, " ");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLeftPadding();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 3, "--", "--", options0, 1, 2210, "usage: ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("-");
      options0.toString();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options1 = new Options();
      options0.getMatchingOptions("].x%y1~f%8X^;,kX");
      helpFormatter0.printHelp(1083, ".CmG3t ", "z", options0, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", false);
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("--", "' was specified but an option from this group ", options0, " ");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      options0.getOptions();
      MockFile mockFile0 = new MockFile("-");
      options0.toString();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = (-3538);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 2679, options0, (-3538), 2679);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("");
      helpFormatter1.getLeftPadding();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 3, "org.apache.commons.cli.Option", "--", options0, 1, 2210, "usage: ", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(2);
      Options options0 = new Options();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultOptPrefix = ")AF;WZvt58t";
      Options options0 = new Options();
      helpFormatter0.findWrapPos(".CmG3t ", 12, 12);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim((String) null);
      helpFormatter1.setArgName("arg");
      helpFormatter1.getNewLine();
      helpFormatter0.getLeftPadding();
      MockFile.createTempFile("e'a8'cb('*V;}o5", "-");
      String string0 = null;
      URI uRI0 = MockURI.aFTPURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.createPadding(4358);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1278), string0, "", (Options) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("$h1_");
      helpFormatter0.defaultArgName = "$h1_";
      helpFormatter0.setLongOptPrefix("arg");
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      options0.getOption(" ");
      options0.getMatchingOptions("");
      helpFormatter0.printHelp("yX@C azTI=DI+$", " | ", options0, "6(^(!|;W?E");
      helpFormatter0.printHelp("$h1_", "yX@C azTI=DI+$", options0, "");
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringBuffer stringBuffer0 = new StringBuffer("j~$1k4Yq]Y33EnKL");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 65, options0, 0, 58);
      stringBuffer1.setLength(3);
      Option option0 = new Option("", "-");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setSelected(option0);
      helpFormatter0.renderOptions(stringBuffer1, 65, options0, 15, 170);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("$h1_");
      helpFormatter0.defaultArgName = "$h1_";
      helpFormatter0.setLongOptPrefix("arg");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      options0.getMatchingOptions("usage: ");
      helpFormatter0.printHelp("--", "yX@C azTI=DI+$", options0, "yX@C azTI=DI+$");
      helpFormatter0.printHelp("arg", "arg", options0, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter1.rtrim("X{hZqrGK#T&Ex@3");
      helpFormatter1.getWidth();
      helpFormatter0.getNewLine();
      helpFormatter1.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.printHelp(9, "f_n}j4Wr", "f_n}j4Wr", options0, "f_n}j4Wr");
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 488, 488);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setWidth(894);
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.setLeftPadding((-1));
      String string0 = "";
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
      String string1 = "";
      String string2 = "";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("\n", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      options0.getMatchingOptions("$6vh8u5JR7.");
      Options options1 = options0.addOption("arg", "--", true, "^");
      Options options2 = options1.addOption("arg", "ZfAt", true, "arg");
      options1.hasLongOption((String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printHelp("$6vh8u5JR7.", options1);
      StringBuffer stringBuffer0 = new StringBuffer("has already been selected: '");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 2, options2, 2, 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile(" ");
      options0.toString();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = 13;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]";
      objectArray0[2] = (Object) ")AF;WZvt58t";
      PrintWriter printWriter0 = mockPrintWriter0.printf(" ", objectArray0);
      helpFormatter0.printOptions(printWriter0, 0, options0, 2914, 13);
      String string0 = "xy?L4^1V=n7^ov|@@";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 2914, "xy?L4^1V=n7^ov|@@", "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", options0, (-67), (-1883), "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("~2$Kl6i#jj_Bq");
      String string0 = "y-^Pdw";
      helpFormatter0.setOptPrefix("_n*GnXIMd??A!R");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getNewLine();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) null, 74, 932, "w)H)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(9, "-", "-", options0, "-");
      helpFormatter0.createPadding(3);
      helpFormatter0.findWrapPos("arg", (-2), 9);
      helpFormatter0.rtrim("   ");
      helpFormatter0.setArgName("");
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
      String string0 = "";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setOptPrefix("kmR\"");
      helpFormatter0.getNewLine();
      PrintWriter printWriter0 = null;
      int int0 = (-2353);
      String string0 = "fg4#79vSX<nn";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1983, 1983, "fg4#79vSX<nn");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("$h1_");
      helpFormatter0.defaultArgName = "$h1_";
      helpFormatter0.setLongOptPrefix("arg");
      Options options0 = new Options();
      options0.getMatchingOptions("");
      helpFormatter0.printHelp("yX@C azTI=DI+$", " | ", options0, "6(^(!|;W?E");
      helpFormatter0.printHelp("$h1_", "yX@C azTI=DI+$", options0, "");
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.renderOptions((StringBuffer) null, 0, options0, 0, 17);
      int int0 = 9;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 32, 9, "6(^(!|;W?E");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "--";
      helpFormatter0.setLongOptSeparator("");
      MockFile mockFile0 = new MockFile("usage: ", "uiAFA_0|4\"i79F9P6");
      MockFile mockFile1 = new MockFile(mockFile0, "K}<Imh<*SAy_f");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile1, "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n");
      helpFormatter0.setArgName("");
      helpFormatter0.rtrim("");
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      helpFormatter0.printHelp("]", options0, false);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setSyntaxPrefix("");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 2526, 2526, "org.apache.commons.cli.OptionGroup");
      int int0 = 0;
      int int1 = 33;
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = new Option("", "[", true, "usage: ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options2.addOption("org.apache.commons.cli.OptionGroup", "arg", true, "org.apache.commons.cli.Option");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.OptionGroup' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" | ");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.format(">", objectArray0);
      helpFormatter0.printUsage(printWriter0, 66, "");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("-");
      options0.toString();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printOptions(mockPrintWriter0, 13, options0, 0, 569);
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "", "", options0, 13, 0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      options0.getMatchingOptions("$6vh8u5JR7.");
      Options options1 = options0.addOption("arg", "--", false, "^");
      options1.addOption("arg", "ZfAt", false, "arg");
      options1.hasLongOption((String) null);
      helpFormatter0.printHelp("$6vh8u5JR7.", options1);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setSyntaxPrefix("usage: ");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2262), (-2262), "org.apache.commons.cli.OptionGroup");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("arg");
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, "0'vK2~{,Zu}zPE0yh", "arg", options0, "'", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      options0.getMatchingOptions("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("NO_ARGS_ALLOWED", "NO_ARGS_ALLOWED", (Options) null, "NO_ARGS_ALLOWED");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      Options options1 = options0.addOption(option0);
      options1.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix(" ");
      helpFormatter0.rtrim(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-287));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "(') q*Sd(md}";
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-107));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      int int0 = (-2);
      char[] charArray0 = new char[3];
      charArray0[0] = '[';
      charArray0[1] = 'q';
      charArray0[2] = 'S';
      mockPrintWriter0.write(charArray0);
      String string0 = "2Tt|m1yq-yng8>";
      int int1 = 44;
      String string1 = "^H2\\z}> &]'m3`U";
      String string2 = "";
      Options options0 = new Options();
      Option option0 = new Option("arg", "");
      options0.addOption(option0);
      boolean boolean0 = true;
      option0.setRequired(true);
      String string3 = "";
      // Undeclared exception!
      try { 
        option0.addValue(" ");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("-");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setWidth(894);
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setLeftPadding(31);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = helpFormatter0.defaultArgName;
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.printHelp(9, "f_n}j4Wr", "f_n}j4Wr", options0, "f_n}j4Wr");
      helpFormatter0.setLeftPadding(9);
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 488, 488);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setWidth(894);
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.setLeftPadding((-1));
      Options options0 = new Options();
      String string0 = "!uc')H";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(285, "", "org.apache.commons.cli.HelpFormatter", options0, "!uc')H");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1, (String) null, "TXl1BpjEd5T^-d", options0, 1, 1, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "NO_ARGS_ALLOWED", (Options) null, "NO_ARGS_ALLOWED");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-274);
      helpFormatter0.setDescPadding((-274));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(".KdhZF", ".KdhZF", options0, "kF%Zt0\";EjOt^j2H", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      MockFile mockFile0 = new MockFile(" | ");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "[");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // [
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1517), "", "org.apache.commons.cli.HelpFormatter$OptionComparator", (Options) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("E`b8.f2/Bc9*\"");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ", 1, 3);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      Locale locale0 = Locale.ITALY;
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) printWriter0;
      objectArray0[1] = (Object) locale1;
      PrintWriter printWriter1 = mockPrintWriter1.printf(locale1, "NO_ARGS_ALLOWED", objectArray0);
      helpFormatter0.printWrapped(printWriter1, 1570, "J85gO]qD]?[hX`");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.flush();
      StringWriter stringWriter1 = stringWriter0.append('`');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      stringWriter0.write(0);
      mockPrintWriter0.print(true);
      stringWriter0.append((CharSequence) "usage: ");
      stringWriter1.append((CharSequence) "\n", 0, 1);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1), 816, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Xdu0[9`pxoDQeta X";
      helpFormatter0.setNewLine("Xdu0[9`pxoDQeta X");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        stringBuffer0.replace(74, 3, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // start > length()
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.Option";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", "w}0L ");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("", "b V0M/qy", false, "%V{l;|'");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, options3, 1443, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      int int0 = 901;
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "arg", 901, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
      helpFormatter0.getLeftPadding();
      String string0 = "";
      helpFormatter0.setLongOptPrefix("");
      int int0 = 0;
      Options options0 = new Options();
      String string1 = "/q 6Tku";
      Option option0 = null;
      try {
        option0 = new Option("/q 6Tku", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '/q 6Tku' contains an illegal character : '/'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1541;
      helpFormatter0.setWidth(1541);
      helpFormatter0.getLongOptPrefix();
      File file0 = MockFile.createTempFile(" [ARG]", "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) "--";
      objectArray0[2] = (Object) "--";
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) helpFormatter0;
      mockPrintWriter0.format(locale0, "--", objectArray0);
      String string0 = "--";
      Options options0 = new Options();
      String string1 = "[ option: ";
      // Undeclared exception!
      try { 
        options0.addOption("[ option: ", "HdtQ?", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '[ option: ' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("-");
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options1 = new Options();
      options0.getMatchingOptions("8{V");
      String string0 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      // Undeclared exception!
      helpFormatter0.printHelp(0, " ", "8{V", options0, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", true);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("-");
      options0.toString();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = 13;
      int int1 = 0;
      helpFormatter0.printOptions(mockPrintWriter0, 13, options0, 0, 569);
      helpFormatter0.printHelp("a+Fs1", "a+Fs1", options0, "", true);
      MockPrintWriter mockPrintWriter1 = null;
      try {
        mockPrintWriter1 = new MockPrintWriter((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("*`\"/zlM%R");
      Options options0 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      LinkedList<Option> linkedList0 = new LinkedList<Option>();
      helpFormatter0.printHelp(3, "\n", (String) null, options0, "usage: ", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, options0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.printHelp(9, "f_n}j4Wr", "f_n}j4Wr", options0, "f_n}j4Wr");
      helpFormatter0.rtrim("f_n}j4Wr");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("f_n}j4Wr", (-2), 9);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("$h1_");
      helpFormatter0.defaultArgName = "$h1_";
      String string0 = "arg";
      helpFormatter0.setLongOptPrefix("arg");
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("$h1_", "arg", false, "arg");
      options1.toString();
      String string1 = "9#5YT8GQ";
      File file0 = MockFile.createTempFile("9#5YT8GQ", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      int int0 = 13;
      int int1 = 0;
      helpFormatter0.printOptions(mockPrintWriter0, 13, options0, 569, 0);
      helpFormatter0.printHelp("S}NZkXIo+-T^(", "usage: ", options0, "usage: ", false);
      MockPrintWriter mockPrintWriter1 = null;
      try {
        mockPrintWriter1 = new MockPrintWriter("arg", "aP1Fs4nIdnXMPpzRz\u0007");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // aP1Fs4nIdnXMPpzRz\u0007
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ")AF;WZvt58t";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultOptPrefix = ")AF;WZvt58t";
      Options options0 = new Options();
      String string1 = "cmdLineSyntax not provided";
      options0.getMatchingOptions("cmdLineSyntax not provided");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "'M#o", ".CmG3t ", options0, ".CmG3t ", true);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 868;
      String string0 = "Z\\&,jql%Q8";
      Options options0 = new Options();
      String string1 = "(=L8l5YqV_C#7Io+";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("(=L8l5YqV_C#7Io+", true, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '(=L8l5YqV_C#7Io+' contains an illegal character : '('
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      options0.getMatchingOptions("$6vh8u5JR7.");
      Options options1 = options0.addOption("arg", "--", true, "^");
      options1.addOption("arg", "ZfAt", true, "arg");
      options1.hasLongOption((String) null);
      helpFormatter0.printHelp("$6vh8u5JR7.", options1);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setSyntaxPrefix("--");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2262), (-2262), "org.apache.commons.cli.OptionGroup");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("TL4Z~x'Kg8", (-2170), 1811);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("$h1_");
      helpFormatter0.defaultArgName = "$h1_";
      helpFormatter0.setLongOptPrefix("arg");
      helpFormatter0.getOptionComparator();
      String string0 = "yX@C azTI=\\DI+$";
      String string1 = " | ";
      Options options0 = new Options();
      String string2 = "";
      options0.getMatchingOptions("");
      helpFormatter0.printHelp("yX@C azTI=DI+$", " | ", options0, "6(^(!|;W?E");
      helpFormatter0.printHelp("$h1_", "yX@C azTI=DI+$", options0, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setSyntaxPrefix("");
      String string1 = "7x;L?C8Ebhns67^-_";
      Options options0 = new Options();
      helpFormatter0.printHelp("v.+okPq^g<fdWs", "7x;L?C8Ebhns67^-_", options0, "", false);
      String string2 = "";
      // Undeclared exception!
      try { 
        options0.addOption("[", false, "*TT,iT]l");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
