/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:33:53 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.net.URISyntaxException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, (String) null, true, "\"");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      option0.setArgName("\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", options0);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 6, " :: ", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, (String) null, true, "\"");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      option0.setArgName("\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", options0);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, (-1013), " :: ", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('u');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Locale locale0 = new Locale("", "arg", "");
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "--", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 3121, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", "has already been selected: '");
      Options options2 = options1.addOption(option0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Options options3 = options2.addOption("arg", (String) null, false, (String) null);
      Options options4 = options3.addOption("z5LlJ87hw", false, "z5LlJ87hw");
      helpFormatter0.printHelp("z5LlJ87hw", options4, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("has already been selected: '", options2);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(74, "", "EZ{N_oMm*2>|tv", options3, "$IJ(,|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, (String) null, true, "\"");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      option0.setArgName("arg");
      helpFormatter0.printHelp("--", "--", options1, "--", true);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-607));
      String string0 = helpFormatter0.defaultSyntaxPrefix;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("usage: ", "usage: ", options0, "[ Options: [ short ", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      helpFormatter0.printHelp(" ", (Options) null);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", options0, false);
      MockFile mockFile0 = new MockFile("--");
      MockFile.createTempFile("usage: ", "TJ03Z", (File) mockFile0);
      helpFormatter0.defaultLeftPad = 0;
      int int0 = (-1053);
      Options options1 = null;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('*');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 6, (-3034), "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.getOptPrefix();
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptPrefix();
      String string0 = "";
      Options options0 = new Options();
      String string1 = "";
      Option option0 = null;
      try {
        option0 = new Option("D7kY{?^t&T", "", false, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'D7kY{?^t&T' contains an illegal character : '{'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("-", "--", (Options) null, "-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-2518));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, " ", " ", options0, "TI]!Aig{d");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      String string0 = "arg";
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", options0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("\n", options0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 1;
      options0.getOptionGroups();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 3, options0, 1, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options1 = new Options();
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.Util", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append('}');
      helpFormatter1.findWrapPos("HKDJXu3m aO4O|ny=-", 3, 3);
      helpFormatter1.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, (-1), " ", " | ", options1, 187, 74, "Xxz.\"z.?j9", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options1 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("'");
      helpFormatter0.setOptPrefix("'");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "'", "p3f^7C!dC", options1, 13, 13, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      int int0 = 44;
      stringBuffer0.append(false);
      stringBuffer0.append((CharSequence) "-");
      stringBuffer0.append((float) 3);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 44, (Options) null, 44, 44);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      options0.getOptions();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format("org.apache.commons.cli.Option", objectArray0);
      int int0 = 2427;
      int int1 = 44;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 2427, (String) null, "org.apache.commons.cli.Option", options0, 44, 2, "<", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "arg");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", "?;,9<0 >Po}a|", true, "usage: ");
      Options options3 = options2.addOption("arg", true, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options4 = options3.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(114, "--", "org.apache.commons.cli.HelpFormatter$1", options4, "Aj/CP)0^a)+r");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 3, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "usage: ", false, (String) null);
      Options options2 = options1.addOption("arg", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "A", false, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      Options options4 = options3.addOption(option0);
      helpFormatter0.printHelp(37, " ", "", options4, "arg");
      helpFormatter0.findWrapPos(" | ", 1, 3);
      helpFormatter1.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", false, "--");
      helpFormatter0.setDescPadding((-79));
      options1.addOption("", false, "");
      options1.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", options1, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.defaultNewLine = null;
      helpFormatter0.setArgName((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = new Options();
      MockFile mockFile0 = new MockFile("The option '");
      mockFile0.toURI();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = 729;
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 729, "The option '", (String) null, options0, 729, (-1637), (String) null, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) null, 0, (-285), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) null, 1, (-285), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      int int0 = 2326;
      Options options0 = new Options();
      helpFormatter0.printHelp(2326, "\n", ".=t'w%k?MPK>2f#8;", options0, ".=t'w%k?MPK>2f#8;");
      helpFormatter0.defaultWidth = (-2591);
      helpFormatter0.getNewLine();
      helpFormatter0.getWidth();
      helpFormatter0.getOptPrefix();
      helpFormatter0.createPadding(1949);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      // Undeclared exception!
      try { 
        stringBuffer0.setLength((-2197));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2197
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte)54;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(10);
      helpFormatter0.defaultLeftPad = 34;
      helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Locale locale0 = Locale.ITALIAN;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "*eG", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 13, "--");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      MockFile mockFile0 = new MockFile("--", "B@w>l_");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "'p>?|", "", options1, 1, 74, "' was specified but an option from this group ", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "r&?])FSd)f<lIK/", " ] [ long ", options1, " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      char[] charArray0 = new char[7];
      charArray0[0] = '{';
      charArray0[1] = 'S';
      charArray0[2] = 'w';
      charArray0[3] = 'Z';
      charArray0[4] = '`';
      charArray0[5] = '{';
      charArray0[6] = '\"';
      stringWriter1.write(charArray0, 1, 3);
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 97, options0, 97, 2289);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName((String) null);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "org.apache.commons.cli.Option", true, "--");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.printHelp(" ", options1);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName((String) null);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "org.apache.commons.cli.Option", true, "--");
      helpFormatter0.printHelp(" ", options1);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("--");
      File file0 = MockFile.createTempFile("usage: ", "TJ03Z", (File) mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      options0.helpOptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      mockFileOutputStream0.write(98);
      Option option0 = new Option("", "--", false, "usage: ");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("SP", "n{/?TTRQwCrv]R6%=", false, "arg");
      options2.helpOptions();
      helpFormatter0.printHelp("TJ03Z", options2, false);
      helpFormatter0.getArgName();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp("\n", "\n", options1, ">", false);
      MockFile mockFile0 = new MockFile(" ", "--");
      MockFile mockFile1 = new MockFile(">", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 821, options2, (-293), (-293));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp("\n", "\n", options1, ">", false);
      MockFile mockFile0 = new MockFile(" ", "--");
      MockFile mockFile1 = new MockFile(">", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      mockPrintWriter0.println('j');
      Options options2 = new Options();
      helpFormatter0.printOptions(mockPrintWriter0, 3, options2, 579, 579);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, (String) null, true, "\"");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("-", "-", options1, "--", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("7CKO}4Xgk)T", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName((String) null);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "NO_ARGS_ALLOWED", true, "--");
      options1.hasLongOption("arg");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(" ", options1);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile((File) null, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, "", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(1, "\n", (String) null, options0, "a", true);
      Options options1 = options0.addOption((String) null, true, "arg");
      options1.helpOptions();
      helpFormatter0.printHelp("4 l4", options0, true);
      helpFormatter0.getArgName();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 74, 1, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("U+fplr'.v&|,Yq&emt");
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", options0);
      helpFormatter0.printHelp(1, " ", "usage: ", options0, "\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("Illegal option name '", options0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      helpFormatter1.setWidth((-1443));
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("U+fplr'.v&|,Yq&emt", "U+fplr'.v&|,Yq&emt", options0, "};Rx[$y0-md");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", options0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("usage: ", options0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 74, 1, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1), "4wz:>\"bmw$rXV");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("--");
      File file0 = MockFile.createTempFile("usage: ", "TJ03Z", (File) mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      options0.helpOptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      mockFileOutputStream0.write(34);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 96, "org.apache.commons.cli.HelpFormatter$OptionComparator", "zIu*A6>4]Y(\" 2", options0, 96, 13, "", false);
      helpFormatter0.printHelp("l/t|PjGA//*4P", options0);
      helpFormatter0.setOptPrefix("");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("--");
      File file0 = MockFile.createTempFile("usage: ", "TJ03Z", (File) mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      options0.helpOptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      mockFileOutputStream0.write(2312);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "$q~%p:", "2<TocWs5-0v", options0, 64, 13, "TJ03Z", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName((String) null);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "NO_ARGS_ALLOWED", true, "--");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(" ", options1);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("U+fplr'.v&|,Yq&emt");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('a');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('a');
      helpFormatter1.printUsage(printWriter0, 7, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "3M'z)}", "MsX}VHD[(Br.hL@tJR&", options0, "/f/FnH`>SaIp;D?LHQ<", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", false, "--");
      helpFormatter0.printHelp("arg", options1, false);
      helpFormatter0.setWidth(103);
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 103, "", "", options0, (-751), 1332, "arg", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("O7y?Ij.Rw:*IfAO?+1");
      String string0 = "r~L%&H";
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("r~L%&H");
      Options options0 = new Options();
      int int0 = 64;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 64, "GGr#U", options0);
      options0.getOption("/");
      char[] charArray0 = new char[0];
      mockPrintWriter0.println(charArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 45, "org.apache.commons.cli.OptionValidator", ",p'!", options0, (-1), (-2), ",p'!");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      String string0 = "";
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, "");
      helpFormatter0.getArgName();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options1.addOption("--", false, "O|#`p#[K[edO*Hf<'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", options0, false);
      options0.helpOptions();
      helpFormatter0.setWidth(74);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 103, "arg", "*,f.fe>H-=", options0, 16, 16, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("O7y?Ij.Rw:*IfAO?+1");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "O7y?Ij.Rw:*IfAO?+1", "arg", options0, 74, 74, "arg");
      helpFormatter0.setOptPrefix("j|@V:wBs%]i`");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("O7y?Ij.Rw:*IfAO?+1");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("arg");
      String string0 = "u,1\"n`diyJn&nMtyBkq";
      Options options0 = new Options();
      String string1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-991), "]`w|IXVL9", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "O7y?Ij.Rw:*IfAO?+1";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("O7y?Ij.Rw:*IfAO?+1");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("arg");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "u,1\"n`diyJn&nMtyBkq", options0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 0, "O7y?Ij.Rw:*IfAO?+1", (String) null, options0, 75, 0, "u,1\"n`diyJn&nMtyBkq", true);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "arg");
      helpFormatter0.printHelp(" ", options1, true);
      options0.helpOptions();
      helpFormatter0.printHelp(":", options1);
      helpFormatter0.setSyntaxPrefix("");
      StringBuffer stringBuffer0 = new StringBuffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      helpFormatter0.setOptPrefix("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getNewLine();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)110;
      helpFormatter0.defaultDescPad = (int) (byte)42;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      Options options1 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp("Q@T6V", options1, false);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("O7y?Ij.Rw:*IfAO?+1");
      Options options0 = new Options();
      mockPrintWriter0.print((double) 3);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "O7y?Ij.Rw:*IfAO?+1", "arg", options0, 74, 74, "arg");
      helpFormatter0.setOptPrefix("j|@V:wBs%]i`");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 101, "O7y?Ij.Rw:*IfAO?+1");
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      Options options0 = new Options();
      String string0 = "j|@V:wBs%]i`";
      helpFormatter0.setOptPrefix("j|@V:wBs%]i`");
      helpFormatter0.getNewLine();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("O7y?Ij.Rw:*IfAO?+1");
      Options options0 = new Options();
      mockPrintWriter0.print((double) 3);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "O7y?Ij.Rw:*IfAO?+1", "arg", options0, 74, 74, "arg");
      helpFormatter0.setOptPrefix("j|@V:wBs%]i`");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 101, "O7y?Ij.Rw:*IfAO?+1");
      helpFormatter0.printHelp(18, "j|@V:wBs%]i`", "", options0, "O7y?Ij.Rw:*IfAO?+1", false);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      String string0 = "";
      Options options1 = options0.addOption("", "", false, "--");
      helpFormatter0.printHelp(" ", options1, true);
      options0.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "j%H?rC.zp,u[L;KH", options1, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", options0, false);
      MockFile mockFile0 = new MockFile("--");
      File file0 = MockFile.createTempFile("usage: ", "TJ03Z", (File) mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      options0.helpOptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      mockFileOutputStream0.write(2312);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2312, "TJ03Z", "$q~%p:", options0, 13, 0, "--", false);
      helpFormatter0.printHelp("arg", options0);
      helpFormatter0.createPadding(0);
      helpFormatter0.rtrim("");
      helpFormatter0.createPadding(12);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      MockFile mockFile0 = new MockFile("");
      mockFile0.toURI();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      int int0 = 2725;
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2725, "Illegal option name '", "", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, (String) null);
      helpFormatter0.printHelp("\n", "\n", options1, ">", false);
      MockFile mockFile0 = new MockFile(" ", "--");
      MockFile mockFile1 = new MockFile(">", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName((String) null);
      Options options0 = new Options();
      String string0 = null;
      options0.addOption((String) null, "NO_ARGS_ALLOWED", true, "--");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setWidth((-766));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(";13-lE\"22T\"whV;$L[");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 13, 13, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName((String) null);
      Options options0 = new Options();
      boolean boolean0 = true;
      helpFormatter0.printHelp("ziK.y;RvwekJkrZyK", options0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("org.apache.commons.cli.OptionValidator", options0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter3.printHelp(1, "my8/9b1d_gw+UDV*@", "", options0, "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", options0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("\n", options0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      options0.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter2.printWrapped((PrintWriter) null, 1, 74, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-970);
      helpFormatter0.setWidth((-970));
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", (Options) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("U+fplr'.v&|,Yq&emt");
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", options0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(" ", options0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(1, " ", "usage: ", options0, "\n");
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp(1, "!K", (String) null, options0, "a", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("O7y?Ij.Rw:*IfAO?+1");
      mockPrintWriter0.write(74);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "O7y?Ij.Rw:*IfAO?+1", "arg", options0, 74, 74, "arg");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.printHelp(22, "CVi9I]NVQoI", "zCPyRd>dm],", options0, "");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("O7y?Ij.Rw:*IfAO?+1");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "O7y?Ij.Rw:*IfAO?+1", "arg", options0, 74, 74, "arg");
      Option option0 = new Option("arg", "arg", false, " ");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp("#W^_i$Txy6", "#W^_i$Txy6", options2, "#W^_i$Txy6");
      helpFormatter0.createPadding(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("");
      // Undeclared exception!
      try { 
        helpFormatter1.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName((String) null);
      Options options0 = new Options();
      options0.addOption((String) null, "NO_ARGS_ALLOWED", true, "--");
      options0.hasLongOption("\n");
      helpFormatter0.setOptPrefix("NO_ARGS_ALLOWED");
      helpFormatter0.findWrapPos("\"PQyY6[JKpv/VE", 115, 1114);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, (String) null);
      helpFormatter0.printHelp("usage: ", "usage: ", options1, ">", false);
      MockFile mockFile0 = new MockFile(" ", "usage: ");
      File file0 = MockFile.createTempFile("arg", (String) null, (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) options1;
      objectArray0[3] = (Object) null;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) file0;
      objectArray0[8] = (Object) helpFormatter0;
      PipedInputStream pipedInputStream0 = new PipedInputStream(74);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(pipedOutputStream0, false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 3415, "<");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName((String) null);
      Options options0 = new Options();
      options0.addOption((String) null, "NO_ARGS_ALLOWED", true, "--");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.printHelp("vJC$;&dA.zL_", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("$", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      options0.addOption("", "", false, "");
      options0.addOption("", "(n^}", true, "usage: ");
      helpFormatter0.printHelp("ReUk}cV@@dOD@J[a.R", options0, true);
      options0.helpOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, (String) null);
      helpFormatter0.printHelp("usage: ", "usage: ", options1, "(^cEQn", false);
      MockFile mockFile0 = new MockFile(" ", "usage: ");
      File file0 = MockFile.createTempFile("arg", (String) null, (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) options1;
      objectArray0[3] = (Object) null;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) file0;
      objectArray0[8] = (Object) helpFormatter0;
      mockPrintWriter0.format("lRH_D'A+I*Ylj", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setWidth(0);
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      helpFormatter0.printHelp("YWp@708#:Il", "YWp@708#:Il", options0, "YWp@708#:Il", false);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, (String) null);
      helpFormatter0.printHelp("usage: ", "usage: ", options1, ">", false);
      MockFile mockFile0 = new MockFile(" ", "usage: ");
      File file0 = MockFile.createTempFile("arg", (String) null, (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) options1;
      objectArray0[3] = (Object) null;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) file0;
      objectArray0[8] = (Object) helpFormatter0;
      mockPrintWriter0.format("lRH_D'A+I*Ylj", objectArray0);
      int int0 = 9;
      String string0 = "usage: ";
      // Undeclared exception!
      try { 
        options1.addOption("org.apache.commons.cli.AlreadySelectedException", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.AlreadySelectedException' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName((String) null);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "NO_ARGS_ALLOWED", true, "--");
      options0.hasLongOption("\n");
      Option option0 = new Option("NO_ARGS_ALLOWED", true, "BK-?D@*u@y");
      options1.addOption(option0);
      helpFormatter0.printHelp("has already been selected: '", "#W^_i$Txy6", options1, (String) null);
      helpFormatter0.createPadding(2548);
      helpFormatter0.rtrim("#W^_i$Txy6");
      helpFormatter0.createPadding(2548);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName((String) null);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "-", true, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.addOption((String) null, (String) null, true, "usage: ");
      options1.hasLongOption("org.apache.commons.cli.ParseException");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options2 = new Options();
      helpFormatter1.printHelp("k6+9$xj", "'Bb16CE-VYNbEtMw", options2, "arg");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", "Kj~y|BY.?6{LVZI?FU ", false, " ");
      options2.hasLongOption("u4>gk#f0^)ub-K>^");
      String string0 = "org.apache.commons.cli.AlreadySelectedException";
      // Undeclared exception!
      helpFormatter0.printHelp("Huxu?;_@i", "Fk(T?00bV\"fv>cn", options2, "org.apache.commons.cli.AlreadySelectedException");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", options0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("\n", options0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.defaultOptPrefix = "7PBGiTo4";
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 2215, "arg", "arg", options1, 3064, 16, "--");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      String string0 = "";
      Options options1 = options0.addOption("", "", false, "--");
      helpFormatter0.printHelp("arg", options1, false);
      options0.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      Options options1 = new Options();
      MockFile mockFile0 = new MockFile("", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter1.format("", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 169, "", "z'[KE]Ecl$O&OnW", options0, 169, 1648, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("O7y?Ij.Rw:*IfAO?+1");
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp("H*MssuY/E=vdyXq\"", (String) null, options0, "C~I_lz8~|n|", true);
      helpFormatter0.createPadding(2548);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      helpFormatter0.setArgName((String) null);
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", options0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("\n", options0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(58, "$c>`VNZ-gc;nuY", "--", options0, "]rM+zH ", true);
      PipedOutputStream pipedOutputStream0 = null;
      try {
        pipedOutputStream0 = new PipedOutputStream((PipedInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", options0, false);
      MockFile mockFile0 = new MockFile("--");
      MockFile.createTempFile("usage: ", "TJ03Z", (File) mockFile0);
      helpFormatter0.defaultLeftPad = 0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      options0.helpOptions();
      helpFormatter0.printHelp("arg", options0);
      helpFormatter0.setSyntaxPrefix("~I(k?94zyy>=J@");
      StringBuffer stringBuffer0 = new StringBuffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.renderOptions(stringBuffer0, 3, options0, 13, 1399);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("yFZy}%", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "O7y?Ij.Rw:*IfAO?+1";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("O7y?Ij.Rw:*IfAO?+1");
      mockPrintWriter0.append((CharSequence) "arg");
      int int0 = 0;
      String string1 = "u,1\"n`diyJn&nMtyBkq";
      Options options0 = new Options();
      options0.getOption((String) null);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "O7y?Ij.Rw:*IfAO?+1", "a&d*", options0, (String) null);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("O7y?Ij.Rw:*IfAO?+1");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("arg");
      Options options0 = new Options();
      String string0 = null;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "u,1\"n`diyJn&nMtyBkq", options0);
      options0.getOption((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 1, "O7y?Ij.Rw:*IfAO?+1", "u,1\"n`diyJn&nMtyBkq", options0, 1, 1, "u,1\"n`diyJn&nMtyBkq");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", options0, false);
      MockFile mockFile0 = new MockFile("--");
      MockFile.createTempFile("usage: ", "TJ03Z", (File) mockFile0);
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.printHelp(561, "S", "The option '", options0, "ATR_#K9[H", true);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1053));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("cmdLineSyntax not provided", options0);
      Option option0 = new Option("", "--", false, "usage: ");
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2875), "--", "", options0, "cmdLineSyntax not provided", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      helpFormatter0.getOptPrefix();
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      mockPrintStream1.println('w');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1, false);
      Locale locale0 = Locale.ITALY;
      String string0 = "[";
      mockPrintWriter0.println("5.'42ex=SkV");
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "[", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-1260), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      String string0 = "";
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "arg";
      Options options0 = new Options();
      boolean boolean0 = true;
      helpFormatter0.printHelp("arg", options0, true);
      MockFile mockFile0 = new MockFile("--");
      MockFile.createTempFile("usage: ", "-", (File) mockFile0);
      int int0 = 355;
      String string1 = "Hj";
      String string2 = ";=";
      // Undeclared exception!
      try { 
        options0.addOption("-", true, ";=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", options0, false);
      MockFile mockFile0 = new MockFile("--");
      File file0 = MockFile.createTempFile("usage: ", "TJ03Z", (File) mockFile0);
      int int0 = 0;
      helpFormatter0.defaultLeftPad = 0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      options0.helpOptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      int int1 = 2312;
      int int2 = 0;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2312, "TJ03Z", "$q~%p:", options0, 13, 0, "arg", false);
      helpFormatter0.printHelp("arg", options0);
      helpFormatter0.setSyntaxPrefix("~I(k?94zyy>=J@");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 1399, "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", options0, false);
      MockFile mockFile0 = new MockFile("--");
      MockFile.createTempFile("usage: ", "TJ03Z", (File) mockFile0);
      helpFormatter0.defaultLeftPad = 0;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('*');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 6, (-3034), "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, (-1053), (Options) null, (-369), (-1053));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", options0, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile mockFile0 = new MockFile("--");
      File file0 = MockFile.createTempFile("usage: ", "TJ03Z", (File) mockFile0);
      int int0 = 0;
      helpFormatter0.defaultLeftPad = 0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      options0.helpOptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      int int1 = 2312;
      int int2 = 0;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2312, "TJ03Z", "$q~%p:", options0, 13, 0, "arg", false);
      helpFormatter0.printHelp("arg", options0);
      helpFormatter0.setSyntaxPrefix("~I(k?94zyy>=J@");
      String string0 = null;
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-3619), "WUB`KIL@zokhDo+Oo", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "arg";
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", options0, false);
      MockFile mockFile0 = new MockFile("--");
      File file0 = MockFile.createTempFile("usage: ", "TJ03Z", (File) mockFile0);
      int int0 = 0;
      helpFormatter0.defaultLeftPad = 0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      options0.helpOptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      int int1 = 2312;
      mockFileOutputStream0.getChannel();
      int int2 = (-3078);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2312, "TJ03Z", "$q~%p:", options0, 13, (-3078), "arg", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "O7y?Ij.Rw:*IfAO?+1";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("O7y?Ij.Rw:*IfAO?+1");
      mockPrintWriter0.append((CharSequence) "arg");
      int int0 = 0;
      String string1 = "u,1\"n`diyJn&nMtyBkq";
      Options options0 = new Options();
      String string2 = null;
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "u,1\"n`diyJn&nMtyBkq", options0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText((StringBuffer) null, 74, 3, "dl_YQ|t/jx");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("F9", "F9", (Options) null, "}WSj'/d;+9o", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setNewLine("");
      helpFormatter0.getWidth();
      helpFormatter0.setOptPrefix("");
      PrintWriter printWriter0 = null;
      String string1 = "Ybj:2@\\";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string2 = ", ";
      boolean boolean0 = false;
      String string3 = "Cannot add value, list full.";
      // Undeclared exception!
      try { 
        options1.addOption(", ", "Ybj:2@", false, "Cannot add value, list full.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ', ' contains an illegal character : ','
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName((String) null);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, (String) null, true, "NO_ARGS_ALLOWED");
      options1.hasLongOption("Y2(Zv9;k#=@O=:");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "", options1, "Fk(T?00bV\"fv>cn");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, ";Dz4}w#@oT+SLVM`");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      String string1 = "3IsE}*J0Fgt";
      Option option0 = null;
      try {
        option0 = new Option("3IsE}*J0Fgt", "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '3IsE}*J0Fgt' contains an illegal character : '}'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("cmdLineSyntax not provided", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(355, "", "", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(13);
      helpFormatter0.setNewLine("!3");
      String string0 = "[ Options: [ short ";
      Options options0 = new Options();
      Options options1 = options0.addOption("NO_ARGS_ALLOWED", false, ",/\u0002~zokQ_ySI*kYFz");
      boolean boolean0 = false;
      options1.addOption("", "-", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      // Undeclared exception!
      try { 
        optionGroup0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.OptionGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 32;
      Options options0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(32, "S`ew|41qF!UF+", "S`ew|41qF!UF+", (Options) null, "i;", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setArgName("");
      String string1 = "";
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getArgName();
      String string2 = null;
      Options options0 = new Options();
      String string3 = "'Jh9EW%-\\R>5w";
      // Undeclared exception!
      try { 
        options0.addOption("-", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "O7y?Ij.Rw:*IfAO?+1";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("O7y?Ij.Rw:*IfAO?+1");
      mockPrintWriter0.append((CharSequence) "arg");
      int int0 = 0;
      String string1 = "u,1\"n`diyJn&nMtyBkq";
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = null;
      options0.getOption((String) null);
      String string3 = "a&d*";
      helpFormatter0.rtrim((String) null);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1), options0, 64, (-3141));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", options0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("usage: ", options0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, "U 7h8;`Yg9oHA=DN", "org.apache.commons.cli.ParseException", options0, "U 7h8;`Yg9oHA=DN", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", options0, false);
      MockFile mockFile0 = new MockFile("--");
      File file0 = MockFile.createTempFile("usage: ", "TJ03Z", (File) mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      Options options1 = options0.addOption((String) null, "\n", false, "usage: ");
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.printHelp("TJ03Z", options1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", (Options) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      helpFormatter0.getDescPadding();
      Options options0 = null;
      // Undeclared exception!
      helpFormatter0.printHelp("yFZy}%", (Options) null);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-84);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "W$ u?jnY\"nY(Ud}";
      helpFormatter0.defaultArgName = "W$ u?jnY\"nY(Ud}";
      helpFormatter0.setWidth((-73));
      helpFormatter0.rtrim("gsN3*N?P0,I=");
      int int0 = 4534;
      String string1 = "P9u#S";
      String string2 = "";
      String string3 = null;
      try { 
        MockURI.URI("usage: ");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in opaque part at index 6: usage: 
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("O7y?Ij.Rw:*IfAO?+1");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "O7y?Ij.Rw:*IfAO?+1", "u,1\"n`diyJn&nMtyBkq", options0, 0, 0, "u,1\"n`diyJn&nMtyBkq");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      helpFormatter0.getDescPadding();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = null;
      // Undeclared exception!
      helpFormatter0.printHelp("yFZy}|", (Options) null);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setLongOptSeparator((String) null);
      Options options0 = new Options();
      String string1 = "f7nf{7*;A!s(7lR";
      // Undeclared exception!
      try { 
        options0.addOption("+TLq/", "-", true, ".G<<JGta@i-kta");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '+TLq/' contains an illegal character : '+'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("qL4t6/fEYr5:7`~9D#");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter1.checkError();
      int int0 = (-2043);
      mockPrintWriter0.println(1);
      helpFormatter0.defaultLongOptPrefix = "H]Is9|";
      String string0 = "vv\\Wk8=}_HZ";
      String string1 = "!4\\gU.n&io?z&";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("-", "aFaXsH!,4{", true, "aFaXsH!,4{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("O7y?Ij.Rw:*IfAO?+1");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "O7y?Ij.Rw:*IfAO?+1", "arg", options0, 74, 74, "arg");
      helpFormatter0.printHelp("O7y?Ij.Rw:*IfAO?+1", options0);
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-52), 61, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      char[] charArray0 = new char[8];
      charArray0[0] = '$';
      charArray0[1] = '<';
      charArray0[2] = 'X';
      charArray0[3] = '6';
      charArray0[4] = '7';
      charArray0[5] = 'I';
      charArray0[6] = '.';
      charArray0[7] = '=';
      mockPrintWriter0.print(charArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-925), 0, "|yO0");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "J'&%*v.5m_%|o";
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("J'&%*v.5m_%|o", (-1502), (-3408));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("U+fplr'.v&|,Yq&emt");
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", options0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(" ", options0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(1, " ", "usage: ", options0, "\n");
      helpFormatter2.printHelp(1, "\n", (String) null, options0, "a", true);
      PipedInputStream pipedInputStream0 = null;
      PipedOutputStream pipedOutputStream0 = null;
      try {
        pipedOutputStream0 = new PipedOutputStream((PipedInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getWidth();
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setLeftPadding(0);
      assertEquals(0, helpFormatter0.defaultLeftPad);
      assertEquals("", helpFormatter0.getLongOptPrefix());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      String string1 = "U1rj";
      Options options0 = new Options();
      helpFormatter0.defaultSyntaxPrefix = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-144), "", "U1rj", options0, "U1rj");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(3256);
      helpFormatter0.setSyntaxPrefix("IzdM1 &ZNv\"PcwGtyD");
      helpFormatter0.setArgName("*^^T].");
      assertEquals(3256, helpFormatter0.defaultLeftPad);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName((String) null);
      String string0 = "";
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, (String) null, true, "NO_ARGS_ALLOWED");
      options1.hasLongOption("Y2(Zv9;k#=@O=:");
      int int0 = 719;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "NO_ARGS_ALLOWED");
      int int1 = (-216);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 719, options0, 719, (-216));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", options0, false);
      MockFile mockFile0 = new MockFile("--");
      File file0 = MockFile.createTempFile("usage: ", "TJ03Z", (File) mockFile0);
      int int0 = 0;
      helpFormatter0.defaultLeftPad = 0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      options0.helpOptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      int int1 = 2312;
      int int2 = 0;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2312, "TJ03Z", "$q~%p:", options0, 13, 0, "arg", false);
      helpFormatter0.printHelp("arg", options0);
      helpFormatter0.setSyntaxPrefix("~I(k?94zyy>=J@");
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1053), (Options) null, (-1053), (-1053));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "{Bvza+_l%e<Bg#KEd8#";
      String string1 = "W7#TQ<|1uwZcY^pPVfI";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }
}
