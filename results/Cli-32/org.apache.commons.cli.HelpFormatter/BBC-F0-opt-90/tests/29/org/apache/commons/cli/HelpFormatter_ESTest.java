/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 10:45:21 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      boolean boolean0 = true;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "arg", true, " ");
      options0.toString();
      optionGroup0.addOption(option0);
      option0.setArgName("");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(74, "\n", "--", options1, "--", true);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1), options1, (-170), (-170));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultNewLine = null;
      helpFormatter0.getNewLine();
      File file0 = MockFile.createTempFile("arg", "");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(file0, "J>j6WS uBga ,z");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // J>j6WS uBga ,z
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.rtrim("\n");
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "arg", true, " ");
      optionGroup0.addOption(option0);
      option0.setArgName("yMjo");
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(74, "\n", "--", options1, "--", true);
      String string0 = ".``ho@9TYPC$*d";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(".``ho@9TYPC$*d", "$=^?Va7A^|");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // $=^?Va7A^|
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1317);
      helpFormatter0.defaultWidth = (-1317);
      helpFormatter0.getWidth();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Illegal option name '", (Options) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.optionComparator = null;
      helpFormatter0.defaultWidth = 115;
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        MockFile.createTempFile("--", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      Options options0 = new Options();
      helpFormatter0.printHelp(1, "\n", "\n", options0, "\n");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setNewLine("");
      options0.addOption("", "-", true, "arg");
      helpFormatter0.rtrim("V_Y63;'rNkPpN");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getOptionComparator();
      Options options1 = new Options();
      helpFormatter0.setLeftPadding((-900));
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 108;
      stringBuffer0.append(true);
      stringBuffer0.reverse();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Pc[TDc@X:}(T_", "org.apache.commons.cli.OptionGroup", options1, "org.apache.commons.cli.OptionGroup");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "arg", true, " ");
      helpFormatter0.defaultDescPad = (-1);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "\n", "--", options1, "arg", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", " ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Option option1 = new Option("", "");
      optionGroup1.addOption(option1);
      options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, "", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", "-", true, "arg");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Locale locale0 = Locale.KOREAN;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "arg", true, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.hasLongOption("");
      helpFormatter0.printHelp(74, "\n", "--", options1, "arg", true);
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 1908, options1, 117, 52);
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer1, 0, options0, 1908, 117);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Locale locale0 = Locale.KOREAN;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "-");
      optionGroup0.addOption(option0);
      Option option1 = new Option((String) null, "arg", true, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(74, "\n", "--", options1, "arg", true);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 44, 44, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter0.getNewLine();
      helpFormatter0.findWrapPos("\n", 1958, (-505));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "\n");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-173);
      helpFormatter0.setLeftPadding((-173));
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.rtrim("//M");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer0, 0, 74, "usage: ");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(336);
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 0, "' was specified but an option from this group ");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Locale locale0 = Locale.KOREAN;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = null;
      optionGroup0.setRequired(true);
      Option option0 = new Option((String) null, true, "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(74, "\n", "", options1, "arg", true);
      int int0 = (-2230);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2230), "", ";4of7N_B'X", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      String string0 = "cmdLineSyntax not provided";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "cmdLineSyntax not provided");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Locale locale0 = Locale.UK;
      boolean boolean0 = true;
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string1 = null;
      String string2 = "~";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 13, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Locale locale0 = Locale.UK;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, true, "~");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter1.printHelp(74, "\n", "", options1, "arg", true);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getArgName();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setWidth((-3694));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "zJN");
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", "", (Options) null, "arg", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer("nChOZ$#M#S#");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "L");
      helpFormatter0.defaultArgName = "L";
      String string0 = helpFormatter0.defaultNewLine;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Locale locale0 = Locale.FRANCE;
      helpFormatter0.getLongOptPrefix();
      int int0 = HelpFormatter.DEFAULT_WIDTH;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\"Lwl{_9!+0OyQ'", "\n", (Options) null, "\"HM46LpkObf763", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = Locale.FRANCE;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "org.apache.commons.cli.Options", "'", options0, "-", false);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 3, 85);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream("(qnSB 8");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = Locale.FRANCE;
      helpFormatter0.rtrim((String) null);
      int int0 = HelpFormatter.DEFAULT_WIDTH;
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "");
      Option option0 = new Option("", "");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("arg", "", options3, "", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2), "", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = Locale.FRANCE;
      Options options1 = options0.addOption("arg", "", false, "org.apache.commons.cli.HelpFormatter$1");
      String string0 = "'";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 1952;
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 3, options1, 1, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", "", options0, "   ");
      helpFormatter0.setLeftPadding(3);
      helpFormatter0.rtrim("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      String string0 = helpFormatter0.defaultArgName;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      String string0 = "F!G;^z$Px1YE";
      StringBuffer stringBuffer0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1, "rN{(t8x");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("`)^@B.&ecfx5SVZ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockFileOutputStream0.release();
      Object object0 = new Object();
      Object object1 = new Object();
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("#-(OJp)2@Qwab}8");
      mockFileOutputStream1.close();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printWrapped((PrintWriter) mockPrintWriter0, 3, 3, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter2.printWrapped((PrintWriter) mockPrintWriter0, 1, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("Pr7Q8UunI^.z'", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("o");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 63, "org.apache.commons.cli.Options", "o", options0, 63, 61, (String) null, false);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("1z~");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "arg", "1z~", options0, 25, (-404), "!KU'hz~_{", false);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getOptionComparator();
      Options options1 = new Options();
      MockFile mockFile0 = new MockFile("--", "0#uq%:(");
      Options options2 = new Options();
      String string0 = null;
      options2.addOption("", false, (String) null);
      helpFormatter0.printHelp("0#uq%:(", (String) null, options2, "`i.:eu7tAw");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding(111);
      helpFormatter0.rtrim("`i.:eu7tAw");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      String string1 = helpFormatter0.defaultArgName;
      String string2 = "yy]<0t$!GEcRR_qeR)j";
      helpFormatter1.printHelp("yy]<0t$!GEcRR_qeR)j", options1, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1603, "arg", options2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      String string0 = helpFormatter0.defaultOptPrefix;
      Options options0 = new Options();
      Options options1 = options0.addOption("c76DlSbA", true, "");
      helpFormatter0.printHelp("-", "c76DlSbA", options0, "`i.:eu7tAw");
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.rtrim("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      String string1 = helpFormatter2.defaultArgName;
      helpFormatter2.printHelp("usage: ", options0, false);
      helpFormatter2.printHelp(64, "--", "", options1, "--");
      helpFormatter1.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("Cannot add value, list full.");
      String string0 = "[";
      Options options0 = null;
      boolean boolean0 = true;
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 64, (Options) null, 64, 64);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "");
      Option option0 = new Option("", "");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("arg", "", options3, "", true);
      helpFormatter0.printHelp(11, "'", "|t", options2, "", false);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Object object0 = new Object();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = Locale.FRANCE;
      mockPrintWriter0.format(locale0, "arg", (Object[]) null);
      Options options1 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 64, "org.apache.commons.cli.Option", "org.apache.commons.cli.Option", options0, 64, 1982, "", false);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Options options0 = new Options();
      Locale locale0 = Locale.FRANCE;
      Options options1 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 13, "\"it", "\"it", options0, 0, 13, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      options0.addOption((String) null, false, "");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      doReturn(0, 0).when(comparator0).compare(any() , any());
      helpFormatter0.setOptionComparator(comparator0);
      Options options1 = options0.addOption("", false, "arg");
      options1.getMatchingOptions("arg");
      helpFormatter0.printHelp(27, "arg", "\n", options0, "arg");
      helpFormatter0.createPadding(27);
      helpFormatter0.printHelp(27, "c76DlSbI", "c76DlSbI", options1, "line.separator");
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "--");
      Options options2 = options1.addOption("", " ", true, "");
      helpFormatter0.printHelp(1817, "org.apache.commons.cli.HelpFormatter$1", " ]", options2, "");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Object object0 = new Object();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options1 = options0.addOption((String) null, false, "4)m}pDBMWFsJdK%Vp7");
      helpFormatter1.printHelp("--", "S$@b#CDHLaF=#>ST>", options1, "");
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.rtrim("");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      String string0 = helpFormatter2.defaultArgName;
      helpFormatter2.printHelp("'", options0, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PrintWriter printWriter0 = null;
      int int0 = (-1665);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, (-1665), "0D", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      helpFormatter0.getOptionComparator();
      Options options1 = new Options();
      helpFormatter0.setLeftPadding(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("-", "|rbo#BKP6,8\"f", options0, "\n");
      Options options2 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 1, 57, "-");
      helpFormatter1.renderWrappedText(stringBuffer1, 3, 1, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) null, 74, (-1815), "&t)qfB");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(3);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockFileOutputStream0.release();
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) helpFormatter0;
      Object object2 = new Object();
      objectArray0[8] = (Object) "usage: ";
      String string0 = "cA\\*JN~m";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("cA*JN~m", "`i.:eu7tAw", options0, "LT]f2zQh;kf+t)");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getOptionComparator();
      options0.addOption("", "--", false, "\n");
      byte[] byteArray0 = new byte[3];
      helpFormatter0.defaultWidth = (int) (byte)11;
      byteArray0[1] = (byte) (-8);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.printHelp("s]@vazX9]plD$HEH']", options0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "", "", options0, "nz");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-1475));
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockFileOutputStream0.release();
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) helpFormatter0;
      Object object2 = new Object();
      objectArray0[8] = (Object) "usage: ";
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "-", objectArray0);
      mockFileOutputStream0.close();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 714, "-", "", options0, 3, 2787, ")xIz2=(4Fki{(");
      helpFormatter1.printWrapped(printWriter0, 1, 605, "\n");
      helpFormatter1.getSyntaxPrefix();
      PrintWriter printWriter1 = printWriter0.format((Locale) null, "-", objectArray0);
      helpFormatter0.printUsage(printWriter1, 64, "arg");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      String string0 = helpFormatter0.defaultOptPrefix;
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "arg");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      options1.addOption("c76DlSbA", true, "xx");
      helpFormatter0.printHelp("-", "c76DlSbA", options1, "`i.:eu7tAw");
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.rtrim("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" by[Fh");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 110, "\n", " ", options1, 110, (-2338), (String) null, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      helpFormatter0.getOptionComparator();
      Options options1 = new Options();
      MockFile mockFile0 = new MockFile("|rbo#BKP6,8Tf", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options2 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 15, "s]@vazX9plD$HEH']", "-", options2, 63, 13, "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "]}p>[LCw", "/a5Fpx$}K/g!R8W$W[", options2, 1306, 74, "-,huC^%9}&ef^X;J~h");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-1475));
      helpFormatter0.getArgName();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[9];
      Locale locale0 = Locale.FRENCH;
      mockPrintWriter0.format(locale0, "usage: ", objectArray0);
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.HelpFormatter$OptionComparator", " ] [ long ");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(mockFile0);
      mockFileOutputStream1.close();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setOptPrefix("arg");
      helpFormatter1.rtrim("kx6nkKeY[u2");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      String string0 = helpFormatter1.defaultArgName;
      helpFormatter1.printHelp(4533, "-", "y^N[doek;.4", options0, "", true);
      helpFormatter3.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-1475));
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockFileOutputStream0.release();
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[0] = (Object) "--";
      Object object2 = new Object();
      objectArray0[8] = (Object) "usage: ";
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "-", objectArray0);
      mockFileOutputStream0.close();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(printWriter0, 117, "l,|Il9d0p)(?T1B>6_", (String) null, options0, 3813, 110, "--", false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      String string0 = helpFormatter1.defaultArgName;
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getOptionComparator();
      Options options1 = new Options();
      helpFormatter0.setLeftPadding((-900));
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.reverse();
      helpFormatter0.renderWrappedText(stringBuffer0, 108, (-3198), "");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Object object0 = new Object();
      Object object1 = new Object();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "hH.`O@";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = object1;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
      MockFile mockFile0 = new MockFile("-", " ] [ long ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      mockFileOutputStream0.close();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(printWriter0, 64, "--", ";58P|M{ja.O%.o", options0, 714, 714, "");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setOptPrefix(" ");
      helpFormatter1.rtrim("");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getOptionComparator();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      String string0 = helpFormatter4.defaultArgName;
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 74, "usage: ");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Object object0 = new Object();
      Object object1 = new Object();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = Locale.FRANCE;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", (Object[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      mockFileOutputStream0.close();
      Object object2 = new Object();
      Object object3 = new Object();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      PrintWriter printWriter1 = mockPrintWriter1.format(locale0, "arg", (Object[]) null);
      mockFileOutputStream0.close();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      boolean boolean0 = false;
      int int0 = 3632;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter1, 74, "arg", "h<7", options1, 3632, (-57), "]", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getOptionComparator();
      Options options1 = new Options();
      String string0 = "";
      MockFile mockFile0 = new MockFile("usage: ", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.flush();
      mockFile0.setWritable(true, true);
      int int0 = 63;
      int int1 = 809;
      String string1 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 809, "", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, 2711, 2076, "org.apache.commons.cli.HelpFormatter$OptionComparator", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      String string0 = helpFormatter0.defaultOptPrefix;
      Options options0 = new Options();
      options0.addOption("8", true, "arg");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, 1, options0, 1, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)32;
      File file0 = MockFile.createTempFile("usage: ", "--");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      mockFileOutputStream0.close();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "arg";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, (int) (byte)11, "`H=:3A]$IR[*yYH9}", "arg", (Options) null, (int) (byte)11, (-3155), "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-1475));
      helpFormatter0.getArgName();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[9];
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) "arg";
      Object object1 = new Object();
      objectArray0[7] = object1;
      objectArray0[8] = (Object) "arg";
      mockPrintWriter0.format((Locale) null, "-", objectArray0);
      mockFileOutputStream0.close();
      Options options0 = new Options();
      char[] charArray0 = new char[15];
      charArray0[2] = '1';
      charArray0[3] = '7';
      helpFormatter0.printHelp(101, "hmhhBw<Js!>\"UcO", "%*H@\"@", options0, "%*H@\"@");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-201), "arg", "arg", options0, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-1475));
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockFileOutputStream0.release();
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[0] = (Object) "--";
      Object object2 = new Object();
      objectArray0[8] = (Object) "usage: ";
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "-", objectArray0);
      mockFileOutputStream0.close();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 714, "-", "", options0, 3, 2787, ")xIz2=(4Fki{(");
      helpFormatter1.printWrapped(printWriter0, 1, 605, "\n");
      helpFormatter1.getSyntaxPrefix();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(3);
      StringBuffer stringBuffer0 = null;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("line.separator", "line.separator", (Options) null, "line.separator");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getNewLine();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      int int0 = (-348);
      helpFormatter0.setLeftPadding((-348));
      StringBuffer stringBuffer0 = null;
      int int1 = 32;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(32, "4Xqk5.5~@DY^]C /#", " ", options0, "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-1475));
      String string0 = ">";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockFileOutputStream0.release();
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[0] = (Object) "--";
      Object object2 = new Object();
      objectArray0[8] = (Object) "usage: ";
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "-", objectArray0);
      mockFileOutputStream0.close();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1475), "-", ">", options0, 74, (-1475), (String) null, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Options options0 = new Options();
      String string0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      Options options1 = new Options();
      String string1 = "s]@vazX9\\plD$HEH']";
      String string2 = "";
      MockFile mockFile0 = new MockFile("IQ4}DW", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.setWritable(true, true);
      int int0 = 63;
      options0.hasLongOption("");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 63, (String) null, "IQ4}DW", options0, 34, (-4254), "[", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getOptionComparator();
      Options options1 = options0.addOption("", "--", false, "\n");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)97;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "' was specified but an option from this group ", options1, "' was specified but an option from this group ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      helpFormatter0.getOptionComparator();
      Options options1 = new Options();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "s]@vazX9\\plD$HEH']";
      MockFile mockFile0 = new MockFile("|rbo#BKP6,8Tf", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.setWritable(true, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 34, "|rbo#BKP6,8Tf", "s]@vazX9plD$HEH']", options1, 34, 63, "s]@vazX9plD$HEH']", false);
      helpFormatter0.printHelp("s]@vazX9plD$HEH']", options1, false);
      int int0 = (-3107);
      String string1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(63, (String) null, "s]@vazX9plD$HEH']", options1, "|rbo#BKP6,8Tf", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, " ", objectArray0);
      MockFile mockFile0 = new MockFile("-", "W*wU");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      mockFileOutputStream0.close();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options2 = new Options();
      Options options3 = options2.addOption("arg", " ", true, "W*wU");
      helpFormatter2.printHelp(printWriter0, 714, "usage: ", "\n", options3, 74, 1, "-");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter2.setOptPrefix((String) null);
      helpFormatter0.rtrim(" | ");
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter2.getOptionComparator();
      HelpFormatter helpFormatter5 = new HelpFormatter();
      String string0 = helpFormatter4.defaultArgName;
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getOptionComparator();
      Options options1 = options0.addOption("", "--", false, "\n");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte) (-29);
      byteArray0[5] = (byte)65;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.printHelp("s]@vazX9]plD$HEH']", options1, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(14, "Anj@h!&)KjWka6M", "Anj@h!&)KjWka6M", options1, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Object object0 = new Object();
      Object object1 = new Object();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "hH.`O@";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = object1;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
      MockFile mockFile0 = new MockFile("-", " ] [ long ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      mockFileOutputStream0.close();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(printWriter0, 64, "--", ";58P|M{ja.O%.o", options0, 714, 714, "");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setOptPrefix(" ");
      helpFormatter1.setOptPrefix("' contains an illegal character : '");
      helpFormatter1.rtrim("' contains an illegal character : '");
      helpFormatter1.getOptionComparator();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      String string0 = helpFormatter1.defaultArgName;
      // Undeclared exception!
      try { 
        helpFormatter3.printOptions(printWriter0, 1, options0, 1, (-1746));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      helpFormatter0.getOptionComparator();
      Options options1 = new Options();
      MockFile mockFile0 = new MockFile("|rbo#BKP6,8Tf", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.setWritable(true, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 34, "|rbo#BKP6,8Tf", "s]@vazX9plD$HEH']", options1, 34, 63, "s]@vazX9plD$HEH']", false);
      helpFormatter0.printHelp("s]@vazX9plD$HEH']", options1, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-3107), (String) null, "s]@vazX9plD$HEH']", options1, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      String string0 = helpFormatter0.defaultOptPrefix;
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "arg");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      options1.addOption("c76DlSbA", true, "xx");
      helpFormatter0.printHelp("-", "c76DlSbA", options1, "`i.:eu7tAw");
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.rtrim("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      String string1 = helpFormatter2.defaultArgName;
      helpFormatter2.printHelp("usage: ", options1, false);
      // Undeclared exception!
      try { 
        helpFormatter2.printUsage((PrintWriter) null, 3, "xx", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      int int0 = 0;
      String string0 = helpFormatter0.defaultOptPrefix;
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "arg");
      options1.addOption("c76DlSbA", true, "xx");
      helpFormatter0.printHelp("-", "c76DlSbA", options1, "`i.:eu7tAw");
      helpFormatter0.setLeftPadding(0);
      StringBuffer stringBuffer0 = null;
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "\n", (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Object object0 = new Object();
      Object object1 = new Object();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "hH.`O@";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 3, (-890), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Object object0 = new Object();
      Object object1 = new Object();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "hH.`O@";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = object1;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
      MockFile mockFile0 = new MockFile("-", " ] [ long ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      mockFileOutputStream0.close();
      mockFileOutputStream0.close();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("--", "hH.`O@", options0, "");
      helpFormatter0.printHelp(printWriter0, 64, "--", ";58P|M{ja.O%.o", options0, 714, 714, "");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setOptPrefix(" ");
      helpFormatter1.rtrim("");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getOptionComparator();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      String string0 = helpFormatter4.defaultArgName;
      helpFormatter4.printHelp("--", "", options0, "usage: ", false);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-1475));
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockFileOutputStream0.release();
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) "--";
      Object object2 = new Object();
      objectArray0[8] = (Object) "usage: ";
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "-", objectArray0);
      mockFileOutputStream0.close();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 714, "-", "", options0, 3, 2787, ")xIz2=(4Fki{(");
      helpFormatter1.printWrapped(printWriter0, 1, 605, "\n");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.rtrim(" ");
      helpFormatter1.getOptionComparator();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      String string0 = helpFormatter1.defaultArgName;
      helpFormatter2.printOptions(mockPrintWriter0, 3, options0, 1, 714);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      helpFormatter0.getOptionComparator();
      Options options1 = new Options();
      helpFormatter0.printHelp("s]@vazX9plD$HEH']", options1, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(14, "Enj@h!&)/KjWka6M", "Enj@h!&)/KjWka6M", options1, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      int int0 = 0;
      String string0 = helpFormatter0.defaultOptPrefix;
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "arg");
      helpFormatter0.printHelp("-", "c76DlSbA", options1, "`i.:eu7tAw");
      helpFormatter0.setLeftPadding(0);
      StringBuffer stringBuffer0 = null;
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "\n", (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-1475));
      helpFormatter0.getSyntaxPrefix();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockFileOutputStream0.release();
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) "usage: ";
      objectArray0[6] = (Object) "usage: ";
      Object object2 = new Object();
      objectArray0[7] = object2;
      objectArray0[8] = (Object) "usage: ";
      mockPrintWriter0.format((Locale) null, "-", objectArray0);
      mockFileOutputStream0.close();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 714, "-", "", options0, 3, 2787, ")xIz2=(4Fki{(");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.rtrim(" ");
      helpFormatter1.getOptionComparator();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = helpFormatter1.defaultArgName;
      helpFormatter1.printHelp("arg", options0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      helpFormatter0.getOptionComparator();
      Options options1 = new Options();
      helpFormatter0.defaultLeftPad = (-833);
      options1.hasOption("\t,lL");
      String string0 = "s]@vazX9\\ulD$HEH']";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(string0, options1, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = Locale.ROOT;
      pipedOutputStream0.flush();
      Object[] objectArray0 = null;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("usage: ");
      String string0 = "--";
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      int int0 = 2092;
      int int1 = (-4649);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 2092, options0, (-4649), 2092);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.renderOptions((StringBuffer) null, 3, options0, 74, 1);
      String string0 = "i|POLv4Cn HnKo+1;t";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("i|POLv4Cn HnKo+1;t", "arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // arg
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.createPadding(0);
      helpFormatter0.setLeftPadding(0);
      StringBuffer stringBuffer0 = null;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 0, (Options) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = Locale.ROOT;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "--", (Object[]) null);
      Options options0 = new Options();
      options0.hasOption(";1,o&)e}");
      helpFormatter0.printUsage(printWriter0, 39, "--", options0);
      helpFormatter0.setLeftPadding(39);
      helpFormatter0.setDescPadding((-431));
      helpFormatter0.getWidth();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptPrefix();
      helpFormatter0.findWrapPos("org.apache.commons.cli.OptionGroup", 44, (-1));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = Locale.ROOT;
      pipedOutputStream0.flush();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(" ");
      char[] charArray0 = new char[1];
      charArray0[0] = '7';
      mockPrintWriter2.print(charArray0);
      int int0 = (-1593);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 7, "cD&tlz2&v)2aD", "--", options0, (-1593), 2200, "Ou;oRR");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-1475));
      helpFormatter0.getSyntaxPrefix();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockFileOutputStream0.release();
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) helpFormatter0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";<KwS");
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(";<KwS", options0, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-1231));
      helpFormatter0.getArgName();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockFileOutputStream0.release();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object2;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "M";
      objectArray0[4] = object1;
      mockPrintWriter0.format((Locale) null, "-", objectArray0);
      mockFileOutputStream0.close();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 92, "usage: ", "--", options0, 92, 1, "-");
      helpFormatter1.setOptPrefix(" | ");
      helpFormatter0.rtrim("--");
      helpFormatter1.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter1.renderOptions(stringBuffer0, (-1851), options0, 2601, 32);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("-");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      helpFormatter0.setLeftPadding(2);
      Options options0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) helpFormatter1;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) helpFormatter1;
      objectArray0[7] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "F'Xxm>`~La", objectArray0);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 13, "F'Xxm>`~La", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = Locale.ROOT;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "--", (Object[]) null);
      Options options0 = new Options();
      helpFormatter0.printUsage(printWriter0, 39, "--", options0);
      helpFormatter0.setLeftPadding(39);
      helpFormatter0.setDescPadding((-431));
      helpFormatter0.getWidth();
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", "--", options0, "usage: ", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("line.separator");
      mockFileOutputStream0.close();
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("usage: ", options0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "%\"f qG>Pt^P,.N&2", "arg", options0, 3, 92, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-1475));
      helpFormatter0.getSyntaxPrefix();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockFileOutputStream0.release();
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) "usage: ";
      objectArray0[6] = (Object) "usage: ";
      Object object2 = new Object();
      objectArray0[7] = object2;
      objectArray0[8] = (Object) "usage: ";
      mockPrintWriter0.format((Locale) null, "-", objectArray0);
      mockFileOutputStream0.close();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 714, "-", "", options0, 3, 2787, ")xIz7`N4Fki{(");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.rtrim(" ");
      helpFormatter1.getOptionComparator();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      String string0 = helpFormatter1.defaultArgName;
      helpFormatter2.printHelp(2787, "org.apache.commons.cli.Option", "", options0, "-");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("line.separator");
      mockFileOutputStream0.close();
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "%\"f qG>Pt^P,.N&2", "arg", options0, 3, 92, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("-");
      Locale locale0 = Locale.GERMANY;
      Object[] objectArray0 = new Object[9];
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) "line.separator";
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) "line.separator";
      objectArray0[6] = (Object) locale0;
      objectArray0[7] = (Object) "line.separator";
      objectArray0[8] = (Object) "-";
      Object object0 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.close();
      int int0 = 0;
      helpFormatter0.setSyntaxPrefix("n6/:j7J'CD,,H,I");
      helpFormatter0.rtrim("t,`yxaob\"");
      helpFormatter0.rtrim("]$DI<)");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("t,`yxaob\"", (-1315), 7);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("-");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Locale locale0 = Locale.GERMANY;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) pipedOutputStream0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) "line.separator";
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) "line.separator";
      objectArray0[6] = (Object) locale0;
      objectArray0[7] = (Object) "line.separator";
      objectArray0[8] = (Object) "-";
      mockPrintWriter0.printf(locale0, "line.separator", objectArray0);
      Object object0 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.close();
      mockPrintWriter0.write(2038);
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "Bi]h", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 37, 9, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("");
      helpFormatter0.rtrim("--");
      helpFormatter0.rtrim("arg");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "hH.`O@");
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("-");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      helpFormatter0.setLeftPadding(2);
      StringBuffer stringBuffer0 = null;
      Options options0 = null;
      String string0 = "";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string1 = "W1/";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, "arg", "W1/", (Options) null, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultArgName = ".){*:>KHxna\"!";
      helpFormatter0.printHelp("usage: ", "LzJxh.m", options0, "&f8-");
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      stringBuffer0.append((Object) " ");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      options0.toString();
      helpFormatter0.defaultSyntaxPrefix = "";
      stringBuffer0.append(true);
      stringBuffer0.insert(1, (-1.0F));
      helpFormatter0.renderOptions(stringBuffer0, (-1), options0, 31, 31);
      helpFormatter0.rtrim("--");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.setLongOptSeparator("&f8-");
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      int int0 = 0;
      helpFormatter0.createPadding(0);
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setLeftPadding(0);
      StringBuffer stringBuffer0 = null;
      Options options0 = null;
      int int1 = 0;
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-4768));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-1475));
      helpFormatter0.getArgName();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockFileOutputStream0.release();
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) "arg";
      objectArray0[6] = (Object) "arg";
      Object object2 = new Object();
      objectArray0[7] = object2;
      objectArray0[8] = (Object) "arg";
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "-", objectArray0);
      mockFileOutputStream0.close();
      Options options0 = new Options();
      String string0 = "%*H@\"@";
      char[] charArray0 = new char[9];
      charArray0[0] = '/';
      charArray0[1] = 'q';
      charArray0[2] = '1';
      charArray0[3] = '7';
      charArray0[4] = 'c';
      charArray0[5] = 'X';
      charArray0[6] = 'e';
      charArray0[7] = 'I';
      charArray0[8] = 'v';
      printWriter0.print(charArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 4, "%*H@\"@", "sK67gX%3TD", options0, 7, (-1), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-1475));
      helpFormatter0.getSyntaxPrefix();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockFileOutputStream0.release();
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) "usage: ";
      objectArray0[6] = (Object) "usage: ";
      Object object2 = new Object();
      objectArray0[7] = object2;
      objectArray0[8] = (Object) "usage: ";
      mockPrintWriter0.format((Locale) null, "-", objectArray0);
      mockFileOutputStream0.close();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 714, "-", "", options0, 3, 2787, ")xIz2=(4Fki{(");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.rtrim(" ");
      helpFormatter1.getOptionComparator();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      String string0 = helpFormatter1.defaultArgName;
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultArgName = ".){*:>KHxna\"!";
      helpFormatter0.printHelp("usage: ", "LzJxh.m", options0, "&f8-");
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      stringBuffer0.append((Object) " ");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      options0.toString();
      stringBuffer0.append(true);
      stringBuffer0.insert(1, (-1.0F));
      helpFormatter0.renderOptions(stringBuffer0, (-1), options0, 31, 31);
      helpFormatter0.rtrim("--");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.setLongOptSeparator("&f8-");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setNewLine("");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("-");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Locale locale0 = Locale.GERMANY;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) pipedOutputStream0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) "line.separator";
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) "line.separator";
      objectArray0[6] = (Object) locale0;
      objectArray0[7] = (Object) "line.separator";
      objectArray0[8] = (Object) "-";
      mockPrintWriter0.printf(locale0, "line.separator", objectArray0);
      Object object0 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.close();
      mockPrintWriter0.write(2038);
      mockPrintWriter0.printf(locale0, "Bi]h", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "4f*cB0>#r");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-1806), "4f*cB0>#r");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(74, "--", "+TBN.WOWnh", (Options) null, "-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = ">=TYp";
      Options options0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      helpFormatter0.printHelp(0, ">=TYp", "_`hG", (Options) null, ",I^1_y>I$,^k/<b");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText((StringBuffer) null, 3, 101, "usage: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-1475));
      helpFormatter0.getArgName();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      MockFile mockFile0 = new MockFile("--", "usage: ");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(mockFile0, true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream1, 74);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream1, true);
      int int0 = (-437);
      mockPrintWriter1.println((-437));
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[2];
      locale0.getUnicodeLocaleAttributes();
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) mockFileOutputStream1;
      mockPrintWriter0.printf(locale0, "arg", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-1), "]", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      int int0 = 44;
      String string0 = "mY5HkvAgHvr8,r9";
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3787, 44, "mY5HkvAgHvr8,r9");
      stringBuffer1.reverse();
      // Undeclared exception!
      try { 
        stringBuffer1.insert(44, (CharSequence) "--", 3787, 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset 44
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(44);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      String string1 = ",t*!v6TS:\\KqVz_>";
      helpFormatter0.setArgName("");
      Options options0 = new Options();
      String string2 = "Dca{A`Ko2@[%@o%";
      // Undeclared exception!
      try { 
        options0.addOption("Dca{A`Ko2@[%@o%", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'Dca{A`Ko2@[%@o%' contains an illegal character : '{'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.defaultLeftPad = 788;
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      int int0 = 0;
      helpFormatter0.createPadding(0);
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setLeftPadding(0);
      StringBuffer stringBuffer0 = null;
      Options options0 = null;
      int int1 = 0;
      helpFormatter0.getDescPadding();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-4768));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      int int0 = 1655;
      helpFormatter0.setLongOptSeparator("f(vs@CAcRFn|ffdF~^");
      helpFormatter0.setDescPadding(1655);
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "org.apache.commons.cli.AlreadySelectedException";
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.AlreadySelectedException");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("line.separator", (String) null, false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'line.separator' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "usage: ";
      helpFormatter0.setNewLine("usage: ");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("usage: ", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-1475));
      helpFormatter0.getArgName();
      String string0 = ">";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockFileOutputStream0.release();
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) "arg";
      objectArray0[6] = (Object) "arg";
      Object object2 = new Object();
      objectArray0[7] = object2;
      objectArray0[8] = (Object) "arg";
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "-", objectArray0);
      mockFileOutputStream0.close();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 31, "r", ">", options0, 31, (-1), "r");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 431;
      String string0 = "6Z+z$Y{ K-fK+i+#";
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(431, "org.apache.commons.cli.HelpFormatter", "", (Options) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.setLongOptSeparator("75.JsZ|)I5%[");
      MockFile mockFile0 = new MockFile("-", "VBfM`Lb'Uj.U.");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 1128);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "org.apache.commons.cli.HelpFormatter$OptionComparator";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "-", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "org.apache.commons.cli.HelpFormatter$OptionComparator", options0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      String string0 = ": rj@2wTMY}/4{$jrNk";
      helpFormatter0.setNewLine(": rj@2wTMY}/4{$jrNk");
      String string1 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("-", "$1e6x\n?-8ze6Yi&", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "   ", options0, "   ", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      int int0 = 0;
      helpFormatter0.createPadding(0);
      helpFormatter0.setLeftPadding(0);
      StringBuffer stringBuffer0 = null;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "\n", (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "HhCeJ$ymht";
      helpFormatter0.setWidth(3204);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("xb{", false, "StMP/~ {MdN-.v4k");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'xb{' contains an illegal character : '{'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.createPadding(0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setLongOptSeparator("usage: ");
      helpFormatter0.getNewLine();
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Option option0 = new Option("arg", " [ARG]", true, ":O~|#~");
      option0.setLongOpt(" ");
      options0.addOption(option0);
      Option option1 = null;
      try {
        option1 = new Option("--", true, "# or8E<hUZ$1:G>DNq");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, 0, "qx+K,L%>:~h'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = Locale.TAIWAN;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "--", (Object[]) null);
      Options options0 = new Options();
      helpFormatter0.printUsage(printWriter0, 39, "--", options0);
      helpFormatter0.setLeftPadding(39);
      helpFormatter0.setDescPadding((-431));
      helpFormatter0.getWidth();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.findWrapPos("", 195, 195);
      assertEquals("", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-669);
      helpFormatter0.setDescPadding((-669));
      String string0 = "Cannot add value, list full.";
      Options options0 = new Options();
      options0.addOption("", true, "Cannot add value, list full.");
      options0.getOptions();
      // Undeclared exception!
      try { 
        options0.addOption("--", "Cannot add value, list full.", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix(" ");
      helpFormatter0.setLongOptSeparator(" ");
      assertEquals(" ", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      String string0 = "' was specified but an option from this group ";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-164), (-164), "' was specified but an option from this group ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 405;
      helpFormatter0.defaultLeftPad = 405;
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setOptPrefix("--");
      helpFormatter0.setSyntaxPrefix("--");
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      String string0 = "/%k)-t08W}N/&E7*QD6";
      boolean boolean0 = true;
      String string1 = "[";
      Option option0 = null;
      try {
        option0 = new Option("/%k)-t08W}N/&E7*QD6", true, "[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '/%k)-t08W}N/&E7*QD6' contains an illegal character : '/'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
