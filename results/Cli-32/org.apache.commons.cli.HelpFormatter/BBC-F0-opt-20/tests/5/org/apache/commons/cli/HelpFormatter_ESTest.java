/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 15:01:09 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.ObjectOutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Am:";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Am:", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.renderWrappedText(stringBuffer0, 0, (-2090), "");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.defaultArgName = "";
      StringBuffer stringBuffer1 = new StringBuffer();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "--");
      optionGroup0.addOption(option0);
      helpFormatter0.setLeftPadding((-1));
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", options0, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.renderWrappedText(stringBuffer0, 25, (-631), " ]");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-4223));
      helpFormatter0.setWidth((-4223));
      helpFormatter0.defaultDescPad = (-4223);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(63);
      helpFormatter0.renderWrappedText(stringBuffer0, 1052, 63, "usage: ");
      helpFormatter0.getArgName();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("ez6N\u0006=6cEd", " :+ecHrGk9)7C&", options0, " :+ecHrGk9)7C&", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "M/:`tYc";
      Option option0 = new Option("arg", true, "M/:`tYc");
      OptionGroup optionGroup1 = new OptionGroup();
      OptionGroup optionGroup2 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup2);
      helpFormatter0.setWidth((-1));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("M/:`tYc", options0, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getLongOptPrefix();
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.setLeftPadding((-2));
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      char[] charArray0 = new char[3];
      helpFormatter0.defaultOptPrefix = "' contains an illegal character : '";
      mockPrintWriter0.print(charArray0);
      String string0 = " ";
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, " ");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("F", true, "arg");
      OptionGroup optionGroup1 = new OptionGroup();
      option0.getValues();
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      Options options1 = options0.addOption("arg", "", false, "");
      options1.addOptionGroup(optionGroup2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(74);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2340), "A", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "7T\\jZl6H";
      helpFormatter0.setNewLine("");
      String string1 = "X:'xDOK:kD";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("X:'xDOK:kD");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "", true, "3np[wJSbHxbL]*>}");
      helpFormatter0.getNewLine();
      Options options2 = options1.addOption("", false, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      Option option0 = new Option("", (String) null);
      Options options4 = options3.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 77, options4, (-494), 32);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(13, "has already been selected: '", "", (Options) null, "]", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      char[] charArray0 = new char[7];
      charArray0[0] = ',';
      charArray0[1] = ',';
      charArray0[2] = ',';
      charArray0[3] = ',';
      MockPrintStream mockPrintStream0 = new MockPrintStream("' contains an illegal character : '");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(bufferedOutputStream0, true);
      mockPrintWriter1.write(charArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      mockPrintWriter1.println();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter1, 74, ",Fg6Taw}");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getLeftPadding();
      helpFormatter3.getDescPadding();
      helpFormatter2.rtrim((String) null);
      helpFormatter0.rtrim("\n");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      File file0 = MockFile.createTempFile("usage: ", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.print((float) 1);
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Options options0 = new Options();
      Option option0 = new Option("d3vUZ", "arg");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("", "usage: ", false, "arg");
      boolean boolean1 = true;
      helpFormatter0.printHelp("i8H/o& Ef ", "p~Mi<Dx", options3, "/B :_&bq3p", true);
      int int0 = 1163;
      String string1 = ">NrbU:w";
      // Undeclared exception!
      try { 
        mockPrintWriter1.print((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      StringBuffer stringBuffer1 = new StringBuffer();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderOptions(stringBuffer1, 3, options0, 74, 74);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("-", "-", options1, "Q");
      helpFormatter1.setOptPrefix("-");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      stringWriter1.append((CharSequence) "--");
      options1.hasShortOption("-");
      stringWriter1.getBuffer();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      helpFormatter1.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Q", ")Ul.o1.", (Options) null, "\n", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      char char0 = ',';
      char[] charArray0 = new char[7];
      charArray0[0] = ',';
      charArray0[1] = ',';
      charArray0[2] = ',';
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(10, "Illegal option name '", "Illegal option name '", (Options) null, "Illegal option name '");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 24, "", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(6);
      MockFile mockFile0 = new MockFile("/D", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "-";
      objectArray0[1] = (Object) "-";
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "-";
      objectArray0[5] = (Object) mockFile0;
      objectArray0[6] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[7] = object0;
      objectArray0[8] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("-", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 6, 2, "      ");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      StringBuffer stringBuffer1 = new StringBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", ".:3opgTyc");
      optionGroup0.setSelected(option0);
      Option option1 = new Option("arg", "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "&", "RGPFQn", options0, "has already been selected: '");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      StringBuffer stringBuffer1 = new StringBuffer();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer2 = new StringBuffer();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, "usage: ");
      helpFormatter0.findWrapPos("usage: ", 1, 3);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", false, "!,Y");
      helpFormatter0.printHelp("!,Y", "", options0, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 43, "K^YniI/zpv<F", "jKU:l}g-dG", options0, (-3101), 10, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 9;
      helpFormatter0.defaultWidth = 9;
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">PSKJK ,Q");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 9, (Options) null, 9, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("X:'xDOK:kD");
      char[] charArray0 = new char[1];
      charArray0[0] = ',';
      mockPrintWriter0.write(charArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 7, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "arg");
      helpFormatter0.printHelp("A CloneNotSupportedException was thrown: ", "kKPv'Vh3(H!", options0, "");
      helpFormatter0.setOptPrefix("ZUXjj$");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      stringWriter2.append((CharSequence) "usage: ");
      options0.hasShortOption("I1");
      stringWriter2.getBuffer();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "kKPv'Vh3(H!", (String) null, options1, 43, (-272), "lyj\"A7sR5K{&3Z1", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      boolean boolean0 = false;
      String string0 = "t(kzA)@x!i";
      String string1 = null;
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string2 = " 5s;.l5Fop[ 7ESN";
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 3, 3, " 5s;.l5Fop[ 7ESN");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-943), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      StringBuffer stringBuffer1 = new StringBuffer();
      StringBuffer stringBuffer2 = new StringBuffer("");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderWrappedText(stringBuffer2, 1798, 39, "");
      helpFormatter0.setWidth(15);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      StringBuffer stringBuffer1 = new StringBuffer("usage: ");
      StringBuffer stringBuffer2 = new StringBuffer("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("XGA^$r[`K!;RtFA*%7");
      char[] charArray0 = new char[6];
      charArray0[0] = 'f';
      charArray0[1] = 'Y';
      charArray0[2] = 'v';
      charArray0[3] = 'n';
      charArray0[4] = '1';
      charArray0[5] = 'R';
      mockPrintWriter0.write(charArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.getLeftPadding();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter3.printWrapped((PrintWriter) null, 74, 43, "--");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      StringBuffer stringBuffer1 = new StringBuffer("usage: ");
      stringBuffer0.append(stringBuffer1);
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
      helpFormatter0.setWidth(0);
      assertEquals(0, helpFormatter0.defaultWidth);
      
      helpFormatter0.getWidth();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "", true, "()QdH,`v\u0001.9yg.v('4");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("-", "", options1, (String) null);
      helpFormatter0.setOptPrefix("\"3Ma^rk");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      stringWriter0.append((CharSequence) "usage: ");
      stringWriter1.getBuffer();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "^.COk,PCTH.@&Cs", "", options0, 1, 1, "()QdH,`v\u0001.9yg.v('4", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = new StringBuffer("usage: ");
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.AlreadySelectedException");
      char[] charArray0 = new char[4];
      charArray0[0] = '\"';
      charArray0[1] = 'k';
      charArray0[2] = 'f';
      charArray0[3] = '3';
      mockPrintWriter0.write(charArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.append((CharSequence) "usage: ");
      stringWriter0.getBuffer();
      StringWriter stringWriter1 = new StringWriter(1);
      stringWriter1.flush();
      Options options1 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "org.apache.commons.cli.AlreadySelectedException", "-", options0, 1893, 3, (String) null, true);
      helpFormatter1.getNewLine();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "M/:`tYc");
      OptionGroup optionGroup1 = new OptionGroup();
      optionGroup1.addOption(option0);
      optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("\n", options1, false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
      try { 
        helpFormatter2.printWrapped((PrintWriter) mockPrintWriter0, 10, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      StringBuffer stringBuffer1 = new StringBuffer("usage: ");
      StringBuffer stringBuffer2 = new StringBuffer("arg");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 1, " ");
      helpFormatter1.setWidth(1359);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("X:'xDOK:kD");
      char[] charArray0 = new char[1];
      charArray0[0] = ',';
      mockPrintWriter0.write(charArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3454);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      stringWriter0.getBuffer();
      stringWriter1.flush();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 930, "X:'xDOK:kD", "", options0, (-2500), 3454, "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      StringBuffer stringBuffer1 = new StringBuffer("usage: ");
      Options options0 = new Options();
      Options options1 = new Options();
      Options options2 = options1.addOption("", "IR|=ZYCCkP+#", false, "\"3Ma^rk");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("-", "-", options2, "");
      helpFormatter1.setOptPrefix("-");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(3454);
      stringWriter1.append((CharSequence) "--");
      stringWriter1.getBuffer();
      helpFormatter1.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "xnxG#A", "\"3Ma^rk", options1, 10, 43, "", false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getNewLine();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("[c5#Q6C_=zT(r)xZF", "--", "&5Nj>`-hOg").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      mockPrintWriter0.print((double) 1);
      mockPrintWriter0.println(0L);
      mockPrintWriter0.print((double) 0L);
      helpFormatter0.setDescPadding(2998);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "\n", true, "");
      option0.clone();
      optionGroup0.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.printHelp("   ", options1, true);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 37, " ]", "@Un}RMc", options0, 65, 595, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", true);
      helpFormatter3.getNewLine();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      StringBuffer stringBuffer1 = new StringBuffer("usage: ");
      Options options0 = new Options();
      Options options1 = new Options();
      Options options2 = options1.addOption("", "IR|=ZYCCkP+#", false, "\"3Ma^rk");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("-", "-", options2, "");
      helpFormatter1.setOptPrefix("-");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(3454);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "--");
      stringWriter1.getBuffer();
      helpFormatter1.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, true);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 59, "arg", options2);
      String string0 = "org.apache.commons.cli.Options";
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", false, "DoA=:At@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setOptPrefix("arg");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(74);
      StringWriter stringWriter2 = new StringWriter();
      stringWriter1.append((CharSequence) "-");
      stringWriter0.getBuffer();
      String string0 = helpFormatter2.defaultSyntaxPrefix;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, (-1461), (String) null, "", options0, 1, 59, ",gKxd", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, "\n");
      OptionGroup optionGroup1 = new OptionGroup();
      optionGroup0.setSelected((Option) null);
      OptionGroup optionGroup2 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("--", options0, false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      PipedInputStream pipedInputStream0 = new PipedInputStream(74);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, false);
      helpFormatter2.printOptions(mockPrintWriter0, 34, options1, 8, 1);
      Options options2 = new Options();
      helpFormatter2.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp("org.apache.commons.cli.Util", "org.apache.commons.cli.HelpFormatter", options0, "");
      helpFormatter0.setOptPrefix("");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(3);
      StringWriter stringWriter2 = new StringWriter();
      stringWriter2.append((CharSequence) "--");
      stringWriter2.getBuffer();
      helpFormatter0.rtrim("org.apache.commons.cli.HelpFormatter");
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("arg", "org.apache.commons.cli.HelpFormatter");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // org.apache.commons.cli.HelpFormatter
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("X:'xDOK:kD");
      Options options0 = new Options();
      Options options1 = options0.addOption("", (String) null, false, (String) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp("-qQB|a;W9#mgG`=/n", (String) null, options1, (String) null);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-647), 107, "-qQB|a;W9#mgG`=/n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Options options1 = new Options();
      Options options2 = options1.addOption("", "IR|=ZYCCkP+#", false, "\"3Ma^rk");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = new Option((String) null, " ", false, (String) null);
      option0.setType((Object) null);
      options2.addOption(option0);
      helpFormatter1.printHelp("-", "-", options2, "");
      helpFormatter1.setOptPrefix("-");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      stringWriter1.append((CharSequence) "--");
      options1.hasShortOption("-");
      stringWriter1.getBuffer();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "xnxG#A", "\"3Ma^rk", options1, 10, 43, "", false);
      helpFormatter1.getNewLine();
      helpFormatter1.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOption((String) null, "|iiOc_G", false, "\n");
      helpFormatter0.printHelp("Cannot add value, list full.", (String) null, options1, (String) null);
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-1254);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1254), (-647), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("X:'xDOK:kD");
      char[] charArray0 = new char[1];
      charArray0[0] = ',';
      mockPrintWriter0.write(charArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      optionGroup1.setRequired(true);
      Options options0 = new Options();
      options0.addOptionGroup(optionGroup2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("\n", options0, true);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OptionGroup optionGroup3 = new OptionGroup();
      OptionGroup optionGroup4 = new OptionGroup();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "--");
      optionGroup0.setRequired(true);
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("arg", options0, true);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("X:'xDOK:kD");
      char[] charArray0 = new char[1];
      charArray0[0] = ',';
      mockPrintWriter0.write(charArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      Options options0 = new Options();
      options0.addOptionGroup(optionGroup2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("\n", options0, true);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter1.setWidth((-2809));
      helpFormatter2.printWrapped((PrintWriter) mockPrintWriter0, 54, "arg");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      StringBuffer stringBuffer1 = new StringBuffer("usage: ");
      Options options0 = new Options();
      Options options1 = new Options();
      String string0 = "IR|=ZYCCkP+#";
      Options options2 = options1.addOption("", "IR|=ZYCCkP+#", false, " ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("-", "-", options2, "");
      helpFormatter1.setOptPrefix("-");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(3454);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "--");
      helpFormatter0.rtrim("");
      // Undeclared exception!
      try { 
        stringWriter2.append((CharSequence) "", 38, (-1644));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      StringBuffer stringBuffer1 = new StringBuffer("usage: ");
      Options options0 = new Options();
      Options options1 = new Options();
      Options options2 = options1.addOption("", "IR|=ZYCCkP+#", false, "\"3Ma^rk");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("-", "-", options2, "");
      helpFormatter1.setOptPrefix("-");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(3454);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "--");
      stringWriter1.getBuffer();
      helpFormatter1.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1652), "usage: ", "--", options2, 115, (-1652), "arg", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp("org.apache.commons.cli.Util", "org.apache.commons.cli.HelpFormatter", options0, "");
      helpFormatter0.setOptPrefix("");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(3);
      StringWriter stringWriter2 = new StringWriter();
      stringWriter2.append((CharSequence) "--");
      stringWriter2.getBuffer();
      String string0 = helpFormatter0.defaultSyntaxPrefix;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1786, "", "G{eD n:m<E7G5o*", options0, (-3308), (-1), ">", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", "-", (Options) null, "usage: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = new Options();
      boolean boolean0 = true;
      Options options2 = options0.addOption("", "", true, "0z=v6c7P1<");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('g');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      int int0 = 131;
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 131, 131, "");
      Options options3 = options2.addOption("arg", "usage: ", true, " :: ");
      helpFormatter0.renderOptions(stringBuffer1, 131, options3, 131, 131);
      helpFormatter0.getLeftPadding();
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream("", true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getNewLine();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      StringBuffer stringBuffer1 = new StringBuffer("usage: ");
      stringBuffer0.append(stringBuffer1);
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("--", "/o6}#rCt");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) stringBuffer0, 0, 1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      PrintWriter printWriter0 = mockPrintWriter0.format("", (Object[]) null);
      helpFormatter0.printOptions(printWriter0, (-74), options0, 0, 36);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Options options0 = new Options();
      String string0 = "";
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-2464));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.Util", "org.apache.commons.cli.HelpFormatter", options0, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      StringBuffer stringBuffer1 = new StringBuffer("usage: ");
      Options options0 = new Options();
      Options options1 = new Options();
      Options options2 = options1.addOption("", "IR|=ZYCCkP+#", false, "\"3Ma^rk");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("-", "-", options2, "");
      helpFormatter1.setOptPrefix("-");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(3454);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "--");
      stringWriter1.getBuffer();
      helpFormatter1.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, true);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, " ", "", options0, 930, 9, "IR|=ZYCCkP+#", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "]";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string1 = "";
      options1.hasOption("arg");
      Option option0 = new Option("", true, "]");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp("]", options2);
      helpFormatter0.defaultNewLine = "b";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      int int0 = 3729;
      int int1 = 2023;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 3729, options0, 2023, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", "-", true, "");
      OptionGroup optionGroup1 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 74, 3, "-");
      boolean boolean0 = true;
      Options options3 = options2.addOption((String) null, true, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, 34, options3, 61, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("X:'xDOK:kD");
      char[] charArray0 = new char[1];
      charArray0[0] = ',';
      mockPrintWriter0.write(charArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2, "");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      Option option0 = new Option("", true, "MT@gl.F");
      OptionGroup optionGroup2 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.printHelp("arg", options1, true);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter3.printOptions(mockPrintWriter0, 57, options0, 25, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      StringBuffer stringBuffer1 = new StringBuffer("usage: ");
      helpFormatter0.setDescPadding(3012);
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, " ");
      OptionGroup optionGroup1 = new OptionGroup();
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      optionGroup2.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", options0, false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options1 = new Options();
      helpFormatter1.getSyntaxPrefix();
      helpFormatter1.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer1, (-2), options0, 1148, 10);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "=6K*7UEk9=\"KbH1#_A7";
      Options options0 = new Options();
      String string1 = "Cannot add value, list full.";
      options0.hasLongOption("usage: ");
      helpFormatter0.printHelp(953, "=6K*7UEk9=\"KbH1#_A7", "=6K*7UEk9=\"KbH1#_A7", options0, "Cannot add value, list full.", true);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("=6K*7UEk9=\"KbH1#_A7", 3, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("X:'xDOK:kD");
      char[] charArray0 = new char[1];
      charArray0[0] = ',';
      mockPrintWriter0.write(charArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("\n", options0, true);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      Options options2 = new Options();
      helpFormatter3.getSyntaxPrefix();
      helpFormatter1.printHelp("S&&YXj/v[f{!e4V=RC!", "iid9:yX~/5C:H77<q", options1, "-", true);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      StringBuffer stringBuffer1 = new StringBuffer("usage: ");
      helpFormatter0.setDescPadding(3012);
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "usage: ");
      OptionGroup optionGroup1 = new OptionGroup();
      optionGroup0.addOption(option0);
      OptionGroup optionGroup2 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      boolean boolean0 = true;
      helpFormatter1.printHelp("z-Nr", options0, true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockPrintStream mockPrintStream0 = new MockPrintStream("nudcX`[Ebnq h^p");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "x";
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) "nudcX`[Ebnq h^p";
      objectArray0[7] = (Object) "nudcX`[Ebnq h^p";
      PrintWriter printWriter0 = mockPrintWriter0.printf("x", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-1329), ", ", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("X:'xDOK:kD");
      char[] charArray0 = new char[1];
      charArray0[0] = ',';
      mockPrintWriter0.write(charArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      Options options0 = new Options();
      options0.addOptionGroup(optionGroup2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("\n", options0, true);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter3.optionComparator = comparator0;
      helpFormatter3.printUsage((PrintWriter) mockPrintWriter0, 1656, "NO_GS_ALLOWED", options0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Options options0 = new Options();
      options0.addOption("", "", false, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp("org.apache.commons.cli.Util", "org.apache.commons.cli.HelpFormatter", options0, "");
      helpFormatter0.setOptPrefix("");
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-3813));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("!s");
      int int0 = (-3373);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.cli.HelpFormatter");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-3373), "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("e}GfvkuDDZVQk[0", options0, true);
      String string0 = "STK\\$5p";
      StringBuffer stringBuffer0 = new StringBuffer("STK$5p");
      Options options1 = new Options();
      int int0 = 2135;
      String string1 = helpFormatter0.createPadding(2135);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, string1, options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("!s");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, (-239), options0, 32, 1714);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 34, 25, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      StringBuffer stringBuffer1 = new StringBuffer("usage: ");
      stringBuffer0.append(stringBuffer1);
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 2198, "-", "--", (Options) null, 2198, (-1), "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("X:'xDOK:kD");
      char[] charArray0 = new char[1];
      charArray0[0] = ',';
      mockPrintWriter0.write(charArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 2, "");
      helpFormatter1.getSyntaxPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, "0");
      optionGroup0.addOption(option0);
      OptionGroup optionGroup1 = new OptionGroup();
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("--", options0, false);
      helpFormatter1.setWidth(9);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "arg", "-", options0, "-", false);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Options options0 = new Options();
      boolean boolean0 = false;
      String string0 = "Cannot add value, list full.";
      String string1 = "Z5cz|w/SmGXC";
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("");
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "=;XCII\"}[c=2P/|TcyQ";
      Options options0 = new Options();
      String string1 = "usage: ";
      helpFormatter0.printHelp("usage: ", options0, true);
      options0.getMatchingOptions("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "=;XCII\"}[c=2P/|TcyQ", options0, "=;XCII\"}[c=2P/|TcyQ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("!s");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.getDescPadding();
      String string0 = "";
      helpFormatter0.setLongOptPrefix("");
      int int0 = 609;
      helpFormatter0.createPadding(3);
      helpFormatter0.getWidth();
      String string1 = "{S]8;~jd_Ot Noam;&";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("arg", "   ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //    
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 1723, "org.apache.commons.cli.Option");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "usage: ", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.renderOptions(stringBuffer0, 1723, options2, 1723, 1723);
      helpFormatter0.getLeftPadding();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      helpFormatter0.printHelp("4\"pk|y", options0, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 323, "UO]zz#>tZ2", "", options1, 1723, 34, "4\"pk|y");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      StringBuffer stringBuffer1 = new StringBuffer("usage: ");
      helpFormatter0.setDescPadding(3012);
      char[] charArray0 = new char[1];
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, " ");
      OptionGroup optionGroup1 = new OptionGroup();
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      optionGroup2.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", options0, false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options1 = new Options();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      mockPrintWriter0.print((-1.0));
      mockPrintWriter0.println(247L);
      mockPrintWriter0.print((double) 247L);
      helpFormatter0.setDescPadding(3012);
      char[] charArray0 = new char[0];
      mockPrintWriter0.print(charArray0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3012, "");
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setNewLine("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
      helpFormatter0.setLeftPadding(3);
      helpFormatter1.getLongOptSeparator();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "dd6UW`?b_Cr#", options0, "dd6UW`?b_Cr#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("{@gnR6");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      boolean boolean0 = true;
      Option option0 = new Option((String) null, true, "c8WB>");
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "", "j_A{w&^6KE", options1, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Options options0 = new Options();
      options0.getMatchingOptions("usage: ");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getSyntaxPrefix();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("Z5cz|w/SmGXC");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.defaultArgName = "_6:o";
      helpFormatter0.setArgName("XZyn$7N<");
      MockFile mockFile0 = new MockFile("\";P,amhj");
      MockFile mockFile1 = new MockFile(mockFile0, "XZyn$7N<");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      Options options0 = new Options();
      int int0 = (-2367);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, options0, (-2367), 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-886);
      helpFormatter0.setLongOptSeparator(" ]");
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptSeparator();
      int int0 = 10;
      String string0 = "CA W!hV";
      String string1 = "--";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("-", "arg", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-1));
      helpFormatter0.setLongOptSeparator("<");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.getWidth();
      String string0 = "^aN;gd";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "", false, "\n");
      options1.hasOption("org.apache.commons.cli.Util");
      helpFormatter0.printHelp("(T81W2Rp,=h", "m/_I_=[S/dYA", options1, "m/_I_=[S/dYA", true);
      helpFormatter0.findWrapPos("", 74, 74);
      MockFile mockFile0 = new MockFile("arg", "org.apache.commons.cli.Util");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.format("", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-1), (-1), "' was specified but an option from this group ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setOptionComparator((Comparator) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-798), (-798), "org.apache.commons.cli.HelpFormatter$1");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      StringBuffer stringBuffer1 = new StringBuffer("usage: ");
      Options options0 = new Options();
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options1 = new Options();
      Options options2 = options1.addOption("", "IR|=ZYCCkP+#", false, "\"3Ma^rk");
      options2.getOption("IR|=ZYCCkP+#");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("-", "-", options2, "");
      helpFormatter1.setOptPrefix("-");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(3454);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "--");
      stringWriter1.getBuffer();
      helpFormatter1.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, true);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, " ", "", options0, 930, 9, "IR|=ZYCCkP+#", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "PKzNK]wvwdSPdp9";
      int int0 = 0;
      helpFormatter0.createPadding(0);
      helpFormatter0.setOptPrefix("?\"vY%|.C+0FU*[Fx<`[");
      String string0 = "LHP~DJA";
      helpFormatter0.setSyntaxPrefix("LHP~DJA");
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("?\"vY%|.C+0FU*[Fx<`[", "LHP~DJA");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // LHP~DJA
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "mJ<$|&96NpyP:_";
      helpFormatter0.setLongOptPrefix("mJ<$|&96NpyP:_");
      helpFormatter0.createPadding(0);
      String string1 = "";
      Options options0 = new Options();
      String string2 = "FK0^J\"ZhJx";
      // Undeclared exception!
      try { 
        options0.addOption("~+*LQ/i|nYzFyR!49", "--", false, "FK0^J\"ZhJx");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '~+*LQ/i|nYzFyR!49' contains an illegal character : '~'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", (-2555), (-1724));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      helpFormatter0.printHelp("e}GfvkuDDZVQk[0", options0, true);
      options0.getMatchingOptions("");
      helpFormatter0.printHelp(45, "p#U#JR4A@eLF", "o9", options0, (String) null);
      int int0 = helpFormatter0.defaultDescPad;
      String string0 = "";
      helpFormatter0.setLongOptPrefix("");
      int int1 = 609;
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2103));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "A CloneNotSupportedException was thrown: ";
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", options0, true);
      options0.getMatchingOptions("usage: ");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "A CloneNotSupportedException was thrown: ", "", options0, "");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      int int0 = (-349);
      ByteArrayOutputStream byteArrayOutputStream0 = null;
      try {
        byteArrayOutputStream0 = new ByteArrayOutputStream((-349));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -349
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      mockPrintWriter0.print((double) 1);
      mockPrintWriter0.println(0L);
      mockPrintWriter0.print((double) 0L);
      helpFormatter0.setDescPadding(2998);
      char[] charArray0 = new char[1];
      mockPrintWriter0.print(charArray0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, " ");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1775);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "7T\\jZl6H";
      helpFormatter0.setNewLine("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("X:'xDOK:kD");
      char[] charArray0 = new char[1];
      charArray0[0] = ',';
      mockPrintWriter0.write(charArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-776), "X:'xDOK:kD");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      String string1 = "usage: ";
      boolean boolean0 = true;
      helpFormatter0.printHelp("usage: ", options0, true);
      options0.getMatchingOptions("usage: ");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "A CloneNotSupportedException was thrown: ", "", options0, "");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("X:'xDOK:kD");
      char[] charArray0 = new char[1];
      charArray0[0] = ',';
      mockPrintWriter0.write(charArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 2, "");
      helpFormatter1.getSyntaxPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, "0");
      optionGroup0.addOption(option0);
      OptionGroup optionGroup1 = new OptionGroup();
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("--", options0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-4027), " ", " ", options0, 1, 2198, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter0.setDescPadding(62);
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "usage: ");
      OptionGroup optionGroup1 = new OptionGroup();
      optionGroup1.addOption(option0);
      optionGroup1.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("zo~}6RfMPM", options0, false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options1 = new Options();
      helpFormatter2.getSyntaxPrefix();
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp(3, " ", " ", options1, "K~a1U hU c^e;r", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLongOptSeparator("qAOB_e");
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      int int0 = (-1875);
      // Undeclared exception!
      try { 
        mockPrintWriter1.append((CharSequence) " ", 0, (-1875));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("!s");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", true, ", ");
      Options options2 = options1.addOption(option0);
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-3373), "!s", "!s", options2, (String) null, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      boolean boolean0 = false;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      mockPrintWriter0.print((-1.0));
      mockPrintWriter0.println(239L);
      mockPrintWriter0.print((double) 239L);
      helpFormatter0.setDescPadding(3012);
      char[] charArray0 = new char[0];
      mockPrintWriter0.print(charArray0);
      String string0 = " ";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, " ");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "usage: ", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.renderOptions(stringBuffer0, 1723, options2, 1723, 1723);
      helpFormatter0.getLeftPadding();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1723, (String) null, "", options2, 1, 0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      String string1 = "]";
      helpFormatter0.setSyntaxPrefix("]");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 0, (-2495));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "arg", false, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options1, "Cannot add value, list full.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("org.apache.commons.cli.HelpFormatter");
      helpFormatter0.setLeftPadding((-73));
      helpFormatter0.findWrapPos("", 0, 0);
      helpFormatter0.getSyntaxPrefix();
      assertEquals((-73), helpFormatter0.defaultLeftPad);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setOptPrefix("SOP[SJ~7V@FC&6'V[b");
      assertEquals("SOP[SJ~7V@FC&6'V[b", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.defaultNewLine = "";
      Options options0 = new Options();
      String string1 = "+4ui5J;tX! ]";
      boolean boolean0 = false;
      String string2 = "2i,";
      Option option0 = null;
      try {
        option0 = new Option(" | ", "+4ui5J;tX! ]", false, "2i,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ' | ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, " ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }
}
