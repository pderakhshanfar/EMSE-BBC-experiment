/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 10:28:54 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.FileNotFoundException;
import java.io.ObjectOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "arg";
      helpFormatter0.rtrim("arg");
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.HelpFormatter$OptionComparator", "org.apache.commons.cli.HelpFormatter$OptionComparator");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, " ");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultWidth = (-47);
      options0.getOptions();
      Options options1 = options0.addOption("arg", true, "--");
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, "--", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-3771);
      helpFormatter0.setLeftPadding((-3771));
      helpFormatter0.defaultWidth = 99;
      String string0 = "Fjj+g_y6d0%3";
      helpFormatter0.setLongOptSeparator("Fjj+g_y6d0%3");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.findWrapPos("Fjj+g_y6d0%3", 35, 10);
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options1.addOption("--", true, "A T$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getArgName();
      helpFormatter0.getOptPrefix();
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getSyntaxPrefix();
      int int0 = (-53);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "arg");
      Option option0 = new Option("arg", "--", false, "");
      options0.addOption(option0);
      options1.getMatchingOptions("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-53), "", "", options1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", true, "--");
      int int0 = (-2);
      String string0 = null;
      options0.getOption("-");
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 9, options1, 10, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ";Yp7(\\qA1B";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte)31;
      byteArray0[6] = (byte) (-2);
      byteArray0[7] = (byte) (-20);
      byteArray0[8] = (byte)29;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 14, 4886, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("Illegal option name '", options0, true);
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.getOptPrefix();
      options0.getOptions();
      options0.getOption("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1053, (String) null, (String) null, options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultSyntaxPrefix = "2?ha*t-LsBI";
      helpFormatter0.printHelp(3, "\n", "\n", options0, "\n");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", ";79Hy.Udy&VU1=d&L;7");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.defaultSyntaxPrefix = "6\"9srKKi4&6[NK!";
      optionGroup0.setRequired(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setSelected(option0);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 280, ";79Hy.Udy&VU1=d&L;7", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultSyntaxPrefix = "2?a*t-LsBI";
      Options options1 = options0.addOption("arg", true, "--");
      helpFormatter0.printHelp(3, "\n", "\n", options1, "\n");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      options0.addOption((String) null, true, "bA9{UO>");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 85, "bA9{UO>", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "--");
      helpFormatter0.printHelp(3, "\n", "\n", options1, "\n");
      StringBuffer stringBuffer0 = new StringBuffer();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-339), options1, 1, 10);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", options0);
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "HvmFic", "HvmFic", options0, 0, 51, "");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", ";79Hy.UdyqVU1=d&L;7");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      options2.addOption("arg", true, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 36, ";79Hy.UdyqVU1=d&L;7", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer();
      Writer writer0 = null;
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printOptions((PrintWriter) null, 0, options2, 74, 0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "'eAac[";
      Options options0 = null;
      String string1 = "03mTOSj()*L";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(26, "'eAac[", "'eAac[", (Options) null, "03mTOSj()*L", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 25, (-127), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-5584));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("HGUC|", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte)114;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.setDescPadding(13);
      helpFormatter0.defaultSyntaxPrefix = "~q`";
      helpFormatter0.defaultLongOptPrefix = "org.apache.commons.cli.HelpFormatter$1";
      helpFormatter0.getNewLine();
      helpFormatter0.findWrapPos("\n", 13, (-3859));
      helpFormatter0.getArgName();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(";oYHX+?0*x)", options1);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.format(locale0, "U", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Options options0 = new Options();
      String string0 = null;
      Options options1 = options0.addOption((String) null, "", false, "-");
      Options options2 = options1.addOption("arg", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 105, "", options3);
      Options options4 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 34, 34, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption((String) null, "usage: ", false, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1, "XD\"nu6;is", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("\"x:");
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", true, "\"x:");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption("", true, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "A#nyPhhiFbn=", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options3, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", false, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object[] objectArray0 = new Object[6];
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) options0;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 48, "<;qEU,u)~{", "[ARG...]", options0, 9, 3, "", true);
      helpFormatter0.printHelp("arg", options0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptSeparator();
      String string0 = "[ option: ";
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      Option option0 = null;
      try {
        option0 = new Option("-", ";DmH.^wD|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "--");
      options0.hasShortOption("");
      options1.addOption("", "", true, "--");
      helpFormatter0.printHelp("#*5eqrZo7'2p%$3>>_X", options1);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "");
      Options options1 = options0.addOption(option0);
      options1.helpOptions();
      helpFormatter0.printHelp("@,d>>vc;E]", options1);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", "\n", false, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, 0, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", true, "8Qw{,#FQ1$");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(22, "", "", options1, "u&.pcKU:", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      helpFormatter0.createPadding(0);
      String string0 = "   ";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("   ", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.rtrim("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("0x");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      mockPrintWriter0.print('3');
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 0, "org.apache.commons.cli.OptionGroup", "usage: ", options0, 0, (-1718), "org.apache.commons.cli.HelpFormatter", true);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", false, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.ITALIAN;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "--", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(printWriter0, 2642, "-", "JRC&J2j", options0, 74, 48, (String) null, true);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3998, "arg", "arg", options0, 187, 187, " ]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Locale locale0 = Locale.UK;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(")=gkp*,T2SN`WD");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, " ", " ", (Options) null, (-1017), 2578, "W,#j[!a=M", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", true, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = Locale.ITALIAN;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) locale0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) options0;
      String string0 = "lE";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-995), "org.Zpache.commons.cliAlredySelec~edException", "[", (Options) null, 32, 32, "lE", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("-");
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.rtrim("-");
      String string0 = " ]";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ]");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1281, "z<i(?ts", (String) null, (Options) null, 1281, 44, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      String string0 = "xf{[?k";
      Options options1 = options0.addOption("9dGezO0BjE", true, "lE");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1060, (String) null, "lE", options1, 958, 958, "lE", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 31, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", false, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = Locale.ITALIAN;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) locale0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) options0;
      objectArray0[6] = (Object) locale0;
      mockPrintWriter0.format(locale0, "-", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 48, "<;qEU,u)~{", "[ARG...]", options0, 9, 3, "--", true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getOptionComparator();
      helpFormatter2.rtrim("[ Options: [ short ");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "\n");
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) options1;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "usage: ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      mockPrintWriter1.format(locale0, " s260!CZC]Fmf:|", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "Cannot add value, list full.", "Cannot add value, list full.", (Options) null, 9, 43, "lE", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "org.apache.commons.cli.HelpFormatter$1";
      objectArray0[1] = (Object) "org.apache.commons.cli.HelpFormatter$1";
      mockPrintWriter0.format(locale0, "org.apache.commons.cli.HelpFormatter$1", objectArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 9, "", "has already been selected: '", (Options) null, 9, (-150), "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ")C-eEf0t*I";
      String string1 = "";
      Options options0 = new Options();
      Option option0 = new Option("arg", "", true, "TOzeCO^x&jH}&%");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", false, "");
      helpFormatter0.printHelp(34, "tZ%\"H`kD!B.", "Y1l#", options2, "org.apache.commons.cli.Options", true);
      Options options3 = new Options();
      String string2 = "N@0";
      boolean boolean0 = true;
      Option option1 = null;
      try {
        option1 = new Option("N@0", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'N@0' contains an illegal character : '@'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 9, "xf{[?k", "lE", (Options) null, 9, 9, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = null;
      Options options0 = new Options();
      Option option0 = new Option((String) null, true, "\n");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption((String) null, " ", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", "\n", options3, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "\n");
      helpFormatter0.printHelp(26, "3|tOsYU0bF", "aIo.", options1, "<");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      Option option0 = new Option("arg", " ", false, "-");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "~~KT&}P;GPM", "aIo.", options1, "lh\"@uBB,ebHA{fA}`[r");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      int int0 = 5415;
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 5415, options0, 5415, 5415);
      options0.toString();
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)59;
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)34;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte) (-4);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.renderWrappedText(stringBuffer1, 5415, (-3611), "--");
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      helpFormatter0.findWrapPos("arg", (byte)12, (byte)34);
      helpFormatter0.getWidth();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("--", "arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // arg
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      helpFormatter0.printHelp("e8c$`A)=Cg", options0, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1452, "e8c$`A)=Cg");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "3+RI8");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "", false, "[ Options: [ short ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption("arg", "c", false, (String) null);
      helpFormatter0.printHelp(362, "aIo.", "<", options3, "");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options3, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.rtrim("-");
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.setWidth(3);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      option0.setValueSeparator('s');
      options0.getOptionGroups();
      options0.addOption(option0);
      options0.helpOptions();
      helpFormatter0.printHelp("-", options0);
      helpFormatter0.rtrim("-");
      helpFormatter0.getWidth();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("*m:%QFmTPGQ 8&", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter0.printOptions(mockPrintWriter0, 105, options0, 3, 105);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, " ");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 732, 732, "p!v%Jl&^zU@I{W");
      int int0 = 33;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, 732, (Options) null, 33, 33);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "\n");
      helpFormatter0.printHelp(103, "<", "<", options0, "aIo.");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.printHelp("aIo.", options1, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("p'+'m/IE7Q88??z9T");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "aIo.";
      PrintWriter printWriter0 = mockPrintWriter1.printf("^Q8Q", objectArray0);
      int int0 = (-1215);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 611, options0, (-1215), 3);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1675));
      helpFormatter0.rtrim((String) null);
      helpFormatter0.setWidth(394);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("B4{iF{e-jK*Ha5p", "+ ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'B4{iF{e-jK*Ha5p' contains an illegal character : '{'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setArgName("Cannot add value, list full.");
      helpFormatter0.printHelp(1060, "\n", "\n", options0, "\n");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.printHelp("usage: ", options0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1060, 1060, "G");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = null;
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "--");
      Options options2 = options1.addOption("arg", "y1W#", false, "Aew6{o9");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", " ] [ long ", options2, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = 1112;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1112, "-Uf-Ce?s!]ar$$l 8H", "(gMLig\".6BpKXt/\"", (Options) null, "has already been selected: '");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) options1;
      objectArray0[1] = (Object) options1;
      objectArray0[2] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, " ", objectArray0);
      helpFormatter0.printHelp(printWriter0, 48, "yF[PLcU{f CjpS9j", "", options1, 48, 48, "");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "`~q&l*v) H2'O#j");
      StringBuffer stringBuffer0 = new StringBuffer(1729);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, (-1), "`~q&l*v) H2'O#j");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      boolean boolean0 = false;
      MockFile mockFile0 = new MockFile("--");
      options1.hasShortOption((String) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, "Cannot add value, list full.");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 74, "", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)115;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.setNewLine("");
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.rtrim("-");
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.setWidth(3);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      option0.setValueSeparator('s');
      options0.getOptionGroups();
      options0.addOption(option0);
      options0.helpOptions();
      helpFormatter0.printHelp("-", options0);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "{RN6?S,Y``8DBz=NO", true, "-");
      helpFormatter1.printHelp("F|k[qQ?yj'Sb;", options1, true);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-1), "-", "]", options1, 1270, 74, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = " [ARG]";
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("g=e)mMb;7n6ZYrMAF&", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(496);
      helpFormatter0.rtrim("");
      helpFormatter0.setWidth(0);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Option option0 = new Option("", "--");
      options0.addOption((String) null, "uKn6:~", false, "--");
      options0.toString();
      helpFormatter0.defaultLeftPad = 2010;
      option0.setValueSeparator('s');
      options0.getOptionGroups();
      Options options1 = options0.addOption(option0);
      options1.helpOptions();
      // Undeclared exception!
      helpFormatter0.printHelp("org.apache.commons.cli.OptionGroup", options1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 1698, options0, 1698, 1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, 3620, " [ARG]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      mockFile0.setLastModified(0L);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "--", true, " ");
      helpFormatter1.printHelp(1, " ", (String) null, options1, "");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3489, "", (String) null, options0, 2342, 2342, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.rtrim("-");
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.setWidth(3);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      option0.setValueSeparator('s');
      options0.getOptionGroups();
      Options options1 = options0.addOption(option0);
      options0.helpOptions();
      String string0 = "-";
      helpFormatter0.printHelp("-", options0);
      helpFormatter0.getLongOptSeparator();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-134), options1, 2337, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp(1060, "\n", "\n", options1, "\n");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "{RN6?S,Y``8DBz=NO", true, "-");
      helpFormatter1.printHelp("F|k[qQ?yj'Sb;", options1, true);
      helpFormatter1.renderWrappedText(stringBuffer0, 74, 1270, "\n");
      MockFile mockFile1 = new MockFile("--");
      helpFormatter1.getSyntaxPrefix();
      helpFormatter1.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "--");
      helpFormatter0.printHelp(1060, "\n", "\n", options1, "\n");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      int int0 = 0;
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getArgName();
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.setWidth(3);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      options0.getOption("/<VSkYD5jeTKNAt\"Q");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ] [ long ", "/<VSkYD5jeTKNAt\"Q", options0, "-", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "--");
      helpFormatter0.printHelp(1060, "-", "-", options1, "-");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      Collection collection0 = options0.getOptionGroups();
      helpFormatter0.printHelp("dgQ>t", "dgQ>t", options0, "", false);
      Options options1 = options0.addOption("arg", false, "cmdLineSyntax not provided");
      options1.getOption("iG!H[Cypy8YL6^=");
      helpFormatter0.defaultLongOptPrefix = "";
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      Locale locale0 = Locale.GERMANY;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) "";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) options0;
      objectArray0[6] = (Object) collection0;
      objectArray0[7] = (Object) "";
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "R$1]*3v3ub", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('M');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "usage: ");
      StringWriter stringWriter3 = stringWriter2.append((CharSequence) "usage: ", 1, 1);
      stringWriter3.getBuffer();
      Options options0 = new Options();
      options0.getOption("5\"[:~Qs(idcq]zIk");
      helpFormatter0.printHelp("gLCJo*e@jqu-)3@&x", "B:GkF!T", options0, "d39}|s3", false);
      helpFormatter0.findWrapPos("d39}|s3", 7, 2129);
      helpFormatter0.rtrim("gLCJo*e@jqu-)3@&x");
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      options0.getOptionGroups();
      helpFormatter0.printHelp("UW~", options0, true);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("X##h'of1Of!?(PAg>L", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 34, options0, 34, 34);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('M');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "usage: ");
      StringWriter stringWriter3 = stringWriter2.append((CharSequence) "usage: ", 1, 1);
      stringWriter3.getBuffer();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", false, "org.apache.commons.cli.HelpFormatter$1");
      options0.getOptions();
      helpFormatter0.printHelp("L]nKqRGR0]9;", "", options1, "5*uq=gUYb,Ndi");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-2977));
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", false, "The option '");
      options1.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.createPadding((-2977));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-1));
      helpFormatter0.defaultLeftPad = (-1104);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("$SO)>QrX~~!{o8Jr~8", (Options) null, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setOptPrefix("7Wa~q!=tXIviItjaKuG");
      Option option0 = new Option("", "--", false, "");
      optionGroup0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption(option0);
      helpFormatter1.printHelp("K;Vy", options2);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringBuffer stringBuffer1 = new StringBuffer();
      StringBuffer stringBuffer2 = helpFormatter1.renderWrappedText(stringBuffer1, 118, 118, "");
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer2, 9, 34, "A`Z5Rm=!?");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "R$1]*3v3ub";
      Options options0 = new Options();
      options0.helpOptions();
      options0.getOptionGroups();
      helpFormatter0.printHelp("dgQ>t", "dgQ>t", options0, "", false);
      Options options1 = options0.addOption("arg", false, "cmdLineSyntax not provided");
      Option option0 = new Option("", "org.apache.commons.cli.Options");
      options1.addOption(option0);
      options0.helpOptions();
      helpFormatter0.printHelp("NvzDK0PaI!z`\"-U~]so", options1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(",QR^J&6H)zJl");
      boolean boolean0 = false;
      MockPrintStream mockPrintStream1 = null;
      try {
        mockPrintStream1 = new MockPrintStream(mockPrintStream0, true, "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getArgName();
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.setWidth(3);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      int int0 = 0;
      options0.getOption(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("iG!H[Cypy8YL6^=", "", options0, "_/~t..`%KT@?>N37", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("7Wa~q!=tXIviItjaKuG");
      String string0 = "";
      options0.hasOption("");
      Option option0 = new Option("", "--", false, "");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, options0, (-3234), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setOptPrefix("7Wa~q!=tXIviItjaKuG");
      String string0 = "";
      options0.hasOption("");
      Option option0 = new Option("", "--", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string1 = "";
      Option option1 = new Option("", ">");
      Options options2 = options1.addOption(option1);
      options1.helpOptions();
      helpFormatter0.printHelp("org.apache.commons.cli.Option", options2);
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      MockPrintStream mockPrintStream1 = null;
      try {
        mockPrintStream1 = new MockPrintStream(mockPrintStream0, true, ">");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // >
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("$SO)>QrX~~!{o8Jr~8", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      String string0 = "";
      String string1 = null;
      helpFormatter0.printHelp(62, " ", "", options0, (String) null);
      MockFile mockFile0 = new MockFile("\n", "-");
      Option option0 = null;
      try {
        option0 = new Option("W}C Bf:[>JvuJvZ", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'W}C Bf:[>JvuJvZ' contains an illegal character : '}'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      helpFormatter0.renderWrappedText(stringBuffer0, 421, 1270, " ");
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1270, " ");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      options0.getOptionGroups();
      helpFormatter0.printHelp("dgQ>t", "dgQ>t", options0, "", false);
      Options options1 = options0.addOption("arg", false, "cmdLineSyntax not provided");
      options1.getOption("iG!H[Cypy8YL6^=");
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.printHelp("R$1]*3v3ub", "", options1, "", true);
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-2), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      options0.getOptionGroups();
      helpFormatter0.printHelp("dgQ>t", "dgQ>t", options0, "", false);
      Options options1 = options0.addOption("arg", false, "cmdLineSyntax not provided");
      options1.getOption("iG!H[Cypy8YL6^=");
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.printHelp("R$1]*3v3ub", "", options1, "", true);
      helpFormatter0.findWrapPos("+r,C/|", (-2), 935);
      helpFormatter0.rtrim("");
      helpFormatter0.createPadding(1270);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "--", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "", options0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('M');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "usage: ");
      StringWriter stringWriter3 = stringWriter2.append((CharSequence) "usage: ", 1, 1);
      stringWriter3.getBuffer();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 421, 1270, " ");
      helpFormatter0.renderWrappedText(stringBuffer1, 1270, (-5629), "");
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setOptPrefix("JUN[k");
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getNewLine();
      helpFormatter1.setArgName("\n");
      Comparator<Option> comparator1 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.defaultLeftPad = (-1104);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("$SO)>QrX~~!{o8Jr~8", (Options) null, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setOptPrefix("7Wa~q!=tXIviItjaKuG");
      options0.hasOption("");
      Option option0 = new Option("", "--", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringBuffer stringBuffer1 = new StringBuffer();
      StringBuffer stringBuffer2 = helpFormatter1.renderWrappedText(stringBuffer1, 118, 118, "");
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer2, 9, 34, "A`Z5Rm=!?");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-2977));
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", false, "The option '");
      Options options2 = options1.addOption(option0);
      options1.toString();
      options2.addOption(option0);
      optionGroup0.setSelected(option0);
      Options options3 = options2.addOption((String) null, " ] [ long ", false, "The option '");
      options2.addOption(option0);
      Options options4 = options3.addOption((String) null, false, "--");
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-1115);
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      options0.getOptionGroups();
      String string0 = "";
      helpFormatter0.printHelp("dgQ>t", "dgQ>t", options0, "", false);
      Options options1 = options0.addOption("arg", false, "cmdLineSyntax not provided");
      String string1 = "iG!H[Cypy8YL6^=";
      options1.getOption("iG!H[Cypy8YL6^=");
      helpFormatter0.defaultLongOptPrefix = "The option '";
      helpFormatter0.printHelp("R$1]*3v3ub", "The option '", options1, "The option '", true);
      int int0 = (-1511);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("R$1]*3v3ub", (-1511), (-1511));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('M');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "usage: ");
      stringWriter2.append((CharSequence) "usage: ", 1, 1);
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.createPadding(74);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 497;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 3491, 497, ". ;'U*Wp8k");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 13, "", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2005), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1104);
      helpFormatter0.defaultLeftPad = (-1104);
      Options options0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("$SO)>QrX~~!{o8Jr~8", (Options) null, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("XW^dYE6E", true);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      Options options0 = new Options();
      helpFormatter0.printHelp(5041, "XW^dYE6E", "XW^dYE6E", options0, "", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, true);
      int int0 = 0;
      mockPrintWriter0.print((Object) "XW^dYE6E");
      mockPrintWriter0.flush();
      char[] charArray0 = new char[5];
      charArray0[0] = 'A';
      charArray0[1] = 'N';
      charArray0[2] = 'J';
      charArray0[3] = 'Q';
      charArray0[4] = 'o';
      mockPrintWriter0.print(charArray0);
      String string0 = "'z$2";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "'z$2");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 1868;
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("whwo(c.'NK*rJ`3pD/", "-", true, "!w7Hygq<tSG!.%_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'whwo(c.'NK*rJ`3pD/' contains an illegal character : '('
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = " [ARG]";
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, 0, "Jdf_");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "", options0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      String string0 = "7Wa~q!=tXIviItjaKuG";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(933, "", "", options0, "Cannot add value, list full.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      helpFormatter0.defaultLeftPad = 1;
      helpFormatter0.setDescPadding(0);
      String string0 = "J[[ ";
      MockFile mockFile0 = new MockFile("J[[ ", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Locale locale0 = Locale.US;
      PrintWriter printWriter0 = mockPrintWriter1.printf(locale0, "arg", (Object[]) null);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0);
      String string1 = null;
      // Undeclared exception!
      try { 
        mockPrintWriter2.format((String) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-2977));
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", false, "The option '");
      Options options2 = options1.addOption(option0);
      options2.addOption(option0);
      optionGroup0.setSelected(option0);
      Options options3 = options2.addOption((String) null, " ] [ long ", false, "The option '");
      options2.addOption(option0);
      Options options4 = options3.addOption((String) null, false, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getArgName();
      helpFormatter0.defaultWidth = 0;
      int int0 = 3;
      helpFormatter0.setWidth(3);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = "-";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setNewLine("");
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getArgName();
      helpFormatter0.defaultWidth = 0;
      int int0 = 3;
      helpFormatter0.setWidth(3);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptSeparator();
      String string1 = "Nue12Bw6q";
      String string2 = "Jr!&`{";
      Options options0 = new Options();
      Option option0 = new Option("", "t;N+-Y{)F.m");
      Options options1 = options0.addOption(option0);
      options1.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Nue12Bw6q", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      String string0 = "7Wa~q!=tXIviItjaKuG";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string1 = "";
      helpFormatter0.setOptPrefix("7Wa~q!=tXIviItjaKuG");
      options0.hasOption("");
      Option option0 = new Option("", "--", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup0.addOption(option0);
      String string2 = "";
      helpFormatter0.defaultLeftPad = (-2);
      options1.getMatchingOptions("");
      Options options2 = options1.addOption(option0);
      option0.getValues();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1213, "7Wa~q!=tXIviItjaKuG", "7Wa~q!=tXIviItjaKuG", options2, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "7[?.8 SFI6";
      helpFormatter0.findWrapPos("7[?.8 SFI6", 1859, (-454));
      helpFormatter0.setOptPrefix("&0e|as|&+GKU/O");
      Options options0 = new Options();
      String string1 = "";
      Options options1 = options0.addOption("", true, "QkS #LRH");
      options0.getMatchingOptions("7&6er");
      // Undeclared exception!
      try { 
        options1.addOption("usage: ", "&0e|as|&+GKU/O", true, "line.separator");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      options0.getOptionGroups();
      String string0 = "";
      helpFormatter0.printHelp("dgQ>t", "dgQ>t", options0, "", false);
      Options options1 = options0.addOption("arg", false, "cmdLineSyntax not provided");
      String string1 = "iG!H[Cypy8YL6^=";
      options1.getOption("iG!H[Cypy8YL6^=");
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.printHelp("R$1]*3v3ub", "", options1, "", true);
      int int0 = (-1511);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("R$1]*3v3ub", (-1511), (-1511));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ";ax8v;+UF>f";
      helpFormatter0.defaultNewLine = ";ax8v;+UF>f";
      helpFormatter0.setWidth((-1605));
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option(";ax8v;+UF>f", false, ";ax8v;+UF>f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ';ax8v;+UF>f' contains an illegal character : ';'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setNewLine("");
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getArgName();
      int int0 = 10;
      helpFormatter0.defaultWidth = 10;
      int int1 = 3;
      helpFormatter0.setWidth(3);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptSeparator();
      String string1 = "Nue12Bw6q";
      StringBuffer stringBuffer0 = new StringBuffer("Nue12Bw6q");
      stringBuffer0.deleteCharAt(3);
      stringBuffer0.delete(3, 3);
      String string2 = "";
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 10, "");
      Options options0 = new Options();
      String string3 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, (-2364), 0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1111);
      String string0 = " | ";
      String string1 = "Cannot add value, list full.";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1111), " | ", "Cannot add value, list full.", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte) (-34);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.setOptPrefix("zyN$_e\"j");
      helpFormatter0.setLongOptPrefix("");
      assertEquals("zyN$_e\"j", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "U+q;D3}+owd7Myyv";
      helpFormatter0.setLongOptPrefix("U+q;D3}+owd7Myyv");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      char[] charArray0 = new char[7];
      charArray0[0] = 'm';
      charArray0[1] = 'h';
      charArray0[2] = '[';
      charArray0[3] = 'w';
      charArray0[4] = 'l';
      charArray0[5] = 'N';
      charArray0[6] = '<';
      mockPrintWriter0.print(charArray0);
      int int0 = 0;
      String string1 = "-";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("org.apache.commons.cli.OptionGroup", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.OptionGroup' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.setSyntaxPrefix(" ] [ long ");
      String string1 = "*]A";
      helpFormatter0.setOptPrefix("*]A");
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      options0.getOptions();
      Option option0 = new Option((String) null, false, "org.apache.commons.cli.HelpFormatter");
      Options options1 = options0.addOption(option0);
      String string2 = "0L.y5";
      // Undeclared exception!
      try { 
        options1.addOption("'*^K>gWVpU\"", "0L.y5", false, "*]A");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ''*^K>gWVpU\"' contains an illegal character : '''
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-619);
      helpFormatter0.defaultLongOptPrefix = "^[bv@MK\"y";
      helpFormatter0.defaultLeftPad = (-619);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.defaultLeftPad = (-619);
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setLongOptSeparator((String) null);
      String string0 = "[ option: ";
      StringBuffer stringBuffer0 = new StringBuffer("[ option: ");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("c%tm*3M9W:NP\"Md^B", "u6O0|5|h5X;R", false, "]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'c%tm*3M9W:NP\"Md^B' contains an illegal character : '%'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setOptPrefix("JUN[k");
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getLongOptPrefix();
      assertEquals("JUN[k", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      String string1 = "[";
      String string2 = "DQrxw8:!B<~d%V.@(";
      options0.hasLongOption("DQrxw8:!B<~d%V.@(");
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("[", (String) null, false, "dJ2se/L");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
