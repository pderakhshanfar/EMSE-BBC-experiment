/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 10:42:38 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.SyncFailedException;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "I", false, "(k4]7tSW4E8S");
      optionGroup0.addOption(option0);
      Option option1 = new Option("arg", true, "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, " ", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", true, "f");
      options0.toString();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte)79;
      byteArray0[7] = (byte)36;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.getSyntaxPrefix();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      helpFormatter0.getNewLine();
      helpFormatter0.setNewLine((String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("f", "usage: ", false, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-725), "sND1xT", "d$#GS|l<##", options1, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(90);
      Options options0 = new Options();
      options0.addOption("arg", false, "\n");
      helpFormatter0.printHelp(90, "--", "usage: ", options0, "usage: ");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", true, "\n");
      helpFormatter0.printHelp(3, "--", "usage: ", options0, "usage: ");
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = (-208);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("hj}]/6h4P!CO,'k~", options0, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 0;
      String string0 = "[ Options: [ short ";
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, "[ Options: [ short ");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ">";
      boolean boolean0 = true;
      String string1 = "";
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) "HgInq%4,!!VTRLH=$ZS";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) stringWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 66, "", "", options0, 2639, 2639, "I%u&u^W\" ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "]";
      Options options0 = new Options();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 619, "]", "Yg|", options0, 619, (-1), "]");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PrintWriter printWriter0 = null;
      int int0 = 74;
      String string0 = "";
      String string1 = "";
      String string2 = "{XRnGK$k?@6s";
      Options options0 = new Options();
      String string3 = "+rV<\")dpwS!\".a2J2f";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 74, "+rV<\")dpwS!\".a2J2f", "", options0, 74, (-610), "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 9;
      helpFormatter0.defaultDescPad = (-682);
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("'V9!2hU^^V*D~Fw");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "'V9!2hU^^V*D~Fw";
      objectArray0[1] = (Object) "'V9!2hU^^V*D~Fw";
      objectArray0[2] = (Object) "#Dq~1Dic,vU336\"(";
      objectArray0[3] = (Object) "#Dq~1Dic,vU336\"(";
      objectArray0[4] = (Object) "#Dq~1Dic,vU336\"(";
      PrintWriter printWriter0 = mockPrintWriter0.format("#Dq~1Dic,vU336\"(", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-682), (-682), "'V9!2hU^^V*D~Fw");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      Option option0 = new Option("p", "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 88, "Illegal option name '", (String) null, options0, (-2), (-2), "R", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      mockPrintWriter0.print(true);
      String string0 = "p";
      Options options1 = new Options();
      int int0 = 63;
      String string1 = "-";
      int int1 = (-1549);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "p", "-", options0, (-1549), (-1), "/eR");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "C>F}i:";
      helpFormatter0.setArgName((String) null);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptSeparator();
      String string0 = "xu3JSjG,J9B";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("xu3JSjG,J9B");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ", 1, 1);
      int int0 = (-3376);
      String string1 = "r^]2rhz";
      Options options0 = new Options();
      boolean boolean0 = false;
      helpFormatter0.printHelp("r^]2rhz", options0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-3376), (-428), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option((String) null, "--");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "usage: ", false, "*$<$2");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "--", "", options2, (-2), (-1), "*$<$2", false);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "HgEwG";
      helpFormatter0.getDescPadding();
      helpFormatter0.defaultWidth = (-2075);
      helpFormatter0.getOptPrefix();
      helpFormatter0.createPadding(5);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "AFx6";
      Option option0 = new Option("AFx6", "-\"AjBd!a%M5vO8~", false, "\n");
      optionGroup0.setSelected(option0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      int int0 = 58;
      String string1 = "jM\"35RF";
      Options options1 = null;
      boolean boolean0 = true;
      helpFormatter1.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(" ", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "\n";
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "arg", true, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, " ", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 85, "R", "zq-v:[5EL", options0, 85, 85, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = new Locale("usage: ", "`DrGG>10$>duo,I", "--");
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "\n", (Object[]) null);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, (-1920), options1, 1253, 1253);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", "", false, (String) null);
      helpFormatter0.printHelp(3, " ", "arg", options0, "\n");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "3L<iX;57");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Option option1 = new Option("YHW", "))QRk5Wq`E5MB,hb3");
      optionGroup1.addOption(option1);
      Options options0 = new Options();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, "YHW", "", options0, "org.apache.commons.cli.ParseException", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "arg", true, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, " ", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.Options", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 3, "\n");
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("&`N}oAZmf$!]", "", (Options) null, "arg", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("Fxw", "", false, "usage: ");
      helpFormatter0.printHelp(34, "HgIntq%4,!!VTRLH=$ZS", "HgIntq%4,!!VTRLH=$ZS", options1, "yo}|");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 34, options1, 3288, 269);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-2884));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      Option option0 = new Option("7", "");
      options0.addOption(option0);
      helpFormatter0.defaultLongOptPrefix = "7";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(28, "cmdLineSyntax not provided", "|sF6 RP#e1Ij", options0, "%Tae:%pJ<");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "arg");
      options0.addOption("arg", false, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 2, "v.xGYF9\"7!B_*!Df2\u0007", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 28, "R", "R", options0, 46, 841, "", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getWidth();
      Options options2 = options1.addOption("R", false, "");
      helpFormatter0.printHelp(1859, "PLT", "", options2, "l^gpYx3Fba");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("");
      Options options1 = options0.addOption("", true, "arg");
      helpFormatter0.printHelp(74, "-", " ", options1, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 34, 1715);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      String string0 = "has already been selected: '";
      Options options0 = null;
      int int0 = 64;
      String string1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(64, "has already been selected: '", "UH/Bl19X2BD", (Options) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "l|JQ";
      int int0 = (-17);
      helpFormatter0.defaultLeftPad = (-17);
      helpFormatter0.rtrim("l|JQ");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer(595);
      int int1 = 3;
      int int2 = 54;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, 54, "l|JQ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      int int0 = 0;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("/2/SiG");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "org.apache.commons.cli.HelpFormatter$1";
      objectArray0[1] = (Object) stringBuffer0;
      objectArray0[2] = (Object) stringBuffer0;
      objectArray0[3] = (Object) stringBuffer0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) mockPrintWriter0;
      objectArray0[8] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("org.apache.commons.cli.HelpFormatter$1", objectArray0);
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "/2/SiG", "/2/SiG", (Options) null, 64, 64, "/2/SiG");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(1);
      StringBuffer stringBuffer0 = null;
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      helpFormatter0.printOptions(mockPrintWriter0, 1, options0, 28, 3);
      String string0 = "";
      helpFormatter1.printHelp(74, "arg", (String) null, options0, "N<e+Y5-W$Kt3o/", false);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", "", false, "N<e+Y5-W$Kt3o/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      helpFormatter1.setNewLine("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Object[] objectArray0 = new Object[0];
      helpFormatter0.setOptPrefix("arg");
      PrintWriter printWriter0 = mockPrintWriter0.format("arg", objectArray0);
      helpFormatter1.printHelp(printWriter0, 102, "p|;OuqII0ev", "usage: ", options0, 102, 3, "A)~", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter1.getWidth();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      Option option0 = new Option((String) null, "", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      Options options0 = new Options();
      options0.addOptionGroup(optionGroup2);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "8sYG$$=xyn{1+!wG", ">jMY3%sa^|A-", options0, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      helpFormatter0.getNewLine();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", (String) null, true, "}M");
      optionGroup0.addOption(option0);
      Options options0 = new Options();
      options0.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      int int0 = 2;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2), options0, 1870, 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderOptions((StringBuffer) null, 2495, options0, 1154, 74);
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText((StringBuffer) null, 0, 1, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      int int0 = 0;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte) (-63);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)2;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 117, " ", (String) null, (Options) null, 10, 4098, " ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Ox^Joz4Uo$";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Ox^Joz4Uo$");
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", "arg", false, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 27, "Ox^Joz4Uo$", "", options2, (-19), (-19), "-", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", true, "f");
      options0.toString();
      helpFormatter0.getSyntaxPrefix();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      helpFormatter0.getNewLine();
      helpFormatter0.setNewLine("");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("f", "usage: ", false, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.addOption(option0);
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-725), "sND1xT", "d$#GS|l<##", options1, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("AFx6", "-\"AjBd!a%M5vO8~", false, "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(58, "jM\"35RF", "arg", (Options) null, "AFx6", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Ox^Joz4Uo$");
      int int0 = 27;
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      Options options1 = options0.addOption(option0);
      boolean boolean0 = true;
      Options options2 = options1.addOption("", "arg", true, "-");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 27, "Ox^Joz4Uo$", "", options2, 1, 1, "-", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(31, (String) null, "line.separator", options2, "Ox^Joz4Uo$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-2937), "Hgntq%4,!!VTRLH=$ZS", "arg", options0, (-2937), 9, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("\n");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "FjB99NJzKi5R}S7#[r");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("vp$#]f6,YE=KO9<kQ");
      MockFile mockFile1 = new MockFile("\n");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1, true);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("vp$#]f6,YE=KO9<kQ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 2641, "");
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, "^]f_Cx!");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "");
      helpFormatter0.getSyntaxPrefix();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      helpFormatter0.getNewLine();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 116);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "", "Np~|B4*H5D^8Ew", options1, 1, (-100), "-", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Ox^Joz4Uo$");
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", "arg", false, "-");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 34, "Ox^Joz4Uo$", "", options2, 1, 1, "-", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.createPadding(31);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      options0.getOptions();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      helpFormatter1.printHelp(83, "--", "\n", options0, "");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.createPadding(1);
      helpFormatter1.printHelp("arg", "--", options0, "-", true);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-3575), (String) null, "", options0, (-3575), (-3575), (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      int int0 = (-616);
      String string0 = "l";
      helpFormatter0.setLongOptPrefix("l");
      String string1 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-616), "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "arg";
      int int0 = 0;
      helpFormatter0.createPadding(0);
      Options options0 = new Options();
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "arg", "--", options0, "org.apache.commons.cli.Util", true);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "-", "arg", options0, "cmdLineSyntax not provided");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "";
      helpFormatter0.setOptionComparator((Comparator) null);
      boolean boolean0 = true;
      Options options1 = options0.addOption("", true, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1368, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "");
      String string0 = "j3+bEp`aOr0t!'3(";
      Locale locale0 = Locale.GERMANY;
      String string1 = ";-<_Po*,r*$P)'";
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) options1;
      objectArray0[3] = (Object) ";-<_Po*,r*$P)'";
      Object object0 = new Object();
      objectArray0[4] = object0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter1, 106, options0, 106, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setOptionComparator((Comparator) null);
      boolean boolean0 = true;
      Options options1 = options0.addOption("", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      options0.getOptions();
      options0.getOptions();
      helpFormatter1.printHelp(74, "--", "", options0, "usage: ");
      helpFormatter1.getOptionComparator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter1.getArgName();
      helpFormatter1.getLongOptPrefix();
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 53, "arg", " ", options0, 118, 64, "");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 3, 3, "k !QK8");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      options0.getOptions();
      options0.getOptions();
      helpFormatter1.printHelp(3, "\n", "-", options0, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 9, "--");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Ox^Joz4Uo$");
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      options0.addOption(option0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-1548), "   ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "A CloneNotSupportedException was thrown: ");
      helpFormatter0.defaultLeftPad = 1067;
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions((StringBuffer) null, 74, options1, 1067, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("org.apache.commons.cli.Option");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "( ");
      Options options2 = options0.addOption("", false, "");
      helpFormatter0.printHelp("org.apache.commons.cli.Option", "", options2, ":I5cnL}Eh!");
      helpFormatter0.setNewLine("n({jOI)+7pq|%UE?_");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2406), "", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options1, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.cli.OptionGroup");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.OptionGroup", "", (Options) null, "6EvLNx!p ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("\n", "arg", options0, "--");
      helpFormatter2.getSyntaxPrefix();
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      String string1 = helpFormatter2.defaultNewLine;
      helpFormatter2.setNewLine("arg");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", false, "");
      helpFormatter0.getSyntaxPrefix();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      helpFormatter0.getNewLine();
      Options options1 = options0.addOption("", false, "--");
      helpFormatter0.printHelp(74, " ,", "arg", options1, " | ", true);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "arg";
      objectArray0[2] = (Object) stringWriter0;
      Options options0 = new Options();
      helpFormatter0.printHelp(1827, "Cannot ad value, ist full.", "", options0, ";`9<dG");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
      helpFormatter0.getLongOptPrefix();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.setNewLine("--");
      helpFormatter1.setNewLine("@goSMw|gHnhMq%61g");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("@goSMw|gHnhMq%61g", 1, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", false, "");
      options0.addOption("", true, "");
      helpFormatter0.getSyntaxPrefix();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      helpFormatter0.getNewLine();
      helpFormatter0.setNewLine("");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "usage: ", false, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.addOption("arg", false, "5Hut }E,Ke!Jd");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-725), "sND1xT", "d$#GS|l<##", options1, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      options0.getOptions();
      options0.getOptions();
      helpFormatter1.printHelp(3, "\n", "-", options0, " ");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptPrefix();
      helpFormatter1.setNewLine("1lrC[%z");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "arg";
      objectArray0[2] = (Object) stringWriter0;
      Options options0 = new Options();
      helpFormatter0.printHelp(1827, "Cannot ad value, ist full.", "", options0, ";`9<dG");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 1, options0, 3, 3);
      StringBuffer stringBuffer2 = helpFormatter1.renderWrappedText(stringBuffer1, 1827, (-249), "");
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer2, 1, 1827, "Cannot ad value, ist full.");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      String string0 = "";
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.createPadding(0);
      String string1 = "";
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.toString();
      Options options1 = options0.addOption("", "--", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 6, "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintWriter0;
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.toString();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2697, "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", options0);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, "usage: ", ";m+", options0, "B]KnlA$A9qNtlad");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 48;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      helpFormatter0.setLeftPadding(48);
      helpFormatter0.setDescPadding(48);
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 48, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.createPadding(0);
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.toString();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "", options0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      MockFile mockFile0 = new MockFile(" ", "usage: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append(' ');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 13, 74, " ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printStream0);
      Options options1 = new Options();
      String string0 = "cUpx$h<z,";
      Option option0 = null;
      try {
        option0 = new Option(" | ", "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ' | ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options1 = new Options();
      options1.helpOptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      options0.getOptions();
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setNewLine("Cannot add value, list full.");
      helpFormatter0.printHelp("Cannot add value, list full.", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "%f]t\"4#", options0, "The option '");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      String string0 = "";
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", options0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arg");
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "", "", options1, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setOptionComparator((Comparator) null);
      boolean boolean0 = true;
      helpFormatter0.printHelp("zrw-__n~ o[e`", options0, false);
      String string0 = "j}+bEp`MOr0t!J3(";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("j}+bEp`MOr0t!J3(", "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.helpOptions();
      options1.getOptions();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "Cannot add value, list full.", "", options0, "--");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", false, "");
      Options options1 = options0.addOption("", true, "");
      helpFormatter0.printHelp("org.apache.commons.cli.Option", "", options1, ":I5cnL}Eh");
      helpFormatter0.getSyntaxPrefix();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      helpFormatter0.getNewLine();
      helpFormatter0.setNewLine("");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      helpFormatter0.defaultOptPrefix = "";
      int int0 = 0;
      helpFormatter0.rtrim("--");
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 13, "", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options1 = new Options();
      options1.helpOptions();
      options1.getOptions();
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "Cannot add value, list full.");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 0, options1, 0, 0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 0, (-1), "2IU[H");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.createPadding(0);
      Options options0 = new Options();
      Object object0 = new Object();
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.Option", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.printf("--", (Object[]) null);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "1dUH5r9V4ebwC_Q:t");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) " ";
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) stringWriter0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) stringWriter0;
      Object object0 = new Object();
      helpFormatter0.createPadding(77);
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) " ";
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) stringWriter0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) stringWriter0;
      Object object0 = new Object();
      objectArray0[7] = object0;
      int int0 = 1162;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 1162, 1162, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 74, options0, 1, 3);
      options0.getOption("");
      helpFormatter0.setWidth(97);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-2780), 0, "[");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.createPadding(0);
      Options options0 = new Options();
      Collection collection0 = new LinkedList<Object>();
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 13, "", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      Options options0 = new Options();
      String string0 = "org.apache.commons.cli.Option";
      String string1 = "";
      String string2 = "s>\"ML},Lt";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "s>\"ML},Lt", options0, "F6ds4t)Qv&r-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      helpFormatter0.renderWrappedText(stringBuffer0, 47, 47, "");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setNewLine("]zS$793165])Ig_i(|\"");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "'A40>8~u5J(^ig/n~";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "'A40>8~u5J(^ig/n~", "'A40>8~u5J(^ig/n~", options0, "'A40>8~u5J(^ig/n~");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Options options0 = new Options();
      options0.addOption((String) null, true, " | ");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("]", 1038, 162);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.createPadding(0);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1, 236, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("org.apache.commons.cli.Option");
      Options options0 = new Options();
      String string0 = "";
      helpFormatter0.defaultSyntaxPrefix = "";
      options0.addOption("arg", false, "");
      String string1 = "";
      Options options1 = options0.addOption("", false, "");
      helpFormatter0.printHelp("org.apache.commons.cli.Option", "", options1, ":I5cnL}Eh!");
      helpFormatter0.getSyntaxPrefix();
      options1.getOptionGroups();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      String string2 = "";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("rg paQrupThw+[{]B", " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'rg paQrupThw+[{]B' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 0, options0, 187, 187);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, 187, options0, 0, (-276));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "j]I'OC^aMoCajeHH9";
      helpFormatter0.setArgName("j]I'OC^aMoCajeHH9");
      helpFormatter0.setSyntaxPrefix("--");
      String string1 = "cmdLineSyntax not provided";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("cmdLineSyntax not provided");
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "j]I'OC^aMoCajeHH9", 74, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2644);
      helpFormatter0.setDescPadding((-2644));
      helpFormatter0.getLeftPadding();
      String string0 = "t";
      Options options0 = new Options();
      String string1 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "t", options0, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(966);
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("u}ytR_NiJ+Uj95+J", "                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //

         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "A CloneNotSupportedException was thrown: ");
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions((StringBuffer) null, 74, options1, 1, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.createPadding(0);
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 13, "", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator(":A4 G1cj%xXT");
      helpFormatter0.getOptPrefix();
      int int0 = 4527;
      String string0 = "Y(Oz)prp^/!GM";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("org.apache.commons.cli.ParseException", false, "Cf)`|Vn$]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.ParseException' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.toURI();
      mockFile0.getCanonicalFile();
      mockPrintWriter0.println(74);
      String string0 = "*WxB2'G!~]n{`L";
      helpFormatter0.defaultNewLine = "*WxB2'G!~]n{`L";
      String string1 = "#Y#.OR>w:GgF,";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2535), (-125), "#Y#.OR>w:GgF,");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-3426);
      helpFormatter0.setDescPadding((-3426));
      String string0 = "JTR/hYx=8BD7SNH!|";
      helpFormatter0.setOptPrefix("JTR/hYx=8BD7SNH!|");
      String string1 = "nImZYI";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "nImZYI");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // nImZYI
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.getLeftPadding();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      options0.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "\n", "arg", options0, "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      Options options0 = new Options();
      helpFormatter0.printHelp("#eQ=q1R!z#!>[!V{", "#eQ=q1R!z#!>[!V{", options0, "org.apache.commons.cli.Option");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "VGehPwq9l>6";
      Options options1 = new Options();
      options1.getOptions();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "VGehPwq9l>6", "+^6O@).<%q5nQC", options1, "Cannot add value, list full.");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "'A40>8~u5J(^ig/n~";
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "'A40>8~u5J(^ig/n~", "'A40>8~u5J(^ig/n~", options0, "'A40>8~u5J(^ig/n~");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("FS>$LQRK&w");
      helpFormatter0.setArgName("FS>$LQRK&w");
      helpFormatter0.setArgName("FS>$LQRK&w");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(174, (String) null, (String) null, options1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "arg";
      objectArray0[2] = (Object) stringWriter0;
      Options options0 = new Options();
      helpFormatter0.printHelp(1827, "Cannot ad value, ist full.", "", options0, ";`9<dG");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
      helpFormatter0.getLongOptPrefix();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.setNewLine("--");
      Options options1 = options0.addOption("", true, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp(3, "-", "--", options1, "usage: ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      helpFormatter0.defaultOptPrefix = "";
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-25));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2644);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte) (-59);
      byteArray0[6] = (byte)57;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.setDescPadding((-2644));
      helpFormatter0.getLeftPadding();
      String string0 = "";
      Options options0 = new Options();
      helpFormatter0.setOptionComparator((Comparator) null);
      String string1 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1, 243, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      int int0 = (-1571);
      Options options0 = new Options();
      Options options1 = options0.addOption("nvPmu", "')3^L.j<)Z0K", true, "')3^L.j<)Z0K");
      options1.addOption("", false, "nvPmu");
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      try { 
        optionGroup0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.OptionGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.defaultArgName = "";
      helpFormatter0.setLongOptSeparator("t*k|{!}p{Rjk");
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getArgName();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      helpFormatter0.setLeftPadding((-1));
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "x";
      helpFormatter0.createPadding(10);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) byteArrayOutputStream0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) "x";
      mockPrintWriter0.write("eqT}i@~O:n(f{", 0, (-1461));
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "x", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-2065), "", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      int int0 = (-606);
      String string0 = "D*Vxyw2B3SOagh";
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("--", "arg", true, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) " ";
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) stringWriter0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) stringWriter0;
      Object object0 = new Object();
      objectArray0[7] = object0;
      objectArray0[8] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(" ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 1, "*n{nDURle|#4H2Q");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("org.apache.commons.cli.Option");
      Options options0 = new Options();
      boolean boolean0 = false;
      options0.addOption("arg", false, "");
      Options options1 = options0.addOption("", false, "");
      helpFormatter0.printHelp("org.apache.commons.cli.Option", "", options1, ":I5cnL}Eh!");
      helpFormatter0.getSyntaxPrefix();
      options1.getOptionGroups();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ">w\"V\"fnnhKWks";
      helpFormatter0.setArgName(">w\"V\"fnnhKWks");
      int int0 = (-4146);
      helpFormatter0.setLeftPadding((-4146));
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      try { 
        fileDescriptor0.sync();
        fail("Expecting exception: SyncFailedException");
      
      } catch(SyncFailedException e) {
         //
         // sync failed
         //
         verifyException("java.io.FileDescriptor", e);
      }
  }
}
