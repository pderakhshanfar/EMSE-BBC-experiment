/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 05:27:10 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.UnknownFormatConversionException;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      helpFormatter0.setWidth(3);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      int int0 = helpFormatter0.getWidth();
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, int0);
      
      int int1 = helpFormatter0.findWrapPos("usage: ", 3, 1);
      assertFalse(int1 == int0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(6, int1);
      
      int int2 = 1;
      Options options0 = new Options();
      assertNotNull(options0);
      
      String string1 = "FU9YaO";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("FU9YaO", options0, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertNotNull(helpFormatter0);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = new Options();
      assertFalse(options1.equals((Object)options0));
      assertNotNull(options1);
      
      helpFormatter0.optionComparator = null;
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertNotNull(helpFormatter1);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, helpFormatter1.defaultDescPad);
      
      helpFormatter1.printHelp(13, "-", "--", options0, "\n");
      assertFalse(options0.equals((Object)options1));
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertNotSame(options0, options1);
      assertNotSame(helpFormatter1, helpFormatter0);
      
      int int0 = helpFormatter1.getWidth();
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, int0);
      assertNotSame(helpFormatter1, helpFormatter0);
      
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertNull(comparator0);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotSame(helpFormatter0, helpFormatter1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-1);
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      byteArray0[2] = (byte)60;
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "X");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-10);
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte) (-118);
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-70), (byte) (-1), (byte)60, (byte) (-1), (byte) (-10), (byte)97, (byte) (-118)}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(boolean2);
      
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      helpFormatter0.defaultSyntaxPrefix = "";
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      String string0 = helpFormatter0.getSyntaxPrefix();
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertNotNull(string0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("", string0);
      
      int int0 = helpFormatter0.getWidth();
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, int0);
      
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertNotNull(comparator0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      helpFormatter0.setDescPadding((-2235));
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals((-2235), helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals((-2235), helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", "--", options0, "3~9");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNotNull(helpFormatter0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      helpFormatter0.setLongOptSeparator((String) null);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertNull(helpFormatter0.getLongOptSeparator());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      String string0 = helpFormatter0.getLongOptSeparator();
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertNull(helpFormatter0.getLongOptSeparator());
      assertNull(string0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      helpFormatter0.setLongOptSeparator(" ");
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-1225), 162);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertNotNull(helpFormatter1);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      StringBuffer stringBuffer0 = helpFormatter1.renderOptions((StringBuffer) null, 1, options0, 37, 74);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertNull(stringBuffer0);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotSame(helpFormatter1, helpFormatter0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 54, (-2), "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNotNull(helpFormatter0);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      helpFormatter0.defaultSyntaxPrefix = "arg";
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      helpFormatter0.setNewLine((String) null);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertNull(helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      String string0 = helpFormatter0.getNewLine();
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertNull(helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNull(string0);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2, (String) null, (String) null, (Options) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertNotNull(helpFormatter0);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      helpFormatter0.defaultSyntaxPrefix = "arg";
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      
      helpFormatter0.setLongOptSeparator("");
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      helpFormatter0.defaultOptPrefix = "";
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("", helpFormatter0.getOptPrefix());
      
      String string0 = helpFormatter0.getNewLine();
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("", helpFormatter0.getOptPrefix());
      assertNotNull(string0);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("\n", string0);
      
      String string1 = helpFormatter0.getLongOptSeparator();
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("", helpFormatter0.getOptPrefix());
      assertNotNull(string1);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertNotNull(helpFormatter0);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Option option0 = new Option("", true, "--");
      assertNull(option0.getLongOpt());
      assertNull(option0.getArgName());
      assertFalse(option0.hasArgName());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertEquals("--", option0.getDescription());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertNotNull(option0);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      
      option0.setArgName("");
      assertNull(option0.getLongOpt());
      assertEquals("", option0.getArgName());
      assertFalse(option0.hasArgName());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertEquals("--", option0.getDescription());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertNotNull(optionGroup0);
      
      option0.setLongOpt("");
      assertEquals("", option0.getLongOpt());
      assertTrue(option0.hasLongOpt());
      assertEquals("", option0.getArgName());
      assertFalse(option0.hasArgName());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertEquals("--", option0.getDescription());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      
      optionGroup0.setSelected(option0);
      assertEquals("", option0.getLongOpt());
      assertTrue(option0.hasLongOpt());
      assertEquals("", option0.getArgName());
      assertFalse(option0.hasArgName());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertEquals("--", option0.getDescription());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertEquals("", optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertEquals("", option0.getLongOpt());
      assertTrue(option0.hasLongOpt());
      assertEquals("", option0.getArgName());
      assertFalse(option0.hasArgName());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertEquals("--", option0.getDescription());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertEquals("", optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertEquals("", optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertNotNull(optionGroup1);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      
      Options options1 = options0.addOptionGroup(optionGroup0);
      assertEquals("", optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertNotNull(options1);
      assertSame(options0, options1);
      assertSame(optionGroup0, optionGroup1);
      assertSame(options1, options0);
      
      helpFormatter0.printHelp(744, "q-<8RibVk", "", options0, "x%o");
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertSame(options0, options1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      helpFormatter0.defaultSyntaxPrefix = "arg";
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      String string0 = helpFormatter0.getNewLine();
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNotNull(string0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("\n", string0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "\n", "\n", (Options) null, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("w6$#,aP\"NS;Z^B1rp", "|RO@I@Ym7PEVAR'v", (Options) null, "|RO@I@Ym7PEVAR'v", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertNotNull(helpFormatter0);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      String string0 = helpFormatter0.getLongOptSeparator();
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertNotNull(string0);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(" ", string0);
      
      String string1 = "";
      helpFormatter0.setArgName("");
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      helpFormatter0.setLeftPadding(10);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(10, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(10, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      String string2 = "Bm%<zX0K~Jt>nmWa ";
      helpFormatter0.defaultSyntaxPrefix = "Bm%<zX0K~Jt>nmWa ";
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(10, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("Bm%<zX0K~Jt>nmWa ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      
      StringBuffer stringBuffer0 = new StringBuffer(0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, " ");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Option option0 = new Option("", true, "--");
      assertFalse(option0.hasArgName());
      assertEquals("--", option0.getDescription());
      assertEquals(1, option0.getArgs());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasArgs());
      assertEquals("", option0.getOpt());
      assertNull(option0.getValue());
      assertFalse(option0.isRequired());
      assertNull(option0.getArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArg());
      assertFalse(option0.hasOptionalArg());
      assertNotNull(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      option0.setArgName("");
      assertFalse(option0.hasArgName());
      assertEquals("--", option0.getDescription());
      assertEquals(1, option0.getArgs());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasArgs());
      assertEquals("", option0.getOpt());
      assertNull(option0.getValue());
      assertFalse(option0.isRequired());
      assertEquals("", option0.getArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArg());
      assertFalse(option0.hasOptionalArg());
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertNotNull(optionGroup0);
      
      option0.setLongOpt("");
      assertFalse(option0.hasArgName());
      assertEquals("--", option0.getDescription());
      assertEquals(1, option0.getArgs());
      assertEquals("", option0.getLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasArgs());
      assertEquals("", option0.getOpt());
      assertNull(option0.getValue());
      assertFalse(option0.isRequired());
      assertEquals("", option0.getArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArg());
      assertTrue(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      optionGroup0.setSelected(option0);
      assertFalse(option0.hasArgName());
      assertEquals("--", option0.getDescription());
      assertEquals(1, option0.getArgs());
      assertEquals("", option0.getLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasArgs());
      assertEquals("", option0.getOpt());
      assertNull(option0.getValue());
      assertFalse(option0.isRequired());
      assertEquals("", option0.getArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArg());
      assertTrue(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertEquals("", optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertFalse(option0.hasArgName());
      assertEquals("--", option0.getDescription());
      assertEquals(1, option0.getArgs());
      assertEquals("", option0.getLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasArgs());
      assertEquals("", option0.getOpt());
      assertNull(option0.getValue());
      assertFalse(option0.isRequired());
      assertEquals("", option0.getArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArg());
      assertTrue(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertEquals("", optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertEquals("", optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertNotNull(optionGroup1);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      
      Options options1 = options0.addOptionGroup(optionGroup1);
      assertFalse(option0.hasArgName());
      assertEquals("--", option0.getDescription());
      assertEquals(1, option0.getArgs());
      assertEquals("", option0.getLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasArgs());
      assertEquals("", option0.getOpt());
      assertNull(option0.getValue());
      assertFalse(option0.isRequired());
      assertEquals("", option0.getArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArg());
      assertTrue(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertEquals("", optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertEquals("", optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertNotNull(options1);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(options0, options1);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertSame(options1, options0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Option option0 = new Option("", true, "usage: ");
      assertFalse(option0.isRequired());
      assertEquals("", option0.getOpt());
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArg());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasArgName());
      assertNull(option0.getLongOpt());
      assertEquals(1, option0.getArgs());
      assertEquals("usage: ", option0.getDescription());
      assertNotNull(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      option0.setArgName("-");
      assertFalse(option0.isRequired());
      assertEquals("", option0.getOpt());
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArg());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasOptionalArg());
      assertEquals("-", option0.getArgName());
      assertNull(option0.getLongOpt());
      assertEquals(1, option0.getArgs());
      assertEquals("usage: ", option0.getDescription());
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertNotNull(optionGroup0);
      
      option0.setLongOpt("");
      assertFalse(option0.isRequired());
      assertEquals("", option0.getOpt());
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArg());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasOptionalArg());
      assertTrue(option0.hasLongOpt());
      assertEquals("-", option0.getArgName());
      assertEquals("", option0.getLongOpt());
      assertEquals(1, option0.getArgs());
      assertEquals("usage: ", option0.getDescription());
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      optionGroup0.setSelected(option0);
      assertFalse(option0.isRequired());
      assertEquals("", option0.getOpt());
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArg());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasOptionalArg());
      assertTrue(option0.hasLongOpt());
      assertEquals("-", option0.getArgName());
      assertEquals("", option0.getLongOpt());
      assertEquals(1, option0.getArgs());
      assertEquals("usage: ", option0.getDescription());
      assertEquals("", optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertFalse(option0.isRequired());
      assertEquals("", option0.getOpt());
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArg());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasOptionalArg());
      assertTrue(option0.hasLongOpt());
      assertEquals("-", option0.getArgName());
      assertEquals("", option0.getLongOpt());
      assertEquals(1, option0.getArgs());
      assertEquals("usage: ", option0.getDescription());
      assertEquals("", optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertEquals("", optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertNotNull(optionGroup1);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      
      Options options1 = options0.addOptionGroup(optionGroup0);
      assertEquals("", optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertNotNull(options1);
      assertSame(options0, options1);
      assertSame(optionGroup0, optionGroup1);
      assertSame(options1, options0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(10, "org.apache.commons.cli.OptionValidator", (String) null, options1, "org.apache.commons.cli.OptionValidator");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      String string0 = "J*h!B'";
      String string1 = helpFormatter0.getNewLine();
      assertFalse(string1.equals((Object)string0));
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertNotNull(string1);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("\n", string1);
      
      Options options0 = null;
      int int0 = (-1901);
      String string2 = "<oEM5dB:?BMgUYU";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("<oEM5dB:?BMgUYU", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNotNull(helpFormatter0);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Option option0 = new Option("", true, "usage: ");
      assertFalse(option0.hasArgName());
      assertEquals("usage: ", option0.getDescription());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getArgName());
      assertTrue(option0.hasArg());
      assertFalse(option0.hasArgs());
      assertNull(option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertNull(option0.getValue());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasValueSeparator());
      assertEquals(1, option0.getArgs());
      assertNotNull(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertNotNull(optionGroup0);
      
      optionGroup0.setSelected(option0);
      assertFalse(option0.hasArgName());
      assertEquals("usage: ", option0.getDescription());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getArgName());
      assertTrue(option0.hasArg());
      assertFalse(option0.hasArgs());
      assertNull(option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertNull(option0.getValue());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasValueSeparator());
      assertEquals(1, option0.getArgs());
      assertEquals("", optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertFalse(option0.hasArgName());
      assertEquals("usage: ", option0.getDescription());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getArgName());
      assertTrue(option0.hasArg());
      assertFalse(option0.hasArgs());
      assertNull(option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertNull(option0.getValue());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasValueSeparator());
      assertEquals(1, option0.getArgs());
      assertEquals("", optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(optionGroup1.isRequired());
      assertEquals("", optionGroup1.getSelected());
      assertNotNull(optionGroup1);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      
      Options options1 = options0.addOptionGroup(optionGroup0);
      assertEquals("", optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertNotNull(options1);
      assertSame(options0, options1);
      assertSame(optionGroup0, optionGroup1);
      assertSame(options1, options0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertNotNull(helpFormatter1);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      
      Options options2 = options0.addOption("q", "r%\"+u)L3Ts!9S3$>", true, " ");
      assertNotNull(options2);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options2, options1);
      assertSame(options2, options0);
      
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "usage: ", options2);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertSame(options2, options1);
      assertSame(options2, options0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertNotNull(helpFormatter0);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      helpFormatter0.defaultNewLine = "";
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      helpFormatter0.defaultSyntaxPrefix = "J*h'";
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("J*h'", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      String string0 = helpFormatter0.getNewLine();
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("J*h'", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertNotNull(string0);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNotNull(helpFormatter0);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      boolean boolean0 = true;
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      helpFormatter0.setArgName("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      String string0 = helpFormatter0.getSyntaxPrefix();
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNotNull(string0);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("usage: ", string0);
      
      String string1 = "";
      helpFormatter0.defaultOptPrefix = "";
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", helpFormatter0.getArgName());
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      helpFormatter0.defaultLongOptPrefix = "";
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", helpFormatter0.getArgName());
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      String string2 = helpFormatter0.getLongOptPrefix();
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", helpFormatter0.getArgName());
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNotNull(string2);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("", string2);
      
      String string3 = helpFormatter0.getSyntaxPrefix();
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", helpFormatter0.getArgName());
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNotNull(string3);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("usage: ", string3);
      
      String string4 = helpFormatter0.getArgName();
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", helpFormatter0.getArgName());
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNotNull(string4);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", string4);
      
      String string5 = helpFormatter0.getArgName();
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", helpFormatter0.getArgName());
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNotNull(string5);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", string5);
      
      PrintWriter printWriter0 = null;
      int int0 = (-90);
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption("arg", "usage: ", true, "cmdLineSyntax not provided");
      assertNotNull(options1);
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      // Undeclared exception!
      try { 
        options1.addOption(" ", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("/rO");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "<", (String) null, options0, 3, 285, (String) null, false);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      helpFormatter0.defaultSyntaxPrefix = "J*h!B'";
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("J*h!B'", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      String string0 = helpFormatter0.getNewLine();
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("J*h!B'", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertNotNull(string0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("\n", string0);
      
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      assertEquals(3, int0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2, "\n", "\n", (Options) null, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNotNull(helpFormatter0);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Option option0 = new Option("", "-", false, "-");
      assertFalse(option0.hasArg());
      assertFalse(option0.hasArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertNull(option0.getArgName());
      assertEquals("-", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertEquals("", option0.getOpt());
      assertNull(option0.getValue());
      assertEquals("-", option0.getLongOpt());
      assertFalse(option0.isRequired());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasOptionalArg());
      assertTrue(option0.hasLongOpt());
      assertNotNull(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 32, "(%kdQ", "", options0, 44, 0, "");
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNotNull(helpFormatter0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Option option0 = new Option("", true, "");
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasArgName());
      assertFalse(option0.hasOptionalArg());
      assertEquals("", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertNull(option0.getArgName());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArg());
      assertEquals(1, option0.getArgs());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertEquals('\u0000', option0.getValueSeparator());
      assertNull(option0.getValue());
      assertNull(option0.getLongOpt());
      assertNotNull(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertNotNull(optionGroup0);
      
      optionGroup0.setRequired(true);
      assertNull(optionGroup0.getSelected());
      assertTrue(optionGroup0.isRequired());
      
      optionGroup0.setSelected(option0);
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasArgName());
      assertFalse(option0.hasOptionalArg());
      assertEquals("", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertNull(option0.getArgName());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArg());
      assertEquals(1, option0.getArgs());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertEquals('\u0000', option0.getValueSeparator());
      assertNull(option0.getValue());
      assertNull(option0.getLongOpt());
      assertEquals("", optionGroup0.getSelected());
      assertTrue(optionGroup0.isRequired());
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasArgName());
      assertFalse(option0.hasOptionalArg());
      assertEquals("", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertNull(option0.getArgName());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArg());
      assertEquals(1, option0.getArgs());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertEquals('\u0000', option0.getValueSeparator());
      assertNull(option0.getValue());
      assertNull(option0.getLongOpt());
      assertEquals("", optionGroup0.getSelected());
      assertTrue(optionGroup0.isRequired());
      assertEquals("", optionGroup1.getSelected());
      assertTrue(optionGroup1.isRequired());
      assertNotNull(optionGroup1);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      
      Options options1 = options0.addOptionGroup(optionGroup0);
      assertEquals("", optionGroup0.getSelected());
      assertTrue(optionGroup0.isRequired());
      assertNotNull(options1);
      assertSame(options0, options1);
      assertSame(optionGroup0, optionGroup1);
      assertSame(options1, options0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertNotNull(helpFormatter1);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, " 'tQ#CDS<,", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      String string0 = "YWM8XUV\\}";
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "YWM8XUV}", "}#z6*bryllb/q", options0, 63, 1686, "S+0gN(N#JTV{v.&B23");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertNotNull(helpFormatter0);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      helpFormatter0.defaultDescPad = (-877);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals((-877), helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      helpFormatter0.defaultLongOptPrefix = null;
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNull(helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals((-877), helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      String string1 = helpFormatter0.getLongOptSeparator();
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNull(helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals((-877), helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertNotNull(string1);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals((-877), helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(" ", string1);
      
      int int0 = helpFormatter0.getDescPadding();
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNull(helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals((-877), helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals((-877), helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals((-877), int0);
      
      int int1 = 177;
      Options options0 = new Options();
      assertNotNull(options0);
      
      // Undeclared exception!
      try { 
        options0.addOption("v%!U711!VwG=", "arg", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'v%!U711!VwG=' contains an illegal character : '%'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      int int0 = 13;
      StringWriter stringWriter0 = new StringWriter(74);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      int int1 = (-889);
      StringBuffer stringBuffer1 = stringBuffer0.append((float) 1);
      assertEquals("1.0", stringWriter0.toString());
      assertEquals("1.0", stringBuffer0.toString());
      assertEquals(3, stringBuffer0.length());
      assertEquals("1.0", stringBuffer1.toString());
      assertEquals(3, stringBuffer1.length());
      assertNotNull(stringBuffer1);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      
      int int2 = 2175;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2175, "[", " [ARG]", (Options) null, "v@z}XED@j&+)!onv'0", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      assertNotNull(mockPrintWriter0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 44, "}1R(u<$tg7{w) y'Qf", "}1R(u<$tg7{w) y'Qf", (Options) null, 13, 7, "org.aRache.commons.cli.HelpFormatter$1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.printHelp(449, " IA$8jf&i+/xj1AB", "", options0, "org.apache.commons.cli.OptionValidator");
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 231, "org.apache.commons.cli.OptionValidator");
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("usage: ");
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertNotNull(mockPrintWriter1);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 2, "4", "", options0, 449, (-283), "org.apache.commons.cli.OptionValidator");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertNotNull(helpFormatter0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("3nFxHtiN)>$phHZjf");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Option option0 = new Option((String) null, "yK%");
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals("yK%", option0.getDescription());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasArgName());
      assertNull(option0.getArgName());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasArgs());
      assertNotNull(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      Options options1 = options0.addOption(option0);
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals("yK%", option0.getDescription());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasArgName());
      assertNull(option0.getArgName());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasArgs());
      assertNotNull(options1);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 116, "q", "Xk,|rrc<=@S:;eWEv", options1, 116, 145, "Cannot add value, list full.", true);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals("yK%", option0.getDescription());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasArgName());
      assertNull(option0.getArgName());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasArgs());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      Options options2 = new Options();
      assertFalse(options2.equals((Object)options0));
      assertFalse(options2.equals((Object)options1));
      assertNotNull(options2);
      
      String string0 = helpFormatter0.getNewLine();
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertNotNull(string0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("\n", string0);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertNotNull(mockPrintWriter1);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-508), "", "q4'n1ZhAC$]i4hP", options1, (-508), (-3272), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertNotNull(helpFormatter0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "", options0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      String string0 = helpFormatter0.getNewLine();
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNotNull(string0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("\n", string0);
      
      helpFormatter0.setWidth(1);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(1, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      assertEquals(3, int0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string1 = helpFormatter0.createPadding(642);
      assertFalse(string1.equals((Object)string0));
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(1, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNotNull(string1);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEqualsstring1);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertNotNull(optionGroup0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      StringWriter stringWriter0 = new StringWriter(74);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3, 1, "\n");
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(1, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n ", stringWriter0.toString());
      assertEquals(2, stringBuffer0.length());
      assertEquals("\n ", stringBuffer0.toString());
      assertEquals(2, stringBuffer1.length());
      assertEquals("\n ", stringBuffer1.toString());
      assertNotNull(stringBuffer1);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      
      String string2 = helpFormatter0.getSyntaxPrefix();
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(1, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNotNull(string2);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("usage: ", string2);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertNotNull(helpFormatter1);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      
      int int1 = helpFormatter0.getWidth();
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertFalse(int1 == int0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(1, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, int1);
      assertNotSame(helpFormatter0, helpFormatter1);
      
      String string3 = helpFormatter1.getNewLine();
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertNotNull(string3);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals("\n", string3);
      assertNotSame(helpFormatter1, helpFormatter0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      assertNotNull(mockPrintWriter0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "usage: ", "cmdLineSyntax not provided", options0, (-508), 97, "n*Uv3P)m");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("3nFxHtiN)>$phHZjf");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = null;
      int int0 = 6;
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      StringBuffer stringBuffer0 = new StringBuffer(6);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      helpFormatter0.setLongOptSeparator("Xk,|rrc<=@S:;eWEv");
      assertEquals("Xk,|rrc<=@S:;eWEv", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 6, (Options) null, 124, 59);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      helpFormatter0.defaultDescPad = (-1681);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals((-1681), helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      
      String string0 = helpFormatter0.getLongOptSeparator();
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals((-1681), helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertNotNull(string0);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals((-1681), helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(" ", string0);
      
      String string1 = "u'O4!:XN";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "u'O4!:XN", "xMG%$3L", (Options) null, " ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      String string0 = "q";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("3nFxHtiN)>$phHZjf");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Option option0 = new Option((String) null, "yK%");
      assertFalse(option0.hasArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertNull(option0.getArgName());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getOpt());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getValue());
      assertEquals("yK%", option0.getDescription());
      assertFalse(option0.isRequired());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertNotNull(option0);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      
      Options options1 = options0.addOption(option0);
      assertFalse(option0.hasArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertNull(option0.getArgName());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getOpt());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getValue());
      assertEquals("yK%", option0.getDescription());
      assertFalse(option0.isRequired());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertNotNull(options1);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      Options options2 = options1.addOption(option0);
      assertFalse(option0.hasArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertNull(option0.getArgName());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getOpt());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getValue());
      assertEquals("yK%", option0.getDescription());
      assertFalse(option0.isRequired());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertNotNull(options2);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options2, options0);
      assertSame(options2, options1);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertNotNull(helpFormatter1);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      mockPrintWriter0.println((double) 1);
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 0, "--", "arg", options2, (-1027), (-3188), " ", true);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("3nFxHtiN)>$phHZjf");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Option option0 = new Option((String) null, "--");
      assertFalse(option0.hasArgs());
      assertEquals((-1), option0.getArgs());
      assertEquals("--", option0.getDescription());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getArgName());
      assertFalse(option0.hasOptionalArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasArgName());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertFalse(option0.isRequired());
      assertNull(option0.getOpt());
      assertNull(option0.getValue());
      assertNotNull(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      Collection collection0 = options0.getOptions();
      assertNotNull(collection0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Options options1 = options0.addOption(option0);
      assertFalse(option0.hasArgs());
      assertEquals((-1), option0.getArgs());
      assertEquals("--", option0.getDescription());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getArgName());
      assertFalse(option0.hasOptionalArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasArgName());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertFalse(option0.isRequired());
      assertNull(option0.getOpt());
      assertNull(option0.getValue());
      assertNotNull(options1);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 116, "--", "Xk,|rrc<=@S:;eWEv", options1, 116, 145, "Cannot add value, list full.", true);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertFalse(option0.hasArgs());
      assertEquals((-1), option0.getArgs());
      assertEquals("--", option0.getDescription());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getArgName());
      assertFalse(option0.hasOptionalArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasArgName());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertFalse(option0.isRequired());
      assertNull(option0.getOpt());
      assertNull(option0.getValue());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      Options options2 = new Options();
      assertFalse(options2.equals((Object)options0));
      assertFalse(options2.equals((Object)options1));
      assertNotNull(options2);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(74, helpFormatter1.getWidth());
      assertNotNull(helpFormatter1);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      
      boolean boolean1 = options2.hasLongOption(" ");
      assertFalse(options2.equals((Object)options0));
      assertFalse(options2.equals((Object)options1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(options2, options0);
      assertNotSame(options2, options1);
      
      helpFormatter1.printHelp(9, "Xk,|rrc<=@S:;eWEv", "c", options2, "");
      assertFalse(options2.equals((Object)options0));
      assertFalse(options2.equals((Object)options1));
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertNotSame(options2, options0);
      assertNotSame(options2, options1);
      assertNotSame(helpFormatter1, helpFormatter0);
      
      int int0 = 11;
      String string0 = "arg";
      String string1 = "wd!}.rk$^qf,+?k";
      Options options3 = new Options();
      assertFalse(options3.equals((Object)options2));
      assertFalse(options3.equals((Object)options1));
      assertFalse(options3.equals((Object)options0));
      assertNotNull(options3);
      
      Options options4 = options3.addOption("", "usage: ", false, "-");
      assertFalse(options4.equals((Object)options0));
      assertFalse(options4.equals((Object)options2));
      assertFalse(options4.equals((Object)options1));
      assertFalse(options3.equals((Object)options2));
      assertFalse(options3.equals((Object)options1));
      assertFalse(options3.equals((Object)options0));
      assertNotNull(options4);
      assertNotSame(options4, options0);
      assertSame(options4, options3);
      assertNotSame(options4, options2);
      assertNotSame(options4, options1);
      assertNotSame(options3, options2);
      assertSame(options3, options4);
      assertNotSame(options3, options1);
      assertNotSame(options3, options0);
      
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, (-143), "--", options4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      helpFormatter0.defaultWidth = 1715;
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1715, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      String string0 = helpFormatter0.getNewLine();
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1715, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNotNull(string0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1715, helpFormatter0.defaultWidth);
      assertEquals("\n", string0);
      
      helpFormatter0.setWidth(1715);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1715, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1715, helpFormatter0.defaultWidth);
      
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      assertEquals(3, int0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1715, 1715, "\n");
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1715, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n ", stringBuffer0.toString());
      assertEquals(2, stringBuffer0.length());
      assertEquals("\n ", stringBuffer1.toString());
      assertEquals(2, stringBuffer1.length());
      assertNotNull(stringBuffer1);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1715, helpFormatter0.defaultWidth);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer0, 31, 3, "e,5jjC+n");
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1715, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(11, stringBuffer0.length());
      assertEquals("\n e,5jjC+n", stringBuffer0.toString());
      assertEquals(11, stringBuffer2.length());
      assertEquals("\n e,5jjC+n", stringBuffer2.toString());
      assertNotNull(stringBuffer2);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1715, helpFormatter0.defaultWidth);
      assertSame(stringBuffer0, stringBuffer2);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer2, stringBuffer0);
      assertSame(stringBuffer2, stringBuffer1);
      
      String string1 = helpFormatter0.getLongOptSeparator();
      assertFalse(string1.equals((Object)string0));
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1715, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNotNull(string1);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1715, helpFormatter0.defaultWidth);
      assertEquals(" ", string1);
      
      String string2 = helpFormatter0.getArgName();
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1715, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNotNull(string2);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1715, helpFormatter0.defaultWidth);
      assertEquals("arg", string2);
      
      String string3 = helpFormatter0.createPadding(506);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1715, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNotNull(string3);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1715, helpFormatter0.defaultWidth);
      assertEqualsstring3);
      
      String string4 = helpFormatter0.getOptPrefix();
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1715, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNotNull(string4);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1715, helpFormatter0.defaultWidth);
      assertEquals("-", string4);
      
      int int1 = helpFormatter0.getDescPadding();
      assertTrue(int1 == int0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1715, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1715, helpFormatter0.defaultWidth);
      assertEquals(3, int1);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 538);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(bufferedOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertNotNull(optionGroup0);
      
      String string5 = "[ARG...]";
      Option option0 = null;
      try {
        option0 = new Option("v6*T-(q~1tFf", false, "[ARG...]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'v6*T-(q~1tFf' contains an illegal character : '*'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption((String) null, "qj,6O{|(0^~n", false, "-");
      assertNotNull(options1);
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      Option option0 = new Option((String) null, "line.separator", true, " ");
      assertEquals("line.separator", option0.getLongOpt());
      assertEquals(108, option0.getId());
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertNull(option0.getOpt());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getArgName());
      assertFalse(option0.isRequired());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasOptionalArg());
      assertTrue(option0.hasArg());
      assertEquals(" ", option0.getDescription());
      assertFalse(option0.hasArgName());
      assertTrue(option0.hasLongOpt());
      assertNotNull(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      Options options2 = options0.addOption("", false, "usage: ");
      assertNotNull(options2);
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options2, options0);
      assertSame(options2, options1);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertNotNull(optionGroup0);
      
      Options options3 = options1.addOption(option0);
      assertEquals("line.separator", option0.getLongOpt());
      assertEquals(108, option0.getId());
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertNull(option0.getOpt());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getArgName());
      assertFalse(option0.isRequired());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasOptionalArg());
      assertTrue(option0.hasArg());
      assertEquals(" ", option0.getDescription());
      assertFalse(option0.hasArgName());
      assertTrue(option0.hasLongOpt());
      assertNotNull(options3);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(options0, options3);
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options1, options3);
      assertSame(options1, options0);
      assertSame(options1, options2);
      assertSame(options3, options0);
      assertSame(options3, options1);
      assertSame(options3, options2);
      
      MockFile mockFile0 = new MockFile("\n");
      assertNotNull(mockFile0);
      
      File file0 = MockFile.createTempFile("qj,6O{|(0^~n", "usage: ", (File) mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("\n", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertEquals("\n", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals("qj,6O{|(0^~n0usage: ", file0.getName());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("/experiment/\n/qj,6O{|(0^~n0usage: ", file0.toString());
      assertTrue(file0.canRead());
      assertEquals("/experiment/\n", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertNotNull(mockFileOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertNotNull(mockPrintWriter0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-4305), (String) null, "org.apache.commons.cli.ParseException", options3, 1064, (-2), "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      helpFormatter0.defaultWidth = 1715;
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1715, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      String string0 = helpFormatter0.getNewLine();
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1715, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertNotNull(string0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1715, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("\n", string0);
      
      helpFormatter0.setWidth(1715);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1715, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1715, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      assertEquals(3, int0);
      
      String string1 = helpFormatter0.createPadding(642);
      assertFalse(string1.equals((Object)string0));
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1715, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertNotNull(string1);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1715, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEqualsstring1);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertNotNull(optionGroup0);
      
      Options options1 = new Options();
      assertFalse(options1.equals((Object)options0));
      assertNotNull(options1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      assertNotNull(mockPrintWriter0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWritertring) null, options1, (-920), 4, ",y]rMN9AphD^@]~%", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertNotNull(helpFormatter0);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      helpFormatter0.defaultArgName = "";
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      String string0 = helpFormatter0.rtrim("");
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertNotNull(string0);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("", string0);
      
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, int0);
      
      StringBuffer stringBuffer0 = new StringBuffer(74);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertNotNull(optionGroup0);
      
      Options options1 = options0.addOptionGroup(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertNotNull(options1);
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      Option option0 = new Option("", (String) null, false, "<");
      assertFalse(option0.hasArgName());
      assertFalse(option0.hasArg());
      assertEquals("<", option0.getDescription());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.isRequired());
      assertEquals("", option0.getOpt());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertNull(option0.getLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getArgName());
      assertNotNull(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      Options options2 = options1.addOption(option0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(option0.hasArgName());
      assertFalse(option0.hasArg());
      assertEquals("<", option0.getDescription());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.isRequired());
      assertEquals("", option0.getOpt());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertNull(option0.getLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getArgName());
      assertNotNull(options2);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options2, options0);
      assertSame(options2, options1);
      
      Options options3 = options2.addOption("", "7'5p", false, "--");
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(option0.hasArgName());
      assertFalse(option0.hasArg());
      assertEquals("<", option0.getDescription());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.isRequired());
      assertEquals("", option0.getOpt());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertNull(option0.getLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getArgName());
      assertNotNull(options3);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options0, options3);
      assertSame(options1, options3);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options2, options0);
      assertSame(options2, options3);
      assertSame(options2, options1);
      assertSame(options3, options2);
      assertSame(options3, options0);
      assertSame(options3, options1);
      
      Options options4 = options3.addOption("NO_ARGS_ALLOWED", false, "5*k3");
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(option0.hasArgName());
      assertFalse(option0.hasArg());
      assertEquals("<", option0.getDescription());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.isRequired());
      assertEquals("", option0.getOpt());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertNull(option0.getLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getArgName());
      assertNotNull(options4);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(options0, options4);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options0, options3);
      assertSame(options1, options3);
      assertSame(options1, options2);
      assertSame(options1, options4);
      assertSame(options1, options0);
      assertSame(options2, options0);
      assertSame(options2, options4);
      assertSame(options2, options3);
      assertSame(options2, options1);
      assertSame(options3, options2);
      assertSame(options3, options0);
      assertSame(options3, options1);
      assertSame(options3, options4);
      assertSame(options4, options2);
      assertSame(options4, options0);
      assertSame(options4, options3);
      assertSame(options4, options1);
      
      Options options5 = options4.addOption("", "]", false, "~wb^;dpi+\"p[>)!P/");
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(option0.hasArgName());
      assertFalse(option0.hasArg());
      assertEquals("<", option0.getDescription());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.isRequired());
      assertEquals("", option0.getOpt());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertNull(option0.getLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getArgName());
      assertNotNull(options5);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(options0, options4);
      assertSame(options0, options5);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options0, options3);
      assertSame(options1, options3);
      assertSame(options1, options2);
      assertSame(options1, options5);
      assertSame(options1, options4);
      assertSame(options1, options0);
      assertSame(options2, options0);
      assertSame(options2, options5);
      assertSame(options2, options4);
      assertSame(options2, options3);
      assertSame(options2, options1);
      assertSame(options3, options2);
      assertSame(options3, options0);
      assertSame(options3, options5);
      assertSame(options3, options1);
      assertSame(options3, options4);
      assertSame(options4, options5);
      assertSame(options4, options2);
      assertSame(options4, options0);
      assertSame(options4, options3);
      assertSame(options4, options1);
      assertSame(options5, options0);
      assertSame(options5, options3);
      assertSame(options5, options4);
      assertSame(options5, options1);
      assertSame(options5, options2);
      
      helpFormatter0.printHelp(34, "7'5p", "", options2, "NO_ARGS_ALLOWED");
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(option0.hasArgName());
      assertFalse(option0.hasArg());
      assertEquals("<", option0.getDescription());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.isRequired());
      assertEquals("", option0.getOpt());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertNull(option0.getLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getArgName());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(options0, options4);
      assertSame(options0, options5);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options0, options3);
      assertSame(options1, options3);
      assertSame(options1, options2);
      assertSame(options1, options5);
      assertSame(options1, options4);
      assertSame(options1, options0);
      assertSame(options2, options0);
      assertSame(options2, options5);
      assertSame(options2, options4);
      assertSame(options2, options3);
      assertSame(options2, options1);
      
      int int1 = helpFormatter0.getLeftPadding();
      assertTrue(int1 == int0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertNotNull(helpFormatter0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      helpFormatter0.defaultArgName = "";
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      String string0 = helpFormatter0.rtrim("");
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertNotNull(string0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("", string0);
      
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, int0);
      
      StringBuffer stringBuffer0 = new StringBuffer(74);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 34, (-5192), ", ");
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(1, stringBuffer0.length());
      assertEquals(",", stringBuffer0.toString());
      assertEquals(",", stringBuffer1.toString());
      assertEquals(1, stringBuffer1.length());
      assertNotNull(stringBuffer1);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 506, 506, "t8`7ctVC8");
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(",t8`7ctVC8", stringBuffer0.toString());
      assertEquals(10, stringBuffer0.length());
      assertEquals(",t8`7ctVC8", stringBuffer1.toString());
      assertEquals(10, stringBuffer1.length());
      assertEquals(",t8`7ctVC8", stringBuffer2.toString());
      assertEquals(10, stringBuffer2.length());
      assertNotNull(stringBuffer2);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertSame(stringBuffer0, stringBuffer2);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer2);
      assertSame(stringBuffer1, stringBuffer0);
      assertSame(stringBuffer2, stringBuffer0);
      assertSame(stringBuffer2, stringBuffer1);
      
      String string1 = helpFormatter0.getLongOptSeparator();
      assertFalse(string1.equals((Object)string0));
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertNotNull(string1);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", string1);
      
      String string2 = helpFormatter0.getArgName();
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertNotNull(string2);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("", string2);
      
      String string3 = helpFormatter0.createPadding(506);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertNotNull(string3);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEqualsstring3);
      
      String string4 = helpFormatter0.getOptPrefix();
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertNotNull(string4);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("-", string4);
      
      int int1 = helpFormatter0.getDescPadding();
      assertFalse(int1 == int0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, int1);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 74);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(bufferedOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertNotNull(optionGroup0);
      
      Option option0 = new Option((String) null, false, "");
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getDescription());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getOpt());
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasArg());
      assertNull(option0.getArgName());
      assertNull(option0.getLongOpt());
      assertNotNull(option0);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getDescription());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getOpt());
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasArg());
      assertNull(option0.getArgName());
      assertNull(option0.getLongOpt());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertNotNull(optionGroup1);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      
      Options options1 = options0.addOptionGroup(optionGroup1);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getDescription());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getOpt());
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasArg());
      assertNull(option0.getArgName());
      assertNull(option0.getLongOpt());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertNotNull(options1);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertSame(options0, options1);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertSame(options1, options0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "_ucV_|qX;{VObjm@mp", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertNotNull(helpFormatter0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(filterOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(filterOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(dataOutputStream0);
      
      dataOutputStream0.writeInt(74);
      assertEquals("\u0000\u0000\u0000J", byteArrayOutputStream0.toString());
      assertEquals(4, byteArrayOutputStream0.size());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'C';
      charArray0[1] = '>';
      charArray0[2] = '&';
      charArray0[3] = '#';
      mockPrintWriter0.print(charArray0);
      assertEquals("\u0000\u0000\u0000J", byteArrayOutputStream0.toString());
      assertEquals(4, byteArrayOutputStream0.size());
      assertArrayEquals(new char[] {'C', '>', '&', '#'}, charArray0);
      assertEquals(4, charArray0.length);
      
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      assertEquals("\u0000\u0000\u0000J", byteArrayOutputStream0.toString());
      assertEquals(4, byteArrayOutputStream0.size());
      assertNotNull(printWriter0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.printOptions(printWriter0, 10, options0, 58, 10);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("\u0000\u0000\u0000J", byteArrayOutputStream0.toString());
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "W=x>vo~");
      assertFalse(boolean0);
      
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      int int0 = (-1101);
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      assertNotNull(mockPrintWriter0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1101), "=7bU)R>*>)");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      String string0 = "9,/5/Q5;+B& X1d+H>P";
      Options options0 = new Options();
      assertNotNull(options0);
      
      boolean boolean0 = options0.hasOption("org.apache.commons.cli.HelpFormatter");
      assertFalse(boolean0);
      
      boolean boolean1 = false;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertNotNull(helpFormatter1);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      String string1 = "Z";
      boolean boolean2 = false;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(952, "", "Z", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      String string0 = "9,/5/Q5;+B& X1d+H>P";
      Options options0 = new Options();
      assertNotNull(options0);
      
      boolean boolean0 = options0.hasOption("org.apache.commons.cli.HelpFormatter");
      assertFalse(boolean0);
      
      boolean boolean1 = false;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertNotNull(helpFormatter1);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      boolean boolean2 = false;
      helpFormatter1.printHelp(952, "<Hz2;jLvP[r&]Si", "Z", options0, "", false);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotSame(helpFormatter1, helpFormatter0);
      
      PrintWriter printWriter0 = null;
      Options options1 = new Options();
      assertFalse(options1.equals((Object)options0));
      assertNotNull(options1);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertNotNull(optionGroup0);
      
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 74, " ", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      int int0 = helpFormatter0.getWidth();
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, int0);
      
      String string0 = helpFormatter0.createPadding(0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertNotNull(string0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("", string0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      Options options1 = new Options();
      assertFalse(options1.equals((Object)options0));
      assertNotNull(options1);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertNotNull(optionGroup0);
      
      Options options2 = options0.addOptionGroup(optionGroup0);
      assertFalse(options0.equals((Object)options1));
      assertFalse(options2.equals((Object)options1));
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertNotNull(options2);
      assertNotSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options2, options0);
      assertNotSame(options2, options1);
      
      // Undeclared exception!
      helpFormatter0.printHelp(0, "   ", "]", options0, "");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertNotNull(optionGroup0);
      
      helpFormatter0.setWidth(3);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(3, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      assertNotNull(mockPrintWriter0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("u34(", "", options0, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Option option0 = options0.getOption("-");
      assertNull(option0);
      
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 145, "q", "q", options0, 3, 3, "Xk,|rrc<=@S:;eWEv", true);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      Options options1 = new Options();
      assertFalse(options1.equals((Object)options0));
      assertNotNull(options1);
      
      helpFormatter0.printHelp(34, "\"8q;d=", "Xk,|rrc<=@S:;eWEv", options0, "{`8E?tlr!CWTGV");
      assertFalse(options0.equals((Object)options1));
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotSame(options0, options1);
      
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, int0);
      
      String string0 = helpFormatter0.getLongOptPrefix();
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertNotNull(string0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("--", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      helpFormatter0.setLongOptSeparator("usage: ");
      assertEquals("usage: ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      String string0 = helpFormatter0.rtrim((String) null);
      assertEquals("usage: ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertNull(string0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      helpFormatter0.setLongOptSeparator("");
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNotNull(helpFormatter0);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      String string0 = helpFormatter0.getSyntaxPrefix();
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNotNull(string0);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("usage: ", string0);
      
      helpFormatter0.setWidth(3);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      int int0 = helpFormatter0.getWidth();
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, int0);
      
      int int1 = helpFormatter0.findWrapPos("usage: ", 3, 1);
      assertFalse(int1 == int0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(6, int1);
      
      StringBuffer stringBuffer0 = new StringBuffer("Gc0V56s+s2");
      assertEquals("Gc0V56s+s2", stringBuffer0.toString());
      assertEquals(10, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertNotNull(helpFormatter0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = new Options();
      assertFalse(options1.equals((Object)options0));
      assertNotNull(options1);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "^jYLn", options1, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNotNull(helpFormatter0);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("3nFxHtiN)>$phHZjf");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Option option0 = new Option((String) null, "yK%");
      assertEquals("yK%", option0.getDescription());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertNull(option0.getValue());
      assertFalse(option0.isRequired());
      assertNull(option0.getOpt());
      assertFalse(option0.hasArgs());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getArgName());
      assertFalse(option0.hasOptionalArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasArgName());
      assertNotNull(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Options options1 = options0.addOption(option0);
      assertEquals("yK%", option0.getDescription());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertNull(option0.getValue());
      assertFalse(option0.isRequired());
      assertNull(option0.getOpt());
      assertFalse(option0.hasArgs());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getArgName());
      assertFalse(option0.hasOptionalArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasArgName());
      assertNotNull(options1);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 116, "q", "Xk,|rrc<=@S:;eWEv", options1, 116, 145, "Cannot add value, list full.", true);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("yK%", option0.getDescription());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertNull(option0.getValue());
      assertFalse(option0.isRequired());
      assertNull(option0.getOpt());
      assertFalse(option0.hasArgs());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getArgName());
      assertFalse(option0.hasOptionalArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasArgName());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      Options options2 = new Options();
      assertFalse(options2.equals((Object)options1));
      assertFalse(options2.equals((Object)options0));
      assertNotNull(options2);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertNotNull(helpFormatter1);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      
      String string0 = "O\\~`qpf\\<\",Zh*(Y;";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "O~`qpf<\",Zh*(Y;", "", options2, 0, (-197), (String) null, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertNotNull(helpFormatter0);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("3nFxHtiN)>$phHZjf");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Option option0 = new Option((String) null, "--");
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getValue());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasArgs());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getArgName());
      assertFalse(option0.isRequired());
      assertEquals('\u0000', option0.getValueSeparator());
      assertNull(option0.getOpt());
      assertFalse(option0.hasArgName());
      assertFalse(option0.hasOptionalArg());
      assertEquals("--", option0.getDescription());
      assertNotNull(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Option option1 = new Option((String) null, true, "L");
      assertTrue(option1.equals((Object)option0));
      assertNull(option1.getLongOpt());
      assertEquals("L", option1.getDescription());
      assertFalse(option1.hasOptionalArg());
      assertTrue(option1.hasArg());
      assertFalse(option1.hasArgName());
      assertEquals('\u0000', option1.getValueSeparator());
      assertFalse(option1.hasLongOpt());
      assertFalse(option1.hasValueSeparator());
      assertNull(option1.getArgName());
      assertNull(option1.getValue());
      assertFalse(option1.hasArgs());
      assertEquals(1, option1.getArgs());
      assertNull(option1.getOpt());
      assertFalse(option1.isRequired());
      assertNotNull(option1);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      Options options1 = options0.addOption(option1);
      assertTrue(option1.equals((Object)option0));
      assertNull(option1.getLongOpt());
      assertEquals("L", option1.getDescription());
      assertFalse(option1.hasOptionalArg());
      assertTrue(option1.hasArg());
      assertFalse(option1.hasArgName());
      assertEquals('\u0000', option1.getValueSeparator());
      assertFalse(option1.hasLongOpt());
      assertFalse(option1.hasValueSeparator());
      assertNull(option1.getArgName());
      assertNull(option1.getValue());
      assertFalse(option1.hasArgs());
      assertEquals(1, option1.getArgs());
      assertNull(option1.getOpt());
      assertFalse(option1.isRequired());
      assertNotNull(options1);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(options0, options1);
      assertNotSame(option1, option0);
      assertSame(options1, options0);
      
      Collection collection0 = options0.getOptionGroups();
      assertNotNull(collection0);
      assertSame(options0, options1);
      
      option1.setOptionalArg(false);
      assertTrue(option1.equals((Object)option0));
      assertNull(option1.getLongOpt());
      assertEquals("L", option1.getDescription());
      assertFalse(option1.hasOptionalArg());
      assertTrue(option1.hasArg());
      assertFalse(option1.hasArgName());
      assertEquals('\u0000', option1.getValueSeparator());
      assertFalse(option1.hasLongOpt());
      assertFalse(option1.hasValueSeparator());
      assertNull(option1.getArgName());
      assertNull(option1.getValue());
      assertFalse(option1.hasArgs());
      assertEquals(1, option1.getArgs());
      assertNull(option1.getOpt());
      assertFalse(option1.isRequired());
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertNotSame(option1, option0);
      
      Options options2 = options1.addOption(option1);
      assertTrue(option1.equals((Object)option0));
      assertNull(option1.getLongOpt());
      assertEquals("L", option1.getDescription());
      assertFalse(option1.hasOptionalArg());
      assertTrue(option1.hasArg());
      assertFalse(option1.hasArgName());
      assertEquals('\u0000', option1.getValueSeparator());
      assertFalse(option1.hasLongOpt());
      assertFalse(option1.hasValueSeparator());
      assertNull(option1.getArgName());
      assertNull(option1.getValue());
      assertFalse(option1.hasArgs());
      assertEquals(1, option1.getArgs());
      assertNull(option1.getOpt());
      assertFalse(option1.isRequired());
      assertNotNull(options2);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertNotSame(option1, option0);
      assertSame(options1, options0);
      assertSame(options1, options2);
      assertSame(options2, options1);
      assertSame(options2, options0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 145, "Xk,|rrc<=@S:;eWEv", "Xk,|rrc<=@S:;eWEv", options2, 63, (-2), "fw\"yD6TUH$", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Option option0 = new Option("", true, "usage: ");
      assertFalse(option0.hasArgName());
      assertNull(option0.getLongOpt());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.isRequired());
      assertEquals("", option0.getOpt());
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertEquals("usage: ", option0.getDescription());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getArgName());
      assertTrue(option0.hasArg());
      assertNotNull(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      option0.setArgName("-");
      assertNull(option0.getLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals("-", option0.getArgName());
      assertFalse(option0.isRequired());
      assertEquals("", option0.getOpt());
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertEquals("usage: ", option0.getDescription());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArg());
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertNotNull(optionGroup0);
      
      option0.setLongOpt("");
      assertEquals("", option0.getLongOpt());
      assertTrue(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals("-", option0.getArgName());
      assertFalse(option0.isRequired());
      assertEquals("", option0.getOpt());
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertEquals("usage: ", option0.getDescription());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArg());
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      optionGroup0.setSelected(option0);
      assertEquals("", option0.getLongOpt());
      assertTrue(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals("-", option0.getArgName());
      assertFalse(option0.isRequired());
      assertEquals("", option0.getOpt());
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertEquals("usage: ", option0.getDescription());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArg());
      assertEquals("", optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertEquals("", option0.getLongOpt());
      assertTrue(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals("-", option0.getArgName());
      assertFalse(option0.isRequired());
      assertEquals("", option0.getOpt());
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertEquals("usage: ", option0.getDescription());
      assertEquals('\u0000', option0.getValueSeparator());
      assertTrue(option0.hasArg());
      assertEquals("", optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertEquals("", optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertNotNull(optionGroup1);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      
      Options options1 = options0.addOptionGroup(optionGroup0);
      assertEquals("", optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertNotNull(options1);
      assertSame(options0, options1);
      assertSame(optionGroup0, optionGroup1);
      assertSame(options1, options0);
      
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "arg", options0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertSame(options0, options1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertNotNull(helpFormatter0);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Option option0 = new Option("", true, "m#6Mf2MVBNJ");
      assertNull(option0.getValue());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasLongOpt());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals(1, option0.getArgs());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasArgName());
      assertFalse(option0.hasArgs());
      assertNull(option0.getArgName());
      assertNull(option0.getLongOpt());
      assertEquals("m#6Mf2MVBNJ", option0.getDescription());
      assertNotNull(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      Options options1 = options0.addOption(option0);
      assertNull(option0.getValue());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasLongOpt());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals(1, option0.getArgs());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasArgName());
      assertFalse(option0.hasArgs());
      assertNull(option0.getArgName());
      assertNull(option0.getLongOpt());
      assertEquals("m#6Mf2MVBNJ", option0.getDescription());
      assertNotNull(options1);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      option0.setOptionalArg(false);
      assertNull(option0.getValue());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasLongOpt());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals(1, option0.getArgs());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasArgName());
      assertFalse(option0.hasArgs());
      assertNull(option0.getArgName());
      assertNull(option0.getLongOpt());
      assertEquals("m#6Mf2MVBNJ", option0.getDescription());
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      Options options2 = options1.addOption(option0);
      assertNull(option0.getValue());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasLongOpt());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals(1, option0.getArgs());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasArgName());
      assertFalse(option0.hasArgs());
      assertNull(option0.getArgName());
      assertNull(option0.getLongOpt());
      assertEquals("m#6Mf2MVBNJ", option0.getDescription());
      assertNotNull(options2);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertSame(options1, options2);
      assertSame(options2, options0);
      assertSame(options2, options1);
      
      int int0 = 0;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, "-", "-", options1, 10, 0, "-", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      String string0 = "";
      Option option0 = new Option("", true, "m#6Mf2MVBNJ");
      assertFalse(option0.isRequired());
      assertEquals("", option0.getOpt());
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getLongOpt());
      assertEquals("m#6Mf2MVBNJ", option0.getDescription());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getArgName());
      assertFalse(option0.hasArgName());
      assertTrue(option0.hasArg());
      assertNotNull(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      Options options1 = options0.addOption(option0);
      assertFalse(option0.isRequired());
      assertEquals("", option0.getOpt());
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getLongOpt());
      assertEquals("m#6Mf2MVBNJ", option0.getDescription());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getArgName());
      assertFalse(option0.hasArgName());
      assertTrue(option0.hasArg());
      assertNotNull(options1);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      option0.setOptionalArg(false);
      assertFalse(option0.isRequired());
      assertEquals("", option0.getOpt());
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getLongOpt());
      assertEquals("m#6Mf2MVBNJ", option0.getDescription());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getArgName());
      assertFalse(option0.hasArgName());
      assertTrue(option0.hasArg());
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      Options options2 = options1.addOption(option0);
      assertFalse(option0.isRequired());
      assertEquals("", option0.getOpt());
      assertNull(option0.getValue());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getLongOpt());
      assertEquals("m#6Mf2MVBNJ", option0.getDescription());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getArgName());
      assertFalse(option0.hasArgName());
      assertTrue(option0.hasArg());
      assertNotNull(options2);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options2, options0);
      assertSame(options2, options1);
      
      int int0 = 10;
      int int1 = 0;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, "-", "-", options1, 10, 0, "-", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertNotNull(helpFormatter0);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      helpFormatter0.setLongOptSeparator("vY0$8MJR!");
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("vY0$8MJR!", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.setLongOptSeparator("\n");
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      Options options1 = new Options();
      assertFalse(options1.equals((Object)options0));
      assertNotNull(options1);
      
      helpFormatter0.printHelp(3, "\n", "\n", options1, "-");
      assertFalse(options1.equals((Object)options0));
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertNotSame(options1, options0);
      
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertNotNull(helpFormatter0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 711, "Xk,|rrc<=@S:;eWEv", "has already been selected: '", options0, 711, 108, "has already been selected: '", true);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      Options options1 = new Options();
      assertFalse(options1.equals((Object)options0));
      assertNotNull(options1);
      
      helpFormatter0.setOptionComparator((Comparator) null);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNotNull(helpFormatter0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.setArgName("q");
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("q", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 145, "q", "q", options0, 3, 3, "Xk,|rrc<=@S:;eWEv", true);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("q", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("q", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, int0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("q", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("GN]S}%F@63h^=*m(|");
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf(" ", objectArray0);
      assertNotNull(printWriter0);
      assertEquals(0, objectArray0.length);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      
      helpFormatter0.defaultSyntaxPrefix = "LMT( ";
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("LMT( ", helpFormatter0.getSyntaxPrefix());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      assertTrue(list1.equals((Object)list0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1);
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNotNull(list2);
      assertNotSame(list0, list1);
      assertNotSame(list0, list2);
      assertNotSame(list1, list0);
      assertNotSame(list1, list2);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      
      List<Locale> list3 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list2);
      assertTrue(list0.equals((Object)list2));
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list2));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list3.equals((Object)list1));
      assertTrue(list3.equals((Object)list0));
      assertTrue(list3.equals((Object)list2));
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertNotNull(list3);
      assertNotSame(list0, list1);
      assertNotSame(list0, list2);
      assertNotSame(list0, list3);
      assertNotSame(list1, list0);
      assertNotSame(list1, list3);
      assertNotSame(list1, list2);
      assertNotSame(list2, list1);
      assertNotSame(list2, list3);
      assertNotSame(list2, list0);
      assertNotSame(list3, list0);
      assertNotSame(list3, list2);
      assertNotSame(list3, list1);
      
      Locale locale0 = Locale.lookup(linkedList0, list3);
      assertTrue(list0.equals((Object)list3));
      assertTrue(list0.equals((Object)list2));
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list2));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list1.equals((Object)list3));
      assertTrue(list2.equals((Object)list3));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list3.equals((Object)list1));
      assertTrue(list3.equals((Object)list0));
      assertTrue(list3.equals((Object)list2));
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertNull(locale0);
      assertNotSame(list0, list1);
      assertNotSame(list0, list2);
      assertNotSame(list0, list3);
      assertNotSame(list1, list0);
      assertNotSame(list1, list3);
      assertNotSame(list1, list2);
      assertNotSame(list2, list1);
      assertNotSame(list2, list3);
      assertNotSame(list2, list0);
      assertNotSame(list3, list0);
      assertNotSame(list3, list2);
      assertNotSame(list3, list1);
      
      PrintWriter printWriter1 = mockPrintWriter0.printf((Locale) null, "", objectArray0);
      assertNotNull(printWriter1);
      assertEquals(0, objectArray0.length);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(mockPrintWriter0, printWriter1);
      assertSame(printWriter1, mockPrintWriter0);
      assertSame(printWriter1, printWriter0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"");
      assertFalse(boolean0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Collection collection0 = options0.getOptions();
      assertNotNull(collection0);
      
      Collection collection1 = options0.getOptionGroups();
      assertFalse(collection1.equals((Object)collection0));
      assertNotNull(collection1);
      
      Collection collection2 = options0.getOptionGroups();
      assertTrue(collection2.equals((Object)collection1));
      assertFalse(collection2.equals((Object)collection0));
      assertNotNull(collection2);
      assertNotSame(collection2, collection1);
      
      helpFormatter0.printUsage(printWriter0, 2703, "GN]S}%F@63h^=*m(|", options0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("LMT( ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(0, objectArray0.length);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(mockPrintWriter0, printWriter1);
      assertSame(printWriter0, printWriter1);
      assertSame(printWriter0, mockPrintWriter0);
      
      int int0 = helpFormatter0.getDescPadding();
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("LMT( ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNotNull(helpFormatter0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertNotNull(helpFormatter1);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      
      String string0 = helpFormatter1.getLongOptSeparator();
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertNotNull(string0);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(" ", string0);
      assertNotSame(helpFormatter1, helpFormatter0);
      
      int int0 = (-3020);
      helpFormatter1.setWidth((-3020));
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals((-3020), helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals((-3020), helpFormatter1.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertNotSame(helpFormatter1, helpFormatter0);
      
      int int1 = helpFormatter1.getWidth();
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertTrue(int1 == int0);
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals((-3020), helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals((-3020), helpFormatter1.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals((-3020), int1);
      assertNotSame(helpFormatter1, helpFormatter0);
      
      int int2 = helpFormatter1.findWrapPos("D{{U", 34, 3);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals((-3020), helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals((-3020), helpFormatter1.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals((-1), int2);
      assertNotSame(helpFormatter1, helpFormatter0);
      
      int int3 = 642;
      String string1 = helpFormatter1.createPadding(74);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals((-3020), helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertNotNull(string1);
      assertEquals((-3020), helpFormatter1.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals("                                                                          ", string1);
      assertNotSame(helpFormatter1, helpFormatter0);
      
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      assertNotNull(options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertNotNull(optionGroup0);
      
      Options options1 = options0.addOptionGroup(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertNotNull(options1);
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      Option option0 = null;
      try {
        option0 = new Option("-", "gzB)<$Kl4]/yK", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      helpFormatter0.defaultWidth = 1715;
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(1715, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      String string0 = helpFormatter0.getNewLine();
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(1715, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNotNull(string0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1715, helpFormatter0.defaultWidth);
      assertEquals("\n", string0);
      
      helpFormatter0.setWidth(1715);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(1715, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1715, helpFormatter0.defaultWidth);
      
      int int0 = helpFormatter0.getWidth();
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(1715, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1715, helpFormatter0.defaultWidth);
      assertEquals(1715, int0);
      
      int int1 = helpFormatter0.findWrapPos("\n", 1715, 1715);
      assertFalse(int1 == int0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(1715, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1715, helpFormatter0.defaultWidth);
      assertEquals((-1), int1);
      
      String string1 = helpFormatter0.createPadding(642);
      assertFalse(string1.equals((Object)string0));
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(1715, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNotNull(string1);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1715, helpFormatter0.defaultWidth);
      assertEqualsstring1);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertNotNull(optionGroup0);
      
      Options options1 = options0.addOptionGroup(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertNotNull(options1);
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      StringWriter stringWriter0 = new StringWriter(74);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2463), 1715, "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      helpFormatter0.defaultWidth = 1715;
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1715, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      String string0 = helpFormatter0.getLongOptSeparator();
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1715, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertNotNull(string0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1715, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(" ", string0);
      
      helpFormatter0.setWidth(1715);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1715, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1715, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      int int0 = helpFormatter0.getWidth();
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1715, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1715, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1715, int0);
      
      int int1 = helpFormatter0.findWrapPos(" ", 1715, 1715);
      assertFalse(int1 == int0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1715, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1715, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals((-1), int1);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      assertNotNull(mockPrintStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      assertNotNull(mockPrintWriter0);
      
      PrintWriter printWriter0 = mockPrintWriter0.append('k');
      assertNotNull(printWriter0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertNotNull(helpFormatter1);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      HelpFormatter helpFormatter2 = new HelpFormatter();
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals(3, helpFormatter2.getDescPadding());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals(74, helpFormatter2.getWidth());
      assertNotNull(helpFormatter2);
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertEquals(74, helpFormatter2.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      helpFormatter2.printHelp(printWriter0, 23, "org.apache.commons.cli.Util", "   ", options0, 1418, 74, "arg", false);
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals(3, helpFormatter2.getDescPadding());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals(74, helpFormatter2.getWidth());
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertEquals(74, helpFormatter2.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotSame(helpFormatter2, helpFormatter0);
      assertNotSame(helpFormatter2, helpFormatter1);
      
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp(3, ":@{^oOHV9pYO", "arg", options0, "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertNotNull(helpFormatter0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2, "' contains an illegal character : '", "", (Options) null, ">6~<Kg!z");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertNotNull(helpFormatter0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 145, "q", "q", options0, 3, 3, "Xk,|rrc<=@S:;eWEv", true);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      Options options1 = new Options();
      assertFalse(options1.equals((Object)options0));
      assertNotNull(options1);
      
      helpFormatter0.printHelp(34, "org.apache.commons.cli.ParseException", "Xk,|rrc<=@S:;eWEv", options0, "{`8E?tlr!CWTGV");
      assertFalse(options0.equals((Object)options1));
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertNotSame(options0, options1);
      
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Option option0 = new Option("arg", "o0rDAYCv");
      assertFalse(option0.hasArgName());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.isRequired());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertEquals("arg", option0.getOpt());
      assertEquals("o0rDAYCv", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertNull(option0.getArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNotNull(option0);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      
      Options options1 = options0.addOption(option0);
      assertFalse(option0.hasArgName());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.isRequired());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertEquals("arg", option0.getOpt());
      assertEquals("o0rDAYCv", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertNull(option0.getArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNotNull(options1);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      helpFormatter0.printHelp(2956, "usage: ", "o0rDAYCv", options1, "o0rDAYCv");
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertFalse(option0.hasArgName());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.isRequired());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertEquals("arg", option0.getOpt());
      assertEquals("o0rDAYCv", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertNull(option0.getArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNotNull(comparator0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      helpFormatter0.defaultWidth = 1715;
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1715, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      String string0 = helpFormatter0.getNewLine();
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1715, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertNotNull(string0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1715, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("\n", string0);
      
      helpFormatter0.setWidth(1715);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1715, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1715, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      int int0 = helpFormatter0.getWidth();
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1715, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1715, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1715, int0);
      
      int int1 = helpFormatter0.findWrapPos("\n", 1715, 1715);
      assertFalse(int1 == int0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1715, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1715, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals((-1), int1);
      
      String string1 = helpFormatter0.createPadding(642);
      assertFalse(string1.equals((Object)string0));
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1715, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertNotNull(string1);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1715, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEqualsstring1);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertNotNull(optionGroup0);
      
      Options options1 = options0.addOptionGroup(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertNotNull(options1);
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      StringWriter stringWriter0 = new StringWriter(74);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1715, (-2463), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertNotNull(helpFormatter0);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertNotNull(helpFormatter1);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      String string0 = helpFormatter1.getLongOptSeparator();
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertNotNull(string0);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(" ", string0);
      assertNotSame(helpFormatter1, helpFormatter0);
      
      helpFormatter1.setWidth(3);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getWidth());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(3, helpFormatter1.defaultWidth);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotSame(helpFormatter1, helpFormatter0);
      
      int int0 = helpFormatter0.getWidth();
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, int0);
      assertNotSame(helpFormatter0, helpFormatter1);
      
      int int1 = helpFormatter0.findWrapPos("usage: ", 74, 1);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertFalse(int1 == int0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals((-1), int1);
      assertNotSame(helpFormatter0, helpFormatter1);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", true);
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Option option0 = new Option((String) null, "Ug|)J'");
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertNull(option0.getOpt());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.isRequired());
      assertEquals((-1), option0.getArgs());
      assertEquals("Ug|)J'", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertFalse(option0.hasArgName());
      assertNull(option0.getArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNotNull(option0);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption("", true, "Ik");
      assertNotNull(options1);
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      Options options2 = options1.addOption(option0);
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertNull(option0.getOpt());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.isRequired());
      assertEquals((-1), option0.getArgs());
      assertEquals("Ug|)J'", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertFalse(option0.hasArgName());
      assertNull(option0.getArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNotNull(options2);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertSame(options1, options2);
      assertSame(options2, options0);
      assertSame(options2, options1);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertNotNull(optionGroup0);
      
      String string1 = optionGroup0.toString();
      assertFalse(string1.equals((Object)string0));
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertNotNull(string1);
      assertEquals("[]", string1);
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertNull(option0.getOpt());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.isRequired());
      assertEquals((-1), option0.getArgs());
      assertEquals("Ug|)J'", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertFalse(option0.hasArgName());
      assertNull(option0.getArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertNotNull(optionGroup1);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      assertSame(optionGroup1, optionGroup0);
      assertSame(optionGroup0, optionGroup1);
      
      Options options3 = options0.addOptionGroup(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertNotNull(options3);
      assertSame(options3, options2);
      assertSame(options3, options0);
      assertSame(options3, options1);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options0, options3);
      assertSame(optionGroup0, optionGroup1);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", options2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNotNull(helpFormatter0);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      helpFormatter0.setLongOptSeparator("");
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", false);
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertNotNull(locale0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertNotNull(mockPrintWriter1);
      
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 2924, (-4769), "");
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      MockPrintStream mockPrintStream1 = new MockPrintStream("601G!c5T^");
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertNotNull(mockPrintStream1);
      
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintStream1, false);
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertFalse(mockPrintWriter2.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter2.equals((Object)mockPrintWriter0));
      assertNotNull(mockPrintWriter2);
      
      PrintWriter printWriter0 = mockPrintWriter2.append('');
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertFalse(mockPrintWriter2.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter2.equals((Object)mockPrintWriter0));
      assertFalse(printWriter0.equals((Object)mockPrintWriter1));
      assertFalse(printWriter0.equals((Object)mockPrintWriter0));
      assertNotNull(printWriter0);
      assertNotSame(mockPrintStream1, mockPrintStream0);
      assertSame(mockPrintWriter2, printWriter0);
      assertNotSame(mockPrintWriter2, mockPrintWriter1);
      assertNotSame(mockPrintWriter2, mockPrintWriter0);
      assertNotSame(printWriter0, mockPrintWriter1);
      assertNotSame(printWriter0, mockPrintWriter0);
      assertSame(printWriter0, mockPrintWriter2);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertNotNull(helpFormatter1);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      
      helpFormatter1.printWrapped(printWriter0, 74, (-2715), "");
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertFalse(mockPrintWriter2.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter2.equals((Object)mockPrintWriter0));
      assertFalse(printWriter0.equals((Object)mockPrintWriter1));
      assertFalse(printWriter0.equals((Object)mockPrintWriter0));
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertNotSame(mockPrintStream1, mockPrintStream0);
      assertSame(mockPrintWriter2, printWriter0);
      assertNotSame(mockPrintWriter2, mockPrintWriter1);
      assertNotSame(mockPrintWriter2, mockPrintWriter0);
      assertNotSame(printWriter0, mockPrintWriter1);
      assertNotSame(printWriter0, mockPrintWriter0);
      assertSame(printWriter0, mockPrintWriter2);
      assertNotSame(helpFormatter1, helpFormatter0);
      
      String string0 = helpFormatter0.getArgName();
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertNotNull(string0);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("arg", string0);
      assertNotSame(helpFormatter0, helpFormatter1);
      
      MockPrintWriter mockPrintWriter3 = new MockPrintWriter(mockFileOutputStream0);
      assertFalse(mockPrintWriter3.equals((Object)mockPrintWriter2));
      assertFalse(mockPrintWriter3.equals((Object)printWriter0));
      assertFalse(mockPrintWriter3.equals((Object)mockPrintWriter0));
      assertFalse(mockPrintWriter3.equals((Object)mockPrintWriter1));
      assertNotNull(mockPrintWriter3);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) ";(Q69;v0";
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) printWriter0;
      objectArray0[3] = (Object) mockPrintWriter2;
      objectArray0[4] = (Object) printWriter0;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) "601G!c5T^";
      objectArray0[7] = (Object) helpFormatter1;
      PrintWriter printWriter1 = mockPrintWriter3.printf("@>;K`^!", objectArray0);
      assertFalse(printWriter1.equals((Object)mockPrintWriter2));
      assertFalse(printWriter1.equals((Object)mockPrintWriter0));
      assertFalse(printWriter1.equals((Object)mockPrintWriter1));
      assertFalse(printWriter1.equals((Object)printWriter0));
      assertFalse(mockPrintWriter3.equals((Object)mockPrintWriter2));
      assertFalse(mockPrintWriter3.equals((Object)printWriter0));
      assertFalse(mockPrintWriter3.equals((Object)mockPrintWriter0));
      assertFalse(mockPrintWriter3.equals((Object)mockPrintWriter1));
      assertNotNull(printWriter1);
      assertEquals(8, objectArray0.length);
      assertNotSame(printWriter1, mockPrintWriter2);
      assertNotSame(printWriter1, mockPrintWriter0);
      assertNotSame(printWriter1, mockPrintWriter1);
      assertNotSame(printWriter1, printWriter0);
      assertSame(printWriter1, mockPrintWriter3);
      assertSame(mockPrintWriter3, printWriter1);
      assertNotSame(mockPrintWriter3, mockPrintWriter2);
      assertNotSame(mockPrintWriter3, printWriter0);
      assertNotSame(mockPrintWriter3, mockPrintWriter0);
      assertNotSame(mockPrintWriter3, mockPrintWriter1);
      
      helpFormatter0.printWrapped(printWriter1, 32, "--");
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertFalse(printWriter1.equals((Object)mockPrintWriter2));
      assertFalse(printWriter1.equals((Object)mockPrintWriter0));
      assertFalse(printWriter1.equals((Object)mockPrintWriter1));
      assertFalse(printWriter1.equals((Object)printWriter0));
      assertFalse(mockPrintWriter3.equals((Object)mockPrintWriter2));
      assertFalse(mockPrintWriter3.equals((Object)printWriter0));
      assertFalse(mockPrintWriter3.equals((Object)mockPrintWriter0));
      assertFalse(mockPrintWriter3.equals((Object)mockPrintWriter1));
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(8, objectArray0.length);
      assertNotSame(helpFormatter0, helpFormatter1);
      assertNotSame(printWriter1, mockPrintWriter2);
      assertNotSame(printWriter1, mockPrintWriter0);
      assertNotSame(printWriter1, mockPrintWriter1);
      assertNotSame(printWriter1, printWriter0);
      assertSame(printWriter1, mockPrintWriter3);
      assertSame(mockPrintWriter3, printWriter1);
      assertNotSame(mockPrintWriter3, mockPrintWriter2);
      assertNotSame(mockPrintWriter3, printWriter0);
      assertNotSame(mockPrintWriter3, mockPrintWriter0);
      assertNotSame(mockPrintWriter3, mockPrintWriter1);
      
      String string1 = helpFormatter0.getOptPrefix();
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertNotNull(string1);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", string1);
      assertNotSame(helpFormatter0, helpFormatter1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertNotNull(helpFormatter0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertNotNull(helpFormatter1);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      
      String string0 = helpFormatter1.getLongOptSeparator();
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertNotNull(string0);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(" ", string0);
      assertNotSame(helpFormatter1, helpFormatter0);
      
      helpFormatter1.setWidth(3);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(3, helpFormatter1.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertNotSame(helpFormatter1, helpFormatter0);
      
      int int0 = helpFormatter0.getWidth();
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, int0);
      assertNotSame(helpFormatter0, helpFormatter1);
      
      int int1 = helpFormatter0.findWrapPos("usage: ", 74, 1);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertFalse(int1 == int0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals((-1), int1);
      assertNotSame(helpFormatter0, helpFormatter1);
      
      String string1 = helpFormatter0.createPadding(1);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertNotNull(string1);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(" ", string1);
      assertNotSame(helpFormatter0, helpFormatter1);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.printHelp("FU9YaO", options0, false);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertNotSame(helpFormatter0, helpFormatter1);
      
      String string2 = helpFormatter1.rtrim("(c~E");
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertNotNull(string2);
      assertEquals(3, helpFormatter1.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals("(c~E", string2);
      assertNotSame(helpFormatter1, helpFormatter0);
      
      helpFormatter1.setLongOptSeparator("usage: ");
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("usage: ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(3, helpFormatter1.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertNotSame(helpFormatter1, helpFormatter0);
      
      int int2 = helpFormatter1.getLeftPadding();
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("usage: ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(3, helpFormatter1.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, int2);
      assertNotSame(helpFormatter1, helpFormatter0);
      
      helpFormatter0.printHelp("\"!<{U6aq!m[|Q", "-", options0, "(c~E", true);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertNotSame(helpFormatter0, helpFormatter1);
      
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos("", 74, (-3627));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertNotNull(helpFormatter0);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      helpFormatter0.defaultWidth = 1715;
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1715, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      String string0 = helpFormatter0.getLongOptSeparator();
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1715, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertNotNull(string0);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1715, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(" ", string0);
      
      helpFormatter0.setWidth(1715);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1715, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1715, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      int int0 = helpFormatter0.getWidth();
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1715, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1715, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1715, int0);
      
      int int1 = helpFormatter0.findWrapPos(" ", 1715, 1715);
      assertFalse(int1 == int0);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1715, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1715, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals((-1), int1);
      
      String string1 = helpFormatter0.createPadding(642);
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1715, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertNotNull(string1);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1715, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEqualsstring1);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertNotNull(optionGroup0);
      
      Options options1 = options0.addOptionGroup(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertNotNull(options1);
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      StringWriter stringWriter0 = new StringWriter(74);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1715, (-2463), " ");
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1715, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals("", stringBuffer1.toString());
      assertEquals(0, stringBuffer1.length());
      assertNotNull(stringBuffer1);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1715, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, (-4163), options1, (-3919), 19);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertNotNull(helpFormatter0);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      String string0 = helpFormatter0.getLongOptSeparator();
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertNotNull(string0);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", string0);
      
      helpFormatter0.setWidth(3);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultWidth);
      
      int int0 = helpFormatter0.getWidth();
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultWidth);
      assertEquals(3, int0);
      
      int int1 = helpFormatter0.findWrapPos("usage: ", 3, 1);
      assertFalse(int1 == int0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultWidth);
      assertEquals(6, int1);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", true);
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) "usage: ";
      objectArray0[6] = (Object) ";(Q69;v0";
      objectArray0[4] = (Object) ";(Q69;v0";
      objectArray0[5] = (Object) locale0;
      objectArray0[7] = (Object) ";(Q69;v0";
      objectArray0[8] = (Object) " ";
      MockPrintStream mockPrintStream1 = new MockPrintStream("--");
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertNotNull(mockPrintStream1);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      assertNotNull(mockPrintWriter0);
      
      PrintWriter printWriter0 = mockPrintWriter0.append('');
      assertNotNull(printWriter0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertNotNull(helpFormatter1);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.printHelp(2630, "usage: ", "org.apache.commons.cli.ParseException", options0, "--");
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultWidth);
      assertNotSame(helpFormatter0, helpFormatter1);
      
      int int2 = helpFormatter1.getLeftPadding();
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, int2);
      assertNotSame(helpFormatter1, helpFormatter0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      
      String string0 = "%fZ>]s,mE*I>\\s";
      MockPrintStream mockPrintStream0 = new MockPrintStream("iE|!OY5F8");
      assertNotNull(mockPrintStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      assertNotNull(dataOutputStream0);
      
      MockPrintStream mockPrintStream1 = new MockPrintStream(dataOutputStream0);
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertNotNull(mockPrintStream1);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1);
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertNotNull(mockPrintWriter0);
      
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "%fZ>]s,mE*I>s");
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertNotNull(printWriter0);
      assertNotSame(mockPrintStream0, mockPrintStream1);
      assertNotSame(mockPrintStream1, mockPrintStream0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      
      int int0 = 16;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) dataOutputStream0;
      objectArray0[1] = (Object) printWriter0;
      objectArray0[2] = (Object) mockPrintStream1;
      objectArray0[3] = (Object) "%fZ>]s,mE*I>s";
      objectArray0[4] = (Object) "%fZ>]s,mE*I>s";
      objectArray0[5] = (Object) mockPrintStream0;
      objectArray0[6] = (Object) mockPrintStream0;
      objectArray0[7] = (Object) mockPrintWriter0;
      objectArray0[8] = (Object) helpFormatter0;
      PrintWriter printWriter1 = mockPrintWriter0.printf("M| }Q(3hks]r`p!", objectArray0);
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertNotNull(printWriter1);
      assertEquals(9, objectArray0.length);
      assertSame(printWriter1, mockPrintWriter0);
      assertSame(printWriter1, printWriter0);
      assertNotSame(mockPrintStream0, mockPrintStream1);
      assertNotSame(mockPrintStream1, mockPrintStream0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(mockPrintWriter0, printWriter1);
      
      String string1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 16, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertNotNull(helpFormatter0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 145, "q", "q", options0, 3, 3, "Xk,|rrc<=@S:;eWEv", true);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "Xk,|rrc<=@S:;eWEv", "_Y4VJ*", options0, "Illegal option name '");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertNotNull(helpFormatter1);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      
      String string0 = helpFormatter1.getLongOptSeparator();
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertNotNull(string0);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(" ", string0);
      assertNotSame(helpFormatter1, helpFormatter0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte)41;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte)26, (byte)1, (byte)19, (byte)88, (byte)41}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(boolean0);
      
      helpFormatter1.setWidth(3);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, helpFormatter1.getWidth());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter1.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotSame(helpFormatter1, helpFormatter0);
      
      int int0 = helpFormatter0.getWidth();
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, int0);
      assertNotSame(helpFormatter0, helpFormatter1);
      
      int int1 = helpFormatter0.findWrapPos("usage: ", 74, 1);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertFalse(int1 == int0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals((-1), int1);
      assertNotSame(helpFormatter0, helpFormatter1);
      
      String string1 = helpFormatter0.createPadding(1);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNotNull(string1);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", string1);
      assertNotSame(helpFormatter0, helpFormatter1);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", true);
      assertNotNull(mockFileOutputStream0);
      
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, "F1peWK/%", " ", (Options) null, "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      helpFormatter0.setLongOptSeparator("");
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.printHelp("2@4jj!/FXQ,('!P`", options0, true);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 59, 59, "");
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(0, stringBuffer1.length());
      assertEquals("", stringBuffer1.toString());
      assertNotNull(stringBuffer1);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      
      StringBuffer stringBuffer2 = helpFormatter0.renderOptions(stringBuffer1, 64, options0, 1, 34);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(0, stringBuffer1.length());
      assertEquals("", stringBuffer1.toString());
      assertEquals(0, stringBuffer2.length());
      assertEquals("", stringBuffer2.toString());
      assertNotNull(stringBuffer2);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertSame(stringBuffer0, stringBuffer2);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer2);
      assertSame(stringBuffer1, stringBuffer0);
      assertSame(stringBuffer2, stringBuffer0);
      assertSame(stringBuffer2, stringBuffer1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertNotNull(helpFormatter0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      helpFormatter0.defaultWidth = 1715;
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1715, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      helpFormatter0.setWidth(1715);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1715, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1715, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      int int0 = helpFormatter0.findWrapPos("--", 1715, 1715);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1715, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1715, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals((-1), int0);
      
      String string0 = helpFormatter0.createPadding(642);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1715, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertNotNull(string0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1715, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEqualsstring0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      int int1 = (-1135);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1135), "arg", "", options0, 1715, (-1135), "2c?j", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      helpFormatter0.defaultWidth = 1715;
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(1715, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      String string0 = helpFormatter0.getLongOptSeparator();
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(1715, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertNotNull(string0);
      assertEquals(1715, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(" ", string0);
      
      helpFormatter0.setWidth(1715);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(1715, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1715, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      int int0 = helpFormatter0.getWidth();
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(1715, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1715, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1715, int0);
      
      int int1 = helpFormatter0.findWrapPos(" ", 1715, 1715);
      assertFalse(int1 == int0);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(1715, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1715, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals((-1), int1);
      
      String string1 = helpFormatter0.createPadding(647);
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(1715, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertNotNull(string1);
      assertEquals(1715, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEqualsstring1);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ", true);
      assertNotNull(mockFileOutputStream0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ");
      assertNotNull(mockPrintStream0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertNotNull(locale0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertNotNull(optionGroup0);
      
      Options options1 = options0.addOptionGroup(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertNotNull(options1);
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      int int2 = helpFormatter0.getWidth();
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(1715, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1715, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1715, int2);
      
      helpFormatter0.printHelpoptions
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(1715, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertEquals(1715, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertSame(options0, options1);
      assertSame(options1, options0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      String string0 = helpFormatter0.getLongOptSeparator();
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertNotNull(string0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(" ", string0);
      
      helpFormatter0.setWidth(1484);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1484, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1484, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.printHelp(1484, " ", " ", options0, "3!2j}[H3%e", false);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1484, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1484, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertNotNull(optionGroup0);
      
      Options options1 = options0.addOptionGroup(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertNotNull(options1);
      assertSame(options0, options1);
      assertSame(options1, options0);
      
      String string1 = helpFormatter0.rtrim("");
      assertFalse(string1.equals((Object)string0));
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1484, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertNotNull(string1);
      assertEquals(1484, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("", string1);
      
      helpFormatter0.setLongOptSeparator("");
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1484, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1484, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1484, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1484, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, int0);
      
      MockFile mockFile0 = new MockFile("usage: ");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg", 3, 3);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("usage: ", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals("usage: ", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNotNull(printWriter0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      
      helpFormatter0.printHelp(printWriter0, 1484, ">", "' contains an illegal character : '", options1, 1484, 1484, "", false);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1484, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("usage: ", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals("usage: ", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1484, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      
      int int1 = helpFormatter0.getLeftPadding();
      assertTrue(int1 == int0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1484, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1484, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertNotNull(helpFormatter1);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      String string0 = helpFormatter1.getLongOptSeparator();
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertNotNull(string0);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(" ", string0);
      assertNotSame(helpFormatter1, helpFormatter0);
      
      helpFormatter1.setWidth(3);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(3, helpFormatter1.getWidth());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.defaultWidth);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertNotSame(helpFormatter1, helpFormatter0);
      
      int int0 = helpFormatter0.getWidth();
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, int0);
      assertNotSame(helpFormatter0, helpFormatter1);
      
      int int1 = helpFormatter0.findWrapPos("usage: ", 74, 1);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertFalse(int1 == int0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals((-1), int1);
      assertNotSame(helpFormatter0, helpFormatter1);
      
      String string1 = helpFormatter0.createPadding(1);
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertNotNull(string1);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(" ", string1);
      assertNotSame(helpFormatter0, helpFormatter1);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", true);
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertNotNull(locale0);
      
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) helpFormatter1;
      objectArray0[2] = (Object) " ";
      objectArray0[3] = (Object) ";(Q69;v0";
      objectArray0[4] = (Object) ";(Q69;v0";
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) helpFormatter1;
      objectArray0[7] = (Object) ";(Q69;v0";
      objectArray0[8] = (Object) " ";
      MockPrintStream mockPrintStream1 = new MockPrintStream("--");
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertNotNull(mockPrintStream1);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      assertNotNull(mockPrintWriter0);
      
      PrintWriter printWriter0 = mockPrintWriter0.append('');
      assertNotNull(printWriter0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      
      HelpFormatter helpFormatter2 = new HelpFormatter();
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertEquals(3, helpFormatter2.getDescPadding());
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals(74, helpFormatter2.getWidth());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertNotNull(helpFormatter2);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter2.defaultWidth);
      
      helpFormatter2.printWrapped(printWriter0, 483, (-292), " ");
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertEquals(3, helpFormatter2.getDescPadding());
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals(74, helpFormatter2.getWidth());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter2.defaultWidth);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotSame(helpFormatter2, helpFormatter1);
      assertNotSame(helpFormatter2, helpFormatter0);
      
      String string2 = helpFormatter0.getArgName();
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertFalse(helpFormatter0.equals((Object)helpFormatter2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertNotNull(string2);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals("arg", string2);
      assertNotSame(helpFormatter0, helpFormatter1);
      assertNotSame(helpFormatter0, helpFormatter2);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, ";(Q69;v0");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      boolean boolean0 = options0.hasOption("org.apache.commons.cli.HelpFormatter");
      assertFalse(boolean0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertNotNull(helpFormatter1);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      helpFormatter1.printHelp(952, "<Hz2;jLvP[r&]Si", "Z", options0, "", false);
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertNotSame(helpFormatter1, helpFormatter0);
      
      PrintWriter printWriter0 = null;
      Options options1 = new Options();
      assertFalse(options1.equals((Object)options0));
      assertNotNull(options1);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertNotNull(optionGroup0);
      
      Options options2 = options0.addOptionGroup(optionGroup0);
      assertFalse(options0.equals((Object)options1));
      assertFalse(options2.equals((Object)options1));
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertNotNull(options2);
      assertNotSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options2, options0);
      assertNotSame(options2, options1);
      
      Options options3 = options0.addOption("", false, "arg");
      assertFalse(options0.equals((Object)options1));
      assertFalse(options3.equals((Object)options1));
      assertNotNull(options3);
      assertSame(options0, options3);
      assertNotSame(options0, options1);
      assertSame(options0, options2);
      assertNotSame(options3, options1);
      assertSame(options3, options0);
      assertSame(options3, options2);
      
      // Undeclared exception!
      try { 
        options3.addOption("F D}O7Dozl08^4d  ", "usage: ", false, "9,/5/Q5;+B& X1d+H>P");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'F D}O7Dozl08^4d  ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertNotNull(helpFormatter0);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      String string0 = ";&;cLkUK}ZU20";
      helpFormatter0.setLongOptSeparator(";&;cLkUK}ZU20");
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(";&;cLkUK}ZU20", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2151), "9,/5/Q5;+B& X1d+H>P", "!O_ARGS_ALLOWCd", options0, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 1715;
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setWidth(1715);
      helpFormatter0.getWidth();
      helpFormatter0.findWrapPos(" ", 1715, 1715);
      helpFormatter0.createPadding(642);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ", "7+%WA\"wCak", options
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      String string0 = "7+%WA\"wCak";
      int int0 = 1397;
      helpFormatter0.defaultLongOptPrefix = "7+%WA\"wCak";
      helpFormatter0.defaultWidth = (-432);
      String string1 = "q";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1764, "q", "C", (Options) null, 1397, (-1135), "2c?j", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      String string0 = "7+%WA\"wCak";
      int int0 = 1397;
      String string1 = "q";
      String string2 = "a";
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("a", "-\"b mYIV8u", (Options) null, "-\"b mYIV8u");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setWidth(1484);
      Options options0 = new Options();
      options0.hasOption("--");
      helpFormatter0.printHelp(1484, " ", " ", options0, "3!2j}[H3%e", false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) " ";
      objectArray0[2] = (Object) mockFileOutputStream0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) mockPrintStream0;
      objectArray0[6] = (Object) mockPrintStream0;
      objectArray0[7] = (Object) " ";
      PrintStream printStream0 = mockPrintStream0.format(locale0, "usage: ", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('=');
      helpFormatter0.printWrapped(printWriter0, 1484, 1484, "tXy#2mk");
      assertEquals(1484, helpFormatter0.defaultWidth);
      
      helpFormatter0.printHelp("line.separator", "has already been selected: '", options0, "has already been selected: '");
      assertEquals(3, helpFormatter0.getDescPadding());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Option option0 = new Option("arg", "arg", true, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 2373, "arg", options0);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-771), options1, 32, 5289);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setWidth(1226);
      String string0 = "";
      int int0 = (-866);
      helpFormatter0.setWidth((-866));
      helpFormatter0.setArgName("");
      helpFormatter0.defaultNewLine = "";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      Options options0 = new Options();
      Option option0 = new Option("", "[ option: ", false, "Qu&Ly[L<?r");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-3241), options1, 1226, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("3nFxHtiN)>$phHZjf");
      Options options0 = new Options();
      Option option0 = new Option((String) null, "yK%");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 116, "q", "Xk,|rrc<=@S:;eWEv", options1, 116, 145, "Cannot add value, list full.", true);
      Options options2 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(9, "Xk,|rrc<=@S:;eWEv", "c", options2, "");
      int int0 = helpFormatter1.getLeftPadding();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, (String) null, false, (String) null);
      Option option0 = new Option("", true, "line.separator");
      Options options2 = options1.addOption(option0);
      options2.addOption((String) null, false, "");
      int int0 = (-802);
      MockFile mockFile0 = new MockFile("-");
      MockFile mockFile1 = new MockFile(mockFile0, "K]O')=Xg3Rwn9c8D");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) option0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 32, options2, (-1), 32);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, (String) null, false, (String) null);
      Option option0 = new Option((String) null, (String) null);
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 1715;
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setWidth(1715);
      helpFormatter0.getWidth();
      helpFormatter0.findWrapPos(" ", 1715, 1715);
      helpFormatter0.createPadding(642);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) helpFormatter0;
      mockPrintStream0.format(locale0, "arg", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      mockPrintWriter0.append('');
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1), 1250, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption((String) null, (String) null, false, (String) null);
      helpFormatter0.setWidth((-866));
      helpFormatter0.setArgName("");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 0, 4845);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1397, "q", "a", (Options) null, "7+%WA\"wCak");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("vY8MJR!");
      Options options0 = new Options();
      helpFormatter0.printHelp("vY8MJR!", options0, false);
      String string0 = helpFormatter0.rtrim("");
      assertEquals("", string0);
      
      helpFormatter0.setLongOptSeparator("");
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("3nFxHtiN)>$phHZjf");
      Options options0 = new Options();
      String string0 = "Xk,|rrc<=@S:;eWEv";
      int int0 = 116;
      String string1 = null;
      Option option0 = new Option((String) null, "yK%");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 116, "", "Xk,|rrc<=@S:;eWEv", options1, 116, 145, "Cannot add value, list full.", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setWidth(1226);
      String string0 = "";
      int int0 = (-866);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("4{NV");
      mockPrintWriter0.flush();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1226, "", "", (Options) null, (-866), (-866), "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 1715;
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setWidth(1715);
      helpFormatter0.getWidth();
      helpFormatter0.findWrapPos(" ", 1715, 1715);
      helpFormatter0.createPadding(642);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", true, "N[");
      options2.addOption((String) null, "wv$n!^|Q1KeYQAR", true, "T}EOu");
      Option option0 = new Option("", "$f?RRPaHW?/}H", true, (String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      mockPrintWriter0.append('=');
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 642, (-1), "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("[");
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.getWidth();
      helpFormatter0.findWrapPos("[", 294, 294);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.createPadding((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      helpFormatter0.printHelp("2@4jj!/FXQ,('!P`", options0, true);
      helpFormatter0.rtrim("rf_ \"");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2565), "t-m'Bk53c`qJ2ah((2", "eXLHYV", options0, "M");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      helpFormatter0.printHelp("2@4jj!/FXQ,('!P`", options0, true);
      helpFormatter0.rtrim("rf_ \"");
      helpFormatter0.setLongOptSeparator("rf_ \"");
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.defaultNewLine = ":8N+8R^)v}G U";
      helpFormatter0.defaultOptPrefix = "\n";
      helpFormatter0.setNewLine("\n");
      String string0 = null;
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.setNewLine("=SvN.*Y,x");
      helpFormatter0.getDescPadding();
      helpFormatter0.getNewLine();
      helpFormatter0.getOptPrefix();
      String string1 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[";
      helpFormatter0.rtrim("[");
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.HelpFormatter$1");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      int int0 = 32;
      Options options0 = new Options();
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        options0.addOption("-", "org.apache.commons.cli.HelpFormatter$1", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = (-1);
      helpFormatter0.setLeftPadding((-1));
      helpFormatter0.defaultArgName = " ]";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 31, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      
      Options options0 = new Options();
      Option option0 = new Option("arg", "o0rDAYCv");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("9,/5/Q5;+B& X1d+H>P", options2);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("[");
      MockFile mockFile0 = new MockFile((String) null, " ");
      String string0 = null;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      File file0 = MockFile.createTempFile("usage: ", "--", (File) mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "");
      helpFormatter0.printUsage(printWriter0, 3532, "");
      helpFormatter0.getNewLine();
      helpFormatter0.setOptPrefix("\n");
      helpFormatter0.getNewLine();
      int int0 = 5498;
      String string0 = null;
      Options options0 = new Options();
      Option option0 = new Option((String) null, "arg", false, "S");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        options1.addOption("oc%Zk?~k%}.xkN", "\n", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'oc%Zk?~k%}.xkN' contains an illegal character : '%'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(699);
      String string0 = "Zb.";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      String string1 = "bm8T>`-(Nro^@Gl~";
      boolean boolean0 = false;
      String string2 = "";
      Option option0 = null;
      try {
        option0 = new Option("bm8T>`-(Nro^@Gl~", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'bm8T>`-(Nro^@Gl~' contains an illegal character : '>'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "The option '";
      helpFormatter0.setLongOptPrefix("The option '");
      helpFormatter0.createPadding(3563);
      String string1 = "";
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "4%+";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "4%+";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "The option '";
      objectArray0[5] = (Object) helpFormatter0;
      // Undeclared exception!
      try { 
        mockPrintWriter0.printf("4%+", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '+'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix(".q9#&u)h^oi");
      int int0 = 191;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos(".q9#&u)h^oi", (-3432), 191);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setWidth(1226);
      helpFormatter0.setWidth((-866));
      helpFormatter0.setArgName("");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", (-1), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(614);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("--");
      helpFormatter1.setWidth(3);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setArgName("");
      // Undeclared exception!
      try { 
        helpFormatter2.findWrapPos("yOi,{]Y", (-2546), 1113);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 1715;
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setWidth(1715);
      helpFormatter0.getWidth();
      helpFormatter0.findWrapPos(" ", 1715, 1715);
      helpFormatter0.createPadding(642);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", true, "N[");
      Options options3 = options2.addOption((String) null, "wv$n!^|Q1KeYQAR", true, "T}EOu");
      Option option0 = new Option("", "$f?RRPaHW?/}H", true, (String) null);
      Options options4 = options3.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-465), options4, 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-753), 2798, "yZ\"^gf");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 5330, (Options) null, 2215, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(31, "", "", (Options) null, "7+%WA\"wCak");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, (String) null, false, (String) null);
      Option option0 = new Option("", true, "line.separator");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption((String) null, false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options4 = options3.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options4, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-384), (-384), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setDescPadding(3832);
      StringBuffer stringBuffer0 = new StringBuffer("?0]$]+]C");
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 3832, options0, 32, 3);
      helpFormatter0.renderWrappedText(stringBuffer1, 3832, 184, "Qu$a@Y>!]f|*Us|35");
      assertEquals("", helpFormatter0.getOptPrefix());
  }
}
