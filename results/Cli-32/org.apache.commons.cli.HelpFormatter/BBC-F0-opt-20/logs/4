* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-20
* Going to generate test cases for class: org.apache.commons.cli.HelpFormatter
* Starting Client-0
* Connecting to master process on port 19075
* Analyzing classpath: 
  - subjects/buggy-versions/Cli-32/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.cli.HelpFormatter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1151
* Using seed 1649480351
* Starting evolution
bbc usage percentage is: 20%
* Initial Number of Goals in DynaMOSA = 400 / 1151
[MASTER] 17:58:27.991 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
* Search finished after 602s and 322 generations, 130677 statements, best individual has fitness: 130.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
[MASTER] 18:09:48.843 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Coverage of criterion LINE: 100%
* Total number of goals: 203
* Number of covered goals: 202
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 92%
* Total number of goals: 157
* Number of covered goals: 145
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 55
* Number of covered goals: 55
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 93%
* Total number of goals: 508
* Number of covered goals: 472
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 67%
* Total number of goals: 46
* Number of covered goals: 31
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 98%
* Total number of goals: 40
* Number of covered goals: 39
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 98%
* Total number of goals: 40
* Number of covered goals: 39
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 92%
* Total number of goals: 157
* Number of covered goals: 145
* Generated 131 tests with total length 2227
* Resulting test suite's coverage: 86% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 18:10:38.669 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7649833333333333% of time used, but only 18/131 tests minimized), falling back to using all assertions
[MASTER] 18:10:54.495 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 7%
* Compiling and checking tests
[MASTER] 18:11:17.572 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:11:17.640 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:11:17.718 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:11:17.793 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:11:17.834 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:11:17.945 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:11:17.989 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:11:18.025 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:11:18.071 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:11:18.113 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:11:18.156 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:11:18.211 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:11:18.258 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:11:18.304 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:11:18.349 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:11:18.442 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:11:18.488 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:11:18.542 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:11:18.713 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_150_tmp__ESTest.test0(HelpFormatter_150_tmp__ESTest.java:48)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 18:11:18.714 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(74, helpFormatter0.getWidth());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(74, helpFormatter0.defaultWidth);
assertNotNull(helpFormatter0);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

boolean boolean0 = true;
MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
assertNotNull(mockPrintWriter0);

Object object0 = new Object();
assertNotNull(object0);

String string0 = "[";
Object[] objectArray0 = new Object[5];
objectArray0[0] = (Object) helpFormatter0;
objectArray0[1] = object0;
mockFileOutputStream0.flush();
assertFalse(fileDescriptor0.valid());

objectArray0[2] = (Object) helpFormatter0;
objectArray0[3] = object0;
objectArray0[4] = (Object) mockPrintWriter0;
PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "[", objectArray0);
assertFalse(fileDescriptor0.valid());
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);
assertEquals(5, objectArray0.length);
assertNotNull(printWriter0);

int int0 = 32;
String string1 = "   ";
helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-838), 32, "   ");

[MASTER] 18:11:21.898 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_152_tmp__ESTest.test0(HelpFormatter_152_tmp__ESTest.java:48)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 18:11:21.900 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, helpFormatter0.defaultWidth);
assertNotNull(helpFormatter0);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
assertNotNull(mockPrintWriter0);

Object[] objectArray0 = new Object[8];
Object object0 = new Object();
assertNotNull(object0);

objectArray0[0] = object0;
objectArray0[1] = (Object) fileDescriptor0;
objectArray0[2] = (Object) mockFileOutputStream0;
objectArray0[3] = (Object) fileDescriptor0;
objectArray0[4] = (Object) mockFileOutputStream0;
objectArray0[5] = (Object) null;
objectArray0[6] = (Object) fileDescriptor0;
objectArray0[7] = (Object) mockPrintWriter0;
PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, " ", objectArray0);
assertFalse(fileDescriptor0.valid());
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);
assertEquals(8, objectArray0.length);
assertNotNull(printWriter0);

Options options0 = new Options();
assertNotNull(options0);

Options options1 = options0.addOption("arg", "usage: ", true, "usage: ");
assertSame(options1, options0);
assertSame(options0, options1);
assertNotNull(options1);

helpFormatter0.printHelp(" ] [ long ", options1);
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, helpFormatter0.defaultWidth);
assertSame(options1, options0);
assertSame(options0, options1);

int int0 = helpFormatter0.getLeftPadding();
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, int0);

String string0 = helpFormatter0.getArgName();
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals("arg", string0);
assertNotNull(string0);


[MASTER] 18:11:25.283 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_156_tmp__ESTest.test0(HelpFormatter_156_tmp__ESTest.java:49)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 18:11:25.284 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(74, helpFormatter0.getWidth());
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertNotNull(helpFormatter0);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
assertNotNull(mockPrintWriter0);

Object[] objectArray0 = new Object[8];
Object object0 = new Object();
assertNotNull(object0);

objectArray0[0] = object0;
objectArray0[1] = (Object) fileDescriptor0;
objectArray0[2] = (Object) mockFileOutputStream0;
objectArray0[3] = (Object) fileDescriptor0;
objectArray0[4] = (Object) mockFileOutputStream0;
objectArray0[5] = (Object) null;
objectArray0[6] = (Object) fileDescriptor0;
objectArray0[7] = (Object) mockPrintWriter0;
PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, " ", objectArray0);
assertFalse(fileDescriptor0.valid());
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);
assertEquals(8, objectArray0.length);
assertNotNull(printWriter0);

Options options0 = new Options();
assertNotNull(options0);

Options options1 = options0.addOption("arg", "usage: ", true, "usage: ");
assertSame(options1, options0);
assertSame(options0, options1);
assertNotNull(options1);

helpFormatter0.printHelp(printWriter0, (-2030), " ] [ long ", " ] [ long ", options1, 0, 1487, " ] [ long ");

[MASTER] 18:11:29.045 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_170_tmp__ESTest.test0(HelpFormatter_170_tmp__ESTest.java:46)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 18:11:29.045 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(74, helpFormatter0.getWidth());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertNotNull(helpFormatter0);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

PrintWriter printWriter0 = null;
helpFormatter0.printUsage((PrintWriter) null, 74, "");

[MASTER] 18:11:32.171 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_173_tmp__ESTest.test0(HelpFormatter_173_tmp__ESTest.java:49)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 18:11:32.172 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(74, helpFormatter0.getWidth());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertNotNull(helpFormatter0);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
assertNotNull(mockPrintWriter0);

Object[] objectArray0 = new Object[8];
Object object0 = new Object();
assertNotNull(object0);

objectArray0[0] = object0;
objectArray0[1] = (Object) fileDescriptor0;
objectArray0[2] = (Object) mockFileOutputStream0;
objectArray0[3] = (Object) fileDescriptor0;
objectArray0[4] = (Object) mockFileOutputStream0;
objectArray0[5] = (Object) null;
objectArray0[6] = (Object) fileDescriptor0;
objectArray0[7] = (Object) mockPrintWriter0;
PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, " ", objectArray0);
assertFalse(fileDescriptor0.valid());
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);
assertEquals(8, objectArray0.length);
assertNotNull(printWriter0);

helpFormatter0.printWrapped(printWriter0, 32, (-1030), "   ");
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(74, helpFormatter0.getWidth());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("\n", helpFormatter0.getNewLine());
assertFalse(fileDescriptor0.valid());
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);
assertEquals(8, objectArray0.length);

int int0 = (-2030);
Options options0 = new Options();
assertNotNull(options0);

Options options1 = options0.addOption("arg", "usage: ", true, "usage: ");
assertSame(options0, options1);
assertSame(options1, options0);
assertNotNull(options1);

helpFormatter0.printHelp(printWriter0, (-2030), " ] [ long ", " ] [ long ", options1, 0, 1487, " ] [ long ");

[MASTER] 18:11:35.821 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_185_tmp__ESTest.test0(HelpFormatter_185_tmp__ESTest.java:52)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 18:11:35.823 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertNotNull(helpFormatter0);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, " ");
assertFalse(boolean0);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

HelpFormatter helpFormatter1 = new HelpFormatter();
assertEquals(1, helpFormatter1.getLeftPadding());
assertEquals("-", helpFormatter1.getOptPrefix());
assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
assertEquals("arg", helpFormatter1.getArgName());
assertEquals(3, helpFormatter1.getDescPadding());
assertEquals("\n", helpFormatter1.getNewLine());
assertEquals(74, helpFormatter1.getWidth());
assertEquals("--", helpFormatter1.getLongOptPrefix());
assertEquals(" ", helpFormatter1.getLongOptSeparator());
assertEquals(1, helpFormatter1.defaultLeftPad);
assertEquals(74, helpFormatter1.defaultWidth);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter1.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertNotNull(helpFormatter1);
assertFalse(helpFormatter1.equals((Object)helpFormatter0));

helpFormatter1.setLongOptPrefix("usage: ");
assertEquals(1, helpFormatter1.getLeftPadding());
assertEquals("-", helpFormatter1.getOptPrefix());
assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
assertEquals("arg", helpFormatter1.getArgName());
assertEquals(3, helpFormatter1.getDescPadding());
assertEquals("usage: ", helpFormatter1.getLongOptPrefix());
assertEquals("\n", helpFormatter1.getNewLine());
assertEquals(74, helpFormatter1.getWidth());
assertEquals(" ", helpFormatter1.getLongOptSeparator());
assertEquals(1, helpFormatter1.defaultLeftPad);
assertEquals(74, helpFormatter1.defaultWidth);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter1.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertNotSame(helpFormatter1, helpFormatter0);
assertFalse(helpFormatter1.equals((Object)helpFormatter0));

helpFormatter0.setLeftPadding((-886));
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals((-886), helpFormatter0.getLeftPadding());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals((-886), helpFormatter0.defaultLeftPad);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertNotSame(helpFormatter0, helpFormatter1);
assertFalse(helpFormatter0.equals((Object)helpFormatter1));

int int0 = helpFormatter1.getDescPadding();
assertEquals(1, helpFormatter1.getLeftPadding());
assertEquals("-", helpFormatter1.getOptPrefix());
assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
assertEquals("arg", helpFormatter1.getArgName());
assertEquals(3, helpFormatter1.getDescPadding());
assertEquals("usage: ", helpFormatter1.getLongOptPrefix());
assertEquals("\n", helpFormatter1.getNewLine());
assertEquals(74, helpFormatter1.getWidth());
assertEquals(" ", helpFormatter1.getLongOptSeparator());
assertEquals(1, helpFormatter1.defaultLeftPad);
assertEquals(74, helpFormatter1.defaultWidth);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter1.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertNotSame(helpFormatter1, helpFormatter0);
assertEquals(3, int0);
assertFalse(helpFormatter1.equals((Object)helpFormatter0));

HelpFormatter helpFormatter2 = new HelpFormatter();
assertEquals("-", helpFormatter2.getOptPrefix());
assertEquals(1, helpFormatter2.getLeftPadding());
assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
assertEquals("--", helpFormatter2.getLongOptPrefix());
assertEquals("\n", helpFormatter2.getNewLine());
assertEquals("arg", helpFormatter2.getArgName());
assertEquals(74, helpFormatter2.getWidth());
assertEquals(3, helpFormatter2.getDescPadding());
assertEquals(" ", helpFormatter2.getLongOptSeparator());
assertEquals(1, helpFormatter2.defaultLeftPad);
assertEquals(74, helpFormatter2.defaultWidth);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(3, helpFormatter2.defaultDescPad);
assertNotNull(helpFormatter2);
assertFalse(helpFormatter2.equals((Object)helpFormatter1));
assertFalse(helpFormatter2.equals((Object)helpFormatter0));

HelpFormatter helpFormatter3 = new HelpFormatter();
assertEquals("arg", helpFormatter3.getArgName());
assertEquals(3, helpFormatter3.getDescPadding());
assertEquals("\n", helpFormatter3.getNewLine());
assertEquals(" ", helpFormatter3.getLongOptSeparator());
assertEquals("usage: ", helpFormatter3.getSyntaxPrefix());
assertEquals(1, helpFormatter3.getLeftPadding());
assertEquals("-", helpFormatter3.getOptPrefix());
assertEquals(74, helpFormatter3.getWidth());
assertEquals("--", helpFormatter3.getLongOptPrefix());
assertEquals(74, helpFormatter3.defaultWidth);
assertEquals(1, helpFormatter3.defaultLeftPad);
assertEquals(3, helpFormatter3.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertNotNull(helpFormatter3);
assertFalse(helpFormatter3.equals((Object)helpFormatter2));
assertFalse(helpFormatter3.equals((Object)helpFormatter0));
assertFalse(helpFormatter3.equals((Object)helpFormatter1));

helpFormatter3.printHelp((String) null, (Options) null);

[MASTER] 18:11:38.982 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_188_tmp__ESTest.test0(HelpFormatter_188_tmp__ESTest.java:55)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 18:11:38.983 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals(74, helpFormatter0.getWidth());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(74, helpFormatter0.defaultWidth);
assertNotNull(helpFormatter0);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, " ");
assertFalse(boolean0);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

boolean boolean1 = true;
MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
assertNotNull(mockPrintWriter0);

Object[] objectArray0 = new Object[8];
Object object0 = new Object();
assertNotNull(object0);

EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/experiment");
boolean boolean2 = FileSystemHandling.createFolder(evoSuiteFile1);
assertNotSame(evoSuiteFile1, evoSuiteFile0);
assertTrue(boolean2);
assertFalse(evoSuiteFile1.equals((Object)evoSuiteFile0));
assertFalse(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);

objectArray0[0] = object0;
objectArray0[1] = (Object) fileDescriptor0;
objectArray0[2] = (Object) mockFileOutputStream0;
objectArray0[3] = (Object) fileDescriptor0;
objectArray0[4] = (Object) mockFileOutputStream0;
objectArray0[5] = (Object) null;
objectArray0[6] = (Object) fileDescriptor0;
objectArray0[7] = (Object) mockPrintWriter0;
PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, " ", objectArray0);
assertFalse(fileDescriptor0.valid());
assertSame(printWriter0, mockPrintWriter0);
assertSame(mockPrintWriter0, printWriter0);
assertEquals(8, objectArray0.length);
assertNotNull(printWriter0);

helpFormatter0.printWrapped(printWriter0, 32, (-1030), "   ");
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals(74, helpFormatter0.getWidth());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertFalse(fileDescriptor0.valid());
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(74, helpFormatter0.defaultWidth);
assertSame(printWriter0, mockPrintWriter0);
assertSame(mockPrintWriter0, printWriter0);
assertEquals(8, objectArray0.length);

int int0 = (-2030);
String string0 = " ] [ long ";
helpFormatter0.printHelp(" ", (Options) null, false);

[MASTER] 18:11:42.169 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_191_tmp__ESTest.test0(HelpFormatter_191_tmp__ESTest.java:54)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 18:11:42.169 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(74, helpFormatter0.getWidth());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(74, helpFormatter0.defaultWidth);
assertNotNull(helpFormatter0);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, " ");
assertFalse(boolean0);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
assertNotNull(mockPrintWriter0);

Options options0 = null;
HelpFormatter helpFormatter1 = new HelpFormatter();
assertEquals("-", helpFormatter1.getOptPrefix());
assertEquals("--", helpFormatter1.getLongOptPrefix());
assertEquals(74, helpFormatter1.getWidth());
assertEquals("arg", helpFormatter1.getArgName());
assertEquals(1, helpFormatter1.getLeftPadding());
assertEquals(" ", helpFormatter1.getLongOptSeparator());
assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
assertEquals("\n", helpFormatter1.getNewLine());
assertEquals(3, helpFormatter1.getDescPadding());
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter1.defaultWidth);
assertEquals(1, helpFormatter1.defaultLeftPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(3, helpFormatter1.defaultDescPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertNotNull(helpFormatter1);
assertFalse(helpFormatter1.equals((Object)helpFormatter0));

helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, "^d.\"mhtyHp+kM>]D", "-", (Options) null, 3, 3, "", true);

[MASTER] 18:11:47.753 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_195_tmp__ESTest.test0(HelpFormatter_195_tmp__ESTest.java:51)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 18:11:47.754 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertNotNull(helpFormatter0);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
assertNotNull(mockPrintWriter0);

Object object0 = new Object();
assertNotNull(object0);

boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
assertFalse(boolean0);

MockPrintWriter mockPrintWriter1 = new MockPrintWriter("--");
assertNotNull(mockPrintWriter1);
assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));

Object[] objectArray0 = new Object[4];
objectArray0[0] = (Object) mockFileOutputStream0;
objectArray0[1] = (Object) helpFormatter0;
objectArray0[2] = (Object) mockPrintWriter1;
objectArray0[3] = (Object) mockFileOutputStream0;
PrintWriter printWriter0 = mockPrintWriter1.format((Locale) null, "", objectArray0);
assertNotSame(mockPrintWriter1, mockPrintWriter0);
assertSame(mockPrintWriter1, printWriter0);
assertSame(printWriter0, mockPrintWriter1);
assertNotSame(printWriter0, mockPrintWriter0);
assertEquals(4, objectArray0.length);
assertNotNull(printWriter0);
assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
assertFalse(printWriter0.equals((Object)mockPrintWriter0));

int int0 = 10;
helpFormatter0.printWrapped(printWriter0, 10, 32, "");
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertNotSame(mockPrintWriter1, mockPrintWriter0);
assertSame(mockPrintWriter1, printWriter0);
assertSame(printWriter0, mockPrintWriter1);
assertNotSame(printWriter0, mockPrintWriter0);
assertEquals(4, objectArray0.length);
assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
assertFalse(printWriter0.equals((Object)mockPrintWriter0));

Options options0 = new Options();
assertNotNull(options0);

Options options1 = options0.addOption("", "arg", true, "");
assertSame(options1, options0);
assertSame(options0, options1);
assertNotNull(options1);

helpFormatter0.printHelp(printWriter0, 10, "   ", "", options0, (-1030), 1487, "   ");

[MASTER] 18:11:53.019 [logback-2] ERROR JUnitAnalyzer - Ran out of time while checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 9
* Writing tests to file
* Writing JUnit test case 'HelpFormatter_ESTest' to results/Cli-32/org.apache.commons.cli.HelpFormatter/BBC-F0-opt-20/tests/4
* Done!

* Computation finished
