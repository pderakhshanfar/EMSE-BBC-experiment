/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 18:03:24 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.URI;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("a", true, "a");
      helpFormatter0.defaultWidth = (-1);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("a", options1, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-563);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      helpFormatter0.setLongOptSeparator("d*");
      helpFormatter0.defaultOptPrefix = "eLScN!jW)`J9~-M";
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("x+}4#Eh=");
      helpFormatter0.defaultLongOptPrefix = "x+}4#Eh=";
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.setLongOptSeparator("NB%&~6he}={+;e-{");
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-4638));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(", ", "", options0, ", ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("--");
      Options options0 = new Options();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.printHelp(1, "\n", "\n", options0, "\n");
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter0.renderOptions(stringBuffer0, 9, options0, 9, 48);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("tR-)V+>aI5LfqcI");
      Options options0 = new Options();
      helpFormatter0.printHelp(1, "\n", "\n", options0, "\n");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "Ah(P6", "Ah(P6", options0, "Ah(P6", false);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.findWrapPos("   ", 0, 0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix((String) null);
      Options options0 = new Options();
      options0.helpOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 101, "?7;&}V/_F", "?7;&}V/_F", options1, 16, 101, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, (-3902), (Options) null, (-1939), (-3138));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = null;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("NOdB!,1ns]<");
      Options options0 = new Options();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setArgName("");
      helpFormatter0.printHelp(2537, "usage: ", "usage: ", options0, (String) null);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 48, ")Mp", (String) null, (Options) null, 48, 48, "D:Vjb", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("\n", options0, true);
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 74, (-2066), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      helpFormatter0.printHelp(74, "\n", "\n", options0, "\n");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      boolean boolean0 = true;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, " ", " ", options0, 1, 1, " ", true);
      String string0 = "bH ?`!c";
      String string1 = "WMift> -IdVI\\e>{Lp";
      String string2 = "The option '";
      Option option0 = null;
      try {
        option0 = new Option("The option '", "The option '", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'The option '' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Object object0 = new Object();
      Object object1 = new Object();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      int int0 = 3327;
      helpFormatter0.printHelp(3327, "usage: ", "usage: ", options0, "-");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      int int1 = (-1857);
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) null, 74, (-1857), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Object object0 = new Object();
      Object object1 = new Object();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "-");
      optionGroup0.addOption(option0);
      helpFormatter0.printHelp(3327, "usage: ", "usage: ", options0, "-");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.renderWrappedText(stringBuffer0, 74, 74, "");
      helpFormatter0.getDescPadding();
      helpFormatter2.findWrapPos("/H6fn", 10, 1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format("arg", objectArray0);
      // Undeclared exception!
      helpFormatter2.printHelp(printWriter0, 0, "rws<y", "", options0, 31, 1, "Mh", true);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOption("", "--", true, "iW[Ne{->f+|%k7No");
      options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("iW[Ne{->f+|%k7No", options1, true);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Object object0 = new Object();
      Object object1 = new Object();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "-");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOption(option0);
      helpFormatter1.printHelp("\n", "-", options0, "usage: ", true);
      helpFormatter1.printHelp(3, "-", "--", options1, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 57, "\n", "-", options0, 1642, 278, "\n", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      String string0 = "D:Vjb";
      Options options0 = new Options();
      int int0 = 869;
      String string1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 5424, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "-";
      helpFormatter0.setWidth((-1051));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("oj\"\"=m}d", "-", options0, "Y4_`:f>~E");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      options0.hasLongOption("--");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "-");
      optionGroup0.addOption(option0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2), (String) null, "xjs|YUWMaD", options1, 1566, 1566, "xjs|YUWMaD", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "usage: ";
      helpFormatter0.setArgName("+neB;&&g'lTk_+DDCu");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 174, "usage: ", "/{Drn>]Wu2)=V5PV::X", options0, 44, 2652, "Cannot add value, list full.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      helpFormatter0.printHelp(printWriter0, 10, "D:Vjb", "", options0, 1, 10, "", true);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2647, options0, 9, 9);
      int int0 = (-1679);
      int int1 = 1;
      String string0 = "*? ";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, (-1679), 1, "*? ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Q<jW+-y");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "`R", options0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      Options options0 = new Options();
      helpFormatter0.printHelp(1, " ", "", options0, "usage: ");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter0, true);
      Locale locale0 = Locale.UK;
      Object object0 = new Object();
      Object object1 = new Object();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "-");
      optionGroup0.setRequired(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      helpFormatter1.printHelp(" ", "arg", options2, "arg", true);
      helpFormatter1.printHelp(3327, "usage: ", "", options2, "-");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(1, " ", "", options0, "usage: ");
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1, "", "OUoa898", options0, 1, 1, "OUoa898", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.findWrapPos("\n", 0, 0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("-", options1, true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getWidth();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter2.setDescPadding(1472);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getArgName();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      char[] charArray0 = new char[0];
      mockPrintWriter0.print(charArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-3327), "w", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("Rr{+8iF:6]OGG");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2119, "P25", "", options0, (-2264), 31, "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption((String) null, false, "--");
      helpFormatter0.printHelp(13, "N@<Pc4&Ez1T-*", "[l", options0, "[l");
      MockFile mockFile0 = new MockFile("I^");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 90, "[l");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, (String) null);
      Option option0 = new Option("v", "");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption((String) null, true, "L}e7W$ZC^");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options4 = options3.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "org.apache.commons.cli.AlreadySelectedException", "6<=OQfF+", options4, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("DoBk(I0nZ", "DoBk(I0nZ", options0, (String) null);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      File file0 = MockFile.createTempFile("Uah:^%S9AR}~3", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) file0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) "Uah:^%S9AR}~3";
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) helpFormatter0;
      objectArray0[8] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "DoBk(I0nZ", objectArray0);
      Options options1 = new Options();
      Options options2 = options1.addOption("", " ]", true, " ");
      Locale.setDefault(locale0);
      helpFormatter0.printUsage(printWriter0, 1472, "", options2);
      helpFormatter0.getOptPrefix();
      helpFormatter0.printHelp(printWriter0, 162, "-", "m6;WZNd.*XzT`i3", options0, 3, 1472, "FxVEg)$<f\"B", true);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte) (-40);
      byteArray0[8] = (byte)66;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      helpFormatter0.renderWrappedText(stringBuffer0, 30, 30, "");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter0, true);
      Locale locale0 = Locale.UK;
      Object object0 = new Object();
      Object object1 = new Object();
      Locale locale1 = Locale.FRANCE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[0];
      mockPrintWriter1.printf(locale1, "FSsB)r8jo1iG", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", " ", true, "FSsB)r8jo1iG");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options2 = new Options();
      options1.addOption("", (String) null, true, "Y6x");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 42, "\n", options0);
      helpFormatter0.getOptPrefix();
      helpFormatter0.printOptions(mockPrintWriter0, (-1), options2, 1, 12);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile(" ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2041), "org.apache.commons.cli.OptionGroup", "", options0, 2784, 31, "Rr{+8iF:6]OGG", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.findWrapPos("usage: ", 348, 32);
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.setLeftPadding(1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      helpFormatter1.printHelp("gmtjA&1D", "\n", options0, "-");
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter3.setOptionComparator(comparator0);
      MockFile mockFile0 = new MockFile("usage: ", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.println("usage: ");
      options0.hasLongOption("");
      helpFormatter3.printHelp((PrintWriter) mockPrintWriter0, 32, "--", "--", options0, 11, 3, " ");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(13, "?[%\"6>ylj%'", "?[%\"6>ylj%'", options0, (String) null);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter0, true);
      Locale locale0 = Locale.UK;
      Object object0 = new Object();
      Object object1 = new Object();
      Locale locale1 = Locale.FRANCE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[0];
      mockPrintWriter1.printf(locale1, "FSsB)r8jo1iG", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", " ", true, "FSsB)r8jo1iG");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options2 = new Options();
      options1.addOption("", (String) null, true, "Y6x");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 42, "\n", options0);
      helpFormatter0.printHelp("5'tHXB:IM| &5", "usage: ", options1, "", true);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(9, "arg", "arg", options0, "arg");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 449, "", (String) null, options0, 449, 9, "F~7l6zNhXj5x");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("@Wc<");
      helpFormatter0.setLongOptSeparator("^RNH<[B$#2x");
      Options options0 = new Options();
      Option option0 = new Option("E", false, "");
      helpFormatter0.setArgName("ns*C=");
      Options options1 = options0.addOption(option0);
      options0.toString();
      helpFormatter0.printHelp("@Wc<", options0);
      helpFormatter0.defaultLongOptPrefix = "@Wc<";
      helpFormatter0.printHelp("m", options1, true);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setDescPadding(74);
      Options options2 = options0.addOption("B", false, "q-:_LS>CvM`YO?z");
      helpFormatter0.printHelp(74, " ", "@Wc<", options2, "", true);
      helpFormatter1.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = (-1138);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1621, "n;W/'q'", "n;W/'q'", options0, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      Object object0 = new Object();
      Options options0 = new Options();
      Option option0 = new Option("", (String) null, true, (String) null);
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter1.printHelp("org.apache.commons.cli.Option", options1, false);
      helpFormatter1.getOptPrefix();
      helpFormatter0.getWidth();
      helpFormatter1.setDescPadding((-2));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("   ", 0, 45);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", "-", options0, "-");
      MockFile mockFile0 = new MockFile(" ", "   ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, "org.apache.commons.cli.HelpFormatter");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter0, true);
      Locale locale0 = Locale.UK;
      Object object0 = new Object();
      Object object1 = new Object();
      Locale locale1 = Locale.FRANCE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[0];
      mockPrintWriter1.printf(locale1, "FSsB)r8jo1iG", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", " ", true, "FSsB)r8jo1iG");
      helpFormatter1.setLeftPadding((-1034));
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options2 = new Options();
      options1.addOption("", (String) null, true, "Yf6x");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 42, "\n", options0);
      helpFormatter0.getOptPrefix();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 2172, "usage: ");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("usage: ", 3, 0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("Pci)|-d2p", "--", options0, "(^9qr7_f,sl@G", false);
      helpFormatter1.printHelp("[ Options: [ short ", options0, false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getOptPrefix();
      helpFormatter2.getWidth();
      helpFormatter2.setDescPadding(97);
      helpFormatter1.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Locale locale0 = Locale.UK;
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) mockPrintWriter0;
      Object object2 = new Object();
      objectArray0[4] = object2;
      Object object3 = new Object();
      objectArray0[5] = object3;
      objectArray0[6] = (Object) locale0;
      Object object4 = new Object();
      objectArray0[7] = object4;
      objectArray0[8] = (Object) helpFormatter0;
      mockPrintWriter0.printf(locale0, "--", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, ", ", true, "?*(nOO2.{;e|V");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2520), "DoBk(I0nZ", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "<");
      optionGroup0.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      options1.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
      MockFile mockFile0 = new MockFile(" ", "<");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options2 = new Options();
      Options options3 = options2.addOption("", "usage: ", true, "org.apache.commons.cli.HelpFormatter$1");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-2), "j|=^}mV=PuPf%[", "usage: ", options3, (-2), (-3928), "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter0, true);
      Locale locale0 = Locale.UK;
      Object object0 = new Object();
      Object object1 = new Object();
      Locale locale1 = Locale.FRANCE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[0];
      mockPrintWriter1.printf(locale1, "FSsB)r8jo1iG", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", " ", true, "FSsB)r8jo1iG");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options2 = new Options();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      options1.addOption("", (String) null, true, "Yf6x");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 42, "\n", options0);
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 3792, "Yf6x", "-", options0, (-2), (-773), "arg");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.findWrapPos("'#Vo {", 0, 0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", options0, true);
      helpFormatter1.setLeftPadding(0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      helpFormatter1.printHelp("xJVS`l1r", "usage: ", options0, "-");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator0);
      MockFile mockFile0 = new MockFile("^Oki|wyy+[y; :S", "-");
      File file0 = MockFile.createTempFile("arg", "-", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, "^Oki|wyy+[y; :S", "--", options0, 37, 0, "^Oki|wyy+[y; :S");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = "{QzL>kHa2d ,w\"(;J";
      String string1 = "N~fz_l4T";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-647), "'h1uMX");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.findWrapPos("'#Vo {", 0, 0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparator0).toString();
      helpFormatter1.setOptionComparator(comparator0);
      helpFormatter1.printHelp("usage: ", options0, true);
      helpFormatter1.printHelp("xa-xK1-N!Sj", "\n", options0, "jxrpm");
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) comparator1;
      objectArray0[2] = (Object) options0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "\n", objectArray0);
      // Undeclared exception!
      helpFormatter1.printWrapped(printWriter0, 0, " ");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("usage: ", 0, 0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("--", "a", options0, "");
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      int int0 = 2;
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "DoBk(I0nZ";
      Options options0 = new Options();
      helpFormatter0.printHelp("DoBk(I0nZ", "DoBk(I0nZ", options0, (String) null);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string1 = "";
      helpFormatter0.setArgName("");
      boolean boolean0 = true;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('w');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 97, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Locale locale0 = Locale.UK;
      Object object0 = new Object();
      Object object1 = new Object();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter2.setOptionComparator(comparator0);
      Options options0 = new Options();
      helpFormatter2.printHelp("nh\"CA!<Y", "--", options0, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("DoBk(I0nZ", "DoBk(I0nZ", options0, (String) null);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      File file0 = MockFile.createTempFile("Uah:^%S9AR}~3", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) file0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) "Uah:^%S9AR}~3";
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) helpFormatter0;
      objectArray0[8] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "DoBk(I0nZ", objectArray0);
      Options options1 = new Options();
      Options options2 = options1.addOption("", " ]", true, " ");
      Locale.setDefault(locale0);
      helpFormatter0.printUsage(printWriter0, 1472, "", options2);
      helpFormatter0.getOptPrefix();
      helpFormatter0.printHelp(printWriter0, 162, "-", "m6;WZNd.*XzT`i3", options0, 64, 1472, "FxVEg)$<f\"B", false);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      List list0 = new LinkedList<Option>();
      options0.hasLongOption("--");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.defaultLeftPad = (-494);
      helpFormatter0.setLeftPadding(3932);
      helpFormatter0.printHelp("xJVS`l1r", "", options0, "xJVS`l1r");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      LinkedList<Option> linkedList0 = new LinkedList<Option>();
      options0.hasLongOption("--");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.defaultLeftPad = (-494);
      helpFormatter0.setLeftPadding(3932);
      helpFormatter0.printHelp("xJVS`l1r", "", options0, "xJVS`l1r");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "";
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) mockFileOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.format("\n", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-1), "", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("@Wc<");
      helpFormatter0.setLongOptSeparator("^RNH<[B$#2x");
      Options options0 = new Options();
      helpFormatter0.printHelp("E", (String) null, options0, "@Wc<");
      Option option0 = new Option("E", false, "");
      helpFormatter0.setArgName("ns*C=");
      options0.addOption(option0);
      options0.toString();
      helpFormatter0.printHelp("@Wc<", options0);
      helpFormatter0.defaultLongOptPrefix = "@Wc<";
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding(1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("~jwKK5", "<X'nL<4Q%?cc}");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // <X'nL<4Q%?cc}
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append(')');
      helpFormatter0.printWrapped(printWriter0, 97, 97, "");
      Options options0 = new Options();
      helpFormatter0.printHelp("f+S", options0, true);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "6uBbSO";
      StringBuffer stringBuffer0 = new StringBuffer("6uBbSO");
      int int0 = 1;
      stringBuffer0.trimToSize();
      helpFormatter0.setLongOptPrefix("");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "6uBbSO");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 0, 1671);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("@Wc<");
      helpFormatter0.setLongOptSeparator("^RNH<[B$#2x");
      Options options0 = new Options();
      boolean boolean0 = false;
      helpFormatter0.printHelp("E", (String) null, options0, "@Wc<");
      Option option0 = new Option("", "*C=", false, "E");
      helpFormatter0.setArgName("*C=");
      Options options1 = options0.addOption(option0);
      options0.toString();
      helpFormatter0.printHelp("@Wc<", options0);
      helpFormatter0.defaultLongOptPrefix = "@Wc<";
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 2333, options1, 41, 55);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("usage: ", 0, 0);
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding(0);
      helpFormatter0.setLongOptPrefix("U<");
      helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setSyntaxPrefix("");
      helpFormatter2.printHelp(74, "--", "--", options0, "jt.(igw>OTEW`!:m", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(";}@\"^E|h<p {{1n");
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "-", 3, 1326);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("^RNH<[B$#2x");
      helpFormatter0.setSyntaxPrefix("@Wc<");
      helpFormatter0.setLongOptSeparator("^RNH<[B$#2x");
      Options options0 = new Options();
      helpFormatter0.printHelp("gE", (String) null, options0, "@Wc<");
      Option option0 = new Option("", "*C=", true, "gE");
      helpFormatter0.setArgName("*C=");
      Options options1 = options0.addOption(option0);
      options0.toString();
      helpFormatter0.printHelp("@Wc<", options0);
      helpFormatter0.defaultLongOptPrefix = "@Wc<";
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2), options1, (-2), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.findWrapPos("[ Options: [ short ", 1, 0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.lookup(linkedList0, linkedList1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter2.setOptionComparator(comparator0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("^RNH<[B$#2x");
      helpFormatter0.setSyntaxPrefix("@Wc<");
      helpFormatter0.setLongOptSeparator("^RNH<[B$#2x");
      Options options0 = new Options();
      helpFormatter0.printHelp("E", (String) null, options0, "@Wc<");
      Option option0 = new Option("", "*C=", false, "E");
      helpFormatter0.setArgName("*C=");
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (-2), options0, 1568, 1568);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      options0.hasLongOption("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(406);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "arg", "--", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("usage: ", 3, 0);
      Options options0 = new Options();
      helpFormatter0.printHelp(3, " ", "", options0, "-");
      helpFormatter0.renderOptions((StringBuffer) null, 6, options0, 0, 9);
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.createPadding(1);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, " ", " ", (Options) null, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Options options0 = new Options();
      String string0 = null;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) locale0;
      objectArray0[7] = (Object) null;
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("[");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("DoBk(I0nZ", "DoBk(I0nZ", options0, (String) null);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.getWidth();
      helpFormatter0.setDescPadding((-1105));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Options options0 = new Options();
      Option option0 = new Option((String) null, "--");
      Options options1 = options0.addOption(option0);
      options1.getOption("--");
      helpFormatter0.printHelp(1317, "lSC2:T6Cap_@I2b_ED#", "lSC2:T6Cap_@I2b_ED#", options1, (String) null, false);
      helpFormatter0.getNewLine();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      helpFormatter0.setLeftPadding((-1166));
      helpFormatter0.getLeftPadding();
      helpFormatter0.getWidth();
      MockFile mockFile0 = new MockFile("cmdLineSyntax not provided");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("^RNH<[B$#2x");
      helpFormatter0.setSyntaxPrefix("@Wc<");
      helpFormatter0.setLongOptSeparator("^RNH<[B$#2x");
      Options options0 = new Options();
      helpFormatter0.printHelp("E", (String) null, options0, "@Wc<");
      Option option0 = new Option("", "*C=", false, "E");
      helpFormatter0.setArgName("*C=");
      Options options1 = options0.addOption(option0);
      options0.toString();
      helpFormatter0.printHelp("@Wc<", options0);
      helpFormatter0.defaultLongOptPrefix = "@Wc<";
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2), options1, (-2), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.findWrapPos("", 103, 3);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (String) null, options1, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.findWrapPos("'#Vo {", 0, 0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((String) null, options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultArgName = "";
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.defaultWidth = (-3531);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("^~/", (Options) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.findWrapPos("usage: ", 0, 0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("\n", "K,-cl1I", options0, "arg");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(2);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      int int1 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("9c6N!2", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Locale locale0 = Locale.UK;
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "\n", true, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter1, 3, "", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Locale locale0 = Locale.UK;
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "\n", false, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter1, 3, "", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      int int0 = 0;
      helpFormatter0.createPadding(5);
      Options options0 = null;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "     ", "", (Options) null, "     ");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Locale locale0 = Locale.UK;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("--", "' was specified but an option from this group ", (Options) null, "-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = null;
      int int0 = (-1);
      int int1 = 0;
      int int2 = (-2013);
      MockFile mockFile0 = new MockFile("arg", "-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) mockFile0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "-", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, 74, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      PrintWriter printWriter0 = mockPrintWriter0.append('F');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      int int0 = (-2475);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 1, (-2475), "OW+)v%A(|/:u$I&C@");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("-", 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter0, true);
      Locale locale0 = Locale.UK;
      Object object0 = new Object();
      Object object1 = new Object();
      Locale locale1 = Locale.FRANCE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[0];
      mockPrintWriter1.printf(locale1, "FSsB)r8jo1iG", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", " ", true, "FSsB)r8jo1iG");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options2 = new Options();
      options1.addOption("", (String) null, true, "Yf6x");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 42, "\n", options0);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Locale locale0 = Locale.UK;
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "\n", false, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter1, (-2), "", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.findWrapPos("usage: ", 0, 0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("\n", "K,-cl1I", options0, "arg");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((-4591), "usage: ", "~*_V", options0, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("*<C+yhwi3fG", "*<C+yhwi3fG", (Options) null, "*<C+yhwi3fG", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      int int0 = 0;
      Options options0 = new Options();
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, (String) null, (String) null, options0, " ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("e8PhZXD7Oc");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.rtrim("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setOptPrefix("'pc=");
      helpFormatter0.setNewLine("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(">", (String) null, (Options) null, "<.NFcVN2@", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 74, 74, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      int int0 = 0;
      helpFormatter0.findWrapPos("usage: ", 0, 0);
      Writer writer0 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      int int0 = 0;
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('n');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "--";
      mockPrintWriter0.printf("arg", objectArray0);
      int int1 = 1890;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("", "\n", false, "<");
      Option option0 = null;
      try {
        option0 = new Option("\n", true, "T^Te-^o&jrH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.createPadding(5);
      Options options0 = null;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "     ", "arg", (Options) null, "     ");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 0;
      int int1 = 0;
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
      stringBuffer1.ensureCapacity(2432);
      int int2 = 3;
      // Undeclared exception!
      try { 
        stringBuffer1.replace(3, 0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // start > length()
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.defaultDescPad = 3436;
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLeftPadding(1);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.setLongOptPrefix("\n");
      helpFormatter0.setWidth((-7013));
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      int int0 = 0;
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption(" ", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("^RNH<[B$#2x");
      helpFormatter0.setSyntaxPrefix("@Wc<");
      helpFormatter0.setLongOptSeparator("^RNH<[B$#2x");
      Options options0 = new Options();
      String string0 = "gE";
      helpFormatter0.printHelp("gE", (String) null, options0, "@Wc<");
      Option option0 = new Option("", "*C=", true, "gE");
      helpFormatter0.setArgName("*C=");
      options0.addOption(option0);
      options0.toString();
      helpFormatter0.printHelp("@Wc<", options0);
      helpFormatter0.defaultLongOptPrefix = "@Wc<";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "", (String) null, options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Options options0 = new Options();
      helpFormatter0.printHelp("-", options0, false);
      Options options1 = new Options();
      String string0 = "7B";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "7B", options0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      int int0 = 0;
      helpFormatter0.createPadding(0);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "", (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "^RNH<[B$#2\\x";
      helpFormatter0.setLongOptSeparator("^RNH<[B$#2x");
      helpFormatter0.setSyntaxPrefix("@Wc<");
      helpFormatter0.setLongOptSeparator("^RNH<[B$#2x");
      helpFormatter0.createPadding(0);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "+;", "+;", (Options) null, "NVZ|n3$-]p5OKop");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("DoBk(I0nZ", "DoBk(I0nZ", options0, (String) null);
      Locale locale0 = Locale.KOREAN;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Locale locale1 = new Locale("wc{N%G.DY`1@W}");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "wc{N%G.DY`1@W}";
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) null;
      Object object0 = new Object();
      objectArray0[5] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale1, "-", objectArray0);
      stringWriter0.append((CharSequence) "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-3485), 5, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Locale locale0 = Locale.UK;
      Object object0 = new Object();
      Object object1 = new Object();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "-");
      optionGroup0.addOption(option0);
      options0.addOption(option0);
      helpFormatter1.printHelp("\n", "-", options0, "usage: ", true);
      helpFormatter0.printHelp(3327, "usage: ", "usage: ", options0, "");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1, 3327, " ");
      assertEquals(1, stringBuffer1.length());
      assertEquals("-", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("\n", (-13), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setArgName("");
      helpFormatter0.setLeftPadding((-2710));
      StringWriter stringWriter0 = new StringWriter(0);
      String string1 = HelpFormatter.DEFAULT_OPT_PREFIX;
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "-", 31, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("^RNH<[B$#2x");
      helpFormatter0.setSyntaxPrefix("@Wc<");
      helpFormatter0.setLongOptSeparator("^RNH<[B$#2x");
      Options options0 = new Options();
      String string0 = "";
      String string1 = "E";
      helpFormatter0.printHelp("E", (String) null, options0, "@Wc<");
      Option option0 = new Option("", "*C=", false, "E");
      helpFormatter0.setArgName("*C=");
      options0.addOption(option0);
      options0.toString();
      helpFormatter0.printHelp("@Wc<", options0);
      helpFormatter0.defaultLongOptPrefix = "@Wc<";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptPrefix();
      options0.getOptionGroups();
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "@Wc<", "", options0, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultArgName = "";
      helpFormatter0.defaultSyntaxPrefix = "";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("^~/", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("@Wc<");
      helpFormatter0.setLongOptSeparator("^RNH<[B$#2x");
      Options options0 = new Options();
      helpFormatter0.printHelp("E", (String) null, options0, "@Wc<");
      Option option0 = new Option("", "*C=", false, "E");
      helpFormatter0.setArgName("*C=");
      options0.addOption(option0);
      options0.toString();
      helpFormatter0.printHelp("@Wc<", options0);
      helpFormatter0.defaultLongOptPrefix = "@Wc<";
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding(101);
      helpFormatter1.setLongOptPrefix("OO&");
      Comparator comparator0 = helpFormatter1.getOptionComparator();
      helpFormatter0.setOptionComparator(comparator0);
      File file0 = MockFile.createTempFile("usage: ", "*C=");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(file0, ":R:ZSfmdc");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // :R:ZSfmdc
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Rv/^CEz)Z]4r";
      Options options0 = new Options();
      options0.helpOptions();
      options0.hasLongOption("--");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.defaultDescPad = (-494);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Rv/^CEz)Z]4r", options0, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("DoBk(I0nZ", "DoBk(I0nZ", options0, (String) null);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.getOptPrefix();
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", string0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.createPadding(0);
      helpFormatter0.createPadding(0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setSyntaxPrefix("");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setOptPrefix((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-3991));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getArgName();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false, "Y8:DO*X''0");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // Y8:DO*X''0
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(932);
      helpFormatter0.setNewLine("");
      String string0 = "NK~bl25HU!EVqu0";
      helpFormatter0.defaultNewLine = "NK~bl25HU!EVqu0";
      String string1 = "mn;lax9bU@B5 /vabz";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("|)(4'vGYmf{jKM7z", "mn;lax9bU@B5 /vabz", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '|)(4'vGYmf{jKM7z' contains an illegal character : '|'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "(&},XMu6\"hI[Y", options0, "ID;Lt", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix(" [ARG]");
      assertEquals(" [ARG]", helpFormatter0.getSyntaxPrefix());
  }
}
