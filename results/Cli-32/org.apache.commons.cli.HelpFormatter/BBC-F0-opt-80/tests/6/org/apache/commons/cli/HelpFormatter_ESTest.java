/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 18:14:28 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.createPadding(64);
      helpFormatter0.getOptPrefix();
      int int0 = 44;
      helpFormatter0.createPadding(44);
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      String string0 = "";
      Options options1 = options0.addOption("", false, "-");
      Options options2 = options1.addOption("", "A CloneNotSupportedException was thrown: ", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "TGcx9}m/yLe&x;tCb", false, "org.apache.commons.cli.HelpFormatter");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      option0.setArgName("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "                                                                ", (String) null, options3, "arg", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer0, 0, 74, "\n");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "L<44mV0H+s8pwpO;O";
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "~");
      Options options2 = options1.addOption("", "usage: ", false, "89jD-^LKH");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2127, "L<44mV0H+s8pwpO;O", "VF%Q?z.CB\"YZ'CV", options3, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";L3U=ePL{aIn^dcj|0b");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.defaultLeftPad = 1869;
      helpFormatter0.rtrim("usage: ");
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.findWrapPos("usage: ", 1, 1);
      helpFormatter0.getNewLine();
      helpFormatter0.getNewLine();
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) comparator0;
      objectArray0[2] = (Object) ";L3U=ePL{aIn^dcj|0b";
      objectArray0[3] = (Object) "\n";
      objectArray0[4] = (Object) "&0{";
      objectArray0[5] = (Object) "\n";
      objectArray0[6] = (Object) null;
      mockFile0.mkdirs();
      PrintWriter printWriter0 = mockPrintWriter0.printf("&0{", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 1, "usage:");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 34, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format("-", objectArray0);
      String string0 = "";
      helpFormatter0.printWrapped(printWriter0, 0, 3261, "");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string1 = null;
      int int0 = 1306;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "?q=%309Fegkd>AZR");
      helpFormatter0.defaultLeftPad = 1306;
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.defaultArgName = null;
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getArgName();
      helpFormatter0.createPadding(1306);
      helpFormatter0.getOptPrefix();
      int int1 = 343;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("--", "jIQEV<z;6", false, "ZWSthiL?8LJzQcJ${i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" :: ", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("sn", "E5og!H7i:Hiqdwkk~p", (Options) null, "sn", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultArgName = "";
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      helpFormatter0.setWidth(3163);
      helpFormatter0.renderWrappedText(stringBuffer0, 3163, 3163, "9kc!ICBx");
      helpFormatter0.getArgName();
      helpFormatter0.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("Eo", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("N=Zi8xt3]h", options0, true);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("Eo", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) options1;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) optionGroup0;
      objectArray0[3] = (Object) option0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("arg", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-1), (String) null, options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, (-2822), " ] [ long ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(">FS?ET86,X", ">FS?ET86,X", (Options) null, "V2=pK");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine((String) null);
      Options options0 = new Options();
      options0.addOption("", true, "");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      helpFormatter0.printHelp(printWriter0, 37, "h.d", "", options0, 37, 37, "", true);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      helpFormatter0.printHelp("cZ93)X", options0, true);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_WIDTH;
      helpFormatter1.setSyntaxPrefix((String) null);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getOptionComparator();
      helpFormatter1.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = new StringBuffer("");
      stringBuffer0.trimToSize();
      stringBuffer0.trimToSize();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer1, 74, 74, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", options0, false);
      StringBuffer stringBuffer0 = new StringBuffer("+02^g^s`");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, (-54), options0, 32, 32);
      helpFormatter0.renderWrappedText(stringBuffer1, 3, 1, "arg");
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 2574, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
      helpFormatter1.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      Option option0 = new Option("", true, "-");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = new StringBuffer("--");
      stringBuffer1.trimToSize();
      stringBuffer1.trimToSize();
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "\n");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("DzX8cmWv", "-", true, "--");
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp(3, "usage: ", "", options1, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      int int0 = 13;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "TcI'", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[ Options: [ short ");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 75, "\"", "arg", options0, 13, 75, (String) null);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.setLeftPadding((-2817));
      helpFormatter1.setLongOptSeparator("[;}2=`K_As>'y");
      mockPrintWriter0.println(1103L);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("N^i>H=oljM", options0, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth((-3134));
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("\n", options0, false);
      helpFormatter1.getSyntaxPrefix();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = new StringBuffer("usage: ");
      stringBuffer1.trimToSize();
      stringBuffer0.trimToSize();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 1, (-1232), "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      PrintStream printStream0 = mockPrintStream0.append('0');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1926, "-MH:\"xeL``v~", options0);
      helpFormatter0.findWrapPos("T/S+%.9vX", 1926, 2567);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 2567, 2567);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("arg", true, "\n");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 74, "--", " ", options1, 3, 1, "-");
      Options options2 = options1.addOption("", false, "-");
      Options options3 = options2.addOption("", "usage: ", false, "\"");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "arg", options3);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Option option0 = new Option("Eo", true, "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption((String) null, "", true, (String) null);
      helpFormatter1.printHelp("\n", options1, true);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("Eo", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.addOption((String) null, "arg", true, "--");
      helpFormatter0.printHelp("B", options0, true);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("Illegal option name '");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(39, ".?J\"$'e", "", (Options) null, "0!..e]x-8$_g ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(34, "VOCameice", "VOCameice", options0, "VOCameice", true);
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1485, "\"", "org.apache.commons.cli.Util", options0, (-1182), (-1850), " | ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Sre#>}|0", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "Sre#>}|0", "pV|*'<", options0, 13, 3505, "Yv9.)ZbfNf");
      String string0 = "--";
      helpFormatter0.printHelp("--", options0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3505, "7Na~behZk", " ", options0, 3, (-1628), "usage: ", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      String string0 = "";
      Options options0 = new Options();
      EvoSuiteFile evoSuiteFile0 = null;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) "M}Rt";
      PrintWriter printWriter0 = mockPrintWriter0.printf("M}Rt", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter1, (-1), options1, 480, (-1384));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " ");
      StringWriter stringWriter2 = stringWriter1.append('v');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, " ", (String) null, options0, (-462), 74, (String) null, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Sre#>}|0", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) null);
      int int0 = 9;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 9, 9, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", true);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("\n", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream1, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 11, "Xc@#/f-", "<", options0, 13, 11, "");
      helpFormatter0.printHelp("<", options0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 109, "", "/3iJqz&", options0, 13, 2364, "org.apache.commons.cli.HelpFormatter", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      String string0 = "";
      Options options0 = new Options();
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "", "~UTq|Qbs zn2vR", options0, "~UTq|Qbs zn2vR");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter1.renderOptions(stringBuffer0, 18, options0, 3, 3);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "Tv4!?^qRJ S\"cXL5zmI", "841sNQbovo", options0, 101, 13, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, "arg", "841sNQbovo", options0, 13, 74, "841sNQbovo", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth(0);
      // Undeclared exception!
      helpFormatter0.printHelp(">", options0, true);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 13, "org.apache.commons.cli.OptionValidator", "arg", options1, 13, 297, "org.apache.commons.cli.OptionValidator");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      mockFileOutputStream0.write(13);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "Yv9.)ZbfNf", "", options0, 74, 13, "AX+");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, "320", "pV|*'<", options0, "", true);
      Options options1 = options0.addOption("arg", true, "\n");
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 10, "usage: ", options1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter1.renderOptions(stringBuffer0, 3446, options0, 47, 74);
      StringBuffer stringBuffer1 = stringBuffer0.append((Object) helpFormatter2);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.printUsage((PrintWriter) mockPrintWriter0, 3, ".");
      StringBuffer stringBuffer2 = helpFormatter3.renderWrappedText(stringBuffer1, 2279, 3, "G");
      helpFormatter1.renderWrappedText(stringBuffer2, 1, 1, "usage: ");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg", true);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("[ option: ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream1, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 850, "QXWBhHaWD|Y", "QXWBhHaWD|Y", options0, 850, 3, "=n");
      helpFormatter0.printHelp("<", options0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 850, "org.apache.commons.cli.HelpFormatter", "3whYxa%/+2`l", options0, (-2), 1883, "Lyk;RSj@bc7iJ0}x", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "320";
      boolean boolean0 = true;
      StringBuffer stringBuffer0 = new StringBuffer(1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2), (Options) null, 52, 52);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "%x*=|I!/";
      helpFormatter0.defaultOptPrefix = "%x*=|I!/";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%x*=|I!/");
      Options options0 = null;
      boolean boolean0 = false;
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setWidth((-1616));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("%x*=|I!/", (Options) null, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption((String) null, "arg", true, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "-", "", options2, "mT", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      mockFileOutputStream0.write(13);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "Yv9.)ZbfNf", "", options0, 74, 13, "AX+");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, "320", "pV|*'<", options0, "", true);
      helpFormatter1.defaultArgName = "";
      Options options1 = options0.addOption("", false, "arg");
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 10, "br$_Ib'17_Y2HP(e/c", options1);
      helpFormatter1.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (-1041), options0, 110, 31);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ", true);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("--", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream1, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "Lyk;RSj@bc7iJ0}x", "<", options0, 13, 2, "QXWBhHaWD|Y");
      helpFormatter0.printHelp("Yv9.)ZbfNf", options0, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "org.apache.commons.cli.HelpFormatter", "<", options0, 13, 13, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(".ac;9F\nLyqd1xM/HF", (String) null, options0, "");
      helpFormatter0.setWidth((-1722));
      Options options1 = new Options();
      helpFormatter0.setWidth((-1371));
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", true, "--");
      Options options1 = new Options();
      options1.addOption(option0);
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("cmdLineSyntax not provided", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth(0);
      Options options1 = options0.addOption("", false, "arg");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "]", "clChtw+h", options1, "i$", false);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth((-1066));
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.defaultNewLine = "DC$*1QDst2Fmg>CMM";
      helpFormatter0.getWidth();
      helpFormatter0.setDescPadding(74);
      helpFormatter0.setWidth(74);
      Options options0 = new Options();
      options0.getOptions();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("", "--", "arg", "--", "arg").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      options0.addOption("", false, "--");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "31rC>/AD\"%");
      helpFormatter0.printHelp("INmO4.n", options0, true);
      helpFormatter0.getWidth();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      options0.toString();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.printHelp("INmO4.n", "INmO4.n", options0, "DC$*1QDst2Fmg>CMM", true);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.codePoints();
      stringBuffer0.trimToSize();
      stringBuffer0.trimToSize();
      helpFormatter0.findWrapPos("31rC>/AD\"%", 74, 74);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, 74, "31rC>/AD\"%");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption((String) null, "arg", true, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "-", "", options2, "0", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Sre#>}|0", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "Sre#>}|0", "pV|*'<", options0, 13, 3505, "Yv9.)ZbfNf");
      helpFormatter0.printHelp("xu", options0, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3505, "usagF: ", "Sre#>}|0", options0, 3505, 0, "Sre#>}|0", true);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Sre#>}|0", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("Lw5t6P1;$kL1;-", options2, true);
      helpFormatter0.getWidth();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      options1.toString();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.printHelp("[ Options: [ short java.util.HashMap@0000000007 ] [ long {} ]", "Lf.OXQH?", options0, (String) null, true);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.codePoints();
      stringBuffer0.trimToSize();
      stringBuffer0.trimToSize();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1444), 1, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.defaultNewLine = "DC$*1QDst2Fmg>CMM";
      helpFormatter0.getWidth();
      helpFormatter0.setWidth(74);
      Options options0 = new Options();
      options0.getOptions();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      options0.addOption("", false, "--");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "31rC>/AD\"%");
      helpFormatter0.printHelp("INmO4.n", options0, true);
      helpFormatter0.getWidth();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      options0.toString();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.printHelp("INmO4.n", "INmO4.n", options0, "DC$*1QDst2Fmg>CMM", true);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.codePoints();
      stringBuffer0.trimToSize();
      stringBuffer0.trimToSize();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, 74, "31rC>/AD\"%");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", false, "-");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", "", false, "PlK>\r*S*f");
      helpFormatter0.printHelp("320", options2);
      StringWriter stringWriter0 = new StringWriter();
      int int0 = (-1060);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "320", (-1060), 34);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", true, "-");
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      Options options2 = options1.addOption(option0);
      String string0 = "1\"nnhZ[W)tY~Wb";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", "usage: ", options2, "1\"nnhZ[W)tY~Wb", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      mockFileOutputStream0.write(13);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "Yv9.)ZbfNf", "", options0, 74, 13, "AX+");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, "320", "pV|*'<", options0, "", true);
      Options options1 = options0.addOption("", false, "arg");
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 10, "br$_Ib'17_Y2HP(e/c", options1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth(74);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("usage: ");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, true);
      helpFormatter0.rtrim("\n");
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1, (-1114), "");
      helpFormatter0.defaultArgName = " ] [ long ";
      helpFormatter0.renderWrappedText(stringBuffer1, 3024, (-2), "");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "\n", options0);
      helpFormatter0.setWidth(74);
      String string0 = "C v";
      Option option0 = null;
      try {
        option0 = new Option("-", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", true, "-");
      Options options1 = options0.addOption(option0);
      Options options2 = new Options();
      helpFormatter0.printHelp("cmdLineSyntax not provided", options1, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 79, options2, 1322, 0);
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer1, 0, 1, "'l>;4;D'Q *F");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "/{ESsMhU$h:s", "", options0, 10, 1078, "org.apache.commons.cli.Options");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator(" | ");
      helpFormatter0.getSyntaxPrefix();
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(74, "usage: ", "", options0, " | ", false);
      helpFormatter1.printHelp(436, "--", "--", options0, "--");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator(" | ");
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Options options0 = new Options();
      helpFormatter0.printHelp(" | ", options0, false);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "usage: ", " | ", options0, 3, 3, "[", false);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(83);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      stringWriter1.flush();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      char[] charArray0 = new char[6];
      charArray0[0] = 'O';
      charArray0[1] = '[';
      charArray0[2] = 'u';
      charArray0[3] = 'q';
      charArray0[4] = 'g';
      charArray0[5] = '@';
      stringWriter1.write(charArray0);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 1304, options0, 112, 83);
      helpFormatter0.renderOptions(stringBuffer1, 83, options0, 1, 112);
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.printHelp("[ option: ", options0, false);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getArgName();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 104, " :: ", "/{ESsMhU$h:s", options0, 104, 647, "");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator(" | ");
      helpFormatter0.getSyntaxPrefix();
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintStream0, false);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("arg", false, "-");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 0, "XSZ3", "usage: ", options1, 1884, 2, "<");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "", options0);
      helpFormatter0.setWidth(74);
      helpFormatter0.rtrim("\n");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator(" | ");
      helpFormatter0.getSyntaxPrefix();
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 1);
      StringWriter stringWriter0 = new StringWriter(25);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 25, 25, "usage: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(44, "usage: ", "", options0, " | ", false);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", true, "");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      Options options2 = options0.addOptionGroup(optionGroup2);
      options2.addOption("arg", "", true, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "", "", options1, "--", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("--").when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("6:-");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(pipedOutputStream0, false);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 73, " :: ", "", options0, 1, 1340, "ANlkqq");
      helpFormatter0.setOptPrefix("6:-");
      helpFormatter0.getNewLine();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Options options0 = new Options();
      helpFormatter0.rtrim("");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 150;
      helpFormatter0.setLeftPadding(150);
      PrintWriter printWriter0 = null;
      int int1 = 2;
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = null;
      try {
        option0 = new Option("--", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Sre#>}|0", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1, true);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "QW^'.=*", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("\n");
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.getWidth();
      Options options0 = new Options();
      helpFormatter0.printHelp("eyg(%xq09@odDli-Km", options0, true);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("--").when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(pipedOutputStream0, false);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 73, " :: ", "", options0, 1, 1340, "org.apache.commons.cli.Options");
      helpFormatter0.setOptPrefix("-");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Sre#>}|0", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Options options0 = new Options();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "Sre#>}|0", "pV|*'<", options0, 13, 3505, "Yv9.)ZbfNf");
      mockPrintWriter0.print("");
      helpFormatter0.printHelp("xu", options0, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3505, "usage: ", "Sre#>}|0", options0, 3505, 0, "Sre#>}|0", false);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator(" | ");
      helpFormatter0.getSyntaxPrefix();
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(44, "usage: ", "", options0, " | ", false);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintStream0, false);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 13, "usage: ", "-", options0, 0, 650, "--");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "320";
      Options options0 = new Options();
      Option option0 = new Option("", true, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockFile0;
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.getArgName();
      helpFormatter0.getWidth();
      String string0 = helpFormatter0.defaultNewLine;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("]}q", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ']}q' contains an illegal character : ']'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(63);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options1.addOption("usage: ", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)74;
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte) (-118);
      byte byte1 = (byte) (-22);
      byteArray0[3] = (byte) (-22);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.setNewLine("");
      String string0 = "SM/ZL4'7'fPx)!{m";
      File file0 = MockFile.createTempFile("SM/ZL4'7'fPx)!{m", (String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "", 1, 4825);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator(" | ");
      helpFormatter0.getSyntaxPrefix();
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 32);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 13, "[ Options: [ short ", "arg", options0, 74, 1, "The option '");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", false);
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      mockPrintWriter0.append((CharSequence) "--");
      String string0 = "'{";
      int int0 = (-2259);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2259), "'{");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator0);
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append('>');
      stringWriter1.getBuffer();
      Options options0 = new Options();
      String string0 = "[4#NN (+I";
      Option option0 = null;
      try {
        option0 = new Option("[4#NN (+I", "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '[4#NN (+I' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3334, (-685), "--");
      helpFormatter0.getWidth();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0, false);
      Options options1 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 184, "-", "\n", options0, 1, (-2353), "org.apache.commons.cli.OptionGroup");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 16;
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setOptPrefix("DM&.,");
      String string0 = "";
      helpFormatter0.defaultNewLine = "7`}\"$dZ]iu!{";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("org.apache.commons.cli.Option", "org.apache.commons.cli.Option", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.Option' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(pipedOutputStream0, false);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 73, " :: ", "", options0, 1, 1340, "org.apache.commons.cli.Options");
      helpFormatter0.setOptPrefix("-");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) locale0;
      mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(" ");
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "--");
      String string0 = " :: ";
      helpFormatter0.printWrapped(printWriter0, 74, 74, " :: ");
      helpFormatter0.defaultWidth = helpFormatter0.defaultWidth;
      helpFormatter0.getArgName();
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptSeparator();
      int int0 = 1162;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("]}q", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ']}q' contains an illegal character : ']'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.getBuffer();
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg");
      options0.addOption(option0);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1), "Illegal option name '", " ", options0, (-2), (-1), "n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "", options0);
      helpFormatter0.setWidth(74);
      helpFormatter0.rtrim("/NqN#GBb;F_|K~ErUr ");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 537, "EVhWY7b\"", "SH`Hj", options0, 4404, 2032, "aic]yrzRza&2#D-i*L");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      String string0 = "";
      boolean boolean0 = true;
      Option option0 = new Option((String) null, true, "arg");
      option0.clearValues();
      StringBuffer stringBuffer0 = new StringBuffer("");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 838, (-2), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("}T?;G,%");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      mockPrintWriter0.append('M');
      helpFormatter0.printOptions(mockPrintWriter1, 4, options0, 4, 44);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      int int0 = 1007;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 1007, "SH`Hj", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", true, "-");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.addOption("0", "-95kECyi23?G1>5N}", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2912), "0", "", options0, "320", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", false);
      Options options0 = new Options();
      helpFormatter0.printHelp(" :: ", options0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      int int0 = 1864;
      Options options0 = new Options();
      int int1 = 1018;
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 1864, options0, 1018, 1018);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, 1864, options0, 1018, (-3236));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", true, "-");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", "", true, "PlK>\r*S*f");
      helpFormatter0.printHelp("320", options2);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Sre#>}0", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.println((double) 74);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "Sre#>}0", "pV|*'<", options0, 13, 3477, "Yv9.)ZbfNf");
      helpFormatter0.printHelp("pV|*'<", options0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("&en5!aFtb)bZ)[8tH", 1, 13);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator(" | ");
      helpFormatter0.getSyntaxPrefix();
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 32);
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
      helpFormatter0.printWrapped(printWriter0, 3, "'{");
      helpFormatter0.setLongOptSeparator("n@-p5,Ez");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setLongOptPrefix("usage: ");
      int int0 = 0;
      String string0 = "pa2K\"mi*;ecb[^QTE%";
      String string1 = "c+G99HqboTfK0l";
      Options options0 = new Options();
      String string2 = "org.apache.commons.cli.HelpFormatter";
      // Undeclared exception!
      try { 
        options0.addOption("org.apache.commons.cli.HelpFormatter", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.HelpFormatter' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3334, (-685), "--");
      helpFormatter0.getWidth();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("cmdLineSyntax not provided", options0, false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setArgName("A#Jf\"imv]lF+(9(");
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText((StringBuffer) null, 74, 74, "--");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      String string0 = "[ARG...]";
      helpFormatter0.setArgName("[ARG...]");
      int int0 = (-810);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("E/Plkn}N<5vJ;d", (-810), (-810));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, "", " :: ", options0, 31, 31, " :: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "%x*=|I!/";
      helpFormatter0.defaultOptPrefix = "%x*=|I!/";
      Options options0 = null;
      PrintWriter printWriter0 = null;
      int int0 = (-1616);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1616), "%x*=|I!/");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      int int0 = (-276);
      helpFormatter0.setWidth((-276));
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("-", "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("N9M{ElNKj+6?5B@");
      String string0 = "Mjcm;m=,hYdsTys;";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", false, "KY");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(2456);
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.AlreadySelectedException");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-2));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append('>');
      stringWriter1.getBuffer();
      int int0 = 0;
      Options options0 = new Options();
      String string0 = "N";
      Option option0 = new Option("N", "N");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        options1.addOption("usage: ", "usage: ", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 351, (String) null, (String) null, (Options) null, 0, 0, "org.apache.commons.cli.HelpFormatter$1", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.US;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("ZH(D[fz]Q");
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, (-685), 15, "ZH(D[fz]Q");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      PrintWriter printWriter1 = mockPrintWriter1.append((CharSequence) "--");
      String string0 = " :: ";
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter1, 0, 0, " :: ");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      mockFileOutputStream0.write(13);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "Yv9.)ZbfNf", "", options0, 74, 13, "AX+");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, "320", "pV|*'<", options0, "", true);
      Options options1 = options0.addOption("arg", true, "\n");
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 10, "usage: ", options1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 3, options0, 1, 1);
      stringBuffer1.append((Object) "arg");
      StringBuffer stringBuffer2 = helpFormatter2.renderWrappedText(stringBuffer1, 3, 302, "");
      StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer2, 10, 3, "arg");
      assertEquals(41, stringBuffer0.length());
      assertEquals(41, stringBuffer3.length());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Sre#>}|0", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "Sre#>}|0", "pV|*'<", options0, 13, 3505, "Yv9.)ZbfNf");
      helpFormatter0.printHelp("xu", options0, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3505, "usage: ", "Sre#>}|0", options0, 3505, 0, "Sre#>}|0", false);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator(" | ");
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 3);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "-", (String) null, options0, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      int int0 = (-685);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, (-685), "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[ option: ";
      String string1 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = new Option("", true, "--");
      option0.clearValues();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2), (-2), "k!3/DG$Zz=-[{{_f.");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }
}
