/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 15:02:12 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Option option0 = new Option("", "-", true, "arg");
      Options options1 = options0.addOption(option0);
      String string0 = "~~.H9R`2I/";
      String string1 = "R|{/eGVR~Qk`qOVGQ.;";
      // Undeclared exception!
      try { 
        options1.addOption("~~.H9R`2I/", "R|{/eGVR~Qk`qOVGQ.;", true, "N");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '~~.H9R`2I/' contains an illegal character : '~'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("").when(comparator0).toString();
      doReturn((-5659)).when(comparator0).compare(anyString() , anyString());
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      String string0 = "";
      Options options1 = options0.addOption("7lfhe5", "", false, "");
      String string1 = "";
      Options options2 = options1.addOption("arg", true, "");
      options1.hasOption("--");
      helpFormatter0.printHelp(">", options1, false);
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.setLeftPadding(2914);
      EvoSuiteFile evoSuiteFile0 = null;
      String string2 = "{9[X4DsUZ|";
      // Undeclared exception!
      helpFormatter0.printHelp(">", options2);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("IBM&JZ");
      Options options0 = new Options();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      mockPrintWriter0.close();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 35, "");
      helpFormatter0.setWidth(35);
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 32, "\n");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      mockPrintWriter0.write("7hx5n5i'Wq}L", 1, 1);
      helpFormatter2.setArgName((String) null);
      helpFormatter2.printWrapped((PrintWriter) mockPrintWriter0, 35, 17, "`lvm");
      helpFormatter0.getArgName();
      helpFormatter2.getArgName();
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-460));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      helpFormatter0.printHelp("*?[~RbM^z-6:<kA", options0, true);
      helpFormatter0.getOptPrefix();
      helpFormatter0.createPadding(28);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      int int0 = 828;
      int int1 = 1680;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 828, " ", " [ARG]", options0, 1680, 828, "(ridA\"hdsfdm-k");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "8hT)s0Z2,,cWeF";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("8hT)s0Z2,,cWeF", "8hT)s0Z2,,cWeF", (Options) null, "8hT)s0Z2,,cWeF");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "", false, "");
      options1.addOption("arg", true, "");
      helpFormatter0.printHelp(">", options1, false);
      helpFormatter0.defaultSyntaxPrefix = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      Option option0 = new Option((String) null, "6A-ii<:C-|JN0", true, "!`d");
      options0.addOption(option0);
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.setLeftPadding(2914);
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(",>");
      helpFormatter0.createPadding(2914);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 0, ",>");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("EHf", true, "EHf");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Options options0 = new Options();
      Option option1 = new Option("Qe", "xYz*u6 DRGK/", false, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("nt^q(Z3AhGX!Rdv*8b8", options0, true);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      Options options0 = new Options();
      helpFormatter0.printHelp("pAwP$Sg^[d_hPg\"7SN", options0, true);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.defaultWidth;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.flush();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getMatchingOptions("--");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "='4-", options0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, true, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('R');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      String string0 = "0W";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "0W", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.getOptPrefix();
      String string1 = "RK(K5A!";
      helpFormatter0.defaultOptPrefix = "RK(K5A!";
      String string2 = "i30W";
      helpFormatter0.rtrim("i30W");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptionComparator();
      int int0 = (-485);
      String string3 = "Cannot add value, list full.";
      String string4 = "";
      Options options0 = new Options();
      String string5 = "'e!%hAK#C`]Zj8T";
      Option option0 = new Option((String) null, "RK(K5A!", false, "'e!%hAK#C`]Zj8T");
      Options options1 = options0.addOption(option0);
      String string6 = "t`.T*6#ZiLl|XQBQ>s";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options1.addOption("t`.T*6#ZiLl|XQBQ>s", "\n", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 't`.T*6#ZiLl|XQBQ>s' contains an illegal character : '`'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("   ");
      Locale locale0 = Locale.US;
      mockPrintWriter0.println((float) 1);
      helpFormatter0.setLeftPadding(3);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, "   ");
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", true, "\"");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter2.printHelp(0, "[", "arg", options0, "\n", true);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      int int0 = 44;
      helpFormatter0.renderWrappedText(stringBuffer0, 44, 44, "");
      Options options0 = new Options();
      boolean boolean0 = true;
      options0.addOption("arg", true, "-");
      Option option0 = null;
      try {
        option0 = new Option("usage: ", "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.renderOptions((StringBuffer) null, 1440, options0, 1440, 1440);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "9;7)02W~z*Z/l@!";
      helpFormatter0.setOptPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.setNewLine("kH|**?t4K");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 12, ">|,$M9!ZtAK)p<SDu");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, (String) null);
      optionGroup0.setRequired(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(":B~gO\"J2rg;D", options1, true);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options1 = options0.addOption("", "kvlx5.xHf!D,/'$", true, ":q");
      // Undeclared exception!
      helpFormatter0.printOptions(mockPrintWriter0, 0, options1, 112, 0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "#^wCcKFI|r", options0, "\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 3, (-3), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-", "arg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) mockFileOutputStream0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) mockFileOutputStream0;
      objectArray0[6] = (Object) mockFileOutputStream0;
      objectArray0[7] = (Object) mockFileOutputStream0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "-", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "--", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 344, "", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 0;
      Options options0 = null;
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 3712, 3712, "L$ o-0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.flush();
      helpFormatter0.setLeftPadding(2914);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.defaultSyntaxPrefix = ">-1x'3OUCs*w!j2Q'q";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n", "-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      mockPrintStream0.append((CharSequence) " ");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[9];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintStream0;
      Object object2 = new Object();
      objectArray0[3] = object2;
      objectArray0[4] = (Object) "org.apache.commons.cli.Option";
      objectArray0[5] = object0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) mockPrintWriter0;
      objectArray0[8] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format("arg", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 3996, "org.apache.commons.cli.Option", "", options0, 1801, 15, "org.apache.commons.cli.Option", true);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n", "-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      mockPrintStream0.append((CharSequence) "usage: ");
      Object object0 = new Object();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte)41;
      byteArray0[6] = (byte)22;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      mockPrintWriter0.format("org.apache.commons.cli.Option", (Object[]) null);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 32, "<", "org.apache.commons.cli.Option", options0, 32, 32, "", false);
      helpFormatter0.setArgName("");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp(63, ">", "\n", options0, " ");
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 63, options0, 63, 1438);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = Locale.US;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1756, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.setArgName("arg");
      int int0 = 10;
      // Undeclared exception!
      try { 
        helpFormatter2.findWrapPos((String) null, 1, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n", "-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      mockPrintStream0.append((CharSequence) "usage: ");
      Object object0 = new Object();
      mockPrintWriter0.format("org.apache.commons.cli.Option", (Object[]) null);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 32, "-", "org.apache.commons.cli.Option", options0, 756, 15, "org.apache.commons.cli.Option", true);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) "arg";
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 50, "arg", "org.apache.commons.cli.Option", options0, 32, 50, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      mockPrintWriter1.println((String) null);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter0, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 32, "$!@@t.S4i/:OD#R");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 32, "", "_:X", (Options) null, 2099, 1, "?Il[nl0_l", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">|,$M9!&ZtAK)p<SDu");
      Options options0 = new Options();
      String string0 = "%L(E:dPS";
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("LT=y6d%Dn,Yf");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1);
      MockPrintWriter mockPrintWriter3 = new MockPrintWriter(mockPrintWriter0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter2, 3, "");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter2, 1, "'uEG>wqB/", " ", options0, 1, 1824, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(63, ">", "\n", options0, " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      mockPrintWriter0.print((float) 1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 63, "$'>k/Q{z", (String) null, options0, 63, (-1), (String) null, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("*G']{S#iklyoOp!xn");
      Locale locale0 = Locale.US;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter0, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter2, 1787, "$!@@t.S4i/:OD#R");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1787, "$!@@t.S4i/:OD#R", "_:X", (Options) null, (-4149), (-4149), "$!@@t.S4i/:OD#R", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, " ");
      helpFormatter0.printHelp("#h4KsBALg", options1, true);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", (-1420), 32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.setLeftPadding(2914);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1);
      MockPrintWriter mockPrintWriter3 = new MockPrintWriter(mockPrintWriter1, false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter3, 13, ">|,$M9!&ZtAK)p<SDu");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter2, 13, "'uEG>wqB/", "'uEG>wqB/", (Options) null, 2914, 13, "cmdLineSyntax not provided", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("*G']{S#iklyoOp!xn");
      helpFormatter0.setLeftPadding(3001);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("7bmuF~carnK&*");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1);
      MockPrintWriter mockPrintWriter3 = new MockPrintWriter(mockPrintWriter0, false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 3001, "{r");
      helpFormatter0.setArgName("");
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Mcw";
      Options options0 = new Options();
      Options options1 = options0.addOption("Mcw", "8WM}]#6U>otYV", true, "R:$LFNHS");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 2914, (String) null, "Mcw", options2, (-2410), (-2410), "}obGBi", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      Locale locale0 = Locale.US;
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      PrintWriter printWriter0 = null;
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 0, (Options) null, 2329, 64);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("   ");
      Locale locale0 = Locale.US;
      helpFormatter0.setLeftPadding(0);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "   ");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("   ");
      Locale locale0 = Locale.US;
      char[] charArray0 = new char[7];
      charArray0[2] = 'w';
      charArray0[3] = 'X';
      charArray0[4] = 'F';
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("", "~7f 8?)PY{", true, "usage: ");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "   ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, options1, 1, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("   ");
      Locale locale0 = Locale.US;
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte) (-54);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options0 = new Options();
      helpFormatter0.getArgName();
      helpFormatter0.findWrapPos("A CloneNotSupportedException was thrown: ", 1, 1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">|,$M9!&ZtAK)p<SDu");
      Options options0 = new Options();
      Options options1 = new Options();
      options1.addOption("", true, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "A*tz5>q@IyKPZvD$J/|", (String) null, options0, 58, 1, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("   ");
      char[] charArray0 = new char[7];
      charArray0[2] = 'w';
      charArray0[3] = 'X';
      charArray0[4] = 'F';
      charArray0[6] = 'z';
      mockPrintWriter0.checkError();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "x#t+-", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", (Options) null, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("IBM&JZ");
      Options options0 = new Options();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 35, "");
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 58, "uL@+!E ", "IBM&JZ", options0, 740, (-2888), "&',*'NWG[AK8I,V");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      String string0 = "";
      String string1 = "d`\"[;Rv3KP8='\"";
      String string2 = null;
      boolean boolean0 = true;
      helpFormatter0.printHelp("g", options0);
      // Undeclared exception!
      try { 
        options0.addOption("d`\"[;Rv3KP8='\"", (String) null, true, "Wpz:or#W");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'd`\"[;Rv3KP8='\"' contains an illegal character : '`'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, false, "-");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[ARG...]", options3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("IBM&JZ");
      Options options0 = new Options();
      mockPrintWriter0.checkError();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(65, "IBM&JZ", "", options1, "Oex");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, "", "usage: ", options2, 1, (-2068), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Locale locale0 = Locale.US;
      Locale locale1 = Locale.JAPANESE;
      mockPrintWriter0.format(locale1, "", (Object[]) null);
      Locale locale2 = Locale.FRANCE;
      locale2.getDisplayLanguage(locale1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.setLeftPadding(97);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter3 = new MockPrintWriter(mockPrintWriter1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter2, 97, "\n");
      helpFormatter1.getArgName();
      Options options0 = new Options();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter2, 1251, "arg", "(]PFQr;Ws_ZdG?", options0, 9, 1251, "--");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">|,$M9!&ZtAK)p<SDu");
      Locale locale0 = Locale.US;
      Locale locale1 = Locale.JAPANESE;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale1, "--", (Object[]) null);
      Locale locale2 = Locale.FRANCE;
      locale0.getDisplayLanguage(locale1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      helpFormatter0.setLeftPadding(31);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(".t_XD]O&a.~");
      locale1.getDisplayLanguage(locale2);
      MockPrintWriter mockPrintWriter3 = new MockPrintWriter(mockPrintWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter1, 114, "");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter2.setArgName("{Ch/{b+Wtr+EcsU");
      helpFormatter2.printWrapped((PrintWriter) mockPrintWriter3, 2019, (-866), "arg");
      helpFormatter1.getArgName();
      helpFormatter1.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("CYCFE0T]AfxTJE dn?K", "", options1, "t|Cp<!jjD@", true);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 12, ">|,$M9!ZtAK)p<SDu");
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "<");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, ">|,$M9!ZtAK)p<SDu", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("--").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      Options options1 = options0.addOption("7lfhe5", "", false, "");
      Options options2 = new Options();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      helpFormatter0.printUsage(printWriter0, 10, "", options1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">|,$M9!&ZtAK)p<SDu");
      Options options0 = new Options();
      Options options1 = new Options();
      Options options2 = options1.addOption("", true, " ");
      helpFormatter0.printHelp("#h4KsBALg", options2, true);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "--";
      helpFormatter0.defaultArgName = "--";
      helpFormatter0.getLeftPadding();
      String string1 = "fb7(.+N^_'N4)+,EDf";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("(:`!Z*Sx|PA", "\n", true, "IFN%2[WPN");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '(:`!Z*Sx|PA' contains an illegal character : '('
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(12);
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 487, 12, "' contains an illegal character : '");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("   ");
      Locale locale0 = Locale.US;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", (Object[]) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'o';
      charArray0[1] = '2';
      charArray0[2] = 'w';
      charArray0[3] = 'X';
      charArray0[4] = 'F';
      charArray0[5] = 'Z';
      charArray0[6] = 'z';
      mockPrintWriter0.checkError();
      mockPrintWriter1.println(charArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 1, "   ");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      Options options1 = options0.addOption("", "line.separator", false, "cmdLineSyntax not provided");
      helpFormatter0.printHelp(1125, "line.separator", "org.apache.commons.cli.Option", options1, "T1SvU,dJqlLU2wB%Tx", false);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.US;
      Locale locale1 = Locale.JAPANESE;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale1, "--", (Object[]) null);
      Locale locale2 = Locale.FRANCE;
      locale2.getDisplayLanguage(locale0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      helpFormatter0.setLeftPadding(25);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(" ");
      MockPrintWriter mockPrintWriter3 = new MockPrintWriter(mockPrintWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter1, 3, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte) (-28);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2917), "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "arg", (Options) null, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("", (String) null).when(comparator0).toString();
      doReturn((-5659), 0).when(comparator0).compare(anyString() , anyString());
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      String string0 = "7lfhe5";
      Options options1 = options0.addOption("7lfhe5", "", false, "");
      options1.addOption("arg", true, "");
      options1.hasOption("--");
      helpFormatter0.printHelp(">", options1, false);
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.setLeftPadding(2914);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{9[X4DsUZ|");
      helpFormatter0.printHelp(3647, "'", "", options0, "");
      int int0 = 103;
      String string1 = "_5kC0";
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option(">", "^#pH6Ul.Y)6OAbJD*6@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '>'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.getWidth();
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, int0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("   ");
      Locale locale0 = Locale.CANADA;
      Locale locale1 = Locale.FRANCE;
      locale1.getScript();
      locale0.getDisplayLanguage(locale1);
      helpFormatter0.setLeftPadding(74);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setArgName("arg");
      helpFormatter0.rtrim("--");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("   ");
      Locale locale0 = Locale.US;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", (Object[]) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'o';
      charArray0[1] = '2';
      charArray0[2] = 'w';
      charArray0[3] = 'X';
      charArray0[4] = 'F';
      charArray0[5] = 'Z';
      charArray0[6] = 'z';
      mockPrintWriter0.checkError();
      mockPrintWriter1.println(charArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 1, "   ");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "usage: ");
      Option option0 = new Option("7aebI", "arg");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (-377), options2, 542, 38);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, " ");
      Options options2 = options0.addOption("arg", "", true, "arg");
      helpFormatter0.printHelp(65, "7e[", "has already been selected: '", options1, "7e[", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[27];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "arg";
      objectArray0[4] = (Object) options2;
      Object object0 = new Object();
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) options0;
      objectArray0[7] = (Object) options2;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "--", objectArray0);
      helpFormatter0.printUsage(printWriter0, 9, "", options2);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("   ");
      Locale locale0 = Locale.US;
      helpFormatter0.setLeftPadding(2914);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2914, "   ");
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "");
      helpFormatter1.printHelp(2914, "|[2l,?'~D_}z", "--", options1, "");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("   ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "   ");
      helpFormatter0.rtrim("   ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 10, 31, "$+3o.F*");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "--");
      helpFormatter0.printHelp(31, "   ", (String) null, options1, "$+3o.F*", true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 70, "H", "--", options1, 9, 70, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">|,$M9!&ZtAK)p<SDu");
      Options options0 = new Options();
      helpFormatter0.printHelp("%L(E:dPS", "", options0, "", true);
      helpFormatter0.getArgName();
      Options options1 = options0.addOption("", "--", true, "usage: ");
      helpFormatter0.printHelp(10, ">|,$M9!&ZtAK)p<SDu", "", options1, "", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-280), "", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      doReturn(0).when(comparator0).compare(anyString() , anyString());
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      Options options1 = options0.addOption("7lfhe5", "", false, "");
      options1.addOption("arg", true, "");
      helpFormatter0.printHelp(">", options1, false);
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.setLeftPadding(2914);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(",>");
      helpFormatter0.createPadding(2914);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 0, ",>");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options2 = options1.addOption("", false, "h}MFDYL_e}</_dR5");
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 74, options2, 1983, 3);
      helpFormatter0.renderOptions(stringBuffer1, 1983, options0, 3, 3);
      helpFormatter1.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "&k#=IA&?*-P(^74\"", "' contains an illegal character : '", options0, "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("IBM&JZ");
      Options options0 = new Options();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.printHelp("IBM&JZ", options0, true);
      helpFormatter0.setLeftPadding(64);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("hdL[Y2LpE");
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 4, ",>");
      helpFormatter0.setArgName(",>");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("IBM&JZ");
      int int0 = 3514;
      Options options0 = new Options();
      boolean boolean0 = true;
      helpFormatter0.printHelp("A^U`mW", "rg_", options0, "", true);
      // Undeclared exception!
      try { 
        options0.addOption("\n", true, "org.apache.commons.cli.OptionGroup");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("IBM&JZ");
      Options options0 = new Options();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      mockPrintWriter0.close();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 35, "");
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 49, "\n");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      mockPrintWriter0.write("7hx5n5i'Wq}L", 1, 1);
      helpFormatter2.setArgName((String) null);
      helpFormatter2.printWrapped((PrintWriter) mockPrintWriter0, 35, 17, "`lvm");
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-460));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Locale locale0 = Locale.US;
      Locale locale1 = Locale.JAPANESE;
      mockPrintWriter0.format(locale1, "", (Object[]) null);
      Locale locale2 = Locale.FRANCE;
      locale2.getDisplayLanguage(locale1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.setLeftPadding(97);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter3 = new MockPrintWriter(mockPrintWriter1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter2, 97, "\n");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setArgName("-");
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, 74, "-");
      helpFormatter1.getArgName();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", (String) null, true, "org.apache.commons.cli.ParseException");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.addOption((String) null, false, "usage: ");
      options2.helpOptions();
      options1.getOptionGroups();
      Option option0 = new Option("arg", true, "AvDe6'M1[30I~a");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 3, "");
      helpFormatter0.setArgName("]cl:6");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = null;
      Options options1 = options0.addOption("", (String) null, true, "org.apache.commons.cli.ParseException");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.addOption((String) null, false, "usage: ");
      boolean boolean0 = true;
      options2.helpOptions();
      options1.getOptionGroups();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1663, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", (String) null, true, "org.apache.commons.cli.ParseException");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption((String) null, false, "usage: ");
      options2.helpOptions();
      options1.getOptionGroups();
      Option option0 = new Option("arg", true, "AvDe6'M1[30I~a");
      options0.toString();
      options3.getOption("-");
      optionGroup0.addOption(option0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-3), "]cl:6", " ]", options3, "B{");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("   ");
      Locale locale0 = Locale.US;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", (Object[]) null);
      Locale locale1 = Locale.FRANCE;
      locale0.getDisplayLanguage(locale1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      helpFormatter0.setLeftPadding(1);
      char[] charArray0 = new char[1];
      mockPrintWriter0.println(charArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, (-1748), "   ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("   ");
      Locale locale0 = Locale.US;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", (Object[]) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'o';
      charArray0[1] = '2';
      charArray0[2] = 'w';
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("Pwp71T!");
      MockPrintWriter mockPrintWriter3 = new MockPrintWriter(printWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter3, 74, "usage: ");
      helpFormatter1.setArgName("");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter3, 74, 74, "Pwp71T!");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-5003), 2, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("IBM&JZ");
      Options options0 = new Options();
      String string0 = "org.apache.commons.cli.OptionGroup";
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.defaultLeftPad = (-722);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2517), (Options) null, 2589, 2589);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1125), " :: ", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("   ");
      Locale locale0 = Locale.US;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", (Object[]) null);
      Locale locale1 = Locale.FRANCE;
      locale0.getDisplayLanguage(locale1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      helpFormatter0.setLeftPadding(74);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("\n");
      MockPrintWriter mockPrintWriter3 = new MockPrintWriter(mockPrintWriter1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter1, 1, "(b>");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getMatchingOptions((String) null);
      Option option0 = new Option("", "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(3940);
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 1, options0, 35, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "vW:{a0h>#DG~K0lL~";
      int int0 = 101;
      int int1 = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1602));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("IBM&JZ");
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((-46), "-", (String) null, (Options) null, "aJZ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getMatchingOptions((String) null);
      Option option0 = new Option("", "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, (String) null, (String) null, options1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.defaultWidth = 0;
      int int1 = 2914;
      helpFormatter0.setLeftPadding(2914);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(",>");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(",>");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)13;
      byteArray0[7] = (byte) (-76);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 0, ",>");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("   ");
      Locale locale0 = Locale.US;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", (Object[]) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'o';
      charArray0[1] = '2';
      charArray0[2] = 'w';
      charArray0[3] = 'X';
      charArray0[4] = 'F';
      charArray0[5] = 'Z';
      charArray0[6] = 'z';
      mockPrintWriter0.checkError();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "rt %4z", "", options1, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2410), "Mcw");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = Locale.US;
      helpFormatter0.setLeftPadding(2914);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.rtrim("");
      helpFormatter0.setLeftPadding((-2891));
      String string1 = "";
      try { 
        MockURI.URI("usage: ", "", "", 3, "o/]9Yr\"}W0Y?yZ", "", "");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: usage: ://@:3o/%5D9Yr%22%7DW0Y%3FyZ?#
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.setLeftPadding(2914);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(",>");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 0, ",>");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Options options0 = new Options();
      String string0 = ".qYS)-p\\`_#u5c9";
      Options options1 = options0.addOption("arg", false, ".qYS)-p`_#u5c9");
      options1.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options1, ".qYS)-p`_#u5c9", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) options0;
      objectArray0[4] = (Object) mockPrintWriter0;
      mockPrintWriter0.format("_OTaW", objectArray0);
      helpFormatter0.printOptions(mockPrintWriter0, 1, options0, 169, 169);
      helpFormatter0.createPadding(13);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "]cl:6";
      Options options0 = new Options();
      Options options1 = options0.addOption("", (String) null, true, "org.apache.commons.cli.ParseException");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption((String) null, false, "usage: ");
      options2.helpOptions();
      options1.getOptionGroups();
      Option option0 = new Option("arg", true, "AvDe6'M1[30I~a");
      Options options4 = options3.addOption(option0);
      options4.toString();
      options3.getOption("-");
      optionGroup0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("]cl:6", "", options4, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setNewLine("");
      File file0 = null;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "\n");
      MockFile mockFile1 = new MockFile(mockFile0, "]");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "70fjh-jTlKf";
      objectArray0[1] = (Object) "70fjh-jTlKf";
      PrintStream printStream0 = mockPrintStream0.format(locale0, "70fjh-jTlKf", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 44, "]");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-227), "", "", (Options) null, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "fjAM0H";
      helpFormatter0.setLongOptPrefix("fjAM0H");
      File file0 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 635, " :: ", options0);
      helpFormatter0.setLeftPadding((-577));
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator(";zLW]EYwJ");
      int int0 = (-1);
      helpFormatter0.setLeftPadding((-1));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String string0 = "`5!3r";
      helpFormatter0.setOptPrefix("`5!3r");
      helpFormatter0.setOptionComparator(comparator0);
      String string1 = "-";
      helpFormatter0.findWrapPos("-", 1390, 1390);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("org.apache.commons.cli.HelpFormatter$OptionComparator", "", false, "qrlDkYV%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.HelpFormatter$OptionComparator' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptPrefix();
      String string0 = "pSX^(+'H& T&GI]/K";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("--", ">nGM");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptSeparator();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "\"3V[fU^JB";
      helpFormatter0.setOptPrefix("\"3V[fU^JB");
      helpFormatter0.setLongOptSeparator("mY-");
      Options options0 = new Options();
      options0.hasShortOption(" | ");
      helpFormatter0.printHelp("org.apache.commons.cli.Option", "3,rDGN{CSLTww(I=P>\"", options0, "Q]1D,wf");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "org.apache.commons.cli.Option";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "mY-";
      // Undeclared exception!
      try { 
        mockPrintWriter0.format((String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(", ");
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) ", ";
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "usage: ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      mockPrintWriter0.checkError();
      char[] charArray0 = new char[4];
      charArray0[0] = 'z';
      charArray0[1] = 'F';
      charArray0[2] = 'X';
      charArray0[3] = 'w';
      mockPrintWriter0.println(charArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, ", ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("   ", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("   ");
      Locale locale0 = Locale.US;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", (Object[]) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'o';
      charArray0[1] = '2';
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      charArray0[2] = 'w';
      charArray0[3] = 'X';
      charArray0[4] = 'F';
      charArray0[5] = 'Z';
      charArray0[6] = 'z';
      mockPrintWriter1.println(charArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 74, "   ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "q9?'4h9", "q9?'4h9", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setWidth(0);
      String string0 = null;
      String string1 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getMatchingOptions((String) null);
      // Undeclared exception!
      helpFormatter0.printHelp("><ABg", options0, true);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("   ");
      Locale locale0 = Locale.US;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", (Object[]) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'o';
      charArray0[1] = '2';
      charArray0[2] = 'w';
      charArray0[3] = 'X';
      charArray0[4] = 'F';
      charArray0[5] = 'Z';
      charArray0[6] = 'z';
      mockPrintWriter1.println(charArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 74, "   ");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 3970;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 64, 64, "rmi\"[W_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      String string0 = ".A&n@%j%I}|=P%rIm,!";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 2532, 2532, ".A&n@%j%I}|=P%rIm,!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "IBM&JZ";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("IBM&JZ");
      int int0 = 3514;
      Options options0 = new Options();
      helpFormatter0.printHelp("A^U`mW", "rg_", options0, ";Cf", true);
      // Undeclared exception!
      try { 
        options0.addOption("\n", true, "org.apache.commons.cli.OptionGroup");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.setDescPadding((-802));
      helpFormatter0.getNewLine();
      assertEquals((-802), helpFormatter0.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, (Options) null, (-2517), (-2517));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(348);
      int int0 = (-1452);
      helpFormatter0.findWrapPos("2", (-1452), 3861);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " [ARG]";
      helpFormatter0.setArgName(" [ARG]");
      helpFormatter0.setSyntaxPrefix(" [ARG]");
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("--", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.getNewLine();
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", string0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-870);
      String string0 = "4QE#z;W<jt*^y";
      String string1 = ">8oD*aG";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("org.apache.commons.cli.HelpFormatter", "usage: ", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.HelpFormatter' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
