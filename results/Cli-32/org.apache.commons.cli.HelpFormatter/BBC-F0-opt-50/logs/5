* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-50
* Going to generate test cases for class: org.apache.commons.cli.HelpFormatter
* Starting Client-0
* Connecting to master process on port 14605
* Analyzing classpath: 
  - subjects/buggy-versions/Cli-32/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.cli.HelpFormatter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1151
* Using seed 1710966209
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 400 / 1151
[MASTER] 08:26:34.894 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
*C2*
*C2*
* Search finished after 603s and 584 generations, 213800 statements, best individual has fitness: 159.0
* Minimizing test suite
[MASTER] 08:38:00.204 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 99%
* Total number of goals: 203
* Number of covered goals: 201
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 85%
* Total number of goals: 157
* Number of covered goals: 134
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 60
* Number of covered goals: 60
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 92%
* Total number of goals: 508
* Number of covered goals: 468
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 67%
* Total number of goals: 46
* Number of covered goals: 31
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 98%
* Total number of goals: 40
* Number of covered goals: 39
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 98%
* Total number of goals: 40
* Number of covered goals: 39
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 85%
* Total number of goals: 157
* Number of covered goals: 134
* Generated 127 tests with total length 1940
* Resulting test suite's coverage: 85% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 08:38:45.276 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6861666666666667% of time used, but only 23/127 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 10%
[MASTER] 08:39:04.744 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Compiling and checking tests
[MASTER] 08:39:34.913 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 08:39:35.030 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 08:39:48.455 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_216_tmp__ESTest.test0(HelpFormatter_216_tmp__ESTest.java:79)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 08:39:48.457 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
assertEquals(74, helpFormatter0.getWidth());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, helpFormatter0.defaultWidth);
assertNotNull(helpFormatter0);

Options options0 = new Options();
assertNotNull(options0);

String string0 = "#Z@^% mVl-e";
Locale locale0 = new Locale("");
assertEquals("", locale0.getCountry());
assertEquals("", locale0.getVariant());
assertEquals("", locale0.getLanguage());
assertEquals("", locale0.getISO3Language());
assertEquals("", locale0.getISO3Country());
assertEquals("", locale0.toString());
assertNotNull(locale0);

helpFormatter0.printHelp(11, "#Z@^% mVl-e", "Ls@*29LDh[h", options0, "#Z@^% mVl-e", false);
assertEquals(74, helpFormatter0.getWidth());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, helpFormatter0.defaultWidth);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
assertNotNull(mockPrintWriter0);

Object[] objectArray0 = new Object[4];
objectArray0[0] = (Object) mockFileOutputStream0;
Object object0 = new Object();
assertNotNull(object0);

objectArray0[1] = object0;
objectArray0[2] = (Object) options0;
objectArray0[3] = (Object) options0;
PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
assertFalse(fileDescriptor0.valid());
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);
assertEquals(4, objectArray0.length);
assertNotNull(printWriter0);

MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
assertFalse(mockPrintWriter1.equals((Object)printWriter0));
assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
assertEquals(4, objectArray0.length);
assertNotNull(mockPrintWriter1);

PrintWriter printWriter1 = mockPrintWriter1.append('e');
assertFalse(fileDescriptor0.valid());
assertNotSame(printWriter1, mockPrintWriter0);
assertSame(printWriter1, mockPrintWriter1);
assertNotSame(printWriter1, printWriter0);
assertNotSame(mockPrintWriter0, printWriter1);
assertSame(mockPrintWriter0, printWriter0);
assertNotSame(mockPrintWriter0, mockPrintWriter1);
assertNotSame(printWriter0, mockPrintWriter1);
assertNotSame(printWriter0, printWriter1);
assertSame(printWriter0, mockPrintWriter0);
assertNotSame(mockPrintWriter1, printWriter0);
assertSame(mockPrintWriter1, printWriter1);
assertNotSame(mockPrintWriter1, mockPrintWriter0);
assertFalse(printWriter1.equals((Object)mockPrintWriter0));
assertFalse(printWriter1.equals((Object)printWriter0));
assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
assertFalse(printWriter0.equals((Object)mockPrintWriter1));
assertFalse(mockPrintWriter1.equals((Object)printWriter0));
assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
assertEquals(4, objectArray0.length);
assertNotNull(printWriter1);

helpFormatter0.printHelp(printWriter1, 11, "-", "", options0, 11, (-458), "", true);

[MASTER] 08:40:02.003 [logback-2] ERROR JUnitAnalyzer - Ran out of time while checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 1
* Writing tests to file
* Writing JUnit test case 'HelpFormatter_ESTest' to results/Cli-32/org.apache.commons.cli.HelpFormatter/BBC-F0-opt-50/tests/5
* Done!

* Computation finished
