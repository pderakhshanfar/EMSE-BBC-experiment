* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-50
* Going to generate test cases for class: org.apache.commons.cli.HelpFormatter
* Starting Client-0
* Connecting to master process on port 3464
* Analyzing classpath: 
  - subjects/buggy-versions/Cli-32/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.cli.HelpFormatter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1151
* Using seed 1998410618
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 400 / 1151
[MASTER] 17:49:52.815 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
* Search finished after 603s and 461 generations, 169773 statements, best individual has fitness: 149.0
* Minimizing test suite
[MASTER] 18:01:17.331 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 99%
* Total number of goals: 203
* Number of covered goals: 201
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 89%
* Total number of goals: 157
* Number of covered goals: 139
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 58
* Number of covered goals: 58
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 94%
* Total number of goals: 508
* Number of covered goals: 478
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 72%
* Total number of goals: 46
* Number of covered goals: 33
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 98%
* Total number of goals: 40
* Number of covered goals: 39
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 98%
* Total number of goals: 40
* Number of covered goals: 39
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 89%
* Total number of goals: 157
* Number of covered goals: 139
* Generated 131 tests with total length 1878
* Resulting test suite's coverage: 86% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 18:02:05.467 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7451666666666666% of time used, but only 20/131 tests minimized), falling back to using all assertions
[MASTER] 18:02:22.318 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 11%
* Compiling and checking tests
[MASTER] 18:02:52.788 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:54.407 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_155_tmp__ESTest.test0(HelpFormatter_155_tmp__ESTest.java:136)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 18:02:54.408 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
assertNotNull(helpFormatter0);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, helpFormatter0.getWidth());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("-", helpFormatter0.getOptPrefix());

Options options0 = new Options();
assertNotNull(options0);

Options options1 = options0.addOption((String) null, true, (String) null);
assertNotNull(options1);
assertSame(options0, options1);
assertSame(options1, options0);

OptionGroup optionGroup0 = new OptionGroup();
assertNotNull(optionGroup0);
assertFalse(optionGroup0.isRequired());
assertNull(optionGroup0.getSelected());

Options options2 = options0.addOptionGroup(optionGroup0);
assertNotNull(options2);
assertFalse(optionGroup0.isRequired());
assertNull(optionGroup0.getSelected());
assertSame(options0, options1);
assertSame(options0, options2);
assertSame(options2, options1);
assertSame(options2, options0);

HelpFormatter helpFormatter1 = new HelpFormatter();
assertNotNull(helpFormatter1);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter1.defaultWidth);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(1, helpFormatter1.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter1.defaultDescPad);
assertFalse(helpFormatter1.equals((Object)helpFormatter0));
assertEquals(" ", helpFormatter1.getLongOptSeparator());
assertEquals(74, helpFormatter1.getWidth());
assertEquals("arg", helpFormatter1.getArgName());
assertEquals(1, helpFormatter1.getLeftPadding());
assertEquals("\n", helpFormatter1.getNewLine());
assertEquals("-", helpFormatter1.getOptPrefix());
assertEquals("--", helpFormatter1.getLongOptPrefix());
assertEquals(3, helpFormatter1.getDescPadding());
assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertNotNull(fileDescriptor0);
assertFalse(fileDescriptor0.valid());

Option option0 = new Option((String) null, true, "\n");
assertNotNull(option0);
assertEquals((-2), Option.UNLIMITED_VALUES);
assertEquals((-1), Option.UNINITIALIZED);
assertFalse(option0.hasArgs());
assertFalse(option0.isRequired());
assertNull(option0.getArgName());
assertFalse(option0.hasValueSeparator());
assertEquals(1, option0.getArgs());
assertFalse(option0.hasOptionalArg());
assertEquals('\u0000', option0.getValueSeparator());
assertTrue(option0.hasArg());
assertFalse(option0.hasLongOpt());
assertFalse(option0.hasArgName());
assertEquals("\n", option0.getDescription());
assertNull(option0.getLongOpt());
assertNull(option0.getOpt());
assertNull(option0.getValue());

OptionGroup optionGroup1 = optionGroup0.addOption(option0);
assertNotNull(optionGroup1);
assertEquals((-2), Option.UNLIMITED_VALUES);
assertEquals((-1), Option.UNINITIALIZED);
assertFalse(optionGroup0.isRequired());
assertNull(optionGroup0.getSelected());
assertFalse(option0.hasArgs());
assertFalse(option0.isRequired());
assertNull(option0.getArgName());
assertFalse(option0.hasValueSeparator());
assertEquals(1, option0.getArgs());
assertFalse(option0.hasOptionalArg());
assertEquals('\u0000', option0.getValueSeparator());
assertTrue(option0.hasArg());
assertFalse(option0.hasLongOpt());
assertFalse(option0.hasArgName());
assertEquals("\n", option0.getDescription());
assertNull(option0.getLongOpt());
assertNull(option0.getOpt());
assertNull(option0.getValue());
assertNull(optionGroup1.getSelected());
assertFalse(optionGroup1.isRequired());
assertSame(optionGroup0, optionGroup1);
assertSame(optionGroup1, optionGroup0);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
assertNotNull(dataOutputStream0);
assertFalse(fileDescriptor0.valid());

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, true);
assertNotNull(mockPrintWriter0);

helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, (String) null, "-", options2, (-2), 9, ">");

[MASTER] 18:03:21.192 [logback-2] ERROR JUnitAnalyzer - Ran out of time while checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 1
* Writing tests to file
* Writing JUnit test case 'HelpFormatter_ESTest' to results/Cli-32/org.apache.commons.cli.HelpFormatter/BBC-F0-opt-50/tests/1
* Done!

* Computation finished
