/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 04:49:48 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.ObjectOutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setNewLine((String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "[ Options: [ short ", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("", true, "[");
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "-", options3);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("D-p", "usage: ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "usage: ", (String) null, options0, (-1028), 10, "vHACu0+q(Kv%", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Option option0 = new Option("", "arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), "", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", "arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), "", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 2465, "rWfHF{&r[6", "'", options0, 1, 74, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.hasLongOption("");
      helpFormatter0.printHelp("org.apache.commons.cli.OptionValidator", "", options1, (String) null, true);
      Options options2 = new Options();
      helpFormatter0.printHelp("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "", options2, "");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "iW%!y'vwD{8@X4";
      int int0 = 10;
      Options options0 = new Options();
      String string1 = "org.apache.commons.cli.Util";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 10, "iW%!y'vwD{8@X4", "~mr%=", options0, 10, (-1991), "~mr%=");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "$";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) options0;
      objectArray0[4] = (Object) "veWX<prN*x-a^{";
      objectArray0[5] = (Object) options0;
      objectArray0[6] = (Object) options0;
      mockPrintWriter0.format("veWX<prN*x-a^{", objectArray0);
      options1.addOption("", "usage: ", false, "usage: ");
      Options options2 = options1.addOption("$", false, "--");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 100, "", options2);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 3328, options1, 374, 3328);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "-", true, "@9~HK57");
      options0.addOption(option0);
      option0.setRequired(true);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2), "@9~HK57", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("usage: ", options1, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = "";
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "-]jshNo_Ra,}?qn", "I!", options0, "-]jshNo_Ra,}?qn", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(3);
      helpFormatter0.rtrim("   ");
      helpFormatter0.rtrim("   ");
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "--";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 121, (Options) null, 121, 121);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "--";
      helpFormatter0.setLongOptSeparator("pM");
      helpFormatter0.setSyntaxPrefix(">");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getLongOptPrefix();
      int int0 = 989;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 989, "--", "rzO%e8Y8Fk", options0, 3, 3, "--");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "]";
      int int0 = (-567);
      helpFormatter0.setDescPadding((-567));
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string1 = "";
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.getDescPadding();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getWidth();
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptionComparator();
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "", 0, 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1360, "arg");
      helpFormatter0.getOptionComparator();
      helpFormatter1.getSyntaxPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.rtrim(" ");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      int int0 = (-326);
      helpFormatter0.defaultLeftPad = (-326);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(18, "iW%!y'vwD{8@X4", "v1+n}H.|uj|>WQ)s", options0, "?61'Q3}Uj`%f6a']9");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('F');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "tn|3qg{.::\"w]j:_", (String) null, options0, 481, 481, ">", true);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2163);
      String string0 = null;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("has already been selected: '", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "arg");
      options1.getOption(" ");
      options1.hasLongOption("--");
      helpFormatter0.printHelp("usage: ", options1, true);
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 10, 122);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "--";
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", true, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(false);
      Options options3 = options2.addOption("$lb", true, "arg");
      helpFormatter0.printHelp("N &'", options3, true);
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-1), options0, 0, (-1811));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "]";
      int int0 = (-567);
      helpFormatter0.setDescPadding((-567));
      Options options0 = new Options();
      options0.getMatchingOptions("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("]", "]", options0, "]");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", " | ", (Options) null, " | ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 88;
      String string0 = "";
      String string1 = "LRK+\">wN~gN*\\EO.>";
      String string2 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      helpFormatter0.defaultLongOptPrefix = null;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.findWrapPos("--", 37, 37);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 16;
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 16, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 22, 22, "usage: ");
      int int0 = 1493;
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer1, 0, 1493, "usage: ");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.getArgName();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 481, "3Q3e!3( 2bX4z!");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.defaultDescPad = 513;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 481, "arg", "]", options0, 481, 3, "arg", true);
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 481, 3100, "]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 481, "@@Zy", "@@Zy", options0, 481, 481, "-", true);
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer(1252);
      helpFormatter0.renderOptions(stringBuffer0, 1579, options0, 481, 68);
      helpFormatter0.findWrapPos("UPf?';", 97, 481);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 481, "]", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("--");
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) mockPrintWriter1;
      objectArray0[3] = (Object) uRI0;
      objectArray0[4] = (Object) uRI0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) printWriter0;
      PrintWriter printWriter1 = mockPrintWriter1.printf("arg", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter1, (-2594), 0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("", "--");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) bufferedOutputStream0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, ">", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-148), "YTh|9E");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", true, "--");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 2, options0, 2, 1190);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding((-540));
      Options options1 = options0.addOption((String) null, true, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("usage: ", options1, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) stringWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "--", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 13, (String) null, (String) null, options0, 32, 32, "lx7G");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth((-2363));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("W", "-", options0, "gh");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("--");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("cS");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockFileOutputStream0;
      objectArray0[1] = (Object) mockFileOutputStream0;
      objectArray0[2] = (Object) "JI&,Wzr=J:/)-0L8X";
      objectArray0[3] = (Object) "cS";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "line.separator";
      PrintStream printStream0 = mockPrintStream0.format("JI&,Wzr=J:/)-0L8X", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('~');
      helpFormatter0.printHelp(printWriter0, 69, "JI&,Wzr=J:/)-0L8X", "", options0, 481, 481, "", false);
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      String string0 = "line.separator";
      int int0 = (-159);
      Options options0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-159), "line.separator", "]", (Options) null, (-159), 481, "+v?DJR..W~]Xb\bX", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = null;
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.getArgName();
      helpFormatter0.renderOptions((StringBuffer) null, 63, options0, 32, 643);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Jf \\>^HB";
      Options options0 = new Options();
      helpFormatter0.printHelp("zOi(FA", "Jf >^HB", options0, "}ZII>\"A?y]", false);
      int int0 = 1500;
      helpFormatter0.printHelp(1500, "zOi(FA", "Jf >^HB", options0, "Jf >^HB", true);
      helpFormatter0.getOptPrefix();
      String string1 = "uY[_";
      helpFormatter0.printHelp("uY[_", options0, false);
      helpFormatter0.getDescPadding();
      helpFormatter0.getArgName();
      File file0 = MockFile.createTempFile("Jf >^HB", "}ZII>\"A?y]");
      MockFile mockFile0 = new MockFile(file0, "bm]");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // org.apache.commons.cli.HelpFormatter$OptionComparator
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(3);
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) stringWriter1;
      objectArray0[4] = (Object) options0;
      objectArray0[5] = (Object) stringWriter0;
      objectArray0[6] = (Object) stringWriter0;
      objectArray0[7] = (Object) helpFormatter0;
      objectArray0[8] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1677), "--", "kT%UjkTCA", options0, 0, (-5108), "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "--");
      options0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 34, "JGh2+>", "()IKvP#)C[/)l17y!", options0, 1763, 1763, "()IKvP#)C[/)l17y!", false);
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 34, "-", "-", options0, 74, (-1474), "['sBz2b7", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      stringBuffer0.append(0.0F);
      stringBuffer0.append(2310.524282951);
      stringBuffer0.reverse();
      String string0 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 11, (-809), "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("--");
      helpFormatter0.printHelp("Q2H", ")8Jf/,f8!)H3}T-QiT", options0, "", true);
      helpFormatter0.createPadding(2);
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1763, "", (String) null, options0, 117, 1763, "i)Tlu9q", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"3j`HrHY\u0000XI4ELO");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultSyntaxPrefix = "arg";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      Options options0 = new Options();
      options0.addOption("h", true, (String) null);
      helpFormatter0.printHelp("h", options0, true);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(1888, "\n", "usage: ", options0, "A30msoDNUY[(aoHy");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1758, "*zSEG&X1AV\"", "org.apache.commons.cli.OptionValidator", options0, 1758, 42, "NAhJ1gb#KmRqHV{]", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      mockPrintWriter0.printf(" ", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, (String) null);
      Option option0 = new Option("", "i wzZG3/CpBG", true, "usage: ");
      options1.addOption(option0);
      helpFormatter0.printHelp(32, " ", "", options1, (String) null);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "`ZmdT/(");
      helpFormatter0.printHelp("lw{Cx", options1, true);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, "\n", "arg", options0, "iP}WnJQ,vrl#W`");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "--");
      Options options1 = options0.addOption(option0);
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("a", options0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printHelp(0, "arg", "hd{*fMNfKL:iK0U%VmZ", options0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "`ZmdT/(");
      helpFormatter0.printHelp(12, "lw{Cx", "lw{Cx", options0, (String) null);
      StringBuffer stringBuffer0 = new StringBuffer("`ZmdT/(");
      helpFormatter0.renderWrappedText(stringBuffer0, 12, 28, "<");
      helpFormatter0.printHelp("`ZmdT/(", " ", options1, "-", true);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options2 = options1.addOption((String) null, " ", false, "Cannot add value, list full.");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(957, "usage: ", "", options2, "--");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption((String) null, true, "`ZmdT/(");
      helpFormatter0.printHelp(12, "lw{Cx", "lw{Cx", options0, (String) null);
      helpFormatter0.setNewLine("");
      helpFormatter0.findWrapPos("", 34, 0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Lo";
      helpFormatter0.defaultArgName = "Lo";
      helpFormatter0.getLeftPadding();
      helpFormatter0.defaultArgName = "Lo";
      int int0 = 1;
      helpFormatter0.defaultDescPad = 1;
      Options options0 = new Options();
      helpFormatter0.printHelp("Lo", options0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("Lo", 10, (-130));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.setOptPrefix("%]6}$e;$V0");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(23, "cmdLineSyntax not provided", "cmdLineSyntax not provided", (Options) null, "e-70BB", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Object[] objectArray0 = new Object[9];
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) pipedOutputStream0;
      objectArray0[5] = (Object) mockPrintStream0;
      StringBuffer stringBuffer0 = new StringBuffer(74);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 617, "");
      helpFormatter0.renderWrappedText(stringBuffer1, 617, 0, "5}(qw");
      objectArray0[6] = (Object) pipedOutputStream0;
      objectArray0[7] = (Object) pipedOutputStream0;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "");
      helpFormatter0.findWrapPos("", 1, 738);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getDescPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Options options0 = new Options();
      helpFormatter1.printHelp("usage: ", "", options0, "");
      helpFormatter1.findWrapPos("-", 0, 3);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "--");
      Options options1 = options0.addOption(option0);
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("~QAt HBsL6", options0, false);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getDescPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      helpFormatter1.setOptionComparator((Comparator) null);
      helpFormatter1.getOptPrefix();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockFile mockFile0 = new MockFile("y508UO~p#oO=F");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('%');
      helpFormatter0.printUsage(printWriter0, 36, "K");
      helpFormatter0.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      PrintWriter printWriter0 = mockPrintWriter0.printf(" ", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, (String) null);
      Option option0 = new Option("", "i wzZG3/CpBG", true, "usage: ");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 308, (String) null, (String) null, options2, (-1), 1758, ">", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(58);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("                                                          ", false, "'c6|v");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '                                                          ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "arg", true, (String) null);
      Options options2 = options1.addOption((String) null, false, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("' was specified but an option from this group ", options3, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = null;
      Options options1 = options0.addOption("", "-", false, (String) null);
      options1.hasShortOption("--");
      helpFormatter0.printHelp(1360, "<", (String) null, options1, (String) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("qwWZ>^LED.>PEO:vXr?", false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 1360);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockFileOutputStream0;
      objectArray0[1] = (Object) null;
      Object object0 = new Object();
      objectArray0[2] = object0;
      mockPrintWriter0.println((-2791.0F));
      PrintWriter printWriter0 = mockPrintWriter1.printf("arg", objectArray0);
      helpFormatter0.printOptions(printWriter0, 1360, options1, 1360, 2);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "MvKOOb", "MvKOOb", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Object[] objectArray0 = new Object[9];
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) pipedOutputStream0;
      helpFormatter0.getLongOptSeparator();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(pipedOutputStream0, false);
      mockPrintStream0.println();
      String string0 = "=l5%>|_(NJ3U";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "=l5%>|_(NJ3U");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("cmdLineSyntax not provided", options0);
      StringWriter stringWriter0 = new StringWriter();
      Options options1 = new Options();
      helpFormatter0.printHelp(83, "2!Xj~P3!lpDIvLloR", "Y?k2rsk}X", options1, "");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "/*;C]~[";
      helpFormatter0.rtrim("/*;C]~[");
      String string1 = "";
      String string2 = "_g(3;h";
      Options options0 = new Options();
      String string3 = "$9[";
      // Undeclared exception!
      try { 
        options0.addOption("!X#o6aw<&(.}C[Z.)", false, "$9[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '!X#o6aw<&(.}C[Z.)' contains an illegal character : '!'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 34;
      helpFormatter0.defaultWidth = 34;
      String string0 = "t{[_le9_P7_aSrG,!c";
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 34, options0, (-1333), 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      helpFormatter0.setLongOptPrefix((String) null);
      int int0 = 2;
      int int1 = (-388);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-388), "", (String) null, (Options) null, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "L|=hHj/hF", true, "--");
      helpFormatter0.printHelp("cmdLineSyntax not provided", options1);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = new Options();
      Options options3 = new Options();
      helpFormatter0.printHelp("XB", options2, true);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.close();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", " :: ", options0, "org.apache.commons.cli.AlreadySelectedException");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Object[] objectArray0 = new Object[9];
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) pipedOutputStream0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) mockPrintStream0;
      objectArray0[6] = (Object) pipedOutputStream0;
      objectArray0[7] = (Object) pipedOutputStream0;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Options options1 = new Options();
      int int0 = 82;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "QYm6gOC6554/3BL", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(")HHBAyUgv@I22cZE'dv'");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("usage: ", objectArray0);
      helpFormatter1.printWrapped(printWriter0, 1054, 1, "y`7q7T^");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("T^fWYA 5BMR\"?Jihy");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter1;
      objectArray0[2] = (Object) "T^fWYA 5BMR\"?Jihy";
      objectArray0[3] = (Object) "T^fWYA 5BMR\"?Jihy";
      objectArray0[4] = (Object) "T^fWYA 5BMR\"?Jihy";
      mockPrintWriter1.printf(locale0, "Y>3,EU0(Gyqnp<sOC", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 2053, "Y>3,EU0(Gyqnp<sOC", "&P@o:iR2d7aolWOG", options0, 97, 3479, "line.separator");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "[ Options: [ short ", options0, "[ Options: [ short ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      Options options0 = new Options();
      options0.addOption("", "-", false, (String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Q?Zd&<H#&!KB");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
      PrintWriter printWriter0 = mockPrintWriter2.append((CharSequence) "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 555, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Object[] objectArray0 = new Object[9];
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) pipedOutputStream0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) mockPrintStream0;
      objectArray0[6] = (Object) pipedOutputStream0;
      objectArray0[7] = (Object) pipedOutputStream0;
      Options options0 = new Options();
      options0.hasOption("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(39, "$XhzR1AIQj<p\"/", "org.apache.commons.cli.AlreadySelectedException", options0, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 79, 26, "org.apache.commons.cli.HelpFormatter");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "";
      Options options0 = new Options();
      String string1 = "-";
      helpFormatter0.setNewLine("q_|_;W?I5g[4ic");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "", options0, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("T^fWYA 5BMR\"?Jihy");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter1;
      objectArray0[2] = (Object) "T^fWYA 5BMR\"?Jihy";
      objectArray0[3] = (Object) "T^fWYA 5BMR\"?Jihy";
      objectArray0[4] = (Object) "T^fWYA 5BMR\"?Jihy";
      PrintWriter printWriter0 = mockPrintWriter1.printf(locale0, "Y>3,EU0(Gyqnp<sOC", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printUsage(printWriter0, 3479, "T^fWYA 5BMR\"?Jihy", options0);
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printHelp(3479, "org.apache.commons.cli.Option", " ", options0, "org.apache.commons.cli.HelpFormatter");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Object[] objectArray0 = new Object[9];
      objectArray0[2] = (Object) pipedOutputStream0;
      pipedOutputStream0.close();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(" ", options0, false);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Locale locale0 = Locale.ENGLISH;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) locale0;
      mockPrintWriter0.printf(locale0, " ", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "\n");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 7, "CE1b/IA#O", options1);
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("A CloneNotSupportedException was thrown: ");
      Locale locale0 = Locale.JAPANESE;
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) locale1;
      objectArray0[1] = (Object) "<";
      objectArray0[2] = (Object) "A CloneNotSupportedException was thrown: ";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "<";
      objectArray0[5] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale1, "x", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      mockPrintWriter1.printf(locale0, "has already been selected: '", objectArray0);
      Options options1 = new Options();
      helpFormatter0.printUsage(printWriter0, 424, "C'9!l-eqYq])8`M_", options1);
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Locale locale0 = Locale.ROOT;
      char[] charArray0 = new char[1];
      charArray0[0] = '_';
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding(3);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printHelp(0, ")DU'ro]-U2%O", "Y6JRds;)<*ac$", options0, "Y6JRds;)<*ac$", false);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 0;
      Options options0 = new Options();
      options0.hasLongOption("usage: ");
      options0.getOptionGroups();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "{rn", "{rn", options0, "org.apache.commons.cli.HelpFormatter", false);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "-";
      StringBuffer stringBuffer0 = new StringBuffer("-");
      int int0 = 0;
      String string1 = "]R<f||mBdamEQFTsJd";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "]R<f||mBdamEQFTsJd");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = new Options();
      optionGroup0.setRequired(true);
      options1.hasShortOption("usage: ");
      options1.getMatchingOptions("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(82, "", "\"uRMV5+cM2N^){rlg1", options1, "nMd}5rh[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "";
      Options options0 = new Options();
      String string1 = "-";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "", options0, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("MvKOOb");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", (Object[]) null);
      helpFormatter0.printUsage(printWriter0, 1090, "");
      helpFormatter0.defaultSyntaxPrefix = "org.apache.commons.cli.Options";
      helpFormatter0.getOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2824), "org.apache.commons.cli.Options", "", (Options) null, "5QaD=vz5A/");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      stringBuffer0.trimToSize();
      Options options0 = new Options();
      helpFormatter0.createPadding(0);
      options0.hasOption("--");
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
      String string0 = "3 @?~Ify~hX={";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("--", "3 @?~Ify~hX={");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 3 @?~Ify~hX={
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("*zSEG&X1AV\"", options0, false);
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-541));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("G#yX-", "iP}WnJQ,vrl#W`", (Options) null, "G#yX-", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", false, (String) null);
      helpFormatter0.setDescPadding(1360);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, options1, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("line.separator", (String) null, options0, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = "arg";
      String string1 = "rxundN";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options1.addOption("ep<", true, "sH*7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'ep<' contains an illegal character : '<'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("pHV");
      char[] charArray0 = new char[9];
      charArray0[0] = 'g';
      charArray0[1] = 'a';
      charArray0[2] = '(';
      charArray0[3] = 'N';
      charArray0[4] = '}';
      charArray0[5] = '\"';
      charArray0[6] = 'n';
      charArray0[7] = 'T';
      charArray0[8] = '_';
      mockPrintWriter0.print(charArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-4242), "pHV", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      helpFormatter0.setLongOptSeparator("");
      int int0 = (-1);
      Options options0 = new Options();
      boolean boolean0 = true;
      String string0 = "";
      // Undeclared exception!
      try { 
        options0.addOption(")5d?a^{", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ')5d?a^{' contains an illegal character : ')'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "5h\"=";
      helpFormatter0.setSyntaxPrefix("5h\"=");
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      helpFormatter0.setArgName("5h\"=");
      String string1 = "Qz(O";
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("Qz(O", "Qz(O", true, "3I5n\"^uAjS");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'Qz(O' contains an illegal character : '('
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "L|=hHj/hF";
      Options options1 = options0.addOption("arg", "L|=hHj/hF", true, "--");
      helpFormatter0.printHelp("cmdLineSyntax not provided", options1);
      StringWriter stringWriter0 = new StringWriter();
      options0.hasOption("-");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "cmdLineSyntax not provided");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      String string1 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      String string2 = "[ Options: [ short ";
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "[ Options: [ short ", options0, 0, 0, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("T^fWYA 5BMR\"?Jihy");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter1;
      objectArray0[2] = (Object) "T^fWYA 5BMR\"?Jihy";
      objectArray0[3] = (Object) "T^fWYA 5BMR\"?Jihy";
      objectArray0[4] = (Object) "T^fWYA 5BMR\"?Jihy";
      PrintWriter printWriter0 = mockPrintWriter1.printf(locale0, "Y>3,EU0(Gyqnp<sOC", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printUsage(printWriter0, 3479, "T^fWYA 5BMR\"?Jihy", options0);
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      int int0 = 32;
      helpFormatter0.createPadding(32);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "n0r, j NfSx";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "", false, "   ");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("", false, "n0r, j NfSx");
      // Undeclared exception!
      try { 
        options3.addOption("--", "n0r, j NfSx", true, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "09";
      int int0 = 632;
      String string1 = "Pc b=A";
      Options options0 = new Options();
      Option option0 = null;
      // Undeclared exception!
      try { 
        options0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, ")HHBAyUgv@I22ZE'dv'", "=Uo", options0, ")HHBAyUgv@I22ZE'dv'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2712;
      helpFormatter0.createPadding(2712);
      String string0 = "4xwg*S62[E;eQ;NU[";
      String string1 = "";
      Options options0 = new Options();
      String string2 = "";
      // Undeclared exception!
      try { 
        options0.addOption("2;,JV^YC]a", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '2;,JV^YC]a' contains an illegal character : ';'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", false, (String) null);
      helpFormatter0.printHelp(1360, "<", (String) null, options1, (String) null);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-3258);
      helpFormatter0.setDescPadding((-3258));
      File file0 = MockFile.createTempFile("m?VH-0L7)t@l`p + O", "");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("--", "", file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "DuUj]%Ly7]<L";
      helpFormatter0.defaultOptPrefix = "DuUj]%Ly7]<L";
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("\n", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) pipedOutputStream0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) mockPrintWriter0;
      pipedOutputStream0.close();
      objectArray0[5] = (Object) mockPrintStream0;
      objectArray0[6] = (Object) pipedOutputStream0;
      objectArray0[7] = (Object) pipedOutputStream0;
      int int0 = 0;
      String string0 = "";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "E\"N)7lw_jK7#T";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("--", "org.apache.commons.cli.Option", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
