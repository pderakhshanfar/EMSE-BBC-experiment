/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 15:02:01 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.defaultDescPad = (-880);
      helpFormatter0.defaultLongOptPrefix = "SeLg&j'}";
      helpFormatter0.setNewLine("\"-8k");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getDescPadding();
      helpFormatter0.getArgName();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)13;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-204);
      helpFormatter0.getWidth();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      options0.getOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasLongOption("arg");
      options0.toString();
      options0.hasLongOption((String) null);
      optionGroup0.setRequired(false);
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", options1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.printHelp("bv`%", "bv`%", options0, "&u6`={i5Hk4", true);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer("+Dnc]6j*U");
      int int0 = (-1823);
      Options options0 = new Options();
      String string0 = "*{w";
      String string1 = "3{8VH0Lz&C|n?F";
      // Undeclared exception!
      try { 
        options0.addOption("*{w", true, "3{8VH0Lz&C|n?F");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '*{w' contains an illegal character : '*'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-1);
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "^", "-", (Options) null, "^");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[0];
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setWidth((-1906));
      int int0 = 1629;
      helpFormatter0.defaultDescPad = 1629;
      helpFormatter0.findWrapPos("usage: ", 1, 1);
      helpFormatter0.getWidth();
      helpFormatter0.rtrim("");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", (-1906), 23);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "-");
      optionGroup0.addOption(option0);
      Option option1 = new Option("arg", "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("arg", "usage: ", options1, "arg", true);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.defaultDescPad = (-462);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 117, "");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "06z1/zq)X`lfQFva#l", "06z1/zq)X`lfQFva#l", options0, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "--", true, "\n");
      helpFormatter0.printHelp(74, "arg", "arg", options1, "");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 3, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos(" [ARG]", 6, (-1));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "W";
      Options options1 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string1 = "Ph^-!.0";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, " ", "org.apache.commons.cli.HelpFormatter$1", (Options) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1553);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      helpFormatter0.getOptPrefix();
      helpFormatter0.rtrim("-");
      int int0 = 64;
      helpFormatter0.defaultArgName = "";
      helpFormatter0.setLongOptSeparator("-");
      String string0 = "I!3Q";
      Options options0 = new Options();
      options0.hasOption(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", options0, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(89, "ciG-ZOK$", (String) null, options1, (String) null);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-3076));
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptionComparator();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, (-3076), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", true, "v7sOc~xQ2h)+Zv!?Q");
      Options options2 = options1.addOption((String) null, false, "--");
      Option option0 = new Option("arg", "--", false, "s.>jBy)LRC<4cDC|kb");
      options2.hasShortOption("");
      Options options3 = options2.addOption(option0);
      options3.hasLongOption("s.>jBy)LRC<4cDC|kb");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", options3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setDescPadding((-490));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(6, "\n", "arg", options0, "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "org.apache.commons.cli.OptionGroup", options0, ":fZ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = options0.addOption("arg", "--", true, "\n");
      FileSystemHandling.shouldAllThrowIOExceptions();
      options0.getOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "   ";
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      String string1 = " ";
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 74, 753, " ");
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer1, (-3327), options1, 74, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Ed1\\Pr)N+-zF9V";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(3);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Ql)841ZnU", "Ql)841ZnU", options0, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setWidth((-1906));
      int int0 = 1629;
      helpFormatter0.defaultDescPad = 1629;
      helpFormatter0.findWrapPos("usage: ", 3404, 13);
      helpFormatter0.getWidth();
      helpFormatter0.rtrim("");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", (-1906), 23);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 1, (Options) null, 1, 3295);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "C[R^/J0\"", true, "usage: ");
      options1.getOptions();
      helpFormatter0.printHelp("FFbQ}75#S+\"q", "FFbQ}75#S+\"q", options0, "org.apache.commons.cli.OptionValidator", true);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2866;
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      MockFile mockFile0 = new MockFile(" | ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2866, "", " | ", options0, (-325), (-325), "org.apache.commons.cli.Options");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("w0uyFcp<B-kC7<", 2802, 3);
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer(2802);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer1 = stringWriter0.getBuffer();
      stringBuffer0.append(stringBuffer1);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer0, 87, 3, " ");
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer2, 2802, options0, 87, 1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-142));
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(9, "\n", "arg", options0, "\n");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[7bTlVq9AB&CUGPX", "usage: ", options0, "\n", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 44, "--", (String) null, options0, (-10), 44, "--", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "--", true, "C[R^/J0\"");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "G!/wMp9U72");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 8, "usage: ", options2);
      helpFormatter0.createPadding(448);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("arg", true, " ");
      Options options2 = options1.addOption("", "-", true, "-");
      options2.addOptionGroup(optionGroup0);
      LinkedList<OptionGroup> linkedList0 = new LinkedList<OptionGroup>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("   ", "", options2, "line.separator", true);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      String string0 = "";
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, (Options) null, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "<";
      helpFormatter0.setLongOptSeparator("<");
      helpFormatter0.getDescPadding();
      String string1 = "WXP7";
      helpFormatter0.rtrim("WXP7");
      StringBuffer stringBuffer0 = new StringBuffer(1);
      stringBuffer0.append((float) 74);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1821, 1821, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 74, "tw3;:XOagE%", "tw3;:XOagE%", options0, 3, 3, (String) null, false);
      helpFormatter2.printHelp(74, "`,@5ec,:kny P{", (String) null, options0, "-", true);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("--", " ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(9, "\n", "arg", options0, "\n");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      // Undeclared exception!
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter1, 0, "arg", options0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 4389, options0, 116, 116);
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append('<');
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (-1373), options0, 2120, (-1373));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      options0.hasShortOption("usage: ");
      options0.addOption("arg", "--", true, "C[R^/J0\"");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getOptions();
      String string0 = "--";
      String string1 = "9]#";
      helpFormatter0.defaultWidth = 14;
      String string2 = "NO_ARGS_ALLOWED";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[ARG...]", "NO_ARGS_ALLOWED", options0, "IXl");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      options0.addOption("arg", "--", true, "C[R^/J0\"");
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.OptionValidator");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "k#'k\"xvFOr,k]6", "arg", options0, 1, 2239, "-*9kx~t|sH33a[/i&");
      helpFormatter1.rtrim(" ");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      MockFile mockFile1 = new MockFile(mockFile0, "dxlmbd#:-_=8eyd G");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      PrintWriter printWriter0 = mockPrintWriter0.append('<');
      helpFormatter0.printWrapped(printWriter0, 86, " ");
      helpFormatter0.rtrim(" ");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 86, " ", "", options0, (-1497), (-3155), "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append('o');
      char[] charArray0 = new char[6];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      charArray0[2] = 'o';
      charArray0[3] = 'o';
      charArray0[4] = 'o';
      charArray0[5] = 'o';
      mockPrintWriter0.println(charArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-1523), "", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "", (String) null, options0, "org.apache.commons.cli.HelpFormatter$1", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getLeftPadding();
      Options options1 = new Options();
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 0, "hvD!'Q\"R2;15l,]PJ(G", "usage: ", options1, 3, 1, "");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLeftPadding();
      Options options0 = new Options();
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter3.printHelp((PrintWriter) mockPrintWriter0, 1, "arg", "iD.ijO;nNm", options0, 3, 1, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getLeftPadding();
      Options options1 = new Options();
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("tw3;:XOagE%");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, " ", "--", options1, 0, 0, "usage: ", true);
      helpFormatter0.printHelp(74, "org.apache.commons.cli.HelpFormatter", "org.apache.commons.cli.HelpFormatter", options1, "--", true);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      String string0 = "+]gO:fX%7g}-";
      int int0 = 10;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1821, "+]gO:fX%7g}-", "4d ybGC.4", options0, 93, 10, "has already been selected: '");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLeftPadding();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(109, "Yo~6zdO-1>", "Yo~6zdO-1>", (Options) null, "R");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("8SHAZ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-2), "\n", "arg", options0, "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-1302));
      helpFormatter0.defaultSyntaxPrefix = "j";
      helpFormatter0.setLongOptPrefix("[wkCtZk]%y9");
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Options options1 = options0.addOption("j", " ", false, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1302), "[wkCtZk]%y9", "org.apache.commons.cli.ParseException", options2, "uHNM<g`5", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      String string0 = "[H\"5B>[8Os:U.7}r";
      Options options0 = new Options();
      options0.getOptionGroups();
      String string1 = "vtJ5R5NA";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-364), "[H\"5B>[8Os:U.7}r", "Illegal option name '", options0, "nOSu&p,?,)", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      options0.addOption("arg", "--", true, "C[R^/J0\"");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "G!/wMp9U72");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("HC\"xfpsMB)ap<,MN");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 3, "", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("8SHAZ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.close();
      PrintWriter printWriter0 = mockPrintWriter0.append('<');
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, " ");
      mockPrintWriter0.flush();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.createPadding(31);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.printWrapped(printWriter0, 31, 70, "8SHAZ");
      helpFormatter0.printHelp(" ", options0, true);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 31, (-3599), "");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)34;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options1 = options0.addOption("arg", true, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      String string0 = "";
      Option option0 = new Option((String) null, true, "");
      optionGroup0.addOption(option0);
      helpFormatter0.printHelp("\n", "\n", options2, "\n", false);
      helpFormatter0.printHelp("\n", " | ", options2, "yCI'zf[vz6t^oprn2", true);
      helpFormatter0.printHelp("\n", options0);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null, "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("8SHAZ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.println("$0:K@.DH1+Sm?ZVy3}");
      mockPrintWriter0.close();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, " ");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.createPadding(31);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Option option0 = new Option("", "org.apache.commons.cli.HelpFormatter");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printOptions(mockPrintWriter0, 550, options1, 550, 8);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.defaultWidth;
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "--", true, "C[R^/J0\"");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "G!/wMp9U72");
      MockFile mockFile0 = new MockFile("usage: ", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 44, "2", "ttz@_?Hc*wPh]eHz", options1, 44, 44, "ttz@_?Hc*wPh]eHz", false);
      helpFormatter0.createPadding(15);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      helpFormatter1.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, (String) null, "\n", options0, 3, 2079, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "$m`?G[t");
      boolean boolean0 = false;
      helpFormatter0.printHelp("$m`?G[t", (String) null, options1, "mEd\"+a1Q@-A^]zk+5", false);
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append(74);
      String string0 = "G9b3k#M_S|";
      Option option0 = new Option((String) null, "!nh\u0004*u1zU8JUH8S", false, "wJ5Ilo/7G'qx5~%mL=,");
      helpFormatter0.getOptionComparator();
      Options options2 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      OptionGroup optionGroup2 = new OptionGroup();
      options0.addOptionGroup(optionGroup2);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.defaultNewLine = "";
      Options options0 = new Options();
      helpFormatter0.setNewLine("arg");
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderOptions(stringBuffer0, 1, options0, 1, 1);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      String string0 = "[H\"5B>[8Os:U.7}r";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("' was specified but an option from this group ");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "NO_ARGS_ALLOWED";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "' was specified but an option from this group ";
      objectArray0[3] = (Object) "NO_ARGS_ALLOWED";
      objectArray0[4] = (Object) "' was specified but an option from this group ";
      objectArray0[5] = (Object) "[H\"5B>[8Os:U.7}r";
      PrintWriter printWriter0 = mockPrintWriter0.printf("NO_ARGS_ALLOWED", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 1, 115, "NO_ARGS_ALLOWED");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("--", " ", options0, "--", true);
      helpFormatter0.defaultArgName = " ";
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "-U'2Df3=V", "", options0, (-1686), 2502, (String) null, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, " ");
      helpFormatter0.printHelp("{d$GOZ'7`K1.x", " ", options0, " ", false);
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append(3);
      Option option0 = new Option("", "", false, "G9b3k#M_S|");
      helpFormatter0.getOptionComparator();
      Options options2 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      options2.addOptionGroup(optionGroup0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 3, " ", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "--", true, "C[R^/J0\"");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "G!/wMp9U72");
      optionGroup0.setRequired(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("[H\"5B>[8Os:U.7}r", "xu]&&]*e", options2, "C[R^/J0\"", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("G oU1x#vFA1iqqu");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "");
      options1.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, (-2), options1, (-2), 1805);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", false, "arg");
      helpFormatter0.printHelp("8SHAZ", " ", options0, (String) null, true);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = stringBuffer0.append(3);
      Option option0 = new Option("", "b77xz83?;/76", true, "");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptPrefix();
      Option option1 = new Option("", "&G");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        stringBuffer1.insert(1304, object0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1304
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("8SHAZ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.close();
      mockPrintWriter0.append('<');
      mockPrintWriter0.print((double) 1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "-", " :: ", options0, 1342, 604, "6=yx", true);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("T09$A6{+!qT6`", "T09$A6{+!qT6`", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("8SHAZ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object object0 = new Object();
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) " ";
      objectArray0[1] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "A2aW6}ljK(3M", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 63, " ");
      helpFormatter0.setLongOptSeparator("arg");
      helpFormatter1.setDescPadding(3446);
      helpFormatter0.setNewLine("usage: ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter4.printWrapped(printWriter0, 1, "A2aW6}ljK(3M");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("'q8HO+61#ccy/JtW'");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter1.getLongOptPrefix();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("]");
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "-");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 44, "arg", "\n", options1, 3, 7, "arg", true);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("--", " ", options0, "--", true);
      int int0 = 9;
      String string0 = "OX9mF$74sZJV_i0O";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "vtJ5R5NA", "OX9mF$74sZJV_i0O", options0, "]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(9, "\n", "arg", options0, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = false;
      Option option0 = new Option((String) null, "<", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options0.addOption(option0);
      String string0 = "line.separator";
      helpFormatter0.printHelp("usage: ", "line.separator", options1, "", true);
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "", "org.apache.commons.cli.ParseException", options3, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = false;
      options0.addOption("", false, " ");
      helpFormatter0.printHelp("{d$GOZ'7`K1.x", " ", options0, " ", false);
      StringBuffer stringBuffer0 = new StringBuffer();
      Option option0 = new Option("", "", false, "G9b3k#M_S|");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptPrefix();
      int int0 = 34;
      String string0 = "[";
      Option option1 = null;
      try {
        option1 = new Option("[", "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("usage: ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 0, "arg", "cmdLineSyntax not provided", options1, 103, (-10), "", true);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setNewLine("");
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      helpFormatter0.getWidth();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setNewLine("B)q.");
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[H\"5B>[8Os:U.7}r");
      helpFormatter0.createPadding(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getArgName();
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      Options options0 = new Options();
      int int0 = 10;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 1, "", "\n", options0, (-1), 10, "arg", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "]";
      Options options0 = new Options();
      helpFormatter0.printHelp("@luzW", "", options0, "@luzW", false);
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.setNewLine("The option '");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("@luzW", "", options0, "@luzW", false);
      MockFile mockFile0 = new MockFile("2`YTb6OK");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.close();
      PrintWriter printWriter0 = mockPrintWriter0.append('<');
      mockPrintWriter0.print((double) 1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      helpFormatter0.printWrapped(printWriter0, 1021, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1021, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      String string0 = "[H\"5B>[8Os:U.7}r";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "[H\"5B>[8Os:U.7}r", "vtJ5R5NA", options0, "[H\"5B>[8Os:U.7}r");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("The option '");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("The option '");
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("The option '");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 7, "-", "", options0, 1, 7, "--", true);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("{d$GOZ'7`K1.x", " ", options0, " ", false);
      StringBuffer stringBuffer0 = new StringBuffer();
      Option option0 = new Option("", "", false, "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(",]`e#|M[");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, "", "usage: ", options0, 1, 1, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("@luzW", "", options0, "@luzW", false);
      helpFormatter0.printHelp("@luzW", "", options0, "", false);
      StringBuffer stringBuffer0 = new StringBuffer();
      Option option0 = null;
      try {
        option0 = new Option("A-]BHy9G10#", "[GA##w<W/=kruha", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'A-]BHy9G10#' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("b]", " ", options0, "b]", false);
      StringBuffer stringBuffer0 = new StringBuffer();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "", "", options0, 1, 494, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.printHelp("@luzW", "", options0, "@luzW", false);
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.println();
      mockPrintWriter0.close();
      mockPrintWriter0.append('<');
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("--");
      helpFormatter0.createPadding(29);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.getNewLine();
      helpFormatter0.findWrapPos("", 64, 171);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "--", true, "C[R^/J0\"");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "G!/wMp9U72");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("[H\"5B>[8Os:U.7}r", "xu]&&]*e", options2, "C[R^/J0\"", true);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) comparator0;
      objectArray0[3] = (Object) helpFormatter0;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("kWbOVMY|\u0002>A\"[[");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 7, "arg", "", (Options) null, 1, 1145, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "@luzW";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("@luzW", "@luzW", (Options) null, "@luzW", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("@luzW", "", options0, "@luzW", false);
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.close();
      PrintWriter printWriter0 = mockPrintWriter0.append('<');
      char[] charArray0 = new char[4];
      charArray0[0] = '<';
      charArray0[1] = '<';
      charArray0[2] = '<';
      charArray0[3] = '<';
      printWriter0.println(charArray0);
      mockPrintWriter0.print((-922.4210271009));
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("'");
      helpFormatter1.renderWrappedText(stringBuffer0, 74, 3, "");
      int int0 = 1;
      // Undeclared exception!
      try { 
        options0.addOption("'", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '''
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.rtrim("");
      String string0 = "@nj89\"wziu;WsJB)JJX";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = null;
      try {
        option0 = new Option("--", "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      helpFormatter0.printHelp("@luzW", "", options0, "@luzW", false);
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.JAPAN;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, (-702), "@luzW");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(7);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("@luzW", "", options0, "@luzW", false);
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.setNewLine("The option '");
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("<");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, (-1988), "-", "[", options0, (-1), 3, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      Options options0 = new Options();
      String string0 = "";
      String string1 = "[";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(117, "", (String) null, options0, "[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("@luzW", "", options0, "@luzW", false);
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.setNewLine("The option '");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 74, 44, "--");
      helpFormatter0.renderOptions(stringBuffer1, 3, options0, 1, 3);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 44, "'");
      helpFormatter1.setLongOptPrefix("'");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.printHelp(";rmz,;]Y9V?<.e(t", "usage: ", options0, (String) null);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[1];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("--");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setDescPadding(721);
      helpFormatter0.setNewLine("");
      helpFormatter0.getNewLine();
      helpFormatter0.createPadding(1947);
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLongOptPrefix("");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "MZ,9*P4>";
      helpFormatter0.rtrim("MZ,9*P4>");
      helpFormatter0.setSyntaxPrefix("MZ,9*P4>");
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("MZ,9*P4>", 0, (-596));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 1, 1);
      helpFormatter0.setOptPrefix("-");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1);
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter2.printf((Locale) null, "--", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 3446, "]");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setDescPadding(721);
      helpFormatter0.setNewLine("");
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, (-3021), " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("8SHAZ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.close();
      mockPrintWriter0.append('<');
      mockPrintWriter0.print((double) 1);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, " ");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 31, "iHvd{Q6SxK1~+&>8");
      helpFormatter0.setLongOptPrefix("\"bm, ");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.TAIWAN;
      String string0 = "h}8u0";
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "h}8u0";
      objectArray0[1] = (Object) comparator0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "h}8u0", objectArray0);
      int int0 = 74;
      helpFormatter0.printUsage(printWriter0, 74, "");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, "");
      int int1 = (-3111);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-3111), "xSN:oh_#");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      // Undeclared exception!
      try { 
        stringBuffer0.deleteCharAt(9);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 9
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "arg";
      String string1 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      int int0 = (-82);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-82), options0, (-82), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "kM";
      helpFormatter0.setArgName("kM");
      boolean boolean0 = true;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1);
      helpFormatter0.setNewLine((String) null);
      String string0 = "' was specified but an option from this group ";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "' was specified but an option from this group ", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.createPadding(13);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1), 0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.defaultDescPad = (-880);
      helpFormatter0.defaultLongOptPrefix = "SeLg&j'}";
      int int0 = 4723;
      String string0 = "";
      String string1 = "vA'MohoW1T4lLM";
      Options options0 = null;
      String string2 = "]";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "vA'MohoW1T4lLM", "i;+4zv3H.c", (Options) null, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      int int0 = 0;
      helpFormatter0.createPadding(0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("\n", "8$PG! `E");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 8$PG! `E
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter0);
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) mockPrintWriter2;
      objectArray0[5] = (Object) mockFile0;
      objectArray0[6] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 29, "PG&x|J={.Q.j");
      helpFormatter0.setLongOptSeparator("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(3);
      helpFormatter1.setNewLine("");
      helpFormatter0.getNewLine();
      helpFormatter1.createPadding(3446);
      helpFormatter1.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      helpFormatter0.setDescPadding(1);
      String string0 = "RdLxKh%*;wiHk";
      String string1 = "iiSP";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("--", false, "RdLxKh%*;wiHk");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1891), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1);
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter2.printf(locale0, "-", objectArray0);
      int int0 = 3446;
      helpFormatter0.printWrapped(printWriter0, 3446, "org.apache.commons.cli.Option");
      helpFormatter0.setLongOptSeparator("");
      int int1 = 721;
      helpFormatter0.setDescPadding(721);
      helpFormatter0.setNewLine("");
      helpFormatter0.getNewLine();
      String string0 = "O$14z";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options1.addOption("--", true, "Mh=Iv1n#Jx ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "\n", "[H\"5B>[8Os:U.7}r", options0, 2502, 2, "", false);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("@luzW", "", options0, "@luzW", false);
      String string0 = "The option '";
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.close();
      PrintWriter printWriter0 = mockPrintWriter0.append('<');
      mockPrintWriter0.print((-922.4210271009));
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 0, "The option '");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.rtrim("O,m=QTO");
      helpFormatter0.rtrim("O,m=QTO");
      helpFormatter0.setLeftPadding((-2300));
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-195));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1);
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter2.printf(locale0, "-", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 3446, "org.apache.commons.cli.Option");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setDescPadding(721);
      helpFormatter0.setNewLine("");
      helpFormatter0.getNewLine();
      helpFormatter0.createPadding(1947);
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, ")Ar@&sq6p", ")Ar@&sq6p", options0, ")Ar@&sq6p");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine((String) null);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "T :t?Ue8(6arUPhz!";
      helpFormatter0.setSyntaxPrefix("T :t?Ue8(6arUPhz!");
      Options options0 = new Options();
      boolean boolean0 = false;
      String string1 = "toY7Rk";
      // Undeclared exception!
      try { 
        options0.addOption("T :t?Ue8(6arUPhz!", false, "toY7Rk");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'T :t?Ue8(6arUPhz!' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }
}
