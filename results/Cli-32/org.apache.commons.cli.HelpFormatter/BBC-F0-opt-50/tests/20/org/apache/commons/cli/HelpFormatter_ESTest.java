/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 05:32:50 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "usage: ");
      option0.setArgName("[");
      optionGroup0.toString();
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("arg", options0, true);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("-", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("\n", options1, true);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "8'Lw|PCUB", "8'Lw|PCUB", options0, "#L~U 4[p h,:B");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasLongOption("usage: ");
      Option option0 = new Option("", true, "1,3 HSY");
      option0.setArgName("");
      helpFormatter0.getArgName();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("arg", options0, true);
      helpFormatter0.findWrapPos("", (-614), 3959);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "zW$:%--d{/5n41_O4V", "zW$:%--d{/5n41_O4V", options0, "zW$:%--d{/5n41_O4V", true);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasLongOption("usage: ");
      Option option0 = new Option("", true, "1,3 HSY");
      option0.setArgName("");
      optionGroup0.toString();
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      options0.hasShortOption("");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), "[]", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasLongOption("usage: ");
      Option option0 = new Option("arg", true, "--");
      option0.setArgName("I5Lrfvt)~>bJ");
      optionGroup0.toString();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, "", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getLeftPadding();
      helpFormatter0.setNewLine("");
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptPrefix();
      MockFile mockFile0 = new MockFile("");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "[ARG...]");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // [ARG...]
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-217);
      helpFormatter0.getNewLine();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) locale1;
      objectArray0[2] = (Object) locale0;
      mockPrintWriter0.format(locale1, "arg", objectArray0);
      int int0 = 0;
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", "--", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.defaultWidth = (-1579);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("lS@", "$'s\"V-Z,sIewOV", options0, "lS@", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName((String) null);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, ">", ">", (Options) null, 0, (-725), ">", false);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "JjbO[[yxWh";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JjbO[[yxWh");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[1];
      Locale locale1 = Locale.ROOT;
      locale0.getDisplayVariant(locale1);
      objectArray0[0] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "9r^hwY", objectArray0);
      Options options0 = new Options();
      options0.getOptionGroups();
      int int0 = 10;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-8), "JjbO[[yxWh", (String) null, options0, 10, (-8), "org.apache.commons.cli.HelpFormatter$OptionComparator");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos(" ]", 0, 0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      int int0 = 0;
      helpFormatter0.createPadding(0);
      helpFormatter0.createPadding(0);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-4976));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter0.renderWrappedText(stringBuffer0, 64, 64, "");
      int int0 = 357;
      Options options0 = new Options();
      options0.helpOptions();
      int int1 = (-488);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("wdgbUs ,T6O_nN", "as Jf OTi}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'wdgbUs ,T6O_nN' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("[");
      helpFormatter0.getLeftPadding();
      helpFormatter0.defaultNewLine = "fsrLmEv\"ZO_y;DjG";
      helpFormatter0.setNewLine("fsrLmEv\"ZO_y;DjG");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "]");
      helpFormatter0.createPadding(1);
      helpFormatter0.defaultWidth = (-1952);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
      helpFormatter0.getSyntaxPrefix();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.rtrim("fsrLmEv\"ZO_y;DjG");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(10, "arg", "arg", (Options) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "");
      Option option1 = new Option("arg", false, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      option1.getValues();
      optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("95w~Qj\"BlT6", options1, true);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 3, "\n");
      Options options0 = new Options();
      Option option0 = new Option("", "usage: ", true, "usage: ");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3, "", "", options1, 266, 266, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "Cj>n!7\"lN(H RMw";
      objectArray0[1] = (Object) "Cj>n!7\"lN(H RMw";
      PrintWriter printWriter0 = mockPrintWriter2.printf(locale0, "yXj`Z2I3s&GDm!JL", objectArray0);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "yXj`Z2I3s&GDm!JL");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = (-4195);
      StringBuffer stringBuffer0 = new StringBuffer("The option '");
      helpFormatter0.renderWrappedText(stringBuffer0, 2, 2, "");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(4253, "48m#LWi)glP", "NC/_.OENZoq", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      PrintWriter printWriter0 = null;
      int int0 = 1976;
      String string0 = "Tq}!l|j5l@_QU";
      Options options0 = new Options();
      String string1 = "";
      String string2 = "&9z-(?g[|";
      boolean boolean0 = true;
      String string3 = "~E@/=";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1, " ", " ", options0, (-3044), (-3044), "org.apache.commons.cli.Util");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((String) null, "(q*Qk0G*x,V& ", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup0.setRequired(true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      optionGroup1.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("]", options0, true);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("<", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      options0.addOption("7", false, "#P#a");
      Option option0 = new Option("", false, "usage: ");
      option0.setArgs(1);
      Options options1 = options0.addOption(option0);
      helpFormatter1.printHelp("arg", options1, false);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp("--", "NJA@dv1 Wcjgv", options0, "", true);
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos((String) null, 77, 6256);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 2652, "J)7<r_JWUN*t?0$)Y", "J)7<r_JWUN*t?0$)Y", options0, 2652, (-657), (String) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "]");
      options0.addOption(option0);
      helpFormatter0.printHelp("usage: ", "", options0, "", false);
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 82, 110);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 3, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      Options options1 = options0.addOption("7", false, "#P#a");
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("", false, "usage: ");
      Options options3 = options2.addOption(option0);
      helpFormatter1.printHelp("\n", "#P#a", options3, "", false);
      options3.getOptionGroups();
      helpFormatter0.rtrim("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 3, options2, 1, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      File file0 = MockFile.createTempFile("   ", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options1 = new Options();
      Option option0 = new Option("arg", "--", true, "usage: ");
      Options options2 = options0.addOption(option0);
      mockPrintWriter0.print((double) 74);
      helpFormatter1.setLeftPadding(1391);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1391, "Cannot add value, list full.", "\n", options2, 4, 105, "arg", true);
      helpFormatter1.printHelp("\n", options1, true);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1391, "Cannot add value, list full.", "arg", options0, 679, 3, "\n", false);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 3, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      Options options1 = options0.addOption("7", false, "#P#a");
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("", false, "usage: ");
      Options options3 = options2.addOption(option0);
      optionGroup0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 10, "t7eo=-Mp0}y X1\"", options3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(10);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 10, (-1303), "Cj>n!7\"lN(H RMw");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.defaultNewLine = "I 6";
      helpFormatter0.printHelp("usage: ", "", options0, "", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*IjkQ9)5YR#9");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = Locale.ENGLISH;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      Locale.setDefault(locale_Category0, locale1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      PrintWriter printWriter1 = mockPrintWriter1.append((CharSequence) "I 6");
      helpFormatter0.printOptions(printWriter1, 13, options0, 3, 13);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      OptionGroup optionGroup1 = new OptionGroup();
      int int0 = (-3894);
      helpFormatter0.defaultLeftPad = (-3894);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[7\"B8l[$uYAu");
      String string0 = "M";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("M", "", options0, "^W(!^G1Egl'Jwdo;.", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) null, 3, "zO");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("$)<~LsJU");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 74;
      helpFormatter0.setLongOptPrefix("`$#+c/:O1e+Oi");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 74, "Cj>n!7\"lN(H RMw");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer();
      PrintWriter printWriter0 = null;
      int int0 = 892;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 126, "org.apache.commons.cli.OptionValidator", (String) null, options0, 892, 126, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      File file0 = MockFile.createTempFile("   ", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      int int0 = 16;
      boolean boolean0 = true;
      String string0 = " ";
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 16, " ", (String) null, options0, 267, 16, "The option '", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = new StringBuffer();
      Options options1 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("n5p3PK<S)vs A", "usage: ", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'n5p3PK<S)vs A' contains an illegal character : '<'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(570);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, " ", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "yC-tCg68A01x Sl");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.addOptionGroup(optionGroup2);
      options1.addOption(option0);
      Options options2 = new Options();
      options2.getOption("arg");
      options0.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-2), "P", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      PrintWriter printWriter0 = null;
      int int0 = 40;
      String string0 = "";
      String string1 = "";
      String string2 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 17, 40, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      File file0 = MockFile.createTempFile("   ", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 16, "wdCl D3DjxLLtjn", "wdCl D3DjxLLtjn", options0, 74, 74, (String) null, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = new StringBuffer();
      Options options1 = new Options();
      Option option0 = new Option("arg", "--", true, "usage: ");
      Options options2 = options0.addOption(option0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      helpFormatter1.printHelp("aDdzZ", options0, true);
      helpFormatter1.setLeftPadding((-1));
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "usage: ", "\"", options2, 74, 74, "aDdzZ", true);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("--", options0, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(10);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "Cj>n!7\"lN(H RMw");
      Options options0 = new Options();
      helpFormatter0.printHelp("Q", options0, true);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(".QFH(GE'xIA");
      int int0 = 861;
      helpFormatter0.renderWrappedText(stringBuffer0, 861, 74, ".QFH(GE'xIA");
      int int1 = (-802);
      helpFormatter0.findWrapPos(".QFH(GE'xIA", (-802), 861);
      helpFormatter0.getOptPrefix();
      int int2 = 13;
      MockFile mockFile0 = new MockFile("J/T?GarKfUD]h$LdzYU");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      PrintWriter printWriter1 = mockPrintWriter1.append('`');
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter1, 0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = false;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "JR";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.Option", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.rtrim(" :: ");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getSyntaxPrefix();
      File file0 = MockFile.createTempFile("arg", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 16, options0, 2, (-335));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(10);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("usage: ");
      Locale locale0 = Locale.GERMANY;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, " ", objectArray0);
      int int0 = 13;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "--", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 1831, "bMG@|yi>{xk", "yC-tCg68A01x Sl", options2, 13, (-1), "y]@!1=03", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 420, options0, 74, 3);
      StringBuffer stringBuffer2 = helpFormatter1.renderWrappedText(stringBuffer1, 3, 74, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer2, (-1), 68, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte)2;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("[");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("+hS= JN2psHD^", (-596), 49);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(10);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Options options0 = new Options();
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.printHelp("]", options0, true);
      helpFormatter0.setLeftPadding(297);
      printWriter0.flush();
      helpFormatter0.setSyntaxPrefix("~\"?>'&B.M9v>tnI@");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 74, "<8A2|7z", "", options0, (-1061), (-1015), "org.apache.commons.cli.HelpFormatter", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "usage: ");
      Options options1 = options0.addOption(option0);
      options1.getOption("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("/q6:%m`w)6rxkc!");
      Locale locale0 = Locale.GERMANY;
      mockPrintWriter0.printf(locale0, "", (Object[]) null);
      String string0 = "org.apache.commons.cli.HelpFormatter";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "", "org.apache.commons.cli.HelpFormatter", options0, 507, (-2), "-", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "}=nY533qdt:/";
      String string1 = "%t<sS? UKvrV9z&@q";
      Options options0 = new Options();
      String string2 = "";
      boolean boolean0 = false;
      Options options1 = options0.addOption("", "iV}']sqR)FW*pH\"bV", false, " ");
      helpFormatter0.printHelp("}=nY533qdt:/", "%t<sS? UKvrV9z&@q", options1, "}=nY533qdt:/");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      StringBuffer stringBuffer0 = new StringBuffer(":3T,`FRFvcW=Pv");
      // Undeclared exception!
      try { 
        stringBuffer0.append((CharSequence) "usage: ", 74, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 74, end 1, s.length() 7
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setOptPrefix("wdC D3DjxLLtjn");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = new Option("arg", "--", true, (String) null);
      options0.addOption(option0);
      StringWriter stringWriter0 = new StringWriter(31);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      mockPrintWriter0.println(1);
      options0.getOption("3V");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), (String) null, options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("wdC D3DjxLLtjn");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 3, " ");
      Options options1 = new Options();
      Option option0 = new Option("arg", "--", true, (String) null);
      Options options2 = options0.addOption(option0);
      options2.getOptionGroups();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter1.printHelp("aDdzZ", options0, true);
      helpFormatter1.setLeftPadding((-1));
      helpFormatter1.setSyntaxPrefix("");
      helpFormatter1.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "eH%Oq";
      helpFormatter0.setLongOptSeparator("eH%Oq");
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 2, 2, "eH%Oq");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "wdC D3DjxLLtjn";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setOptPrefix("wdC D3DjxLLtjn");
      File file0 = MockFile.createTempFile("   ", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-263), "'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, " ", true, "-");
      options0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"");
      Locale locale0 = new Locale("usage: ", "arg", "");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "#ch>QThP5", objectArray0);
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLeftPadding(3);
      helpFormatter0.setSyntaxPrefix("db7:_p@ikqadQVR");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 1, ":|82Nom]4l;4Mk2](", "arg", options0, 49, 66, "!c4Z`*Xwq5\"S\"R-G", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "deH%Oq";
      helpFormatter0.setLongOptSeparator("deH%Oq");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(7);
      Options options0 = new Options();
      options0.helpOptions();
      options0.toString();
      boolean boolean0 = true;
      String string1 = "]";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(7, "]", " ]", options0, "_S4S)?FoiKq6)", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setOptPrefix("wdC D3DjxLLtjn");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 74, 3, " ");
      Options options1 = new Options();
      Option option0 = new Option("arg", "--", true, (String) null);
      options0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Locale locale0 = new Locale("", "-", "-");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) stringBuffer1;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "";
      mockPrintWriter0.printf(locale0, "\n", objectArray0);
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.setLeftPadding(74);
      helpFormatter2.setSyntaxPrefix("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "\n", (String) null, options0, 3, 49, ":|82Nom]4l;4Mk2](", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setOptPrefix("wdC D3DjxLLtjn");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.reverse();
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 3, " ");
      Options options1 = new Options();
      Option option0 = new Option("arg", "--", true, (String) null);
      options0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      StringBuffer stringBuffer1 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer1, 44, (-2979), "BN?d+l%!");
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 2697, "[");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setOptPrefix("wdC D3DjxLLtjn");
      File file0 = MockFile.createTempFile("   ", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      int int0 = 74;
      String string0 = null;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 34, "wdC D3DjxLLtjn", "wdC D3DjxLLtjn", options0, 74, 74, (String) null, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-51), "", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(10);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Options options0 = new Options();
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.format("", objectArray0);
      mockPrintWriter0.println((-1061));
      options0.getOption("%}e;kg}");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "", options0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        stringBuffer0.insert(10, "h5y'EB");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 10
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("eH%Oq");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("O2e=d[gt=X@", "", options2, "", false);
      Locale locale0 = Locale.CHINA;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("!Xs`");
      mockPrintWriter0.printf(locale0, "", (Object[]) null);
      Options options3 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2452, (String) null, (String) null, options3, 1058, 1058, "]", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setOptPrefix("wdC D3DjxLLtjn");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 74, 3, " ");
      Options options1 = new Options();
      Option option0 = new Option("arg", "--", true, (String) null);
      options0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Locale locale0 = new Locale("", "-", "-");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) stringBuffer1;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "\n", objectArray0);
      Options options2 = options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp(printWriter0, 74, "-", "h]US\"~ENaao\"UyH", options2, (-1452), 63, "h]US\"~ENaao\"UyH", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setOptPrefix("wdC D3DjxLLtjn");
      File file0 = MockFile.createTempFile("   ", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 34, "wdC D3DjxLLtjn", "wdC D3DjxLLtjn", options0, 74, 74, (String) null, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 3, " ");
      Options options1 = new Options();
      Option option0 = new Option("arg", "--", true, (String) null);
      options0.addOption(option0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter1.printHelp("aDdzZ", options0, true);
      helpFormatter1.setLeftPadding((-1));
      helpFormatter1.setSyntaxPrefix("");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("l", (String) null, options1, "s", true);
      Option option0 = new Option("arg", true, (String) null);
      Locale locale0 = Locale.CHINA;
      helpFormatter0.printHelp("s", options1, false);
      helpFormatter0.setLeftPadding((-1));
      Options options2 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "jiPE.s#g,)<", "4fW..S)a", options2, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "usage: ");
      Options options1 = options0.addOption(option0);
      options1.getOption("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("/q6:%m`w)6rxkc!");
      Locale locale0 = Locale.GERMANY;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "yC-tCg68A01x Sl", (Object[]) null);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1831, "G^}3Bc~,Q}J", "/q6:%m`w)6rxkc!", options1, 1, 13, "G^}3Bc~,Q}J", false);
      helpFormatter0.printWrapped(printWriter0, 1831, "");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("eH%Oq");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = "";
      Options options2 = options1.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      helpFormatter0.printHelp("O2e=d[gt=X@", "", options2, "", false);
      Option option0 = null;
      try {
        option0 = new Option("usage: ", false, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      int int0 = 32;
      helpFormatter0.renderOptions((StringBuffer) null, 4550, options0, 10, 32);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-302), 34, "org.apache.commons.cli.OptionGroup");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("s", (String) null, options1, "s", true);
      Option option0 = new Option("s", true, "]");
      options0.addOption(option0);
      Options options2 = new Options();
      helpFormatter0.printHelp(30, "l", (String) null, options0, "CMpS&JXc`+-UwjGVj");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.defaultLongOptPrefix = "bud]-OU]'";
      helpFormatter0.findWrapPos("", 0, 1);
      Options options0 = new Options();
      options0.hasLongOption((String) null);
      helpFormatter0.setLeftPadding(10);
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setLongOptSeparator("");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(10);
      Options options0 = new Options();
      Object[] objectArray0 = new Object[0];
      options0.getOption("%}e;kg}");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringBuffer0.insert(0, "h5y'EB");
      String string1 = HelpFormatter.DEFAULT_ARG_NAME;
      stringWriter0.append((CharSequence) "arg");
      helpFormatter0.renderWrappedText(stringBuffer0, 0, (-55), "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-55), "", "", options0, "P-|&f", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "d0]xywQ|k1|34;";
      boolean boolean0 = false;
      helpFormatter0.printHelp("d0]xywQ|k1|34;", (String) null, options0, "", false);
      Option option0 = null;
      try {
        option0 = new Option("usage: ", false, " | ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("l", (String) null, options1, "s", true);
      Option option0 = new Option("arg", true, (String) null);
      Locale locale0 = Locale.CHINA;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("G^}3Bc~,Q}J");
      mockPrintWriter0.printf(locale0, "s", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "A7dZ!", "A7dZ!", (Options) null, 13, 44, (String) null, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getArgName();
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = null;
      int int0 = 74;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("", "x03wa", false, "--");
      options1.getOptionGroups();
      Option option0 = null;
      try {
        option0 = new Option(" ", false, "OjDRc9eG");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 74, "\n");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setOptPrefix("wdC D3DjxLLtjn");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 3, " ");
      Options options1 = new Options();
      Option option0 = new Option("arg", "--", true, (String) null);
      options0.addOption(option0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter1.printHelp("aDdzZ", options0, true);
      helpFormatter1.setLeftPadding(1);
      helpFormatter1.setSyntaxPrefix("arg");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", "   ", false, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      options0.hasLongOption("[");
      Option option0 = new Option("", false, "\n");
      options0.addOption(option0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.renderOptions(stringBuffer0, 63, options0, 282, 63);
      helpFormatter0.renderWrappedText(stringBuffer0, 282, 12, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.createPadding(63);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2992), "", "-b w@", options0, "R()wLl=3~N=V0#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "   ", false, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      options0.hasLongOption("[");
      Option option0 = new Option("", "\n", false, "[ option: ");
      options1.addOption(option0);
      options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 37, (-1800), ",bC?R]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getWidth();
      String string0 = "xxqI;+`";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption(".xLSQ!|&!kU", true, "[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '.xLSQ!|&!kU' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setOptPrefix("wdC D3DjxLLtjn");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = "";
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 3, " ");
      Options options1 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("$YFOGN&w n{a5nu", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '$YFOGN&w n{a5nu' contains an illegal character : '&'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      Options options1 = null;
      helpFormatter0.printHelp("ahFacX/WLjyOTy#7j", "' was specified but an option from this group ", options0, "ahFacX/WLjyOTy#7j", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      int int0 = 774;
      stringBuffer0.append(0L);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 774, options0, (-662), 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      Options options0 = null;
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderWrappedText(stringBuffer0, 32, 32, ":");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(13, (String) null, "ZgFijA}DmXDR", (Options) null, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(10);
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append(false);
      helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "Cj>n!7\"lN(H RMw");
      Options options0 = new Options();
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-1700), options0, 10, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      String string1 = "wdC D3DjxLLtjn";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-4285), options1, 377, 975);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "deH%Oq";
      helpFormatter0.setLongOptSeparator("deH%Oq");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(10);
      Options options0 = new Options();
      options0.helpOptions();
      options0.toString();
      boolean boolean0 = false;
      String string1 = "]";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(10, "]", " ]", options0, "_S4S)?FoiKq6)", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      String string1 = "wdC D3DjxLLtjn";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-1861);
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, (-1861), 74, "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, (-1861), 74, "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("line.separator");
      helpFormatter0.setOptionComparator((Comparator) null);
      String string0 = "ahFacX/WLjyOTy#7j";
      Options options0 = null;
      boolean boolean0 = false;
      helpFormatter0.optionComparator = null;
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 3, (Options) null, 3, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "", options1, "%Q]dw,-N;5*WnkZP5w", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("33a^:~xd*{MHX1L\"?v");
      helpFormatter0.setOptPrefix((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter1.renderWrappedText(stringBuffer0, 74, 1, "");
      Options options0 = new Options();
      Option option0 = new Option("", true, "8OK(RW,*n~Q");
      options0.addOption(option0);
      helpFormatter1.setWidth((-61));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(14, "", "33a^:~xd*{MHX1L\"?v", options0, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Options options1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "l", (Options) null, "l", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("line.separator");
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.setWidth((-1645));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "deH%Oq";
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(10);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      int int0 = 0;
      Options options0 = new Options();
      String string1 = "";
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.format("", objectArray0);
      mockPrintWriter0.println((-1077));
      options0.getOption("%}e;kg}");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "deH%Oq", options0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", false, "6)>[sD3m~Oh");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", "usage: ", true, "cmdLineSyntax not provided");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1438), (String) null, "cmdLineSyntax not provided", options2, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setWidth(0);
      String string0 = "TD/Bni'{?^KyF";
      helpFormatter0.setLongOptSeparator("TD/Bni'{?^KyF");
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.ParseException");
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.getWidth();
      String string1 = "wq[FQ'tj\\-5zA_$,r ";
      MockPrintStream mockPrintStream0 = new MockPrintStream("wq[FQ'tj-5zA_$,r ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = Locale.ROOT;
      String string2 = "org.apache.commons.cli.OptionGroup";
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "wq[FQ'tj-5zA_$,r ";
      mockPrintWriter0.printf(locale0, "org.apache.commons.cli.OptionGroup", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption(" ", " ", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "   ", false, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      Option option0 = new Option("", "\n", false, "[ option: ");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "' was specified but an option from this group ";
      Options options0 = new Options();
      options0.helpOptions();
      options0.toString();
      boolean boolean0 = false;
      helpFormatter0.printHelp(44, "' was specified but an option from this group ", "' was specified but an option from this group ", options0, "' was specified but an option from this group ", false);
      MockFile mockFile0 = new MockFile("arg");
      MockFile mockFile1 = new MockFile(mockFile0, "--");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile1, "usage: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // usage: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
      String string0 = "";
      MockFile mockFile0 = new MockFile("", "-");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("<", "", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("NO_ARGS_ALLOWED");
      helpFormatter0.getLeftPadding();
      MockFile mockFile0 = new MockFile("*", "*");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('v');
      Options options0 = new Options();
      Options options1 = options0.addOption("NO_ARGS_ALLOWED", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("NO_ARGS_ALLOWED", "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(printWriter0, 126, "A CloneNotSupportedException was thrown: ", "A CloneNotSupportedException was thrown: ", options2, 126, 4067, "g/AIlzo");
      assertEquals(3, helpFormatter0.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      String string0 = "--";
      helpFormatter0.setArgName("--");
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.getLongOptPrefix();
      String string1 = "mc^\\\"XOZqU";
      URI uRI0 = MockURI.aHttpURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "   ";
      Option option0 = new Option((String) null, "aU+", true, "[ option: ");
      Options options1 = options0.addOption(option0);
      boolean boolean0 = false;
      helpFormatter0.printHelp("[ option: ", options1, false);
      helpFormatter0.setLeftPadding(2558);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), (String) null, "   ", options0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter1.renderWrappedText(stringBuffer0, 74, 1, "--");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      String string1 = "wdC D3DjxLLtjn";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Option option0 = new Option((String) null, "arg");
      option0.toString();
      options1.addOption(option0);
      helpFormatter0.printHelp("wdC D3DjxLLtjn", options1);
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptionComparator();
      options0.helpOptions();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setLeftPadding(1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "usage: ", 0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "   ", false, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      options0.hasLongOption("[");
      Option option0 = new Option("", "\n", false, "[ option: ");
      options1.addOption(option0);
      helpFormatter0.printHelp("pA}", options1, true);
      helpFormatter0.setLeftPadding((-2));
      helpFormatter0.setSyntaxPrefix("M!!");
      assertEquals((-2), helpFormatter0.defaultLeftPad);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("line.separator");
      helpFormatter0.setOptionComparator((Comparator) null);
      String string0 = "ahFacX/WLjyOTy#7j";
      Options options0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("line.separator", "ahFacX/WLjyOTy#7j", (Options) null, "line.separator", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = Locale.KOREAN;
      String string0 = "XAe";
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) comparator0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) mockPrintStream0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "XAe", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-2982), "XAe");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.getLongOptSeparator();
      assertEquals(" ", string0);
      
      helpFormatter0.getOptionComparator();
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " | ";
      Options options0 = new Options();
      options0.getOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-914), " | ", " | ", options1, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.rtrim("4!");
      assertEquals("4!", string0);
      
      String string1 = helpFormatter0.getNewLine();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", string1);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      int int0 = 1128;
      String string0 = "I3-~,?N8";
      String string1 = "";
      Options options0 = new Options();
      boolean boolean0 = false;
      options0.hasOption("usage: ");
      // Undeclared exception!
      try { 
        options0.addOption(" ", " ", false, "~Ds)]w\"]f?}@W)PQOLE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setLeftPadding(1047);
      helpFormatter0.setDescPadding(1047);
      helpFormatter0.createPadding(1047);
      helpFormatter0.getSyntaxPrefix();
      String string0 = "S]L";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("S]L", " ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      MockFile mockFile0 = new MockFile("", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 74, ":", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1045), (String) null, (String) null, (Options) null, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("33a^:~xd*{MHX1L\"?v");
      helpFormatter0.setOptPrefix((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 74, 1, "");
      Options options0 = new Options();
      Option option0 = new Option("", true, "8OK(RW,*n~Q");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, 3, options1, 1209, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = helpFormatter0.getArgName();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("arg", string0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("NO_ARGS_ALLOWED");
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.setOptionComparator(comparator0);
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 0;
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("]lqKn ;T!Hjg", "--", false, "]lqKn ;T!Hjg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ']lqKn ;T!Hjg' contains an illegal character : ']'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultOptPrefix = "";
      String string1 = "";
      helpFormatter0.setNewLine("");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.defaultLongOptPrefix = "bud]-OU]'";
      helpFormatter0.findWrapPos("", 0, 1);
      int int0 = 0;
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", " ", true, "");
      // Undeclared exception!
      try { 
        options1.addOption(":C^2 s", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ':C^2 s' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "l";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string1 = "s";
      helpFormatter0.printHelp("l", (String) null, options1, "s", true);
      Options options2 = null;
      int int0 = 0;
      String string2 = "1P`MM3re#7";
      Options options3 = new Options();
      options3.toString();
      // Undeclared exception!
      try { 
        options3.addOption("usage: ", true, "q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.getOptPrefix();
      assertEquals("-", string0);
      
      MockFile mockFile0 = new MockFile("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      File file0 = MockFile.createTempFile("arg", "u(gVfl,", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "-";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "u(gVfl,";
      objectArray0[3] = (Object) "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      objectArray0[4] = (Object) "~N4j8XAk=sM)0a";
      PrintWriter printWriter0 = mockPrintWriter0.format("~N4j8XAk=sM)0a", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 1040, 1040, "u(gVfl,");
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.getSyntaxPrefix();
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", string0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("Cannot add value, list full.");
      assertEquals("Cannot add value, list full.", helpFormatter0.getNewLine());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "]";
      int int0 = (-1222);
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("A CloneNotSupportedException was thrown: ", false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'A CloneNotSupportedException was thrown: ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
