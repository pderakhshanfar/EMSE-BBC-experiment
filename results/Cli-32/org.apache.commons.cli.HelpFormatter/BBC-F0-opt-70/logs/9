* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-70
* Going to generate test cases for class: org.apache.commons.cli.HelpFormatter
* Starting Client-0
* Connecting to master process on port 2181
* Analyzing classpath: 
  - subjects/buggy-versions/Cli-32/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.cli.HelpFormatter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1151
* Using seed 537463688
* Starting evolution
bbc usage percentage is: 70%
* Initial Number of Goals in DynaMOSA = 400 / 1151
[MASTER] 18:02:32.234 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
* Search finished after 602s and 112 generations, 52871 statements, best individual has fitness: 146.0
* Minimizing test suite
[MASTER] 18:13:52.942 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 99%
* Total number of goals: 203
* Number of covered goals: 201
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 87%
* Total number of goals: 157
* Number of covered goals: 137
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 47
* Number of covered goals: 47
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 93%
* Total number of goals: 508
* Number of covered goals: 470
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 52%
* Total number of goals: 46
* Number of covered goals: 24
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 98%
* Total number of goals: 40
* Number of covered goals: 39
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 98%
* Total number of goals: 40
* Number of covered goals: 39
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 87%
* Total number of goals: 157
* Number of covered goals: 137
* Generated 108 tests with total length 1518
* Resulting test suite's coverage: 83% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 18:14:42.197 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7158% of time used, but only 15/108 tests minimized), falling back to using all assertions
[MASTER] 18:14:59.379 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 7%
* Compiling and checking tests
[MASTER] 18:15:25.065 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:15:25.151 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:15:25.257 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:15:25.315 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:15:25.372 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:15:25.421 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:15:25.580 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:15:25.632 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:15:40.371 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_181_tmp__ESTest.test0(HelpFormatter_181_tmp__ESTest.java:138)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 18:15:40.373 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals(74, helpFormatter0.getWidth());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertNotNull(helpFormatter0);

String string0 = helpFormatter0.rtrim((String) null);
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals(74, helpFormatter0.getWidth());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertNull(string0);

HelpFormatter helpFormatter1 = new HelpFormatter();
assertEquals("\n", helpFormatter1.getNewLine());
assertEquals(74, helpFormatter1.getWidth());
assertEquals("arg", helpFormatter1.getArgName());
assertEquals(3, helpFormatter1.getDescPadding());
assertEquals(" ", helpFormatter1.getLongOptSeparator());
assertEquals(1, helpFormatter1.getLeftPadding());
assertEquals("-", helpFormatter1.getOptPrefix());
assertEquals("--", helpFormatter1.getLongOptPrefix());
assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
assertEquals(1, helpFormatter1.defaultLeftPad);
assertEquals(74, helpFormatter1.defaultWidth);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(3, helpFormatter1.defaultDescPad);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertFalse(helpFormatter1.equals((Object)helpFormatter0));
assertNotNull(helpFormatter1);

StringBuffer stringBuffer0 = new StringBuffer(1);
assertEquals(0, stringBuffer0.length());
assertEquals("", stringBuffer0.toString());
assertNotNull(stringBuffer0);

StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 37, 74, " ");
assertEquals("\n", helpFormatter1.getNewLine());
assertEquals(74, helpFormatter1.getWidth());
assertEquals("arg", helpFormatter1.getArgName());
assertEquals(3, helpFormatter1.getDescPadding());
assertEquals(" ", helpFormatter1.getLongOptSeparator());
assertEquals(1, helpFormatter1.getLeftPadding());
assertEquals("-", helpFormatter1.getOptPrefix());
assertEquals("--", helpFormatter1.getLongOptPrefix());
assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
assertEquals(0, stringBuffer0.length());
assertEquals("", stringBuffer0.toString());
assertEquals(0, stringBuffer1.length());
assertEquals("", stringBuffer1.toString());
assertEquals(1, helpFormatter1.defaultLeftPad);
assertEquals(74, helpFormatter1.defaultWidth);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(3, helpFormatter1.defaultDescPad);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertNotSame(helpFormatter1, helpFormatter0);
assertSame(stringBuffer0, stringBuffer1);
assertSame(stringBuffer1, stringBuffer0);
assertFalse(helpFormatter1.equals((Object)helpFormatter0));
assertNotNull(stringBuffer1);

helpFormatter1.setDescPadding(74);
assertEquals("\n", helpFormatter1.getNewLine());
assertEquals(74, helpFormatter1.getWidth());
assertEquals("arg", helpFormatter1.getArgName());
assertEquals(" ", helpFormatter1.getLongOptSeparator());
assertEquals(74, helpFormatter1.getDescPadding());
assertEquals(1, helpFormatter1.getLeftPadding());
assertEquals("-", helpFormatter1.getOptPrefix());
assertEquals("--", helpFormatter1.getLongOptPrefix());
assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
assertEquals(1, helpFormatter1.defaultLeftPad);
assertEquals(74, helpFormatter1.defaultWidth);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter1.defaultDescPad);
assertNotSame(helpFormatter1, helpFormatter0);
assertFalse(helpFormatter1.equals((Object)helpFormatter0));

char[] charArray0 = new char[5];
charArray0[0] = '{';
charArray0[1] = 'P';
FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
assertNotNull(mockPrintWriter0);

PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) stringBuffer1);
assertEquals("\n", helpFormatter1.getNewLine());
assertEquals(74, helpFormatter1.getWidth());
assertEquals("arg", helpFormatter1.getArgName());
assertEquals(" ", helpFormatter1.getLongOptSeparator());
assertEquals(74, helpFormatter1.getDescPadding());
assertEquals(1, helpFormatter1.getLeftPadding());
assertEquals("-", helpFormatter1.getOptPrefix());
assertEquals("--", helpFormatter1.getLongOptPrefix());
assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
assertEquals(0, stringBuffer0.length());
assertEquals("", stringBuffer0.toString());
assertEquals(0, stringBuffer1.length());
assertEquals("", stringBuffer1.toString());
assertFalse(fileDescriptor0.valid());
assertEquals(1, helpFormatter1.defaultLeftPad);
assertEquals(74, helpFormatter1.defaultWidth);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter1.defaultDescPad);
assertNotSame(helpFormatter1, helpFormatter0);
assertSame(stringBuffer0, stringBuffer1);
assertSame(stringBuffer1, stringBuffer0);
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);
assertFalse(helpFormatter1.equals((Object)helpFormatter0));
assertNotNull(printWriter0);

helpFormatter1.printWrapped(printWriter0, 74, 37, "W!`A?6");
assertEquals("\n", helpFormatter1.getNewLine());
assertEquals(74, helpFormatter1.getWidth());
assertEquals("arg", helpFormatter1.getArgName());
assertEquals(" ", helpFormatter1.getLongOptSeparator());
assertEquals(74, helpFormatter1.getDescPadding());
assertEquals(1, helpFormatter1.getLeftPadding());
assertEquals("-", helpFormatter1.getOptPrefix());
assertEquals("--", helpFormatter1.getLongOptPrefix());
assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
assertEquals(0, stringBuffer0.length());
assertEquals("", stringBuffer0.toString());
assertEquals(0, stringBuffer1.length());
assertEquals("", stringBuffer1.toString());
assertFalse(fileDescriptor0.valid());
assertEquals(1, helpFormatter1.defaultLeftPad);
assertEquals(74, helpFormatter1.defaultWidth);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter1.defaultDescPad);
assertNotSame(helpFormatter1, helpFormatter0);
assertSame(stringBuffer0, stringBuffer1);
assertSame(stringBuffer1, stringBuffer0);
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);
assertFalse(helpFormatter1.equals((Object)helpFormatter0));

Options options0 = new Options();
assertNotNull(options0);

StringBuffer stringBuffer2 = new StringBuffer("");
assertEquals("", stringBuffer2.toString());
assertEquals(0, stringBuffer2.length());
assertFalse(stringBuffer2.equals((Object)stringBuffer0));
assertFalse(stringBuffer2.equals((Object)stringBuffer1));
assertNotNull(stringBuffer2);

helpFormatter1.renderWrappedText(stringBuffer1, 3, 9, (String) null);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 1
* Writing tests to file
* Writing JUnit test case 'HelpFormatter_ESTest' to results/Cli-32/org.apache.commons.cli.HelpFormatter/BBC-F0-opt-70/tests/9
* Done!

* Computation finished
