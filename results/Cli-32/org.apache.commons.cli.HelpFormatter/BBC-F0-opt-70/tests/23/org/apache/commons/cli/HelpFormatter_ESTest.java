/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 10:02:23 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", " ", options0, " ");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 13;
      String string0 = "";
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = new Option("", "d1", true, "3~g2f$wOe@^@FC");
      helpFormatter0.printHelp("NO_ARGS_ALLOWED", "d1", options0, "");
      option0.getValues();
      option0.setRequired(true);
      Options options1 = options0.addOption(option0);
      options1.getOption((String) null);
      option0.clearValues();
      options1.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.cli.ParseException");
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Option option1 = new Option("", true, ",[KrSqJL");
      optionGroup1.addOption(option1);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("--", "--", options0, "-", true);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", true, "6K");
      int int0 = 98;
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options2, 98, 98);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("\n");
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      option0.setArgName("A");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(" ]", " ]", options0, "-", true);
      StringBuffer stringBuffer0 = new StringBuffer(" ]");
      StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
      helpFormatter0.renderWrappedText(stringBuffer1, 3589, (-2), "[ARG...]");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, " ", true, "");
      Options options2 = options1.addOption("", true, "2*1(w}4>Ux.DnA[SL");
      Option option0 = new Option("", "", true, "");
      Options options3 = options2.addOption(option0);
      helpFormatter0.printHelp(" ", "", options3, "", true);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("\n");
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      option0.setArgName("");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(" ]", " ]", options0, "-", true);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("[ARG...]", 1, (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = (-1355);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("A CloneNotSupportedException was thrown: ", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1480);
      helpFormatter0.defaultWidth = (-1480);
      helpFormatter0.getWidth();
      StringWriter stringWriter0 = new StringWriter(1);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "--", 1, (-1480));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.optionComparator = null;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      helpFormatter0.setNewLine("");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      Options options0 = new Options();
      Option option0 = new Option("", "C_0I6");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", "-", false, "--");
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, options2, 14, 0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.cli.Option cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.ComparableTimSort", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "org.apache.commons.cli.ParseException", "org.apache.commons.cli.ParseException", (Options) null, "org.apache.commons.cli.ParseException", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-1262);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("=yPX)", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "vLTw7O2-;R1P$L.E", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-2), "", "", (Options) null, (-2), 63, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", false, "-");
      Options options2 = options1.addOption("", true, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 1, options2, 309, 309);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(450);
      StringBuffer stringBuffer1 = stringWriter0.getBuffer();
      helpFormatter1.renderWrappedText(stringBuffer1, 68, 548, "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("E2}@E");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, (-964), "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.setLongOptPrefix("-3lNbay$d5H_O<");
      helpFormatter0.rtrim("NO_ARGS_ALLOWED");
      Options options0 = new Options();
      Option option0 = new Option("C", true, "NO_ARGS_ALLOWED");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("-3lNbay$d5H_O<", "org.apache.commons.cli.HelpFormatter$1", options0, "C", true);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.setLongOptPrefix("-3lNbay$d5H_O<");
      helpFormatter0.rtrim("NO_ARGS_ALLOWED");
      Options options0 = new Options();
      Option option0 = new Option("C", true, "NO_ARGS_ALLOWED");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      optionGroup1.toString();
      Options options3 = options2.addOption("arg", true, "NO_ARGS_ALLOWED");
      helpFormatter0.printHelp(" :: ", "", options3, "-3lNbay$d5H_O<", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "NO_ARGS_ALLOWED", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = (-2);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "--", "--", options0, "--");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      helpFormatter0.defaultNewLine = "L?G24.XD3s%C@9$";
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("5}nteCz)DaekOTV");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 1, "}\"~E[vtk?L\"7\"u>|{se", "", options0, 25, 1, "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter0.setLongOptPrefix("-3lNbay$d5H_O<");
      helpFormatter0.rtrim("NO_ARGS_ALLOWED");
      Options options0 = new Options();
      Option option0 = new Option("C", true, (String) null);
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption("arg", true, "NO_ARGS_ALLOWED");
      helpFormatter0.printHelp(" :: ", "", options3, "-3lNbay$d5H_O<", true);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      int int0 = 3;
      int int1 = 32;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 3, (Options) null, 32, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 377;
      String string0 = "";
      String string1 = "op";
      Options options0 = new Options();
      options0.getOption("U");
      String string2 = "";
      String string3 = "P@HO";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "u@X?1se%*rGU$Z.", "P@HO", options0, (String) null, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", false, " ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.defaultLeftPad = (-1);
      optionGroup0.setRequired(true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("usage: ", "usage: ", options2, (String) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("The option '");
      helpFormatter1.rtrim("--");
      Options options1 = options0.addOption((String) null, true, "The option '");
      helpFormatter1.printHelp("--", "org.apache.commons.cli.HelpFormatter", options1, "arg", true);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptPrefix("EdTu(;{Z}`dw");
      helpFormatter0.rtrim("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", (String) null, (Options) null, "j.d>,Gy1vNpW!ijh ^", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderWrappedText(stringBuffer0, 385, 14, "");
      StringWriter stringWriter0 = new StringWriter(791);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "--");
      Option option0 = new Option("a", "@IPd*edu", true, "");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 14, "", options3);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 301, "`CP}d");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "usage: ");
      helpFormatter0.printHelp("[ -]z^(%Y3es", "[ -]z^(%Y3es", options1, (String) null, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Options options2 = new Options();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", false, " ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      helpFormatter0.defaultOptPrefix = "";
      optionGroup0.setRequired(false);
      helpFormatter0.printHelp("u*", "arg", options2, "arg");
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, (-1), options1, 115, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1094;
      PrintWriter printWriter0 = null;
      int int1 = 0;
      String string0 = "Tm]Eed[o%^P%,";
      Options options0 = new Options();
      boolean boolean0 = true;
      helpFormatter0.defaultWidth = 1094;
      Options options1 = options0.addOption("arg", "", true, "--");
      int int2 = 864;
      String string1 = "svVV`IVNf*.";
      Options options2 = options1.addOption("", "", false, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 864, "svVV`IVNf*.", "", options2, 864, (-10), "cmdLineSyntax not provided");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.HelpFormatter$OptionComparator", "-");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale locale0 = Locale.CANADA_FRENCH;
      Locale locale1 = Locale.CHINESE;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) locale0;
      mockPrintWriter0.printf(locale1, "arg", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, " Fc<c>M4vtkzW6n", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, 74, 3, "", true);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("[ option: ", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, 13, "");
      Options options0 = new Options();
      String string0 = "f";
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("vUZN@(5o7P6H_>-", "f", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'vUZN@(5o7P6H_>-' contains an illegal character : '@'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 98, "*Cy<Jc@", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setLeftPadding((-1920));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(3);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 39, 92, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = 34;
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp(".|DK", ".|DK", options0, "-");
      helpFormatter0.setNewLine("-");
      stringBuffer0.append(74);
      String string0 = helpFormatter0.defaultNewLine;
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 74, "-");
      MockFile mockFile0 = new MockFile("", "--");
      MockFile mockFile1 = new MockFile(mockFile0, ".|DK");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/--/.|DK");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      Object[] objectArray0 = new Object[0];
      helpFormatter0.printOptions(mockPrintWriter0, 74, options0, 74, 31);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(975);
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append('m');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      Option option0 = new Option("", false, "*ZEAr|oei4f1A");
      Options options2 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage(printWriter0, (-624), "Illegal option name '", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-", "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "usage: ", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 8, (String) null, "lP(MGx5lqwkH-]a>", options0, 1787, 63, "c6(l^!/_<p>dW;BZ", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("$1G^~");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2058, "$1G^~", options0);
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.lookup(linkedList0, linkedList1);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) linkedList1;
      objectArray0[1] = (Object) mockPrintWriter1;
      mockPrintWriter1.print((float) 74);
      mockFile0.setReadable(true);
      objectArray0[2] = (Object) linkedList1;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter1;
      objectArray0[5] = (Object) "Xoh0GATyUA/}";
      objectArray0[6] = (Object) mockPrintWriter1;
      objectArray0[7] = (Object) options0;
      mockPrintWriter0.printf((Locale) null, "Xoh0GATyUA/}", objectArray0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 62, "Xoh0GATyUA/}", "U]!>c40d'a:)'", options0, 2058, 653, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", false);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options1 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 653, options1, 34, 2058);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(975);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, (-2173), 233, "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("$1G^~");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "o\"j:~.+'i*\"eF~6h", options1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(975);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "C8N-(3FR@%89+b%";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      MockFile mockFile0 = new MockFile("--", "--");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, (-1395), "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(989);
      Options options0 = new Options();
      helpFormatter0.printHelp(989, "-`i6", "", options0, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLongOptSeparator("\n");
      helpFormatter0.renderOptions((StringBuffer) null, (-3693), options0, 13, 74);
      helpFormatter0.getArgName();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("line.separator");
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 0, (-133), " ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("XUF", true, "usage: ");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "XUF", true, "-");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      Options options4 = options3.addOption("", true, "\n");
      options4.addOption(option0);
      OptionGroup optionGroup1 = new OptionGroup();
      options4.addOptionGroup(optionGroup1);
      options1.helpOptions();
      optionGroup0.setRequired(false);
      helpFormatter0.printHelp("[", "S!-;w;D]@U@kf+9Er", options2, (String) null);
      helpFormatter0.setNewLine((String) null);
      String string0 = helpFormatter0.defaultNewLine;
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.defaultLeftPad = 34;
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp(".|DK", ".|DK", options0, "-");
      helpFormatter0.setNewLine("-");
      stringBuffer0.append(74);
      String string0 = helpFormatter0.defaultNewLine;
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 74, "-");
      MockFile mockFile0 = new MockFile("", "--");
      MockFile mockFile1 = new MockFile(mockFile0, ".|DK");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.lookup(linkedList0, linkedList1);
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.printf((Locale) null, "usage: ", objectArray0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 653, "-", (String) null, options0, 653, 960, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)106;
      helpFormatter0.setWidth(15);
      Options options0 = new Options();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.rtrim("l^})l mtyWXM^m$qfC");
      Options options1 = options0.addOption("", "\n", true, " :: ");
      helpFormatter0.printHelp("l^})l mtyWXM^m$qfC", "", options1, "", true);
      helpFormatter0.rtrim(" :: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 28, "Sq$U6^+,QV18vy", "k]A\"1A", options1, 413, (int) (byte)40, "XdM5;l", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "t";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("t", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(975);
      Options options0 = new Options();
      Option option0 = new Option("", false, " ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options1.helpOptions();
      option0.setDescription("--");
      helpFormatter0.defaultOptPrefix = "";
      optionGroup0.setRequired(false);
      helpFormatter0.printHelpoptions2, (String) null);
      helpFormatter0.setNewLine
      String string0 = helpFormatter0.defaultNewLine;
      StringBuffer stringBuffer0 = new StringBuffer(64);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-3068));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("\n");
      Options options0 = new Options();
      Option option0 = new Option((String) null, true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      option0.setArgName(" ");
      OptionGroup optionGroup1 = new OptionGroup();
      optionGroup1.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(" ]", " ]", options0, (String) null, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos("usage: ", (-2), (-1570));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(2008);
      Options options0 = new Options();
      Option option0 = new Option("ifA", false, "usage: ");
      Option option1 = new Option((String) null, "arg", false, "-");
      Options options1 = options0.addOption(option1);
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      options0.addOptionGroup(optionGroup0);
      options0.helpOptions();
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      optionGroup1.setRequired(false);
      helpFormatter0.printHelp("ifA", "", options1, " ]");
      helpFormatter0.setNewLine("-");
      String string0 = helpFormatter0.defaultNewLine;
      StringBuffer stringBuffer0 = new StringBuffer(122);
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(975);
      Options options0 = new Options();
      Option option0 = new Option("", false, " ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      MockFile mockFile0 = new MockFile("-2`d%");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockFile mockFile2 = new MockFile(mockFile1, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      Locale.lookup(linkedList2, linkedList1);
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) optionGroup0;
      objectArray0[2] = (Object) option0;
      objectArray0[3] = (Object) linkedList1;
      mockPrintWriter0.printf((Locale) null, "", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile2);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 3880, "", "", options0, 2171, 1100, "org.apache.commons.cli.HelpFormatter$OptionComparator", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.defaultLeftPad = 34;
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp(".|DK", ".|DK", options0, "-");
      helpFormatter0.setNewLine("-");
      stringBuffer0.append(74);
      String string0 = helpFormatter0.defaultNewLine;
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 74, "-");
      MockFile mockFile0 = new MockFile("", "--");
      MockFile mockFile1 = new MockFile(mockFile0, ".|DK");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.lookup(linkedList0, linkedList1);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "usage: ", objectArray0);
      helpFormatter0.printHelp(printWriter0, 653, "`TVO", "", options0, 653, 39, ".|DK", false);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      helpFormatter0.createPadding(0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 31, "8>Xlz].a!2%-~G'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getSyntaxPrefix();
      helpFormatter0.getOptPrefix();
      MockFile mockFile0 = new MockFile("s =wUWl.3~[9#5i@f", "mkr");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.format(locale0, "_g}.]$'", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 32, " ", "", options0, (-1159), 0, "W{R]S6P6", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      String string0 = "usage: ";
      mockPrintWriter0.append((CharSequence) "--");
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, "org.apache.commons.cli.HelpFormatter$1", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte)0;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(3);
      Options options0 = new Options();
      helpFormatter1.setNewLine("Mq$)YE;;gl?TjX7");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter1.renderWrappedText(stringBuffer0, 2, 3, "-");
      helpFormatter1.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 1, "c=_o}W", "--", options0, (-864), 1, "arg", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-4317));
      Options options0 = new Options();
      boolean boolean0 = true;
      helpFormatter0.setLongOptPrefix("R03>*uvE");
      helpFormatter0.rtrim("");
      String string0 = "O5f$!+&GdAMc";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("R03>*uvE", "wp", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(975);
      Options options0 = new Options();
      Option option0 = new Option("", false, " ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      options1.helpOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("C8N-(3FR@%89+b%");
      helpFormatter0.getLeftPadding();
      helpFormatter1.findWrapPos("\n", 0, (-1780));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)106;
      helpFormatter0.setWidth(15);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Options options0 = new Options();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.rtrim("l^})l mtyWXM^m$qfC");
      Options options1 = options0.addOption("", "\n", true, " :: ");
      helpFormatter0.printHelp("l^})l mtyWXM^m$qfC", "", options1, "", true);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte)31;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "@qY/Y}xnVT";
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptPrefix();
      MockFile mockFile0 = new MockFile("has already been selected: '", "has already been selected: '");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte) (-27);
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "&|/qrYyrkbl*#-", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1159), "@qY/Y}xnVT", "usage: ", options0, (int) (byte)31, (int) (byte)10, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultDescPad = (-1);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("-", "line.separator", (Options) null, " | ", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "l^})l mtyWXM^m$qfC";
      helpFormatter0.setWidth((byte)49);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (int) (byte)49, "l^})l mtyWXM^m$qfC");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "D{(^w";
      helpFormatter0.setNewLine("");
      helpFormatter0.rtrim("D{(^w");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      String string1 = "szDV\\e5n<";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      helpFormatter0.setWidth(74);
      helpFormatter0.rtrim("szDVe5n<");
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(975);
      Options options0 = new Options();
      Option option0 = new Option("", false, " ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      option0.setValueSeparator('w');
      options1.helpOptions();
      helpFormatter0.defaultOptPrefix = "";
      optionGroup0.setRequired(false);
      helpFormatter0.printHelpoptions2, (String) null);
      helpFormatter0.setNewLine
      String string0 = helpFormatter0.defaultNewLine;
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultArgName;
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1337, "usage: ", options0);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(40, ",", "", options0, "");
      helpFormatter0.setLongOptPrefix("QQru54lJS2!");
      helpFormatter0.getLeftPadding();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-2), options0, (-763), (-763));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(975);
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 74, options0, 74, 3);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-1548));
      Options options0 = new Options();
      helpFormatter0.setLongOptPrefix("org.apache.commons.cli.HelpFormatter$OptionComparator");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.rtrim("(D$8QAY-X");
      helpFormatter0.setDescPadding((-1548));
      options0.addOption("", "usage: ", false, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" :: ", "(D$8QAY-X", options0, "(D$8QAY-X", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      Option option0 = new Option("NO_ARGS_ALLOWED", false, (String) null);
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options2.addOptionGroup(optionGroup0);
      options2.helpOptions();
      optionGroup0.setRequired(false);
      helpFormatter0.defaultArgName = "";
      helpFormatter0.printHelp("   ", "hOZ ", options2, "");
      helpFormatter0.setNewLine("   ");
      String string0 = helpFormatter0.defaultNewLine;
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("]=UwMo`");
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.printHelp(74, ":x", ":x", options0, "[ARG..G.]");
      helpFormatter0.rtrim("&QF");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-2372));
      Options options0 = new Options();
      helpFormatter0.setLongOptPrefix("");
      options0.addOption("r", (String) null, true, ",cp!oYJ?%JP4>");
      Options options1 = new Options();
      Option option0 = new Option("", true, "B}.&: M]2\"kJkdP4");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("r", (String) null, options2, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      String string0 = " ]";
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1901, 0, " ]");
      int int1 = 74;
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer1, 74, options0, 20, 13);
      helpFormatter0.getSyntaxPrefix();
      PrintWriter printWriter0 = null;
      int int2 = (-1310);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-1310), options0, 13, 1901);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-3331));
      Options options0 = new Options();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.rtrim((String) null);
      String string0 = "iBSd7";
      // Undeclared exception!
      try { 
        options0.addOption("&^Rq", "iBSd7", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '&^Rq' contains an illegal character : '&'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "nk", false, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("", true, "arg");
      Options options3 = options2.addOption(option0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 32, "%xxV5-*", "%xxV5-*", options3, 3, 3, "pr- :@M9=v..V^}M{OP");
      Options options4 = new Options();
      Options options5 = options4.addOption("", "arg", true, "_");
      OptionGroup optionGroup1 = new OptionGroup();
      Options options6 = options5.addOptionGroup(optionGroup1);
      helpFormatter0.defaultOptPrefix = "8?67";
      // Undeclared exception!
      try { 
        options6.addOption("9IZ5M0MK+G`}ErE-", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '9IZ5M0MK+G`}ErE-' contains an illegal character : '+'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)49;
      helpFormatter0.defaultLeftPad = 577;
      byteArray0[4] = (byte)106;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.setWidth(15);
      Options options0 = new Options();
      helpFormatter0.setLongOptPrefix("");
      Options options1 = options0.addOption("", "\n", true, " :: ");
      helpFormatter0.printHelp("l^})l mtyWXM^m$qfC", "", options1, "", true);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)106;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.setWidth(15);
      Options options0 = new Options();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.rtrim("l^})l mtyWXM^m$qfC");
      Options options1 = options0.addOption("", "\n", true, " :: ");
      helpFormatter0.printHelp("l^})l mtyWXM^m$qfC", "", options1, "", true);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(975);
      Options options0 = new Options();
      Option option0 = new Option("", false, " ");
      options0.addOption(option0);
      helpFormatter0.setWidth((-1));
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("--");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setWidth(26);
      // Undeclared exception!
      try { 
        helpFormatter2.findWrapPos((String) null, 42, 74);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(975);
      Options options0 = new Options();
      String string0 = "";
      Option option0 = new Option("", false, " ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      options1.helpOptions();
      optionGroup0.setRequired(false);
      OptionGroup optionGroup1 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 53, (-2), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 975;
      helpFormatter0.createPadding(975);
      Options options0 = new Options();
      Option option0 = new Option("", false, " ");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelpoptions
      options0.addOption("", true, "O");
      helpFormatter0.setNewLine("*sEQvL-");
      helpFormatter0.printHelp("cmdLineSyntax not provided", options1);
      helpFormatter0.getOptionComparator();
      helpFormatter0.setArgName("usage: ");
      helpFormatter0.setWidth((-2));
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("-", "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.rtrim("l^})l mtyWXM^m$qfC");
      Options options1 = options0.addOption("", "\n", true, " :: ");
      helpFormatter0.printHelp("l^})l mtyWXM^m$qfC", "", options1, "", true);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 30;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      String string0 = helpFormatter0.defaultNewLine;
      helpFormatter0.setOptPrefix("c9jQ7 NxH|E5Kf#3c");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      int int0 = 975;
      helpFormatter0.createPadding(975);
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ";
      OptionGroup optionGroup0 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("'");
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-3300), "line.separator", ")R4#91b", options2, ")R4#91b");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("1H`Kr`m1w", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(74);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(false);
      helpFormatter0.setNewLine("                                                                          ");
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      helpFormatter0.setArgName("line.separator");
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.printHelp("q()_7j:Mr", ",l(^kmh+hfhc%`$>'", options0, "<", false);
      String string0 = "pFcpZQ`";
      // Undeclared exception!
      helpFormatter0.printHelp(0, "pFcpZQ`", "s|ojVNdJJkP&&[", options0, "pFcpZQ`");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(975);
      Options options0 = new Options();
      options0.hasOption("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("");
      helpFormatter1.printHelparg", options0, "", true);
      helpFormatter0.printHelp(74, "K]v6po{2U8", "line.separator", options0, "   ");
      helpFormatter1.rtrim("arg");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp(" ", " :: ", options0, "\"^$Y8,|]s{<");
      helpFormatter0.setNewLine("");
      helpFormatter1.printHelp(" :: ", options0);
      helpFormatter1.getOptionComparator();
      helpFormatter0.printHelp(74, "Wc.eiVfP&pO", "Wc.eiVfP&pO", options0, "line.separator", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "line.separator";
      objectArray0[1] = (Object) "\"^$Y8,|]s{<";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      objectArray0[4] = (Object) "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      objectArray0[5] = (Object) "t";
      objectArray0[6] = (Object) "t";
      objectArray0[7] = (Object) "";
      mockPrintWriter0.format((Locale) null, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1110), "\"^$Y8,|]s{<");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("a8M?%VOc O5/ G`p/Rq");
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("eKp4E{:]W6&", "' contains an illegal character : '", (Options) null, "a8M?%VOc O5/ G`p/Rq");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 74, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(41);
      helpFormatter0.setWidth(74);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setArgName("--");
      helpFormatter2.setWidth((-2118));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Locale locale0 = Locale.KOREA;
      mockPrintWriter0.printf(locale0, "M\"vGzxL4", (Object[]) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.findWrapPos("y;gFU:*J_z^Q~#c", (-240), 1768);
      String string0 = "Ww0_C:*V[Y%FC\\fR";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 3, "Ww0_C:*V[Y%FC\fR");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("org.apache.commons.cli.ParseException", options1, true);
      helpFormatter0.getOptPrefix();
      StringWriter stringWriter0 = new StringWriter(1);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-5117), options1, (-5117), (-5117));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(975);
      Options options0 = new Options();
      Option option0 = new Option("", false, " ");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "   ";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer
      int int0 = (-87);
      int int1 = 58;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, (-87), 58, "   ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ";
      Options options0 = new Options();
      options0.hasOption("_omVcB|->N),*4C");
      helpFormatter0.setArgName("line.separator");
      String string1 = "";
      String string2 = "Jy\\u8.3Wef6Bb BoL";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", string2, options0, "_omVcB|->N),*4C", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2233, "", "fobj|", (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("_omVcB|->N),*4C");
      helpFormatter0.setArgName("line.separator");
      helpFormatter0.printHelp(" ", " ", options0, " ", true);
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, "NO_ARGS_ALLOWED");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "n!ZCLI.P)D";
      Options options0 = new Options();
      options0.addOption("0", false, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      String string1 = "\"SaJC/2G1$.$#";
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">");
      PrintWriter printWriter0 = mockPrintWriter0.append('#');
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "0");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.defaultWidth = 74;
      helpFormatter0.setLongOptPrefix("cmdLineSyntax not provided");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Locale locale0 = Locale.KOREA;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, " | ", (Object[]) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 74, "arg");
      StringBuffer stringBuffer0 = new StringBuffer("org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.renderWrappedText(stringBuffer0, 32, 4398, "S~;E-");
      helpFormatter0.findWrapPos(":jDx<j(_%~,)5", 555, 4398);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 74, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-780), 4398, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.setArgName("line.separator");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 31, 31, "line.separator");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-564));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1785, "a8M?%VOc O5/ G`p/Rq", "", (Options) null, "a8M?%VOc O5/ G`p/Rq");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultSyntaxPrefix = "";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      int int0 = 3115;
      helpFormatter0.printUsage(printWriter0, 3115, "' was specified but an option from this group ");
      String string1 = "";
      String string2 = "A CloneNotSupportedException was thrown: ";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      char[] charArray0 = new char[3];
      charArray0[0] = '9';
      charArray0[1] = 'F';
      charArray0[2] = 'r';
      mockPrintWriter0.print(charArray0);
      options1.addOption("", false, "");
      options1.addOption("", false, "");
      String string3 = "[";
      Option option0 = null;
      try {
        option0 = new Option("-", "[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter0.getOptionComparator();
      String string0 = "t";
      String string1 = "[ Options: [ short ";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "", (Options) null, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("_omVcB|->N),*4C");
      helpFormatter0.setArgName("line.separator");
      helpFormatter0.printHelp(" ", " ", options0, " ", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(28, (String) null, " ", options0, "line.separator");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(975);
      Options options0 = new Options();
      String string0 = "";
      Option option0 = new Option("", false, " ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options1.helpOptions();
      optionGroup0.setRequired(false);
      helpFormatter0.printHelpoptions2, (String) null);
      helpFormatter0.setNewLine
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      int int0 = 1568;
      helpFormatter0.defaultDescPad = 1568;
      helpFormatter0.defaultOptPrefix = "";
      String string1 = null;
      Options options0 = new Options();
      String string2 = "arg";
      options0.hasShortOption("arg");
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      int int1 = 10;
      char[] charArray0 = new char[0];
      helpFormatter0.defaultOptPrefix = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", (String) null, options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "d].DrBU";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("usage: ", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-528), "'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 0;
      int int0 = (-1);
      helpFormatter0.defaultLeftPad = (-1);
      helpFormatter0.createPadding(1540);
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = false;
      Options options1 = options0.addOption("arg", "\n", false, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options2.addOption("-", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      int int0 = 0;
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.rtrim("[ARG...]");
      StringBuffer stringBuffer0 = new StringBuffer();
      int int1 = 0;
      Options options0 = new Options();
      helpFormatter0.setOptionComparator((Comparator) null);
      // Undeclared exception!
      try { 
        options0.addOption("--", "5xMoB", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("i(6Q'ZlV){T:G5'h699", "i(6Q'ZlV){T:G5'h699", options0, "i(6Q'ZlV){T:G5'h699", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("NxDKq?h(y");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "i(6Q'ZlV){T:G5'h699";
      objectArray0[2] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) "NxDKq?h(y";
      PrintWriter printWriter0 = mockPrintWriter0.printf("arg", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      mockPrintWriter1.append('[');
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, (-1), 42, "`P~-:?");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      int int0 = (-1626);
      helpFormatter0.setWidth((-1626));
      String string0 = "\"*$D9h'{9%9S8";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("usage: ", "usage: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // usage: 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("org.apache.commons.cli.ParseException", options1, true);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      int int0 = 74;
      String string0 = "S*\"?sF>t}";
      String string1 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options1.addOption("usage: ", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "cYBw%'_{WbS0Mo";
      Options options0 = new Options();
      String string1 = "";
      boolean boolean0 = false;
      helpFormatter0.setLongOptSeparator("");
      // Undeclared exception!
      try { 
        options0.addOption("\n", "", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "%QL+-0Ji\\Adzj~X{)su";
      Options options0 = new Options();
      helpFormatter0.printHelp("%QL+-0JiAdzj~X{)su", options0, false);
      String string1 = "O";
      options0.helpOptions();
      helpFormatter0.setArgName("O");
      String string2 = "";
      helpFormatter0.setLongOptPrefix("");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("%QL+-0JiAdzj~X{)su", (-1602), (-1602));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 10;
      helpFormatter0.setDescPadding(10);
      String string0 = null;
      Options options0 = new Options();
      String string1 = "lb";
      options0.addOption("lb", "usage: ", false, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("usage: ", "usage: ", true, "lb");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "   ");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "l^})l mtyWXM^m$qfC";
      String string1 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("--", "\n", true, " :: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
