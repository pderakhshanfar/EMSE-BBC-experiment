/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 05:20:56 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.CharBuffer;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-1333);
      helpFormatter0.getNewLine();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      options0.helpOptions();
      options0.getOption((String) null);
      Option option0 = new Option("", "usage: ");
      Options options1 = options0.addOption(option0);
      options1.getMatchingOptions("Dze8\"dB)0{");
      Options options2 = options1.addOption("arg", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1333), options2, 3195, 3195);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('C');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Locale locale0 = Locale.JAPANESE;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "usage: ", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-2501), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Option option0 = new Option("arg", false, "");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "-", false, "-");
      options2.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("org.apache.commons.cli.OptionValidator", "", options3, "", false);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getSyntaxPrefix();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      String string0 = "UNbdws]f";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-3739), "usage: ", "UNbdws]f", (Options) null, " ", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.setDescPadding((-911));
      optionGroup0.toString();
      options1.getOptions();
      optionGroup0.toString();
      Option option0 = new Option((String) null, "");
      optionGroup0.addOption(option0);
      options0.addOption((String) null, false, (String) null);
      options1.getOptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("usage: ", options1, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      options0.hasShortOption("usage: ");
      options0.getOption("arg");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "3\"H@QNv2l8+1=W) ", "[", options0, "[");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      Options options1 = options0.addOption("NO_ARGS_ALLOWED", false, "--");
      Option option0 = new Option("NO_ARGS_ALLOWED", false, "arg");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "NO_ARGS_ALLOWED", options3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      mockPrintWriter0.write("B5MXew~_Jf6`N!OI#:a");
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "The addValue method is not intended for klient use. Subclasses should use the addValueForProcessing method instead. ");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 1863, options0, 1863, 1863);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Object object0 = new Object();
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      File file0 = MockFile.createTempFile("%V^5kT(f", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1403, "' was specified but an option from this group ", "' was specified but an option from this group ", options0, 2342, 2342, (String) null, false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 835, "#5AFs", options0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(":-Ql,F%l9@6");
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = (-2126);
      String string0 = "{m]^3\\oEbEn9O_mF";
      options0.hasOption("");
      int int0 = 1094;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1094, ">qB7o4{sIc", "A}'L_Nj'<h?Hh8o^c?U", options0, " ", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "The option '";
      helpFormatter0.printHelp("The option '", options0);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "The option '", "C?e{p/$Zt8;Gz_1Zl:", options0, ">/Jo", false);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      boolean boolean0 = true;
      options0.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-4516), "hlB5>|ICh?q?sBZ=G");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, (String) null);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "", options1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = (-1135);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("3J?}", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, (-850), "' contains an illegal character : '");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(19, "-", "]", (Options) null, "0rb(2C|ZnEKl*", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "'", "", options0, (-1), 72, "^Diw*M ;A;w$OS", true);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 20, "");
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      int int0 = 45;
      int int1 = (-1540);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 45, ":-Ql,F%l9@6", (String) null, options0, 45, (-1540), ";EqHQ", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "#ix:8iK\n{9OP");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.setLongOptSeparator("#ix:8iK\n{9OP");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getWidth();
      helpFormatter0.findWrapPos("#ix:8iK\n{9OP", 60, 60);
      helpFormatter0.getOptionComparator();
      helpFormatter0.setOptPrefix(",");
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      StringWriter stringWriter0 = new StringWriter(3);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "arg", 64, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)32;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UpnY");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 831, options0, 831, 831);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
      helpFormatter0.printHelp("UpnY", "UpnY", options0, "?cm5~jKV>", false);
      helpFormatter0.printHelp((int) (byte)32, "\"xpXaN(4.J9S_Ul<.U", "\"xpXaN(4.J9S_Ul<.U", options0, "UpnY", false);
      helpFormatter0.setDescPadding(10);
      helpFormatter0.renderOptions((StringBuffer) null, (byte)32, options0, 74, 1240);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(":-Ql,F%l9@6");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 33, "GyiyQe(KQoA$", "", options0, 1812, 1, "");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\n");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, 3, (Options) null, 3, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      helpFormatter0.printHelp(" :: ", ".w,PVE", options0, "~Wqu8Q");
      options0.addOption("", true, "arg");
      options0.addOption("arg", true, " ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 10, "arg", options0);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      mockPrintWriter0.println(true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 32, 32, "A CloneNotSupportedException was thrown: ");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      options0.addOption("arg", true, " ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 10, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 41, "o$|]JJMs%g|9", options0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("^/]TBBt14qCb@cW", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("M6tR[(d]?Ej");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 458, "M6tR[(d]?Ej");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption((String) null, "*3_{GCK~FW9CUem?", true, "<5b6H{{r<");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 458, "M6tR[(d]?Ej", "M6tR[(d]?Ej", options2, (-2130), 49, "!:ixbmQo9'&)}*<|Z", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.defaultWidth;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[T!KhbWig>3mI`q", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "[T!KhbWig>3mI`q";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "[T!KhbWig>3mI`q";
      objectArray0[6] = (Object) mockFileOutputStream0;
      objectArray0[7] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(" ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 74, "]L", "1DHeY'q8^", (Options) null, 100, 74, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 58, "_b61wn/*J\"", "", (Options) null, 58, 58, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", " ");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.findWrapPos(" K", 3, (-2));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 337, "RwPH", "RwPH", (Options) null, (-2391), 2, "+w3rND");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 10, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(74, "_YlPK}276xk", "HD%d_`CZs~!9]e", options0, "HD%d_`CZs~!9]e", false);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 13, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 58, "Mb\"", "Mb\"", (Options) null, 13, 58, "On+`u3a7rUy571%y", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "sh";
      int int0 = 31;
      Options options0 = null;
      helpFormatter0.setSyntaxPrefix("sh");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(31, "sh", "sh", (Options) null, "Illegal option name '");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("+q<ts?6Fi}");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "+q<ts?6Fi}", false, " ");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, (String) null, "usage: ", options1, 1097, 3, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(":-Ql,F%l9@6");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 0, 1, "' contains an illegal character : '");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      Option option0 = new Option("", "");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "Cannot add value, list full.", "Cannot add value, list full.", options1, "[ Options: [ short ", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "y\\uWX98[0f$F";
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 58, "arg", string0, options0, 74, 1453, "ir.8HVZwN^TnF9", true);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(":-Ql,F%l9@6");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3270, 45, "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 1374, 3, "-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(":-Ql,F%l9@6");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "--", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, (-3830), 34, "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("f^ly'IJ");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "f^ly'IJ", false, "/@/%`-|]z8#yBTv");
      helpFormatter0.printHelp("f^ly'IJ", "f^ly'IJ", options1, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Z>_;JY<\nAU87&?M9IF");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1417), "", "f^ly'IJ", options0, (-1417), (-1417), (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "G}),ZkW,\"4btS";
      Options options0 = new Options();
      Option option0 = new Option("", " ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      String string1 = "org.apache.commons.cli.Options";
      helpFormatter0.printHelp("G}),ZkW,\"4btS", "G}),ZkW,\"4btS", options2, "org.apache.commons.cli.Options", true);
      helpFormatter0.getLongOptSeparator();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      int int0 = 0;
      String string2 = "k=kg\\,a!sZ=;o4x";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2, "", "", options0, 0, 287, "' was specified but an option from this group ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(":-Ql,F%l9@6");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "--", ":-Ql,F%l9@6", options0, 1, 5, "", false);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = 74;
      String string0 = "4";
      helpFormatter0.printHelp("usage: ", "4", options0, "4", true);
      helpFormatter0.getLongOptSeparator();
      int int0 = (-324);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-324), " ", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(":-Ql,F%l9@6");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "usage: ", ":-Ql,F%l9@6", options0, 64, 74, ")", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.defaultLeftPad;
      String string0 = " | ";
      int int1 = 1;
      helpFormatter0.findWrapPos(" | ", 1, 15);
      String string1 = "";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(8, "", "b3To$z}CsE", (Options) null, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 6, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(":-Ql,F%l9@6");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 2167, " ");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("f^y'IJ");
      Options options0 = new Options();
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.toString();
      helpFormatter1.setWidth(337);
      helpFormatter1.printHelp(74, ")@ml", "usage: ", options0, "");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = 74;
      helpFormatter0.printHelp("usage: ", "4", options0, "4", true);
      Options options1 = options0.addOption("arg", "arg", true, " ");
      helpFormatter0.printHelp("4", "4", options1, "4");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Theoption '");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("4", (-1), (-160));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = 74;
      helpFormatter0.printHelp("usage: ", "4", options0, "4", true);
      helpFormatter0.getLongOptSeparator();
      int int0 = (-324);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      int int1 = 0;
      int int2 = 2;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-324), "4", "", options0, 0, 2, "k=kg,a!sZ=;o4x");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "Z>_;JY<\nAU87&?M9IF");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("Z>_;JY<\nAU87&?M9IF", "Z>_;JY<\nAU87&?M9IF", options2, "Z>_;JY<\nAU87&?M9IF", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Z>_;JY<\nAU87&?M9IF");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-3728), "f\"G-e3u1!)fT3|Xu");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      int int0 = helpFormatter0.defaultLeftPad;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("\n", (-1712), (-2430));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Object object0 = new Object();
      File file0 = MockFile.createTempFile("7PqxVLSAj<r~xQ^}", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      Object object1 = new Object();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "BP{_`uf*^7<b.j");
      helpFormatter0.setOptPrefix("");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) evoSuiteFile0;
      objectArray0[1] = (Object) file0;
      Options options0 = new Options();
      options0.addOption("", "7PqxVLSAj<r~xQ^}", false, ">");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "-", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Object object0 = new Object();
      File file0 = MockFile.createTempFile("7PqxVLSAj<r~xQ^}", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      file0.getAbsoluteFile();
      Object object1 = new Object();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "BP{_`uf*^7<b.j");
      helpFormatter0.setOptPrefix("");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) evoSuiteFile0;
      objectArray0[1] = (Object) file0;
      Options options0 = new Options();
      Option option0 = new Option("", false, "0[09C6/H-#s");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("arg", false, "-");
      helpFormatter0.printHelp("BP{_`uf*^7<b.j", "", options3, "cmdLineSyntax not provided", true);
      helpFormatter0.getLongOptSeparator();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('#');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "LL{`ES8un= {v@>\"", " ", options0, (-2), 1354, "'", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Object object0 = new Object();
      File file0 = MockFile.createTempFile("7PqxVLSAj<r~xQ^}", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      Object object1 = new Object();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "BP{_`uf*^7<b.j");
      helpFormatter0.setOptPrefix("");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) evoSuiteFile0;
      objectArray0[1] = (Object) file0;
      Options options0 = new Options();
      String string0 = "";
      options0.addOption("", "", true, "[");
      helpFormatter0.printHelp("A CloneNotSupportedException was thrown: ", "", options0, "[");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Object object0 = new Object();
      MockFile.createTempFile("7PqxVLSAj<r~xQ^}", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, "<");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("usage: ", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Object object0 = new Object();
      File file0 = MockFile.createTempFile("7PqxVLSAj<r~xQ^}", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      Object object1 = new Object();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "BP{_`uf*^7<b.j");
      helpFormatter0.setOptPrefix("");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) evoSuiteFile0;
      objectArray0[1] = (Object) file0;
      String string0 = "";
      Options options0 = new Options();
      Option option0 = new Option("", false, "0s[09C6/H-#s");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.defaultWidth = (-2);
      Options options3 = options2.addOption("arg", true, "-");
      String string1 = "k*gRggHm-U<:\\N";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("BP{_`uf*^7<b.j", "", options3, "k*gRggHm-U<:N", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding((-1019));
      helpFormatter0.defaultDescPad = 74;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("usage: ", "4", options0, "4", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.defaultLeftPad;
      helpFormatter0.findWrapPos("\n", 1, (-3514));
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 1, options0, 41, 41);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("f^ly'IJ");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "f^ly'IJ", false, "/@/%`-|]z8#yBTv");
      helpFormatter0.printHelp("f^ly'IJ", "f^ly'IJ", options1, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Z>_;JY<\nAU87&?M9IF");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("f\"G-e3u1!)fT3|Xu", 1, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("Z>_;JY<\nAU87&?M9IF", "Z>_;JY<\nAU87&?M9IF", options0, "' contains an illegal character : '");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Object object0 = new Object();
      File file0 = MockFile.createTempFile("arg", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      int int0 = helpFormatter0.defaultLeftPad;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 2, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Object object0 = new Object();
      File file0 = MockFile.createTempFile("7PqxVLSAj<r~xQ^}", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      Object object1 = new Object();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "BP{_`uf*^7<b.j");
      helpFormatter0.setOptPrefix("");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) evoSuiteFile0;
      objectArray0[1] = (Object) file0;
      Options options0 = new Options();
      Option option0 = new Option("", false, "0s[09C6/H-#s");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("arg", true, "-");
      helpFormatter0.printHelp("BP{_`uf*^7<b.j", "", options3, "k*gRggHm-U<:N", true);
      FileSystemHandling.createFolder(evoSuiteFile0);
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1332), "", "u/>04otq{qUuuCi", options1, (-1), (-1), "k*gRggHm-U<:N");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getLongOptSeparator();
      int int0 = (-349);
      String string0 = "line.separator";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-349), "line.separator", "", options0, "line.separator");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption((String) null, true, "-");
      Options options3 = options2.addOption("", "--", true, "[ Options: [ short ");
      Option option0 = new Option("", (String) null, false, "arg");
      Options options4 = options3.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", "", options4, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Z>_;JY<\\nAU87&?M9IF";
      PrintWriter printWriter0 = null;
      int int0 = 102;
      int int1 = 21;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 102, 21, "Z>_;JY<\nAU87&?M9IF");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = 9;
      helpFormatter0.printHelp("org.apache.commons.cli.OptionGroup", "4", options0, "4", false);
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-324), "", (String) null, options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, (String) null);
      options1.helpOptions();
      options1.hasOption("arg");
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (String) null, options1, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.findWrapPos("\n", 3, (-2819));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-1886), options0, (-1886), 201);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Z>_;JY<\nAU87&?M9IF");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 78, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.addOption("", "org.apache.commons.cli.OptionGroup", false, "\n");
      helpFormatter0.printHelp("L#<Ip<", options0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Object object0 = new Object();
      File file0 = MockFile.createTempFile("7PqxVLSAj<r~xQ^}", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('k');
      printWriter0.println((float) 3);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      mockPrintWriter1.print(74);
      Object object1 = new Object();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "BP{_`uf*^7<b.j");
      helpFormatter0.setOptPrefix("");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) evoSuiteFile0;
      objectArray0[1] = (Object) file0;
      objectArray0[2] = (Object) mockPrintWriter0;
      Options options0 = new Options();
      Option option0 = new Option("", false, "0[09C6/H-#s");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("arg", true, "-");
      helpFormatter0.printHelp("BP{_`uf*^7<b.j", "", options3, "k*gRggHm-U<:N", true);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("hY");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 53, "\"8E\"U");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 13, "hY");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 3, options0, (-14), (-3888));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, (String) null);
      helpFormatter0.printHelp("4", (String) null, options1, "", true);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(10);
      StringBuffer stringBuffer1 = stringBuffer0.append(0.0);
      StringBuffer stringBuffer2 = new StringBuffer((CharSequence) "\n");
      stringBuffer1.append((CharSequence) stringBuffer2);
      helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "z");
      stringBuffer1.codePoints();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = helpFormatter0.defaultLeftPad;
      helpFormatter1.createPadding(3);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(1227);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getWidth();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "arg", false, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp("", options2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "m]XA");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options1, 2966, 1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("03H5*L");
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "03H5*L";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "03H5*L";
      mockPrintWriter0.printf(locale0, "arg", objectArray0);
      Object[] objectArray1 = new Object[6];
      Object object0 = new Object();
      mockPrintWriter0.print(3);
      objectArray1[1] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      objectArray1[2] = object1;
      objectArray1[3] = (Object) mockPrintWriter0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ">");
      objectArray1[4] = (Object) helpFormatter0;
      helpFormatter0.setOptPrefix("");
      objectArray1[5] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray1);
      helpFormatter0.printWrapped(printWriter0, 44, 582, "TL]U");
      helpFormatter0.getOptPrefix();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      StringBuffer stringBuffer0 = new StringBuffer(1726);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 44, options1, 2239, 1132);
      helpFormatter0.renderWrappedText(stringBuffer1, 44, 74, ")BlYGw=scbm1Pusf");
      assertEquals("", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "*-OI";
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-366), (-2339), " | ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1744);
      String string0 = "vDiL|YEH";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(749, "YxMxdo*}", "vDiL|YEH", (Options) null, "YxMxdo*}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 8, (-4), "--");
      helpFormatter0.getOptPrefix();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setDescPadding(11);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.rtrim("/XW*;uoiF'xO ))@");
      assertEquals(11, helpFormatter0.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = helpFormatter0.findWrapPos("", 0, 0);
      assertEquals((-1), int0);
      
      helpFormatter0.getOptionComparator();
      String string0 = helpFormatter0.rtrim((String) null);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Object object0 = new Object();
      File file0 = MockFile.createTempFile("7PqxVLSAj<r~xQ^}", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('k');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      mockPrintWriter1.print(74);
      Object object1 = new Object();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "BP{_`uf*^7<b.j");
      helpFormatter0.setOptPrefix("");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) evoSuiteFile0;
      objectArray0[1] = (Object) file0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) "";
      mockPrintWriter1.format("-", objectArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 582, 582, "");
      helpFormatter0.getOptPrefix();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals("", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      stringBuffer0.append(0.0);
      StringBuffer stringBuffer1 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer1, 700, 700, "");
      stringBuffer0.codePoints();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = helpFormatter1.defaultLeftPad;
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.findWrapPos("usage: ", (-2990), 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.findWrapPos("'sn!", 1, 168);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals((-1), int0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setSyntaxPrefix((String) null);
      Options options0 = new Options();
      options0.helpOptions();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "-");
      helpFormatter0.printHelp("{8VjW!pC^0*s_d", "NO_ARGS_ALLOWED", options1, "", false);
      helpFormatter0.setLongOptSeparator("{8VjW!pC^0*s_d");
      helpFormatter0.printHelp("{8VjW!pC^0*s_d", "NO_ARGS_ALLOWED", options1, "", false);
      helpFormatter0.setLongOptSeparator("NO_ARGS_ALLOWED");
      assertEquals("NO_ARGS_ALLOWED", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1991), (String) null, (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (String) null, options1, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getSyntaxPrefix();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLongOptPrefix("oq|~dZQO");
      StringWriter stringWriter0 = new StringWriter(74);
      stringWriter0.append('2');
      stringWriter0.append((CharSequence) "oq|~dZQO");
      int int0 = helpFormatter2.getDescPadding();
      assertEquals("oq|~dZQO", helpFormatter2.getLongOptPrefix());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "-");
      helpFormatter0.printHelp("{8VjW!pC^0*s_d", "NO_ARGS_ALLOWED", options1, "", true);
      String string0 = helpFormatter0.getLongOptSeparator();
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", string0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix(" ");
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = 421;
      helpFormatter0.printHelp("usage: ", options0, false);
      assertEquals(" ", helpFormatter0.getSyntaxPrefix());
      
      helpFormatter0.setSyntaxPrefix("--");
      String string0 = helpFormatter0.getLongOptPrefix();
      assertEquals("--", string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-2075));
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("> ", (Options) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("03H5*L");
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "03H5*L";
      helpFormatter0.setOptionComparator((Comparator) null);
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "03H5*L";
      mockPrintWriter0.printf(locale0, "arg", objectArray0);
      Object[] objectArray1 = new Object[6];
      Object object0 = new Object();
      mockPrintWriter0.print(3);
      objectArray1[0] = object0;
      objectArray1[1] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      objectArray1[2] = object1;
      objectArray1[3] = (Object) mockPrintWriter0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ">");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      objectArray1[4] = (Object) helpFormatter0;
      helpFormatter0.setOptPrefix("");
      objectArray1[5] = (Object) helpFormatter0;
      mockPrintWriter0.format("", objectArray1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(">", "O@&iw:Sr+i?| Y", (Options) null, "line.separator", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("03H5*L");
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "03H5*L";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "03H5*L";
      mockPrintWriter0.printf(locale0, "arg", objectArray0);
      Object[] objectArray1 = new Object[6];
      Object object0 = new Object();
      mockPrintWriter0.print(3);
      objectArray1[0] = object0;
      objectArray1[1] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      objectArray1[2] = object1;
      objectArray1[3] = (Object) mockPrintWriter0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ">");
      objectArray1[4] = (Object) helpFormatter0;
      helpFormatter0.setOptPrefix("");
      objectArray1[5] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray1);
      helpFormatter0.printWrapped(printWriter0, 44, 582, "TL]U");
      helpFormatter0.getOptPrefix();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals("", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setNewLine("");
      helpFormatter0.getLongOptPrefix();
      String string1 = "org.apache.commons.cli.HelpFormatter$1";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("--", "org.apache.commons.cli.HelpFormatter$1");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // org.apache.commons.cli.HelpFormatter$1
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setLeftPadding(0);
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("usage: ", "arg", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
      StringWriter stringWriter0 = new StringWriter();
      char char0 = 'y';
      stringWriter0.append('y');
      CharBuffer.allocate(1);
      int int0 = 5715;
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "usage: ", (-4232), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "cmdLineSyntax not provided";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("cmdLineSyntax not provided", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        MockFile.createTempFile("\n", "arg", (File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "'";
      helpFormatter0.defaultLongOptPrefix = "'";
      helpFormatter0.getWidth();
      MockFile mockFile0 = new MockFile("'");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "\n");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setSyntaxPrefix((String) null);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setArgName((String) null);
      helpFormatter0.setArgName((String) null);
      OutputStream outputStream0 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = new Locale("o]i6E<Mi<yV5n\"-C", "-", " ");
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", (Object[]) null);
      Options options0 = new Options();
      helpFormatter0.printOptions(printWriter0, 0, options0, 0, 0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-2217);
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 74, (-2217), "--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 1, 1, "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setNewLine("RA~nkD}=2S1");
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      boolean boolean0 = true;
      helpFormatter0.defaultArgName = "";
      // Undeclared exception!
      try { 
        options0.addOption("--", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("'sn!", 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("{ZeNI2sD 13");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, "{ZeNI2sD 13");
      assertEquals(3, helpFormatter0.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 10;
      StringBuffer stringBuffer0 = new StringBuffer(10);
      stringBuffer0.append(0.0);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "z");
      stringBuffer1.codePoints();
      int int1 = (-2);
      char char0 = '-';
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      stringBuffer0.insert(1, charArray0);
      stringBuffer0.insert(1, (-1150));
      // Undeclared exception!
      try { 
        stringBuffer0.insert((-1150), "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1150
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1564;
      helpFormatter0.defaultLeftPad = 1564;
      PrintWriter printWriter0 = null;
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-823), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "-");
      helpFormatter0.printHelp("{8VjW!pC^0*s_d", "NO_ARGS_ALLOWED", options1, "", false);
      String string0 = helpFormatter0.getLongOptSeparator();
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("03H5*L");
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "03H5*L";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "03H5*L";
      mockPrintWriter0.printf(locale0, "arg", objectArray0);
      Object[] objectArray1 = new Object[6];
      Object object0 = new Object();
      objectArray1[0] = object0;
      objectArray1[1] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      objectArray1[2] = object1;
      objectArray1[3] = (Object) mockPrintWriter0;
      objectArray1[4] = (Object) helpFormatter0;
      helpFormatter0.setOptPrefix("");
      objectArray1[5] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray1);
      helpFormatter0.printWrapped(printWriter0, 44, 582, "TL]U");
      helpFormatter0.getOptPrefix();
      assertEquals("", helpFormatter0.getOptPrefix());
  }
}
