/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 18:16:36 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.Locale;
import java.util.UnknownFormatConversionException;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      helpFormatter0.setWidth((-2687));
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("Q8R=h7,)|+tK");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[ARG...]", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "xu";
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printHelp(1, "\n", "\n", options0, " ", true);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append(']');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      int int0 = 0;
      char[] charArray0 = new char[7];
      charArray0[0] = ']';
      charArray0[1] = ']';
      charArray0[2] = ']';
      charArray0[3] = ']';
      charArray0[4] = ']';
      charArray0[5] = ']';
      charArray0[6] = ']';
      stringWriter0.write(charArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      stringWriter1.append(']');
      Option option0 = new Option("arg", "n1Ox m", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "j<0'5 F", "sUpfR1$Gm", options1, 0, 0, "'");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setNewLine((String) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      String string0 = "";
      helpFormatter0.setLongOptSeparator("");
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getWidth();
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("-", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup1.setRequired(true);
      helpFormatter0.printHelp(2396, "9}l0kKW.OJe", "9}l0kKW.OJe", options1, "hT=X'", true);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 9, "5.>5-?$");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("", "P1mz");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 93, "PzZO", (String) null, options0, (-882), 93, "F*;uPOq2K=3S>", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(117, "--", "--", (Options) null, "org.apache.commons.cli.OptionGroup");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "";
      Option option0 = new Option("", "\n", true, "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.addOption("arg", true, "");
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, (-4771), options2, 10, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "y60}<`_*@~_uG,(i");
      helpFormatter0.setOptPrefix("y60}<`_*@~_uG,(i");
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      Comparator<Option> comparator1 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator1;
      helpFormatter0.setWidth((-1));
      helpFormatter0.setOptPrefix("y60}<`_*@~_uG,(i");
      helpFormatter0.getLeftPadding();
      helpFormatter0.defaultSyntaxPrefix = "y60}<`_*@~_uG,(i";
      helpFormatter0.findWrapPos("y60}<`_*@~_uG,(i", 1, 32);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.getWidth();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.getDescPadding();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "liN, @jY_$";
      String string1 = "4S_M8czr0/YclsJ";
      Options options0 = new Options();
      String string2 = "3J";
      Options options1 = options0.addOption("3J", "4S_M8czr0/YclsJ", true, "usage: ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      options0.hasLongOption("usage: ");
      Options options2 = options1.addOption((String) null, false, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("liN, @jY_$", "4S_M8czr0/YclsJ", options2, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "=Q4o7";
      helpFormatter0.createPadding(31);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "=Q4o7", options0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Aan692]MTV");
      PrintWriter printWriter0 = mockPrintWriter0.append('p');
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "9zZO", "Aan692]MTV", options0, (-1174), (-1), "9zZO", true);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      Option option0 = new Option((String) null, " ", true, "\n");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), "", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      options1.getOptionGroups();
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      mockPrintWriter0.print("2~tfNfZR`j|gb_x&B\":");
      options0.hasLongOption("2~tfNfZR`j|gb_x&B\":");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2980, "\n", "arg", options0, 74, 3, "", false);
      helpFormatter0.printHelp(10, "usage: ", "arg", options0, "-", false);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "{Wj2lp,oJLps*JFU";
      Options options0 = new Options();
      options0.hasLongOption("");
      Options options1 = options0.addOption((String) null, "H[P-{?0$", false, "+0~w`lyr(0u");
      helpFormatter0.printHelp("{Wj2lp,oJLps*JFU", "{Wj2lp,oJLps*JFU", options1, (String) null);
      helpFormatter0.createPadding(34);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.findWrapPos("--", 34, 34);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.print((-1543.6141F));
      Options options2 = new Options();
      options2.getOptionGroups();
      mockPrintWriter0.print("\n");
      options2.getOptions();
      options2.hasLongOption("--");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 34, "--", "                                  ", options2, 34, 34, "--", false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1025, "&6u;[J");
      int int0 = (-4058);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-4058));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(":<(");
      Locale locale0 = Locale.US;
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 680, ":<(", "<", options0, (-1053), 13, "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[ option: ");
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "q!\n5M2T'9T";
      Object object0 = new Object();
      objectArray0[1] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      helpFormatter0.printUsage(printWriter0, 70, "+pV>f|/aEb61");
      helpFormatter0.printHelp(printWriter0, 70, "[ option: ", "+pV>f|/aEb61", options0, 70, 70, "[ option: ", false);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      boolean boolean0 = true;
      int int0 = 58;
      // Undeclared exception!
      helpFormatter1.printHelp(0, "-", "org.apache.commons.cli.ParseException", options0, "arg");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      helpFormatter1.renderWrappedText(stringBuffer0, 113, 113, ".B<");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      helpFormatter1.printUsage(printWriter0, 63, "", options0);
      helpFormatter1.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-36);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setLeftPadding((-3258));
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "\n", "\n", options0, " ", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.defaultWidth = 32;
      StringBuffer stringBuffer0 = new StringBuffer(1);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", false, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.addOption("", false, (String) null);
      helpFormatter0.printHelp(23, " ", "usage: ", options1, "' was specified but an option from this group ", false);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.setNewLine((String) null);
      stringBuffer0.ensureCapacity(0);
      helpFormatter0.renderWrappedText(stringBuffer0, 63, (-1650), ")>_Qq~7\"I5*sTT5$");
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      Option option0 = new Option("", "arg");
      option0.setArgs(74);
      option0.toString();
      Options options1 = options0.addOption(option0);
      options0.addOption("617", "cs2=cM3.]jqvILns`", false, "-");
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), "[ option:  [ARG...] :: arg ]", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(3);
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(117);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) optionGroup0;
      objectArray0[2] = (Object) " | ";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) byteArrayOutputStream0;
      PrintStream printStream0 = mockPrintStream0.format(" | ", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, 1, " | ");
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions((PrintWriter) null, 1, options0, (-1), 74);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      Options options0 = new Options();
      options0.getOption("yhT-6`\"qhqr_H~i/;HI");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 150, "usage: ", "--", options0, 745, 74, "-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = "org.apache.commons.cli.ParseException";
      helpFormatter0.renderWrappedText(stringBuffer0, 1557, 2318, "org.apache.commons.cli.ParseException");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1), "sQI`v(oBCG\u0003Ss", "org.apache.commons.cli.ParseException", options0, (-3250), 1557, "org.apache.commons.cli.ParseException", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append('c');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      int int0 = 34;
      helpFormatter0.renderWrappedText(stringBuffer0, 34, 34, "<");
      PrintWriter printWriter0 = null;
      boolean boolean0 = false;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1), (String) null, (String) null, options0, 34, (-2930), ";4a:S~x", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(2);
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "\n");
      helpFormatter0.renderWrappedText(stringBuffer1, 74, (-1846), "-");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getDescPadding();
      helpFormatter2.getArgName();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "-");
      helpFormatter0.printOptions(mockPrintWriter0, 3, options0, 1, 74);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      boolean boolean0 = true;
      int int0 = 19;
      String string1 = ".?:,*Joexl";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, "", "-", options0, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter0.renderWrappedText(stringBuffer0, 53, 2318, "[ option: ");
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 340, "I6?Uif0qC(o1m+s+,D`", "I6?Uif0qC(o1m+s+,D`", options0, (-1), 53, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, "arg", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(2);
      helpFormatter1.renderWrappedText(stringBuffer0, 2318, 53, "[ option: ");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 2, "I6?Uif0qC(o1m+s+,D`", "-", options0, (-1), 74, "-", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      helpFormatter1.getLongOptSeparator();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 13, "usage: ", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-3722);
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      Options options0 = new Options();
      helpFormatter0.rtrim(" ");
      MockFile mockFile0 = new MockFile("eo^qO/|f!Qe");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      File file0 = MockFile.createTempFile("*Df~ZB(@*&nE5&+= qi", "%w-do051m{54]|Nh", (File) mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter0.getArgName();
      helpFormatter0.getWidth();
      helpFormatter0.getDescPadding();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 838;
      helpFormatter1.renderOptions((StringBuffer) null, 838, options0, 74, 31);
      helpFormatter0.renderOptions((StringBuffer) null, 31, options0, 1, 1);
      helpFormatter1.rtrim("");
      MockFile mockFile0 = new MockFile("\n");
      MockFile mockFile1 = new MockFile(mockFile0, "org.apache.commons.cli.HelpFormatter$1");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("--", "", (File) mockFile1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-3722);
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      Options options0 = new Options();
      Option option0 = new Option((String) null, "");
      Options options1 = options0.addOption(option0);
      helpFormatter0.renderOptions(stringBuffer0, 1, options1, 755, 74);
      helpFormatter0.rtrim(" ");
      MockFile mockFile0 = new MockFile("eo^qO/|f!Qe");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      File file0 = MockFile.createTempFile("*Df~ZB(@*&nE5&+= qi", "%w-do051m{54]|Nh", (File) mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "", "", options1, 74, 97, "*Df~ZB(@*&nE5&+= qi", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("usage: ");
      options0.getOption("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringBuffer stringBuffer0 = new StringBuffer(3605);
      helpFormatter0.printHelp(1, "\n", "\n", options0, " ", false);
      helpFormatter0.renderOptions(stringBuffer0, (-2), options0, 10, 10);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      options0.hasShortOption("usage: ");
      options0.getOption("");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.printHelp(1, "\n", "\n", options0, " ", false);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, "w>b$U$x5KTzc';Oagmb", " ", options0, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getOption("");
      StringBuffer stringBuffer0 = new StringBuffer(3605);
      helpFormatter0.printHelp(9, "org.apache.commons.cli.ParseException", "", options0, "", true);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      StringBuffer stringBuffer1 = new StringBuffer(458);
      helpFormatter0.renderWrappedText(stringBuffer1, 74, (-4335), "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(143, "-", "", (Options) null, "arg", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "*shscM;;=B";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "*shscM;;=B", options0, "GI9&3xuU%kX>y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.findWrapPos((String) null, 74, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("617", "", false, "-");
      options3.getOption("5RrbOI\"jOB");
      Options options4 = options3.addOption("QN", true, "<zesX`x=ar_a^evysA");
      helpFormatter0.printHelp("QN", "QN", options4, "<zesX`x=ar_a^evysA", false);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setOptionComparator(comparator0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter1.findWrapPos("--", 74, 74);
      helpFormatter1.renderWrappedText(stringBuffer0, 70, 2, "\n");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", (Object[]) null);
      mockPrintWriter0.println("arg");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.close();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 1692, 2, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-2198);
      int int0 = 26;
      helpFormatter0.createPadding(26);
      helpFormatter0.getWidth();
      String string0 = "";
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("617", "", false, "-");
      options3.getOption("5RrbOI\"jOB");
      Options options4 = options3.addOption("QN", true, "<zesX`x=ar_a^evysA");
      helpFormatter0.printHelp("QN", "QN", options4, "<zesX`x=ar_a^evysA", false);
      helpFormatter0.printHelp("The option '", "+~TL/i?d2u%s", options0, "", false);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      doReturn(0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      helpFormatter0.setOptionComparator(comparator0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(58);
      helpFormatter1.getNewLine();
      options2.addOption("arg", "--", false, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "-", "+~TL/i?d2u%s", options1, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.getOptionGroups();
      options1.getOption("5RrbOI\"jOB");
      Options options3 = options1.addOption("QN", true, "<zesX`x=ar_a^evysA");
      helpFormatter0.printHelp("QN", "QN", options3, "<zesX`x=ar_a^evysA", false);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      doReturn(0, 0).when(comparator0).compare(any() , any());
      helpFormatter0.setOptionComparator(comparator0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      options1.addOption("arg", "?f0D", false, "w<jps\"kt");
      helpFormatter0.printHelp("#|$>o;5A`8D<S4Q2Mi2", "", options3, "", false);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      Options options2 = options1.addOption("616", "", false, "-");
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.printHelp("QN", "QN", options1, "<zesX`x=ar_a^evysA", false);
      options1.toString();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printHelp(74, "616", ">\"c2Q P~", options2, "", true);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-3722);
      helpFormatter0.getLongOptSeparator();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", (-3722), 1580);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("617", "", false, "-");
      options3.getOption("5RrbOI\"jOB");
      Options options4 = options3.addOption("QN", true, "<X`x=ar_a^evysA");
      helpFormatter0.printHelp("QN", "QN", options4, "<X`x=ar_a^evysA", false);
      helpFormatter0.printHelp("The option '", "+~TL/i?d2u%s", options0, "", false);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(87);
      helpFormatter1.rtrim("<");
      helpFormatter1.renderWrappedText(stringBuffer0, 26, 0, "--");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("<X`x=ar_a^evysA", "-", (Options) null, "617", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      Option option0 = new Option("", "   ", false, "--");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2258, "-", "-C-C K.55B1eWEct", options1, 1702, (-1), "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("a:");
      int int0 = 0;
      MockPrintWriter mockPrintWriter1 = null;
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 0, (Options) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      int int0 = 0;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      int int1 = 10;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter1.printHelp("-pe&l+?1\"/`UV+6eC", options0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options1.addOption("j;$S9j~HDas ;", (String) null, true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'j;$S9j~HDas ;' contains an illegal character : ';'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringBuffer stringBuffer0 = new StringBuffer("--");
      int int0 = 94;
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("617", "", false, "-");
      options3.getOption("5RrbOI\"jOB");
      Options options4 = options3.addOption("QN", true, "<zesX`x=ar_a^evysA");
      helpFormatter0.printHelp("QN", "QN", options4, "<zesX`x=ar_a^evysA", false);
      helpFormatter0.printHelp("The option '", "+~TL/i?d2u%s", options0, "", false);
      StringBuffer stringBuffer0 = new StringBuffer("<zesX`x=ar_a^evysA");
      StringBuffer stringBuffer1 = new StringBuffer("");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, (-2), (-1), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("617", "", false, "-");
      options3.getOption("5RrbOI\"jOB");
      Options options4 = options3.addOption("QN", true, "<zesX`x=ar_a^evysA");
      helpFormatter0.printHelp("QN", "QN", options4, "<zesX`x=ar_a^evysA", false);
      helpFormatter0.printHelp("The option '", "+~TL/i?d2u%s", options0, "", false);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(58);
      helpFormatter1.renderWrappedText(stringBuffer0, 26, 0, "--");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("<zesX`x=ar_a^evysA", "-", (Options) null, "617", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("a:");
      mockPrintWriter0.append('?');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
      helpFormatter0.getOptPrefix();
      int int1 = (-2254);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options1.addOption("<", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '<'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      helpFormatter0.renderWrappedText(stringBuffer0, 3, (-1), " ");
      helpFormatter1.getWidth();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(63);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = new Locale("-");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) "-";
      objectArray0[2] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "Q$c=RcY{bY", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, (-1), "arg", "usage: ", options0, 3, (-149), " | ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 74, "usage: ");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("617", "", false, "-");
      options3.getOption("5RrbOI\"jOB");
      helpFormatter0.setLeftPadding((-1));
      Options options4 = options3.addOption("QN", true, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("QN", "QN", options4, "usage: ", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      Option option0 = new Option("", "arg");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      String string1 = "";
      Options options3 = options2.addOption("617", "", false, "-");
      String string2 = "5RrbOI\"jOB";
      options3.getOption("5RrbOI\"jOB");
      helpFormatter0.setLeftPadding((-1));
      Options options4 = options3.addOption("QN", true, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("QN", "QN", options4, "usage: ", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("617", "", false, "-");
      options3.getOption("5RrbOI\"jOB");
      Options options4 = options3.addOption("QN", true, "<zesX`x=ar_a^evysA");
      helpFormatter0.printHelp("QN", "QN", options4, "<zesX`x=ar_a^evysA", false);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(":Jx9~ni!`mviN").when(comparator0).toString();
      doReturn(3, 74).when(comparator0).compare(any() , any());
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setOptionComparator(comparator0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.printHelp("usage: ", options1, false);
      int int0 = 2786;
      helpFormatter1.findWrapPos("--", 2786, 74);
      int int1 = 2302;
      int int2 = 16;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "", "-", options2, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("+j'F");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      String string0 = "M+<]|H2<tgY";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("M+<]|H2<tgY");
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Locale locale0 = Locale.ENGLISH;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) "M+<]|H2<tgY";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2964), "M+<]|H2<tgY");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("617", "", true, "-");
      options3.getOption("5RrbOI\"jOB");
      Options options4 = options3.addOption("QN", true, "<zesX`x=ar_a^evysA");
      helpFormatter0.printHelp("QN", "QN", options4, "<zesX`x=ar_a^evysA", true);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultLeftPad = 18;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer0, 0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.defaultWidth = 32;
      StringBuffer stringBuffer0 = new StringBuffer(1);
      StringBuffer stringBuffer1 = new StringBuffer("org.apache.commons.cli.OptionValidator");
      StringBuffer stringBuffer2 = new StringBuffer(94);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "usage: ", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter1.printHelp(4671, "SQ@3m;*HlZxK]rcB~N", "\n", options2, "usage: ", true);
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("", "cs2=cM3.]jqvILns`", false, "-");
      options0.hasShortOption("S*|,*<QIRQh6@(");
      options1.getOption("5RrbOI\"jOB");
      Options options2 = options1.addOption("", true, "<zesX`x=ar_a^evysA");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options2, "<zesX`x=ar_a^evysA", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(74, "", "usage: ", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", (Object[]) null);
      int int0 = 1692;
      helpFormatter0.printWrapped(printWriter0, 1692, 1692, "arg");
      Options options0 = new Options();
      options0.addOption("", false, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "zC\":.kR", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      int int0 = (-1778);
      Options options0 = new Options();
      String string0 = "";
      options0.getOption("");
      options0.getOptionGroups();
      int int1 = 44;
      helpFormatter0.defaultWidth = (-1778);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1778), options0, (-1778), 44);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, " ", true, "");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 111, "", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer("");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(2679, "@5Td=$4yT`", "q9", options1, "", true);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("617", "", false, "-");
      options3.getOption("5RrbOI\"jOB");
      Options options4 = options3.addOption("QN", true, "<zesX`x=ar_a^evysA");
      helpFormatter0.printHelp("QN", "QN", options4, "<zesX`x=ar_a^evysA", false);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      doReturn(0, 0, 0, 0).when(comparator0).compare(any() , any());
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setOptionComparator(comparator0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.printHelp("usage: ", options1, true);
      int int0 = 2786;
      helpFormatter1.findWrapPos("--", 2786, 74);
      helpFormatter1.findWrapPos("-", 2302, 16);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, "arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // arg
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("r4wE@AI^z<c");
      mockPrintWriter0.print(true);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("--");
      mockPrintWriter2.append('J');
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1808, "Vnv6");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getOption("");
      StringBuffer stringBuffer0 = new StringBuffer(3605);
      helpFormatter0.setLeftPadding((-1));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "=2Q'O'K7)_6i`", (String) null, options0, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getOption("");
      StringBuffer stringBuffer0 = new StringBuffer(3605);
      helpFormatter0.printHelp(1, "\n", "\n", options0, " ", false);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("617", "cs2=cM3.]jqvILns`", false, "-");
      options2.hasShortOption("S*|,*<QIRQh6@(");
      options3.getOption("5RrbOI\"jOB");
      options1.hasShortOption("-");
      options0.getOption(")k]0L5tLV6^g5N");
      options2.addOption("arg", true, "cs2=cM3.]jqvILns`");
      helpFormatter0.printHelp("nep'SsS'35~PhKW`f0E", "Nt.Uh`x#EM1wke{;]", options1, "5RrbOI\"jOB", true);
      StringBuffer stringBuffer0 = new StringBuffer(1167);
      helpFormatter0.printHelp(64, ")k]0L5tLV6^g5N", "", options0, ">", true);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "-", "jwAJfk", options0, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("617", "", false, "-");
      options3.getOption("5RrbOI\"jOB");
      Options options4 = options3.addOption("QN", true, "<zesX`x=ar_a^evysA");
      helpFormatter0.printHelp("QN", "QN", options4, "<zesX`x=ar_a^evysA", false);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      Options options5 = options1.addOption("arg", "?f0D", false, "w<jps\"kt");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, "--", "-", options5, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer0, 0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("a:");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      int int0 = (-2778);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-177), (-2778), "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      String string0 = "]";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) locale0;
      // Undeclared exception!
      try { 
        mockPrintWriter1.format(locale0, "$(Xm_\f0Y]%m=", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'm'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 348, "");
      helpFormatter0.setLongOptSeparator("h&Te0.4V=Sg5");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      PrintWriter printWriter0 = null;
      int int0 = 440;
      String string0 = "cmdLineSyntax not provided";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("", "'?{gRSZ", true, "");
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("usage: ", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('+');
      boolean boolean0 = true;
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 2434, "'");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.getLongOptPrefix();
      int int0 = 1001;
      helpFormatter0.setDescPadding(1001);
      helpFormatter0.getLeftPadding();
      helpFormatter0.setOptPrefix("");
      String string0 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      Options options0 = new Options();
      boolean boolean0 = false;
      String string1 = "   ";
      Option option0 = null;
      try {
        option0 = new Option("U ?{cb%`,p$<{PIU", "zE", false, "   ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'U ?{cb%`,p$<{PIU' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("I");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 3, 1, "cmdLineSyntax not provided");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "?";
      helpFormatter0.defaultNewLine = "?";
      String string1 = "t`8HawNfk@aHG|'y";
      int int0 = 1858;
      helpFormatter0.setNewLine("q]=Wa`r~YkJ@UW\"v");
      String string2 = helpFormatter0.createPadding(1858);
      helpFormatter0.findWrapPos("t`8HawNfk@aHG|'y", 1858, (-407));
      helpFormatter0.setSyntaxPrefix("paTWkgdb=XnZc32E");
      int int1 = 0;
      String string3 = "eY&g#b4u|Z=/u+Gs";
      Options options0 = new Options();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      String string4 = "has already been selected: '";
      // Undeclared exception!
      try { 
        options0.addOption("has already been selected: '", string2, false, "has already been selected: '");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'has already been selected: '' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("a:");
      PrintWriter printWriter0 = mockPrintWriter0.append('?');
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "a:");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("?OG<Sa5$AY4gM^s,}");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2621), "?OG<Sa5$AY4gM^s,}");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = (-2);
      helpFormatter0.createPadding(0);
      Options options0 = null;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      int int1 = 1290;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1195, (Options) null, 2525, 1290);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1848;
      String string0 = null;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      int int1 = (-600);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-3132), (-600), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      int int0 = 0;
      int int1 = (-1162);
      String string0 = "//=ud]`j7\\LIUp--;l";
      helpFormatter0.defaultOptPrefix = "//=ud]`j7LIUp--;l";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-1162), "Tk>nNa 7NDAUToz8");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("617", "", false, "-");
      options3.getOption("5RrbOI\"jOB");
      Options options4 = options3.addOption("QN", true, "<zesX`x=ar_a^evysA");
      helpFormatter0.printHelp("QN", "QN", options4, "<zesX`x=ar_a^evysA", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer0, 0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("617", "", false, "-");
      options3.getOption("5RrbOI\"jOB");
      Options options4 = options3.addOption("QN", true, "<zesX`x=ar_a^evysA");
      helpFormatter0.printHelp("QN", "QN", options4, "<zesX`x=ar_a^evysA", false);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer0, 0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("ou5}9");
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("M+<]|H2<tgY");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Locale locale0 = Locale.ENGLISH;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) "M+<]|H2<tgY";
      objectArray0[2] = (Object) "M+<]|H2<tgY";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "M+<]|H2<tgY", objectArray0);
      Options options0 = new Options();
      Option option0 = new Option("arg", ",b", true, "8WoJkc|hUa>1CH");
      Options options1 = options0.addOption(option0);
      options1.getOption("org.apache.commons.cli.HelpFormatter$1");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 1, (String) null, "M+<]|H2<tgY", options1, 0, 0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringBuffer stringBuffer0 = new StringBuffer("--");
      StringBuffer stringBuffer1 = new StringBuffer(94);
      helpFormatter0.rtrim((String) null);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printUsage((PrintWriter) null, 74, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("usage: ");
      options0.hasShortOption("(@?vit6+8-%qv_k#");
      options0.getOption("arg");
      options0.addOption((String) null, false, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("org.apache.commons.cli.ParseException", (String) null, options0, "IU82RS%,#mD.kHm8L~", false);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.printHelp(74, " | ", "D8}Ff|[XQ0", options0, "5RrbOI\"jOB", true);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "sE=mMk`O2<x\"";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("sE=mMk`O2<x\"");
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      String string1 = "B+v0y";
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "B+v0y";
      objectArray0[1] = (Object) mockPrintWriter1;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter1;
      mockPrintWriter1.printf("B+v0y", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter1, (-151), 10, "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "!z)~>B6S";
      helpFormatter0.defaultSyntaxPrefix = "!z)~>B6S";
      helpFormatter0.findWrapPos("!z)~>B6S", 32, 32);
      helpFormatter0.setOptionComparator((Comparator) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2031);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 126, "!z)~>B6S");
      int int0 = 9;
      String string1 = "";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("y(y", "--", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'y(y' contains an illegal character : '('
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 29;
      int int1 = 217;
      String string0 = "UI%SNijq3 0>";
      String string1 = "G?4:C";
      Options options0 = new Options();
      String string2 = "";
      boolean boolean0 = true;
      Options options1 = options0.addOption("", true, "-");
      helpFormatter0.printHelp("~RE[O>^]jL", "", options0, "");
      // Undeclared exception!
      try { 
        options1.addOption("W-\"Tm9", "UI%SNijq3 0>", true, "org.apache.commons.cli.HelpFormatter");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'W-\"Tm9' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      Options options0 = new Options();
      helpFormatter0.printHelp(31, "5:z#=", (String) null, options0, "2f\"YcH{as:T$D@b(");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("\"D-", " .o|Otc'0b(-l>wD'bp", false, " .o|Otc'0b(-l>wD'bp");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '\"D-' contains an illegal character : '\"'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.setLongOptPrefix("?<+");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setArgName("");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      String string1 = "";
      String string2 = null;
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("M+<]|H2<tgY");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Locale locale0 = Locale.ENGLISH;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) "M+<]|H2<tgY";
      objectArray0[2] = (Object) "M+<]|H2<tgY";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) mockPrintWriter0;
      mockPrintWriter0.format(locale0, "M+<]|H2<tgY", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp("M+<]|H2<tgY", options0, false);
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      helpFormatter0.renderOptions(stringBuffer0, (-2118), options0, 1, 2785);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", (Object[]) null);
      helpFormatter0.printWrapped(printWriter0, 1692, 1692, "arg");
      int int0 = 1833;
      String string0 = "M*bddps3Lt>>";
      String string1 = "zC\":.kR";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("zC\":.kR", (String) null, false, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'zC\":.kR' contains an illegal character : '\"'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.setWidth((-570));
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setDescPadding(0);
      int int0 = 1958;
      helpFormatter0.setDescPadding(1958);
      File file0 = MockFile.createTempFile("[ Options: [ short ", "--");
      try { 
        MockFile.createTempFile("has already been selected: '", "", file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "<", "-", options0, "\"!)x-q:a'z_$u,", true);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "<";
      helpFormatter0.setLongOptSeparator("HvaV12`d4nmq%obPV");
      Options options0 = new Options();
      String string0 = null;
      options0.addOption("@", true, "-");
      Options options1 = options0.addOption((String) null, true, " ");
      String string1 = null;
      options0.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("HvaV12`d4nmq%obPV", "HvaV12`d4nmq%obPV", options1, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getArgName();
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator1).toString();
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.findWrapPos("CC", 0, 665);
      Options options0 = new Options();
      options0.getOption("usage: ");
      helpFormatter0.defaultDescPad = 665;
      helpFormatter0.setArgName("Y00R$]q(oJEUF");
      helpFormatter0.printHelp("arg", "arg", options0, "XERVHa$T^M5!R:#");
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setWidth((-1));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("<", options0, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      int int0 = (-262);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "arg", (-262), 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
