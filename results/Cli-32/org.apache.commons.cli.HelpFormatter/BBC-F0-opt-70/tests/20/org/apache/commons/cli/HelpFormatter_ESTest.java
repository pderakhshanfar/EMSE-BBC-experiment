/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 05:34:49 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.CharBuffer;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-1102);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("gM&a)>wLS[9xYBoJ5'", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, "[ Options: [ short ");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = null;
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "arg");
      option0.setArgName("");
      options0.addOption(option0);
      boolean boolean0 = true;
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append('V');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      int int0 = 0;
      String string0 = "*u @9V!RK";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-4716), "*u @9V!RK");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "org.apache.commons.cli.HelpFormatter$OptionComparator", "[", options0, "LHr$\"F{", false);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      int int0 = 3;
      helpFormatter0.setDescPadding(3);
      helpFormatter0.defaultArgName = null;
      helpFormatter0.getArgName();
      URI uRI0 = MockURI.aFTPURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 0;
      String string0 = null;
      helpFormatter0.defaultOptPrefix = ";F'Qin=f7 Ae#r";
      Options options0 = null;
      int int1 = 372;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(372, "org.apache.commons.cli.OptionGroup", (String) null, (Options) null, "arg", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.getDescPadding();
      Locale locale0 = Locale.ENGLISH;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) "w_K b#6Y}S[:s74Pk%";
      objectArray0[6] = (Object) "\n";
      objectArray0[7] = (Object) helpFormatter0;
      objectArray0[8] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "-", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      PrintWriter printWriter1 = mockPrintWriter1.format("--", objectArray0);
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter1, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", false, " ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option1 = new Option("arg", "", false, "-");
      optionGroup0.setSelected(option1);
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("b", options2);
      helpFormatter0.defaultLongOptPrefix = "NO_ARGS_ALLOWED";
      helpFormatter0.setWidth(0);
      helpFormatter0.getWidth();
      helpFormatter0.setSyntaxPrefix("5ZOt9}6&UO${Mxy~Zr");
      helpFormatter0.setOptPrefix("NO_ARGS_ALLOWED");
      helpFormatter0.setArgName("");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, 801, ")?D?&~J");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "|Fca'";
      helpFormatter0.setLeftPadding((-11));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("|Fca'", "|Fca'", (Options) null, "|Fca'");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1403);
      helpFormatter0.rtrim("");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-713);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setArgName("");
      helpFormatter0.rtrim("");
      helpFormatter0.setLeftPadding((-1838));
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.getArgName();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "' was specified but an option from this group ");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("NO_ARGS_ALLOWED", options0, false);
      helpFormatter0.findWrapPos("' was specified but an option from this group ", 3, 3);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultArgName = "";
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getWidth();
      helpFormatter0.setNewLine("usage: ");
      helpFormatter0.getArgName();
      helpFormatter0.getSyntaxPrefix();
      MockFile mockFile0 = new MockFile("7fH~A'3{H}hc]&");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.print("c&n_R]");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-4409), "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", "--");
      File file0 = MockFile.createTempFile("?1'<G]7![2\"M", "\n", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      PrintWriter printWriter0 = mockPrintWriter1.append('H');
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-1), "?1'<G]7![2\"M");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("om8Q:`BMO3SsnTUxA");
      int int0 = 2512;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2512, (String) null, "om8Q:`BMO3SsnTUxA", options0, 34, 34, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(1300);
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setLeftPadding((-2462));
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", (-2462), (-2462));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", " ", false, "--");
      FileSystemHandling.shouldAllThrowIOExceptions();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options0.addOption(option0);
      helpFormatter0.printHelp("MU", options2, true);
      helpFormatter0.rtrim("&W7<x^<");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "&W7<x^<", options1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, " ");
      OptionGroup optionGroup1 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("\"#?", options1, true);
      helpFormatter0.printHelp("usage: ", options1, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 44, "usage: ", "\"#?", options0, 13, (-2), "usage: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-1399));
      helpFormatter0.setDescPadding((-3340));
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultSyntaxPrefix = "arg";
      helpFormatter0.printHelp(3, "\n", "arg", options0, "-");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, true, "arg");
      option0.setArgName("");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("<", options1, true);
      helpFormatter0.getLongOptSeparator();
      String string0 = helpFormatter0.defaultLongOptPrefix;
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      helpFormatter0.setWidth(64);
      helpFormatter0.getWidth();
      helpFormatter0.setSyntaxPrefix("mG`(c51'M");
      helpFormatter0.setOptPrefix("5ZOt9}6&UO${Mxy~Zr");
      helpFormatter0.createPadding(0);
      helpFormatter0.setArgName("R@?W8z-hO*SJ1");
      StringBuffer stringBuffer1 = null;
      int int0 = 44;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 64, 44, "Lw'?hK kl@vT=vjwu");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setNewLine("org.apache.commons.cli.OptionGroup");
      helpFormatter0.getLeftPadding();
      helpFormatter0.findWrapPos(" ", 1, 1);
      char[] charArray0 = new char[1];
      charArray0[0] = 'u';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, (Options) null, 13, 19);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "--");
      option0.setArgName("--");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("=i6{7x<kS{c m(=2", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.US;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "-", (Object[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 117, "=i6{7x<kS{c m(=2", "", options0, 2, (-1), "=i6{7x<kS{c m(=2");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)22;
      byteArray0[6] = (byte)34;
      byteArray0[7] = (byte)5;
      byteArray0[8] = (byte)31;
      mockPrintStream0.write(byteArray0, (int) (byte)22, (-4428));
      PrintStream printStream0 = mockPrintStream1.append('e');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      helpFormatter0.setLeftPadding((-3955));
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      Options options0 = new Options();
      mockPrintStream1.println(1L);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 34, "!Mi!`5", "", options0, 530, 3034, "", false);
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("org.apache.commons.cli.OptionValidator");
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(117, "@", "p9?", options0, "-", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 83, options0, 83, 83);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)52;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "--");
      option0.setArgName("--");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("[ARG...]", options1, true);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "\n", "arg", options0, "-");
      String string0 = helpFormatter0.defaultLongOptPrefix;
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("xarg", true, "usage: ");
      Option option0 = new Option("", "");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      Options options4 = options3.addOption("arg", "\"~XL:i", true, "ORp~&]\"A_ti\"g");
      options4.hasLongOption("usage: ");
      option0.setRequired(true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"~XL:i");
      Options options5 = options4.addOptionGroup(optionGroup0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 75, "RQ}1@&JzZe", options5);
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter1, false);
      PrintWriter printWriter0 = mockPrintWriter1.append('h');
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-1064), "RQ}1@&JzZe");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2683, "   ", "\n", options0, 1, 1, "\n", true);
      helpFormatter0.setLongOptSeparator("   ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2683, "   ", (String) null, options0, 353, (-1759), "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Re", "Re", (Options) null, "Re");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "\n", "arg", options0, (String) null);
      helpFormatter1.rtrim("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("DtJ#,/\"R?v");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 74, "-", "-", options0, 4108, 63, (String) null, false);
      helpFormatter1.getNewLine();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, 3, (Options) null, 115, 31);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "arg");
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.rtrim("");
      StringBuffer stringBuffer0 = new StringBuffer(74);
      int int0 = (-2876);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2876), options1, 9, 1083);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "arg");
      options1.hasLongOption("--");
      helpFormatter0.printHelp("<Y", options1, false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      int int0 = 1634;
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 1634, options1, 1634, 2000);
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer1, 0, options1, 0, 2000);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) mockPrintWriter0;
      mockPrintWriter0.format("f1rEnFMD2Ca'", objectArray0);
      mockPrintStream0.checkError();
      String string0 = " ";
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, " ");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      byte[] byteArray0 = new byte[11];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockPrintStream0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf("usage: ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-583), "m#N;Vez,d", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "arg");
      helpFormatter0.printHelp("usage: ", options1, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 109, "-", options1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ";*D3'?C,";
      helpFormatter0.setNewLine(";*D3'?C,");
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getNewLine();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getArgName();
      int int0 = 2207;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("-", "2~{Vfb<w%:j", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(124);
      helpFormatter0.rtrim("");
      helpFormatter0.getLongOptSeparator();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "4HM`q-";
      PrintWriter printWriter0 = mockPrintWriter0.printf("4HM`q-", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      helpFormatter0.printUsage(printWriter0, 109, "", options0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      MockPrintStream mockPrintStream1 = new MockPrintStream("\n");
      mockPrintStream0.append('*');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)111;
      byteArray0[7] = (byte)111;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "pM_;x=96DjGP-", "pM_;x=96DjGP-", options0, (int) (byte)111, (int) (byte)111, "pM_;x=96DjGP-", false);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.renderWrappedText(stringBuffer0, 1712, 74, " ");
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1712, "usage: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.optionComparator = null;
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptSeparator();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) pipedOutputStream0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) " ";
      objectArray0[7] = (Object) null;
      mockPrintWriter0.format("\n", objectArray0);
      int int0 = 509;
      String string0 = null;
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "-", true, " :: ");
      // Undeclared exception!
      try { 
        options1.getMatchingOptions((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      PrintStream printStream0 = mockPrintStream1.append('e');
      byte[] byteArray0 = new byte[5];
      helpFormatter0.defaultDescPad = (int) (byte) (-54);
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte) (-54);
      printStream0.write(byteArray0, 1595, 7);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(83, "' was specified but an option from this group ", "", options0, "line.separator");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockFile mockFile1 = new MockFile(mockFile0, "[ option: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      String string0 = " ";
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockFile1;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) " ";
      objectArray0[4] = (Object) mockFile0;
      objectArray0[5] = (Object) " ";
      PrintWriter printWriter0 = mockPrintWriter0.format(" ", objectArray0);
      helpFormatter0.printUsage(printWriter0, 652, "[ option: ");
      String string1 = "";
      helpFormatter0.findWrapPos("", 652, 652);
      helpFormatter0.getWidth();
      int int0 = 68;
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("=?m6-grb/epyw~", "[", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '=?m6-grb/epyw~' contains an illegal character : '='
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1117), (-753), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(1592, "\n", "org.apache.commons.cli.Options", options0, "-");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = 2030;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("\n", options0, true);
      helpFormatter1.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "--";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)78;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options0 = new Options();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (int) (byte)70, 0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      mockPrintStream0.append('j');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      helpFormatter1.setLeftPadding((-2));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arg");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Options options0 = new Options();
      mockPrintStream0.println((long) 1);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-131), options0, (-131), (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      PrintStream printStream0 = mockPrintStream1.append('e');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      helpFormatter0.setLeftPadding((-3955));
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      Options options0 = new Options();
      mockPrintStream1.println(1L);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 34, "!Mi!`5", "", options0, 530, 3034, "", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setNewLine("org.apache.commons.cli.OptionValidator");
      helpFormatter1.getSyntaxPrefix();
      helpFormatter1.printHelp(117, "@", "p9?", options0, "-", false);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      PrintStream printStream0 = mockPrintStream1.append('e');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte)68;
      mockPrintStream0.write(byteArray0, (int) (byte)9, (int) (byte)9);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 67, "-", "-", options0, (int) (byte) (-54), (-51), "-", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<");
      byteArray0[0] = (byte)43;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)20;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptPrefix();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('K');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 307, "", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      PrintStream printStream0 = mockPrintStream1.append('e');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      helpFormatter0.setLeftPadding((-3955));
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      Options options0 = new Options();
      mockPrintStream1.println(1L);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("<", options0, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      String string0 = null;
      int int0 = (-2350);
      int int1 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-2350), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(63, "' contains an illegal character : '", "", (Options) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)78;
      byteArray0[3] = (byte)78;
      byteArray0[5] = (byte)78;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options1 = new Options();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 6, "", "", options0, 23, (-1497), "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(")=(by=wd3h^JM");
      Locale locale0 = new Locale("\n", "org.apache.commons.cli.HelpFormatter", "Ng9o*x@z%4Ku{6");
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) helpFormatter0;
      Object object2 = new Object();
      objectArray0[3] = object2;
      objectArray0[4] = (Object) ")=(by=wd3h^JM";
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) "org.apache.commons.cli.HelpFormatter";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "\n", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 64, "Ng9o*x@z%4Ku{6");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "\n", "arg", options0, (String) null);
      helpFormatter0.setLongOptPrefix("-");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter1.printHelp("1NV2v^349$6jot", options0, true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLongOptSeparator();
      helpFormatter0.createPadding(74);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp(13, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", (String) null, options1, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      helpFormatter0.setLongOptPrefix("FuPOV4");
      helpFormatter0.getOptionComparator();
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      options0.addOption("", false, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "FuPOV4", options1, "(W3<:Jv9l8E", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      mockPrintStream1.append('e');
      Options options0 = new Options();
      String string0 = "Cannot add value, list full.";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "Cannot add value, list full.", "eB_X:%JFa]#C", options0, " ]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter1.setOptionComparator(comparator0);
      Options options1 = options0.addOption("arg", false, "-");
      helpFormatter1.printHelp("arg", (String) null, options0, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      StringWriter stringWriter0 = new StringWriter(1);
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer1 = new StringBuffer("qKV|l;>8Sl");
      helpFormatter0.renderOptions(stringBuffer1, 3, options1, 74, 672);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("9", false, "usage: ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      options1.getOptionGroups();
      Options options2 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream("[");
      mockPrintStream0.println((-395L));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 34, "[", "-", options1, 530, 3034, "@%", true);
      helpFormatter0.getDescPadding();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, 1625, options2, (-4045), 935);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PrintWriter printWriter0 = null;
      int int0 = 10;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 10, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      PrintStream printStream0 = mockPrintStream1.append('e');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      helpFormatter0.setLeftPadding((-3955));
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      Options options0 = new Options();
      mockPrintStream1.println(1L);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) null;
      mockPrintWriter0.format("usage: ", objectArray0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 34, "!Mi!`5", "", options0, 530, 3034, "", false);
      helpFormatter0.getDescPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLongOptSeparator();
      helpFormatter1.createPadding(27);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      helpFormatter1.renderOptions(stringBuffer0, 9, options0, 76, 1);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-3955), "/zUm", "|A&9+VRg[.;8", options0, 31, 33, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte) (-2);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options1 = options0.addOption("", true, "^&/");
      Option option0 = new Option("", "\n", true, "dr C");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption((String) null, "JPfj", true, "A");
      options3.getOptions();
      helpFormatter0.printHelp("[", "[", options3, "E ");
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.printHelp("A", options2, true);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      PrintStream printStream0 = mockPrintStream1.append('e');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      helpFormatter0.setLeftPadding((-3955));
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      Options options0 = new Options();
      mockPrintStream1.println(1L);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 34, "!Mi!`5", "", options0, 530, 3034, "", false);
      helpFormatter0.getDescPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLongOptSeparator();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("usage: ", "", options1, " [ARG]", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      PrintStream printStream0 = mockPrintStream1.append('e');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      helpFormatter0.setLeftPadding('e');
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      Options options0 = new Options();
      mockPrintStream1.println(1L);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 34, "!Mi!`5", "", options0, 530, 1, "", false);
      helpFormatter0.getDescPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLongOptSeparator();
      helpFormatter1.createPadding(27);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)76;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 101, "/zUm", "arg", options0, 31, 33, "");
      helpFormatter2.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-51), "arg", "arg", options0, "                           ", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "Illegal option name '");
      Options options2 = options1.addOption((String) null, "b2", true, "gnR&2vT'm=");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 412, (String) null, (String) null, options2, 412, 412, "gnR&2vT'm=", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(18, "", "", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[";
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "[", "9", options0, (String) null);
      helpFormatter0.setLongOptPrefix("9");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      Options options1 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1, 42, "9");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, (-3278), 42, "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      PrintStream printStream0 = mockPrintStream1.append('e');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      helpFormatter0.setLeftPadding((-3955));
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      Options options0 = new Options();
      mockPrintStream1.println(1L);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 34, "!Mi!`5", "", options0, 530, 3034, "", false);
      helpFormatter0.getDescPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLongOptSeparator();
      helpFormatter1.createPadding(27);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-3955), "/zUm", "|A&9+VRg[.;8", options0, 31, 33, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = false;
      Options options1 = options0.addOption("", false, "^&/");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1016, "", "MM BOQpdn$LmN)3v%", options1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      PrintStream printStream0 = mockPrintStream1.append('e');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      int int0 = (-3955);
      helpFormatter0.setLeftPadding((-3955));
      String string0 = "!Mi!`5";
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      Options options0 = new Options();
      mockPrintStream1.println(1L);
      int int1 = 898;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-3955), "!Mi!`5", "!Mi!`5", options0, (-3955), 898, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 42;
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.renderWrappedText(stringBuffer0, 556, 0, "");
      Options options1 = options0.addOption("", false, "[ Options: [ short ");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options1, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "usage: ", false, "usage: ");
      Options options2 = options1.addOption("arg", true, "arg");
      helpFormatter0.printHelp("usage: ", options2, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      helpFormatter1.createPadding(74);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "4dLz*a+";
      helpFormatter0.setOptPrefix("4dLz*a+");
      StringBuffer stringBuffer0 = new StringBuffer("4dLz*a+");
      int int0 = 3;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, 1, "cmdLineSyntax not provided");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setDescPadding(74);
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions((PrintWriter) null, 74, (Options) null, 74, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)78;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 13, "pM_;x=96DjGP-", "--", options0, 3, 3, "--", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "0v?+gb{a8I^QQ";
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = null;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      mockPrintWriter0.print((-403.7764F));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-637), "0v?+gb{a8I^QQ", "l#;H$pv", (Options) null, (-637), (-637), "0v?+gb{a8I^QQ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("1P~_n", "1P~_n", (Options) null, "1P~_n", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", false, "");
      helpFormatter0.setOptionComparator((Comparator) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter1.setOptionComparator(comparator0);
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter1.printOptions(mockPrintWriter0, 1, options0, 2556, 2210);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", false, "");
      option0.setOptionalArg(false);
      options0.getOptions();
      Options options1 = options0.addOption(option0);
      options1.addOption("", "usage: ", false, "usage: ");
      Options options2 = options1.addOption("", "L", false, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "", options2, "h{%(#Mlx>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "[", "9", options0, (String) null);
      helpFormatter0.setLongOptPrefix("9");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      String string0 = "";
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter0.renderWrappedText(stringBuffer0, 704, (-3471), "[");
      options0.addOption("arg", true, "--");
      helpFormatter0.defaultSyntaxPrefix = "[";
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("-];Y6", "fp18>k!UXO^o13", options0, "IAk}E}=UVb\tW`Q8L>", false);
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("\n");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(1712, "4[qHu/+i'JR>Nvj", "usage: ", options0, "' contains an illegal character : '");
      helpFormatter1.setLongOptPrefix("usage: ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getOptionComparator();
      helpFormatter1.getSyntaxPrefix();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("-", "wM;:53ZYd$QS'^v6G", true, "4[qHu/+i'JR>Nvj");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "^&/");
      Option option0 = new Option("", "MM BOQpdn$LmN)3v%", true, "dr C");
      Options options2 = options1.addOption(option0);
      String string0 = "A";
      Options options3 = options2.addOption((String) null, "JPfj", false, "A");
      options3.getOptions();
      helpFormatter0.printHelp("[", "[", options3, "   ");
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.printHelp("JPfj", options3, true);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "--", "usage: ", options0, " ");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, " :: ");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "usage: ", false, "usage: ");
      Options options2 = options1.addOption("arg", true, "arg");
      helpFormatter0.printHelp("arg", (String) null, options2, "9[JMx#", true);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("arg", helpFormatter0.getArgName());
      
      helpFormatter0.rtrim("org.apache.commons.cli.Util");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("org.apache.commons.cli.HelpFormatter$1");
      StringBuffer stringBuffer0 = new StringBuffer("CT.s6w3.k`KolDJ~U");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 63, 1, "arg");
      stringBuffer1.append((float) 3);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("-", "org.apache.commons.cli.HelpFormatter$1", true, "zWEz^<h*'* CD=>e/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderWrappedText(stringBuffer0, 1712, 74, " ");
      // Undeclared exception!
      try { 
        options0.addOption("[ARG...]", false, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '[ARG...]' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      helpFormatter0.setWidth(64);
      helpFormatter0.getWidth();
      helpFormatter0.setSyntaxPrefix("mG`(c51'M");
      helpFormatter0.setOptPrefix("5ZOt9}6&UO${Mxy~Zr");
      helpFormatter0.setArgName("R@?W8z-hO*SJ1");
      StringBuffer stringBuffer1 = null;
      int int0 = 44;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 64, 44, "Lw'?hK kl@vT=vjwu");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", false, "");
      option0.setOptionalArg(false);
      options0.getOptions();
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", "usage: ", false, "usage: ");
      options2.toString();
      helpFormatter0.printHelp("=X*L!?h6", "", options2, "");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1), options2, (-1), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      options1.addOptionGroup(optionGroup0);
      boolean boolean0 = true;
      Option option0 = new Option("rhJlj$aX", true, "=");
      options0.addOption(option0);
      Object object0 = new Object();
      String string0 = "Bf'";
      Option option1 = null;
      try {
        option1 = new Option("[ARG...]", "Bf'", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '[ARG...]' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "9";
      String string1 = "[";
      Options options0 = new Options();
      String string2 = null;
      int int0 = (-402);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-402), "9", "[", options0, "+K<k3/");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "9";
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "[", "9", options0, (String) null);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "B4`8Sz!9[K|kw{-2Z";
      helpFormatter0.setWidth(10);
      int int0 = (-736);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("B4`8Sz!9[K|kw{-2Z", (-736), (-736));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "mKOY#:/dxR@!E8";
      Options options0 = new Options();
      helpFormatter0.printHelp("mKOY#:/dxR@!E8", options0);
      int int0 = 1970;
      helpFormatter0.defaultDescPad = 1970;
      helpFormatter0.getLeftPadding();
      String string1 = "";
      // Undeclared exception!
      try { 
        options0.addOption("-", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("0v?+gb{a8I^QQ", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "^&/");
      Option option0 = new Option("", "MM BOQpdn$LmN)3v%", true, "dr C");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption((String) null, "JPfj", false, "A");
      helpFormatter0.printHelp("[", "[", options3, "   ");
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.printHelp("f{eyx6f-x@|'5414CT", options2, false);
      String string0 = helpFormatter0.getLongOptSeparator();
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", string0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "NO_ARGS_ALLOWED";
      Options options0 = new Options();
      Option option0 = new Option("arg", false, " ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option1 = new Option("arg", "", false, "-");
      optionGroup0.setSelected(option1);
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("A~_?aR2");
      helpFormatter0.getWidth();
      StringWriter stringWriter0 = new StringWriter(75);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 75, options0, 74, 31);
      helpFormatter0.renderOptions(stringBuffer1, (-1040), options0, 75, 0);
      assertEquals("A~_?aR2", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1145);
      helpFormatter0.setLeftPadding((-1145));
      String string0 = "";
      helpFormatter0.defaultLongOptPrefix = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getOptPrefix();
      URI uRI0 = MockURI.aHttpURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "arg";
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "usage: ", false, "usage: ");
      Options options2 = options1.addOption("arg", true, "arg");
      helpFormatter0.printHelp("usage: ", "9[JMx#", options2, (String) null, true);
      helpFormatter0.getOptPrefix();
      assertEquals("arg", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "0";
      helpFormatter0.setLongOptSeparator("0");
      helpFormatter0.getNewLine();
      URI uRI0 = null;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)78;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 13, "pM_;x=96DjGP-", "--", options0, 3, 3, "--", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getNewLine();
      String string0 = "w_K b#6Y}S[:s74Pk%";
      String string1 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("w_K b#6Y}S[:s74Pk%", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "^&/");
      Option option0 = new Option("", "MM BOQpdn$LmN)3v%", true, "dr C");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption((String) null, "JPfj", false, "A");
      helpFormatter0.printHelp("[", "[", options3, "   ");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "[";
      objectArray0[1] = (Object) option0;
      objectArray0[2] = (Object) options3;
      objectArray0[3] = (Object) options1;
      PrintWriter printWriter0 = mockPrintWriter0.format("[", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 74, 31, "A");
      assertEquals("[A\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      String string0 = "cmdLineSyntax not provided";
      StringBuffer stringBuffer0 = new StringBuffer("cmdLineSyntax not provided");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, "cmdLineSyntax not provided");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setWidth(0);
      helpFormatter0.getDescPadding();
      Writer writer0 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setDescPadding(1);
      helpFormatter0.getDescPadding();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", false, "");
      option0.setOptionalArg(false);
      options0.getOptions();
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", "-", false, "usage: ");
      options2.toString();
      helpFormatter0.printHelp("=X*L!?h6", "", options2, "");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1), (-1), "z");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setArgName("");
      helpFormatter0.setNewLine("");
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "|ur5lC.Q[33PZuA8`");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // |ur5lC.Q[33PZuA8`
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = 44;
      String string0 = "`W";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-893), 44, "`W");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "F$`N OA|I";
      helpFormatter0.setArgName((String) null);
      helpFormatter0.getLongOptPrefix();
      String string0 = "M]zdcT$3~`6LWx1J{3";
      MockPrintStream mockPrintStream0 = new MockPrintStream("M]zdcT$3~`6LWx1J{3");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "F$`N OA|I";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "y(^@2km/HDgoX4O";
      objectArray0[3] = (Object) mockPrintStream0;
      mockPrintWriter0.printf("y(^@2km/HDgoX4O", objectArray0);
      int int0 = (-2);
      Options options0 = new Options();
      options0.addOption("", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("-", false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" [ARG]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter2, (-1805), " | ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", false, " ");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("A CloneNotSupportedException was thrown: ", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      int int0 = 801;
      String string0 = "-s5.";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        options1.addOption("[", "[", false, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "BSV";
      int int0 = 195;
      helpFormatter0.findWrapPos("BSV", 195, 195);
      helpFormatter0.getSyntaxPrefix();
      String string1 = "]";
      try { 
        MockURI.URI("]", "!/uw>WJTpxh3j+Mw1.", "!/uw>WJTpxh3j+Mw1.", "83)lQk\"iyB)", "-");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: ]://!%2Fuw%3EWJTpxh3j+Mw1.!/uw%3EWJTpxh3j+Mw1.?83)lQk%22iyB)#-
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      int int0 = 0;
      Options options0 = new Options();
      String string0 = "-";
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("-", "usage: ", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
