/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 20:37:02 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.List;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "Vc]HF o[\"/@6L4h");
      File file0 = MockFile.createTempFile("Vc]HF o[\"/@6L4h", "-", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, "Vc]HF o[\"/@6L4h");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      Options options0 = new Options();
      helpFormatter0.setWidth(44);
      helpFormatter0.printHelp("\n", "\n", options0, "\n", false);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultWidth = 2;
      options0.getOptionGroups();
      helpFormatter0.printHelp("\n", "\n", options0, "\n", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.OptionValidator", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = ">";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.createPadding(2867);
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.setOptPrefix("_Do9!#S#o");
      helpFormatter0.rtrim("_Do9!#S#o");
      helpFormatter0.getDescPadding();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptPrefix();
      String string0 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName((String) null);
      StringBuffer stringBuffer0 = new StringBuffer("--");
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, 1, "GPjFG;!c[#:;L");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.append((CharSequence) "--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("arg", false, "O>kD3aKK[C)H5j}J");
      helpFormatter0.setLeftPadding(2489);
      helpFormatter0.findWrapPos(" ]", 0, 0);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 2489, "\n");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, true, "");
      optionGroup0.addOption(option0);
      Options options0 = new Options();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 842, "  ", "dfK l", options1, 842, 696, "  ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "--", true, "[");
      optionGroup0.addOption(option0);
      Option option1 = new Option("arg", "usage: ", true, "-");
      optionGroup0.addOption(option1);
      Options options0 = new Options();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("-", "-", options0, "\n", true);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append('I');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--", 0, 0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 0, 61, "wu");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "-");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, ">", ">", options2, 9, 1, "/(3M50}%[Pk");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 5850;
      StringWriter stringWriter0 = new StringWriter(5850);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      mockPrintWriter0.println();
      mockPrintWriter0.println(true);
      int int1 = 520;
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "--", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-979), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-600));
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderWrappedText(stringBuffer0, 74, (-2288), "--");
      helpFormatter0.getLeftPadding();
      helpFormatter1.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options0 = new Options();
      Options options1 = options0.addOption("", (String) null, false, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("arg", false, "usage: ");
      helpFormatter0.printHelp("GPjFG;!c[#:~L", options3);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.defaultLeftPad = 0;
      Options options0 = new Options();
      helpFormatter0.setLeftPadding(1);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "K", "K", options0, "K");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = new StringBuffer(3);
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[89yNrQp5Y}->E");
      PrintWriter printWriter0 = mockPrintWriter0.append('s');
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "DGY_B=?N;!\"uJT";
      helpFormatter0.defaultLeftPad = (-2234);
      helpFormatter0.setArgName("DGY_B=?N;!\"uJT");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.defaultWidth = (-2234);
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.getOptPrefix();
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("--", (-2234), (-2451));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(798, "N nQb2;KE#t%9QPIP", "N nQb2;KE#t%9QPIP", (Options) null, "N nQb2;KE#t%9QPIP", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "-", false, "usage: ");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.defaultNewLine = "ufRGwQ;bDP6~dU*82K";
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.findWrapPos(" ", 1605, 74);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 3, options0, 74, 13);
      helpFormatter0.printHelp("p9!6]Rg7d6q1$ryJqNv", options0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth((-1346));
      Options options1 = options0.addOption("arg", (String) null, true, "qy8k@aTowtOmS");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("-", "qy8k@aTowtOmS", options1, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultSyntaxPrefix = null;
      StringBuffer stringBuffer0 = new StringBuffer("-");
      helpFormatter0.renderOptions(stringBuffer0, 2, options0, 2, 2);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("NO_ARGS_ALLOWED", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setDescPadding((-2575));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("=x0YpN=`zCJ:!c2dh72", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.setLeftPadding(74);
      helpFormatter0.setLeftPadding((-760));
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", "", true, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("usage: ", "", options0, "-", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":m?=r");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "b");
      byteArray0[0] = (byte) (-1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.getWidth();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1, true);
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions(mockPrintWriter0, (-2904), options0, (-2904), 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("' contains an illegal character : '");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "SjgN~=~b", (String) null, (Options) null, 1, 36, "t;aTW(nF5i<3HY");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      boolean boolean0 = false;
      Options options1 = options0.addOption("", " ", false, "usage: ");
      options1.addOption((String) null, false, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ] [ long ", " ] [ long ", options0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 1, "", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      optionGroup0.setRequired(true);
      Option option0 = new Option("arg", "ASV`].&Q3", true, "");
      optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup0);
      MockFile mockFile0 = new MockFile((String) null, "usage: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.format("line.separator", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      options2.addOption("", true, "arg");
      OptionGroup optionGroup1 = new OptionGroup();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1820), (String) null, options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      helpFormatter1.printHelp(":\"/vdk", ":\"/vdk", options1, "usage: ", true);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.renderOptions(stringBuffer0, 1, options1, 63, 74);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("B,eb%", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding(1);
      StringBuffer stringBuffer0 = new StringBuffer();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) stringBuffer0;
      objectArray0[1] = (Object) filterOutputStream0;
      objectArray0[2] = (Object) filterOutputStream0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) stringBuffer0;
      objectArray0[5] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "", options0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultArgName;
      Options options0 = new Options();
      String string1 = "";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Options options1 = new Options();
      int int0 = 34;
      boolean boolean0 = true;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 111, "[ option: ", (String) null, options0, 34, 2, "", true);
      helpFormatter0.getWidth();
      int int1 = 5;
      String string2 = "t%,X6XG,{@R";
      // Undeclared exception!
      try { 
        options1.addOption("[@7VWZZJgO,", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '[@7VWZZJgO,' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = helpFormatter0.defaultArgName;
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 34, options0, 34, 2072);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 34, (-1199), "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", (String) null, true, "-");
      option0.clearValues();
      option0.clearValues();
      optionGroup0.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.getMatchingOptions("' was specified but an option from this group ");
      options1.hasShortOption("");
      helpFormatter0.printHelp("#.3dY5", "", options1, "#.3dY5", true);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(5850);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      mockPrintWriter0.println();
      mockPrintWriter0.println(true);
      stringWriter0.append('*');
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 5850, 520, "");
      helpFormatter0.setArgName("");
      helpFormatter0.getWidth();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      helpFormatter0.getLeftPadding();
      helpFormatter0.findWrapPos("", 74, 64);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 506, 506, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Options options0 = new Options();
      String string0 = "arg";
      int int0 = 53;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 53, "tx\"{m9\")](}QJZ$t", "arg", options0, 8, 1174, (String) null, false);
      options0.getMatchingOptions("]");
      int int1 = (-2154);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-2154));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getNewLine();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Options options0 = new Options();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 13, "tx\"{m9\")](}QJZ$t", "usage: ", options0, 74, 111, "arg", false);
      options0.getMatchingOptions("--");
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.append('6');
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "bw", "\n", options0, 917, (-1163), "Tj0.Y+B5bm(\"pM");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultNewLine;
      Options options0 = new Options();
      helpFormatter0.printHelp("6", "6", options0, "6", false);
      helpFormatter0.findWrapPos("\n", 2738, 0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getNewLine();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Options options0 = new Options();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 13, "tx\"{m9\")](}QJZ$t", "usage: ", options0, 74, 111, "arg", false);
      options0.getMatchingOptions("--");
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.append('6');
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 917, "Tj0.Y+B5bm(\"pM", "bw", options0, 111, 3796, "\n");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 16, "@f<iG0 PD#u", "arg", options0, 74, 74, "", true);
      StringWriter stringWriter0 = new StringWriter(74);
      stringWriter0.append('6');
      Options options1 = options0.addOption("", true, "@f<iG0 PD#u");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1947, "", "", options1, 603, (-1), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer("");
      int int0 = 34;
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "");
      Options options2 = options1.addOption("", "usage: ", true, "--");
      String string1 = "-";
      options0.hasShortOption("-");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "usage: ", true, "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      optionGroup1.addOption(option0);
      Options options4 = options3.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 34, options4, 31, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedInputStream pipedInputStream0 = new PipedInputStream(74);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)53;
      pipedOutputStream0.write(byteArray0);
      mockPrintWriter0.append('\\');
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 212, " ");
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (int) (byte)13, "<", "", options0, 436, (int) (byte)53, "arg");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.setLeftPadding(44);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 612, (-1203), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(pipedOutputStream0, true);
      String string0 = "_~`rh<`H8<KQz";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 74, "_~`rh<`H8<KQz", "", options1, 2567, (-1130), "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding(1);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-3), 1, "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(pipedOutputStream0, true);
      int int0 = 11;
      String string0 = "_~`rh<`H8<KQz";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 11, "_~`rh<`H8<KQz", "@f<iG0 PD#u", options1, 2567, (-1130), "@f<iG0 PD#u", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) helpFormatter0;
      mockPrintWriter0.print(true);
      objectArray0[1] = (Object) helpFormatter2;
      objectArray0[2] = (Object) "\n";
      objectArray0[3] = (Object) "-";
      objectArray0[4] = (Object) "P&o";
      objectArray0[5] = (Object) mockPrintWriter1;
      objectArray0[6] = (Object) options0;
      Object object0 = new Object();
      objectArray0[7] = object0;
      objectArray0[1] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf("P&o", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter2.printUsage((PrintWriter) mockPrintWriter1, 3, "[ Options: [ short ", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      helpFormatter1.defaultSyntaxPrefix = "-";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "[ Options: [ short ", "T,CiOo/", options0, 3, 2567, "-", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(true);
      options1.addOption((String) null, "usage: ", true, "--");
      OptionGroup optionGroup1 = new OptionGroup();
      Option option0 = new Option("arg", "ASV`].&Q3", true, "o[!hVWU!\"-HkYefI{");
      optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("-", "/iX}~|tfo%4j%pW&dL7", options0, "m>d.9eFX", true);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.getOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter1;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) options0;
      objectArray0[5] = (Object) helpFormatter1;
      objectArray0[6] = (Object) null;
      Object object0 = new Object();
      objectArray0[7] = object0;
      PrintStream printStream0 = mockPrintStream0.printf("!xj`", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      int int0 = (-7641);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, " ", "x,}9m2a$6QUDW@DUk3", options0, (-7641), (-1), "arg", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getNewLine();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options0.addOptionGroup(optionGroup1);
      helpFormatter2.printHelp("[6 E:R)", "usage: ", options2, "FMW<-1$k`3g'5R~[E0", false);
      MockFile mockFile0 = new MockFile("<-y:TO[t)", "-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append('C');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 37, "-", options2);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.append((CharSequence) "--");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(byteArrayOutputStream0, true);
      helpFormatter1.defaultLeftPad = 2;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 54, (String) null, "{$ZpGZ", options0, 780, (-389), "@GjD/%[b5]9e'w<", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arg");
      String string0 = "";
      Options options0 = new Options();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = null;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      mockPrintWriter0.println((double) 3);
      mockPrintWriter0.println((-1311));
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 37, "");
      int int0 = 63;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 63, "", "", options0, 37, 63, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("O", "=|?=f+`");
      Options options1 = options0.addOption(option0);
      helpFormatter1.printHelp("\n", " ", options1, ",z9KiqPuQ0Hr<q6tTI", false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      int int0 = (-7);
      Option option1 = new Option("", "-", true, "arg");
      Options options2 = options1.addOption(option1);
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, (-7), options2, 3, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.append((CharSequence) "--");
      Options options0 = new Options();
      helpFormatter0.setLeftPadding(2489);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 74, options0, 74, 0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 29, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.getOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, "arg", ".$#\"[Xaf!V27", options0, 36, 3, "\n", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("L1Z_4(!C'g/-Jh[");
      helpFormatter0.setDescPadding((-273));
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos(":H4g.~q6 )Q", (-273), (-273));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.rtrim(" ");
      helpFormatter0.createPadding(31);
      helpFormatter0.setNewLine("usage: ");
      String string0 = helpFormatter0.defaultSyntaxPrefix;
      helpFormatter0.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = null;
      helpFormatter0.setOptionComparator((Comparator) null);
      String string0 = null;
      helpFormatter0.optionComparator = null;
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "-", "org.apache.commons.cli.HelpFormatter", options0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)111;
      byteArray0[7] = (byte)31;
      byteArray0[8] = (byte)2;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.setOptPrefix("org.apache.commons.cli.OptionGroup");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      options1.addOption("arg", false, " ");
      String string0 = "Er?QL>QDtw)";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1040), "", "arg", options0, "Er?QL>QDtw)", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.append((CharSequence) "--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("arg", false, "O>kD3aKK[C)H5j}J");
      helpFormatter0.setLeftPadding(2489);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 2489, "\n");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = null;
      int int0 = 2551;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.setDescPadding(1101);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Locale locale0 = Locale.forLanguageTag("usage: ");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "\n";
      objectArray0[1] = (Object) mockPrintWriter0;
      PrintWriter printWriter1 = mockPrintWriter1.printf(locale0, "arg", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter1, 2551, (Options) null, 2551, 2551);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", options0);
      helpFormatter0.printHelp("P,sCjP_,2(WQR", "'wT2|j", options0, "B");
      helpFormatter0.getOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("B");
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 32, "-");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.append((CharSequence) "--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("arg", false, "O>kD3aKK[C)H5j}J");
      helpFormatter0.setLeftPadding(2489);
      StringBuffer stringBuffer0 = new StringBuffer();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("arg");
      FileSystemHandling.createFolder(evoSuiteFile0);
      helpFormatter0.rtrim("1~V:");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 533, "usage: ");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("arg", true, "arg");
      OptionGroup optionGroup1 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup1);
      optionGroup1.setRequired(true);
      options1.addOption("arg", "org.apache.commons.cli.HelpFormatter$1", true, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      OptionGroup optionGroup2 = new OptionGroup();
      Option option0 = new Option((String) null, "", true, "usage: ");
      optionGroup2.addOption(option0);
      Options options3 = new Options();
      helpFormatter0.printHelp("3xq.\u0002ZM/,D#YMQ@", " ", options2, "-", false);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.append((CharSequence) "--");
      int int0 = 0;
      Options options0 = new Options();
      String string0 = "hm\\k92+bLY+";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "hmk92+bLY+", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("arg", "-");
      Options options0 = new Options();
      Options options1 = options0.addOption("Cm", false, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      options2.addOption(option0);
      helpFormatter0.printHelp("R?KG;#g", ",z9KiqPuQ0Hr<q6tTI", options1, (String) null, false);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 102, 44);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      int int0 = 32;
      Options options0 = null;
      int int1 = 1383;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 32, (Options) null, 32, 1383);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", false, "-");
      helpFormatter0.printHelp(436, ">", ">", options2, "arg", false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("O|r,k'RFs", objectArray0);
      helpFormatter0.printUsage(printWriter0, 436, "arg", options1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 63;
      String string0 = "n";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp("n", options0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      options1.getOption("--");
      String string1 = ", ";
      // Undeclared exception!
      try { 
        options1.addOption("cmdLineSyntax not provided", "-", false, ", ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'cmdLineSyntax not provided' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 12, "(BZ7@U?&g254\"3,@@");
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.rtrim(" ");
      helpFormatter0.setLeftPadding(2489);
      helpFormatter0.rtrim((String) null);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-3360), 11, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "~;9=wMA>a";
      optionGroup0.setRequired(true);
      helpFormatter0.getArgName();
      optionGroup0.toString();
      Option option0 = null;
      try {
        option0 = new Option("~;9=wMA>a", "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '~;9=wMA>a' contains an illegal character : '~'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(74, "1R", "1R", options0, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "~;9=wMA>a";
      optionGroup0.toString();
      Option option0 = null;
      try {
        option0 = new Option("~;9=wMA>a", "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '~;9=wMA>a' contains an illegal character : '~'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", "mo", (Options) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 3988;
      StringWriter stringWriter0 = new StringWriter();
      boolean boolean0 = true;
      stringWriter0.write("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("\n");
      String string0 = "]";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-6), "]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arg");
      Options options0 = new Options();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      mockPrintWriter0.println((-1311));
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 34, "");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 63, 63, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer(1193);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)14;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.renderWrappedText(stringBuffer0, 595, 106, "");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(381);
      StringWriter stringWriter0 = new StringWriter(517);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 381, 19, "xl./y0U0C?j");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("O", "=|?=f+`");
      Options options1 = options0.addOption(option0);
      helpFormatter1.printHelp("\n", " ", options1, ",z9KiqPuQ0Hr<q6tTI", false);
      helpFormatter1.findWrapPos("\n", 44, 74);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-3072), (-1), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "usage: ", "kYkPI&", options0, "kYkPI&", false);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", "--", options0, "-", false);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos(" ", (-2484), (-2944));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.rtrim("--");
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
      helpFormatter0.setNewLine("$wlXjS+'o_9&j");
      String string1 = helpFormatter0.defaultSyntaxPrefix;
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.createPadding(0);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", 103, (-351));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp("-", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options0, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "usage: ", "kYkPI&", options1, "usage: ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 3988;
      int int1 = (-5054);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("\n");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 0, "]");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      String string0 = helpFormatter0.rtrim("\n");
      assertEquals("", string0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp("\n", "\n", options0, "", true);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("gd6STQMbv#iV2s\":");
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("#");
      helpFormatter0.printHelp("cmdLineSyntax not provided", "gd6STQMbv#iV2s\":", options0, "org.apache.commons.cli.HelpFormatter$OptionComparator", false);
      assertEquals("#", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 595;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("usage: ");
      mockPrintWriter2.append('\'');
      MockPrintWriter mockPrintWriter3 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter2.append('\'');
      String string0 = "";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter3, 595, "");
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("usage: ", "--", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(true);
      options1.addOption((String) null, "y|", true, "--");
      OptionGroup optionGroup1 = new OptionGroup();
      Option option0 = new Option("", "\n", false, "org.apache.commons.cli.HelpFormatter");
      optionGroup1.addOption(option0);
      Options options2 = new Options();
      helpFormatter0.printHelp("-", "-", options0, "c@{24AKQhC<b|", true);
      assertEquals("arg", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("-");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, "arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // arg
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      int int0 = 356;
      helpFormatter0.defaultWidth = 356;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setDescPadding((-1));
      helpFormatter0.setNewLine(" ");
      assertEquals((-1), helpFormatter0.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 595, 595, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(true);
      options1.addOption((String) null, "y|", true, "--");
      OptionGroup optionGroup1 = new OptionGroup();
      Option option0 = new Option("", "\n", false, "org.apache.commons.cli.HelpFormatter");
      optionGroup1.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("y|", "y|", options1, "y|");
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1303));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 44;
      helpFormatter0.setWidth(44);
      String string0 = "Z0e,>";
      helpFormatter0.rtrim("Z0e,>");
      String string1 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", false, "O>kD3aKK[C)H5j}J");
      String string0 = null;
      Option option0 = new Option((String) null, "\n", false, "The option '");
      optionGroup0.addOption(option0);
      Options options3 = options2.addOption(option0);
      helpFormatter0.defaultArgName = "O>kD3aKK[C)H5j}J";
      Options options4 = options3.addOption("", "\n", false, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 0, options4, 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      String string0 = "W<qbZ>dO7~K\\";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("W<qbZ>dO7~K", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'W<qbZ>dO7~K' contains an illegal character : '<'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", "-", false, "9%9Ac^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "eZ/A\"@iig.\\&@";
      helpFormatter0.setArgName("eZ/A\"@iig.&@");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      int int0 = 321;
      mockPrintWriter0.print((Object) helpFormatter0);
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "eZ/A\"@iig.&@", 321, 31);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      mockPrintWriter1.print((long) 1);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 2862, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      int int0 = 1209;
      Options options0 = new Options();
      options0.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1209, "", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(2072);
      Options options0 = new Options();
      options0.toString();
      Options options1 = options0.addOption("", false, "YGF2NnF:7-ms");
      boolean boolean0 = false;
      helpFormatter0.printHelp("~Pnep')q73-g^R", options1, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "YGF2NnF:7-ms", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.createPadding(0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      helpFormatter0.defaultDescPad = 31;
      helpFormatter0.setLongOptSeparator((String) null);
      Options options0 = new Options();
      helpFormatter0.printHelp("gF~#OC", "a]G", options0, "]", true);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-2));
      assertEquals((-2), helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setLeftPadding(0);
      String string0 = "";
      String string1 = "5n$r.D3eW=L,DKL";
      Options options0 = new Options();
      boolean boolean0 = false;
      String string2 = "$ni";
      // Undeclared exception!
      try { 
        options0.addOption("--", false, "$ni");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1174);
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      helpFormatter0.renderWrappedText(stringBuffer0, 1174, 1174, "|X${;!zX%\"");
      helpFormatter0.setDescPadding(4409);
      assertEquals(4409, helpFormatter0.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 0;
      Options options0 = new Options();
      String string0 = null;
      Option option0 = null;
      try {
        option0 = new Option("-", true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.rtrim(" ");
      helpFormatter0.createPadding(31);
      helpFormatter0.setNewLine("                               ");
      assertEquals("                               ", helpFormatter0.getNewLine());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("e");
      helpFormatter0.getLeftPadding();
      String string0 = "has already been selected: '";
      String string1 = "Aq*>r!d}GF!Xh";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", true, "has already been selected: '");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      String string1 = ">2";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      int int0 = (-2);
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("-", "-", false, "e[;$yz\"(s=a");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("line.separator");
      assertEquals("line.separator", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      List list0 = options0.helpOptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.AlreadySelectedException");
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "";
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) "org.apache.commons.cli.AlreadySelectedException";
      objectArray0[4] = (Object) options0;
      objectArray0[5] = (Object) list0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      helpFormatter0.printOptions(printWriter0, 0, options0, 15, 0);
      helpFormatter0.getDescPadding();
      helpFormatter0.setWidth(595);
      assertEquals(595, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 2137;
      helpFormatter0.getDescPadding();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = null;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("--", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      String string1 = "%-G^A]IGd/>";
      String string2 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-641), "%-G^A]IGd/>", (String) null, options0, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
