/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 20:33:49 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth((-45));
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      String string0 = "";
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Locale locale0 = Locale.JAPAN;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "--", (Object[]) null);
      int int0 = 20;
      int int1 = 43;
      helpFormatter0.printWrapped(printWriter0, 20, 43, "");
      String string1 = null;
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim((String) null);
      int int2 = 4967;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options1.addOption("[:4l{!v;<PkHFH[&mJ", "\"", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '[:4l{!v;<PkHFH[&mJ' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      Option option0 = new Option("", "g", true, "--");
      FileSystemHandling.shouldAllThrowIOExceptions();
      OptionGroup optionGroup0 = new OptionGroup();
      option0.setLongOpt("arg");
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      options0.hasLongOption("y/5 Hb~T{LY}$>c");
      option0.setArgName("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string1 = "";
      PrintWriter printWriter0 = null;
      int int0 = 1;
      String string2 = "'";
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) null, 74, 1, "'");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-1));
      Options options0 = new Options();
      options0.hasLongOption("<");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", "\n", options0, "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-910));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("f0jzS2;:[", "f0jzS2;:[", options0, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.printHelp("' contains an illegal character : '", options0, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.printHelp("' contains an illegal character : '", "' contains an illegal character : '", options0, "", true);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getOptPrefix();
      helpFormatter0.printHelp(3483, "' contains an illegal character : '", "", options0, "' contains an illegal character : '", false);
      options0.getMatchingOptions("zp}Yc7]m_ [");
      options0.addOption("arg", "U.9%*;0R'CI", false, "E}-_m+<q%CAf_");
      helpFormatter0.printHelp("CRv@}HH", options0, true);
      helpFormatter0.createPadding(103);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "g", true, "--");
      FileSystemHandling.shouldAllThrowIOExceptions();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      options0.hasLongOption("y/5 Hb~T{LY}$>c");
      option0.setArgName("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(" ", "", options0, (String) null);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "g", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      options0.hasLongOption("|/5 Hb~T{LY}$>c");
      option0.setArgName("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "jk3re)VacmuC2(D0d", "--", options0, "arg", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("\n");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("`+8dL?P", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(34);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.defaultWidth = 40;
      helpFormatter0.getOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getDescPadding();
      String string0 = "%<u_>T'XZf";
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "-", false, "[");
      // Undeclared exception!
      try { 
        options1.addOption("6v[", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '6v[' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      options0.addOption("arg", "arg", true, "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.toString();
      Options options1 = options0.addOption("", true, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, "arg", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      options0.hasLongOption("");
      helpFormatter0.setWidth(3);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("v4%\t)/cyax?6-g|#\"", options0, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      Options options0 = null;
      int int0 = 13;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-172), (Options) null, 13, 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter$OptionComparator");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", false, "arg");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.printHelp(46, "org.apache.commons.cli.HelpFormatter$OptionComparator", "", options0, "");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setArgName((String) null);
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.getArgName();
      PrintWriter printWriter0 = null;
      int int0 = 0;
      Options options0 = new Options();
      options0.getOption("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-468), "", " ]", options0, (-1), 0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", (String) null, true, "arg");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOption("arg", "arg", true, "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(4692);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) optionGroup0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 4692, "\n", "\n", options1, (-57), 96, (String) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "m[-r5F.nK-_(6(";
      options0.addOption((String) null, "", false, "m[-r5F.nK-_(6(");
      Option option0 = new Option("arg", (String) null, false, "arg");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, "--", "arg", options0, " ", true);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", options1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", (String) null, true, "arg");
      optionGroup0.addOption(option0);
      StringBuffer stringBuffer0 = new StringBuffer("");
      option0.clearValues();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, (-2), "3>Ll(hjg~*%a;ue s]");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      options1.getOption("arg");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.printHelp(6, "\n", "-", options0, "\n", false);
      Options options2 = options1.addOption((String) null, false, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      options2.addOptionGroup(optionGroup0);
      helpFormatter0.findWrapPos("\n", 116, (-628));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("org.apache.commons.cli.HelpFormatter$OptionComparator", 320, 10);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 37, options0, 37, 576);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      OptionGroup optionGroup0 = new OptionGroup();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter$OptionComparator");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "org.apache.commons.cli.HelpFormatter$OptionComparator", true, (String) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      String string0 = "[ Options: [ short ";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, "usage: ", "org.apache.commons.cli.HelpFormatter$OptionComparator", options1, "", true);
      int int0 = 0;
      // Undeclared exception!
      try { 
        options0.addOption("Gx*`[", "\n", true, "L`txy(Gd9KxL");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'Gx*`[' contains an illegal character : '*'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOption((String) null, "\n", true, "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "--", "<", options0, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(32, "5c+FZ}N0GGp", "kW0nO", (Options) null, "5c+FZ}N0GGp");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", "\n", options0, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("arg", "--", options0, "");
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 31, "A!gfs`K*wWB");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      OptionGroup optionGroup0 = new OptionGroup();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter$OptionComparator");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", false, "arg");
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "org.apache.commons.cli.HelpFormatter$OptionComparator", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("   ", 0, 0);
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = 0;
      Option option0 = new Option("", "r$ZM@?Xc<V-IVB0");
      Options options1 = new Options();
      Options options2 = options0.addOption("", "\n", true, "\n");
      Options options3 = options2.addOption("", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options4 = options3.addOptionGroup(optionGroup1);
      MockFile mockFile0 = new MockFile((String) null, "]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) options4;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      PrintWriter printWriter0 = mockPrintWriter0.format(" :: ", objectArray0);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "_U+HBo<C", options2);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 34, "H", (String) null, options0, 0, 9, "Jv6|-l/QqG", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp(3, "", "C-']9lQA?D(wug,(hi", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, (String) null, true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(30, "line.separator", "]", options1, "FfgSzJ7KI2|QHL|");
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = (-1170);
      options0.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("usage: ", "", options0, "org.apache.commons.cli.HelpFormatter$OptionComparator", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getOption("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.getArgName();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setWidth((-2));
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("\n", options0);
      helpFormatter1.defaultOptPrefix = "--";
      helpFormatter0.rtrim("--");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, "--");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("\n");
      int int0 = (-2826);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("8kwKKnRAz9lXZ", (String) null, true, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2826), "\n", (String) null, options2, "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("--", "{RkB?SZt+EFNlaTAL");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'w';
      charArray0[1] = 'w';
      charArray0[2] = 'L';
      charArray0[3] = 'w';
      mockPrintWriter0.write(charArray0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "arg", "", options0, 13, 1, "", false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(2, "--", "usage: ", options0, "{RkB?SZt+EFNlaTAL");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      Options options0 = new Options();
      Options options1 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("f{}%zpP6=]C@_>t)@");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "]*.|ygKO]-.Z{7qL\"";
      objectArray0[1] = (Object) "]*.|ygKO]-.Z{7qL\"";
      objectArray0[2] = (Object) helpFormatter0.optionComparator;
      objectArray0[3] = (Object) helpFormatter0.optionComparator;
      objectArray0[4] = (Object) "]*.|ygKO]-.Z{7qL\"";
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) "ew`3AFf<t;a e";
      objectArray0[7] = (Object) mockPrintWriter1;
      objectArray0[8] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter1.format(locale0, " ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 9, "", "SzI]u2", options1, (-1401), 16, "SzI]u2", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(" ", "--").when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultNewLine = "";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      helpFormatter0.printHelp("!2/.O50n_I>`0T[v6__", "", options0, (String) null, true);
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("'");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1930, 1930, "");
      helpFormatter0.rtrim("\n");
      helpFormatter0.rtrim("");
      helpFormatter0.renderWrappedText(stringBuffer1, 1930, 1930, "");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "_";
      PrintWriter printWriter0 = null;
      int int0 = 34;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 34, "[", "_", options1, 667, 667, "|N{f", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      helpFormatter0.setArgName("-");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      String string0 = "cmdLineSyntax not provided";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 1, (String) null, "-", (Options) null, (-98), 9, "cmdLineSyntax not provided", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = " [ARG]";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setArgName("$");
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[7];
      charArray0[1] = 'r';
      StringWriter stringWriter1 = new StringWriter();
      stringWriter1.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 101, " [ARG]", "$", options0, 9, 101, (String) null, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(4689, "ew`3AFf<t;a e", "Ix!)", options0, (String) null);
      helpFormatter0.setWidth(1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      helpFormatter0.setNewLine("QWnN^R3z7AreNmi^*%");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getDescPadding();
      helpFormatter0.setArgName(">g@eW");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 3, options0, 9, 3);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "_", "]*.|ygKO]-.Z{7qL\"", options0, 9, 9, "]*.|ygKO]-.Z{7qL\"", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(" ", (String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultNewLine = "f{}%zpP6=]C@_>t)@";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      helpFormatter0.setArgName("2*ji");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 24, ":(6I0dP>aGH@?O", "", options0, 2238, 9, ":(6I0dP>aGH@?O", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "]", "", options0, "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      int int0 = 1;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UCFn9gmh%%");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.hasLongOption("");
      stringBuffer0.codePoints();
      options0.getOptionGroups();
      optionGroup0.setRequired(true);
      Options options2 = options1.addOption("arg", "arg", true, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, options2, 1, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("~ L/`Z%G{");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 342, "", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = " [ARG]";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("arg").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "$";
      helpFormatter0.setArgName("$");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      stringWriter0.write("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      int int0 = 9;
      String string1 = "line.separator";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, " [ARG]", "$", options0, (-2252), (-2252), "line.separator", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", (String) null, false, "");
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(100, "-", "-", options0, "LYdbs3l.PM/1", true);
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, 41, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      String string0 = "$";
      helpFormatter0.setArgName("usage: ");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      String string1 = "]*.|ygKO]-.Z{7qL\"";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2238, "]*.|ygKO]-.Z{7qL\"", "$", options0, (-1573), (-2669), "usage: ", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = " [ARG]";
      String string0 = "";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("arg").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      String string1 = "$";
      helpFormatter0.setArgName("$");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      int int0 = 9;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, " [ARG]", "", options0, (-2252), (-2252), "line.separator", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("\n");
      int int0 = 31;
      int int1 = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (-1), options0, 31, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      helpFormatter0.getOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "", false, "#V[+Iy\u0006");
      optionGroup0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.rtrim(" ");
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "P,e", false, "");
      optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1038), "P,e", "P,e", options2, "RKY5~=R~2.", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1354;
      StringWriter stringWriter0 = new StringWriter(1354);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringWriter0.write(74);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.renderWrappedText(stringBuffer0, 1354, 1354, "2QrPN#&.pyW:l1w");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "2QrPN#&.pyW:l1w";
      objectArray0[2] = (Object) stringBuffer0;
      objectArray0[3] = (Object) "2QrPN#&.pyW:l1w";
      objectArray0[4] = (Object) stringBuffer0;
      objectArray0[5] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[6] = object0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      objectArray0[7] = (Object) "2QrPN#&.pyW:l1w";
      Object object1 = new Object();
      objectArray0[8] = object1;
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-470), "2QrPN#&.pyW:l1w");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Ldkx";
      helpFormatter0.defaultOptPrefix = "Ldkx";
      helpFormatter0.setOptPrefix("<");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.defaultArgName = "Ldkx";
      helpFormatter0.getOptPrefix();
      Options options0 = null;
      helpFormatter0.setOptionComparator((Comparator) null);
      String string1 = "";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(13, "K", "Ldkx", (Options) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(14, "'", "'", options1, "'");
      helpFormatter0.setLongOptPrefix("");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultSyntaxPrefix = "-";
      helpFormatter0.getWidth();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      helpFormatter0.renderOptions(stringBuffer0, 74, options0, 14, 14);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      options0.addOption("", "usage: ", false, "-");
      options0.hasOption("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(92, "", "=O$v$V", options0, "=O$v$V", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.findWrapPos("   ", 0, 0);
      Options options0 = new Options();
      int int1 = (-2);
      helpFormatter0.defaultLeftPad = (-2);
      Options options1 = options0.addOption("", false, "r$ZM@?Xc<V-IVB0");
      Option option0 = new Option("", "r$ZM@?Xc<V-IVB0");
      options1.addOption(option0);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "   ", "   ", options1, "org.apache.commons.cli.Options");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("   ", 74, 74);
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = (-1);
      String string0 = "";
      Option option0 = new Option("", "r$ZM@?Xc<V-IVB0");
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "   ", "   ", options0, "org.apache.commons.cli.Options");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(14, "'", "'", options1, "'");
      helpFormatter0.setLongOptPrefix("");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getDescPadding();
      helpFormatter1.setArgName("arg");
      helpFormatter0.printHelp(" ", "", options1, "-", false);
      helpFormatter1.getWidth();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 9, "m*;A", "m*;A", options0, (-329), (-329), "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getOption("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter$OptionComparator");
      char[] charArray0 = new char[0];
      mockPrintWriter0.write(charArray0);
      helpFormatter0.printHelp(4617, "Z/w9mwd8", "oFz?T1U/3V`x)KSQz", options0, "UfqcIM45");
      helpFormatter0.getArgName();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setWidth((-2));
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("\n", options0);
      helpFormatter1.defaultOptPrefix = "--";
      helpFormatter1.setWidth((-56));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      File file0 = MockFile.createTempFile(" :: ", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      helpFormatter0.printHelp(" :: ", options0, true);
      Options options1 = new Options();
      helpFormatter0.printHelp(" :: ", "5G2sJ ", options1, (String) null, false);
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("\n");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      helpFormatter0.renderWrappedText(stringBuffer0, 77, 77, "\n");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Option option1 = new Option("", (String) null, false, "");
      options0.addOption(option1);
      OptionGroup optionGroup2 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(true);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2448), "", "", options2, ")P T|c;hkc87&Xz");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 1);
      BufferedOutputStream bufferedOutputStream1 = new BufferedOutputStream(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream1, false);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, ", ", ", ", options0, (-1912), 36, "");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultSyntaxPrefix = "ZN&_J#&jA";
      helpFormatter0.defaultWidth = 74;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.printHelp("NO_ARGS_ALLOWED", options0, true);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.printHelp("ZN&_J#&jA", "ZN&_J#&jA", options0, "ZN&_J#&jA", true);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultNewLine = "f{}%zpP6=]C@_>t)@";
      helpFormatter0.setDescPadding((-2));
      helpFormatter0.setOptPrefix("");
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.setNewLine("");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(14, "'", "'", options1, "'");
      helpFormatter0.setLongOptPrefix("");
      optionGroup0.setRequired(false);
      option0.setType(fileSystemHandling0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-826), "", "/oUGflPtWHrl ic5n", options0, "/oUGflPtWHrl ic5n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = " [ARG]";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("arg", (String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setArgName("$");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      String string0 = "M=$d&cqGBS zsVul";
      Options options1 = options0.addOption("", "M=$d&cqGBS zsVul", true, "Lk</rzGmh!Z");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.printHelp(28, "[ Options: [ short ", "M=$d&cqGBS zsVul", options1, " :: ", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 1, options1, 1, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      StringWriter stringWriter1 = stringWriter0.append('C');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Options options1 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "_", "qqYTr ;P(T", options0, 5478, 1909, "Cannot add value, list full.", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "usage: ", "-", options0, "Uplq)|");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(">").when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultNewLine = "f{}%zpP6=]C@_>t)@";
      helpFormatter0.setDescPadding((-2));
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "kAZb`V", true, "kAZb`V");
      options1.hasOption("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(7, "f{}%zpP6=]C@_>t)@", "f{}%zpP6=]C@_>t)@", options1, "f{}%zpP6=]C@_>t)@", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 3225);
      BufferedOutputStream bufferedOutputStream1 = new BufferedOutputStream(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream1, false);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 24, "org.apache.commons.cli.Option", "", options0, 48, 24, "org.apache.commons.cli.Option");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " :: ";
      File file0 = MockFile.createTempFile(" :: ", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      helpFormatter0.setDescPadding((-127));
      helpFormatter0.setOptPrefix(" :: ");
      Options options1 = options0.addOption("Q", "", true, "arg");
      options1.hasOption("bz)Mqywp6WY$5");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "W?N1|{zz", "bz)Mqywp6WY$5", options0, "kAZb`V", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(32);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Locale locale0 = Locale.ITALIAN;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) locale0;
      stringWriter0.write(74);
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) stringWriter1;
      Locale.getISOCountries();
      objectArray0[5] = (Object) stringWriter0;
      objectArray0[6] = (Object) stringWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, " ", objectArray0);
      helpFormatter0.printUsage(printWriter0, 118, "C");
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      Option option0 = new Option("arg", false, (String) null);
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(118, "H+qaN/?fRJ", "C", options1, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2930), "x%mv#L&lfwj]X", "", options0, "x%mv#L&lfwj]X");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(32);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Locale locale0 = Locale.ITALIAN;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) locale0;
      stringWriter0.write(74);
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) stringWriter1;
      Locale.getISOCountries();
      objectArray0[5] = (Object) stringWriter0;
      objectArray0[6] = (Object) stringWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, " ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 1, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(3);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = options0.addOption("", true, " ");
      Option option0 = new Option("", "arg", true, "Z:U<2Yo44UM>ZwcCOw");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption((String) null, "-", false, " ");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("arg", options3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "usage: ");
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setArgName("$");
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = helpFormatter1.defaultOptPrefix;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      StringBuffer stringBuffer1 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer1, 74, 1178, "--");
      helpFormatter1.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(32);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Locale locale0 = Locale.ITALIAN;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) locale0;
      stringWriter0.write(74);
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) stringWriter1;
      Locale.getISOCountries();
      objectArray0[5] = (Object) stringWriter0;
      objectArray0[6] = (Object) stringWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, " ", objectArray0);
      helpFormatter0.printUsage(printWriter0, 1, "");
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      Option option0 = new Option("arg", false, (String) null);
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "H+qaNM?fRJ", "", options1, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " :: ";
      File file0 = MockFile.createTempFile(" :: ", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, 74, "W?N1|{zz");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, " :: ", "W?N1|{zz", options0, 3, 3, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setArgName("usage: ");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 0, 1, "t");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 0, options1, 71, (-130));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", (String) null, false, "");
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("");
      helpFormatter1.printHelp(100, "-", "-", options0, "LYdbs3l.PM/1", true);
      helpFormatter1.rtrim("org.apache.commons.cli.HelpFormatter$OptionComparator");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(55, (String) null, " ", options0, "usage: ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 31;
      String string0 = "";
      helpFormatter0.defaultSyntaxPrefix = "";
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 31, options0, 31, 31);
      helpFormatter0.getLongOptSeparator();
      String string1 = "";
      int int1 = 0;
      helpFormatter0.findWrapPos("", 31, 0);
      helpFormatter0.findWrapPos(" ", 906, (-1));
      helpFormatter0.setLongOptSeparator("");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      byteArrayOutputStream0.flush();
      helpFormatter0.printOptions(mockPrintWriter0, 31, options0, 0, 0);
      helpFormatter0.getDescPadding();
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 4617;
      String string0 = "Z/w9mwd8";
      String string1 = "oFz?T1U/3V`x)KSQz";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      options0.getOption("0,^JW!{vWFN");
      String string2 = "UfqcIM45";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter$OptionComparator");
      char[] charArray0 = new char[0];
      mockPrintWriter0.write(charArray0);
      mockPrintWriter0.flush();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "UfqcIM45", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.createPadding(4824);
      helpFormatter0.setSyntaxPrefix(string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      helpFormatter0.printWrapped(printWriter0, 0, (-130), "");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      int int0 = 1798;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "yAsEEwqQI";
      helpFormatter0.setLongOptSeparator("yAsEEwqQI");
      Options options0 = new Options();
      String string1 = "]";
      options0.hasOption("");
      options0.hasShortOption("]");
      options0.getOptions();
      helpFormatter0.printHelp("-", options0, false);
      helpFormatter0.getOptPrefix();
      String string2 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", 1, (-2152));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      int int0 = (-1);
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", (-1), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      Option option0 = new Option((String) null, "--", false, "]");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator(")0");
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "nLpr", "/72$(D{p*#7}E27*[", options0, "", true);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, "Wb@9:O%0=v6c");
      options0.getMatchingOptions("");
      Option option0 = new Option("", true, "usage: ");
      options1.addOption(option0);
      helpFormatter0.printHelp("Lk</rzGmh!Z", "ofQiCe4DDQOB", options1, "1C;q", true);
      helpFormatter0.rtrim(" 2,|x0Ry}`v0~R");
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("]");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "<7\\lbLJ=!sFt";
      Options options0 = new Options();
      helpFormatter0.printHelp("<7lbLJ=!sFt", options0);
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.getLongOptPrefix();
      String string1 = "";
      String string2 = "B\\h8PdqgLAgDcmh'$";
      Option option0 = null;
      try {
        option0 = new Option("Bh8PdqgLAgDcmh'$", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'Bh8PdqgLAgDcmh'$' contains an illegal character : '''
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("$");
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      options0.addOption("", "M=$d&cqGBS zsVul", true, "Lk</rzGmh!Z");
      options0.getMatchingOptions(":C*XI");
      helpFormatter0.printHelp("M=$d&cqGBS zsVul", "$", options0, " ]", true);
      helpFormatter0.rtrim("$");
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("\n");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultNewLine = "f{}%zpP6=]C@_>t)@";
      helpFormatter0.setDescPadding((-2));
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "kAZb`V", true, "kAZb`V");
      options1.hasOption("-");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "f{}%zpP6=]C@_>t)@", "f{}%zpP6=]C@_>t)@", options1, "f{}%zpP6=]C@_>t)@", true);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile(" :: ", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3554, "", "W?N1|{zz", options0, 2493, 1, "org.apache.commons.cli.HelpFormatter$1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "yAsEEwqQI";
      helpFormatter0.setLongOptSeparator("yAsEEwqQI");
      Options options0 = new Options();
      String string1 = "]";
      options0.hasOption("");
      options0.hasShortOption("]");
      options0.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-869);
      helpFormatter0.defaultNewLine = null;
      Options options0 = new Options();
      helpFormatter0.defaultSyntaxPrefix = "ZN&_J#&jA";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-869), "", "Fb*5BM]>j?}21Y=1@", options0, 0, (-869), "NO_ARGS_ALLOWED");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getOptions();
      helpFormatter0.printHelp("9X\"I,$7k b*?", options1);
      String string0 = "";
      Options options2 = new Options();
      boolean boolean0 = true;
      String string1 = " ] [ long ";
      // Undeclared exception!
      try { 
        options2.addOption("--", true, " ] [ long ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1883);
      String string0 = "0+/cI9qs:.\\*?/%B";
      helpFormatter0.setLongOptSeparator("0+/cI9qs:.*?/%B");
      helpFormatter0.defaultLeftPad = (-1883);
      helpFormatter0.setWidth((-1883));
      String string1 = "";
      Options options0 = null;
      String string2 = "-";
      boolean boolean0 = false;
      String string3 = "XQ?$.pRAO";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("XQ?$.pRAO", "0+/cI9qs:.*?/%B", (Options) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("|-:4S*'jl%*`*iDVDs");
      String string0 = "%x,CEj[^isgp`2UU%";
      StringBuffer stringBuffer0 = new StringBuffer("%x,CEj[^isgp`2UU%");
      int int0 = (-1302);
      String string1 = "a'|xg7H9";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1302), (-1302), "a'|xg7H9");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 223;
      helpFormatter0.defaultWidth = 223;
      String string0 = "N?!5:\\+T";
      helpFormatter0.setLongOptPrefix("N?!5:+T");
      MockFile mockFile0 = new MockFile("--", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) "N?!5:+T";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) null;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) mockFile0;
      // Undeclared exception!
      try { 
        mockPrintWriter0.printf(locale0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = null;
      options0.addOption((String) null, "", false, "m[-r5F.nKK>-_(6(");
      Option option0 = new Option("arg", "usage: ", true, "arg");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.hasLongOption("arg");
      options1.hasOption("arg");
      option0.setArgName("!Fj");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, "--", "arg", options0, " ", true);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", options1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("   ", 0, 0);
      Options options0 = new Options();
      Options options1 = new Options();
      Options options2 = options1.addOption("FD", "-", true, "");
      helpFormatter0.getLongOptSeparator();
      Options options3 = new Options();
      helpFormatter0.printHelp(1924, "arg", "wu4nNw+T49J", options3, "[ Options: [ short ", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-1178), options2, 74, 10);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(32);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Locale locale0 = Locale.ITALIAN;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) locale0;
      stringWriter0.write(74);
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) stringWriter1;
      objectArray0[5] = (Object) stringWriter0;
      objectArray0[6] = (Object) stringWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, " ", objectArray0);
      helpFormatter0.printUsage(printWriter0, 118, "C");
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, (String) null);
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(118, "H+qaN/?fRJ", "C", options1, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2930), "x%mv#L&lfwj]X", "", options0, "x%mv#L&lfwj]X");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<Integer> comparator0 = null;
      helpFormatter1.setOptionComparator((Comparator) null);
      helpFormatter0.setArgName("1|=No,#>Jy8$");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("--", "-", true, "ik>9O=y_w5SyEiuF8e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(117);
      StringWriter stringWriter1 = stringWriter0.append('m');
      stringWriter1.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      stringWriter1.close();
      int int0 = 1;
      Options options0 = new Options();
      options0.addOption("arg", "arg", false, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 1, options0, 1, 117);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("--");
      Options options0 = new Options();
      helpFormatter0.printHelp("dt;p%IR/yAF?@--4L\"", options0);
      helpFormatter0.getDescPadding();
      helpFormatter0.getArgName();
      helpFormatter0.findWrapPos("", 3, 1368);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("org.apache.commons.cli.HelpFormatter");
      helpFormatter0.setArgName("");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      helpFormatter1.setOptPrefix("");
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 0, 0, "org.apache.commons.cli.HelpFormatter");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setArgName("$");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      String string0 = "M=$d&cqGBS zsVul";
      Options options1 = options0.addOption("", "M=$d&cqGBS zsVul", true, "Lk</rzGmh!Z");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 1, options1, 1, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getDescPadding();
      int int0 = 168;
      String string0 = "fq!e:oEC:wnsT#";
      Options options0 = new Options();
      String string1 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("i>J]rU1ACJ`ASb7E;=|", (String) null, true, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'i>J]rU1ACJ`ASb7E;=|' contains an illegal character : '>'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      String string0 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-429), 1154, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      int int0 = 1;
      Options options0 = new Options();
      String string0 = "";
      String string1 = "";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "", (File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " :: ";
      File file0 = MockFile.createTempFile(" :: ", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      int int0 = 3554;
      Options options0 = new Options();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3554, 3554, "W?N1|{zz");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3554, " :: ", "W?N1|{zz", options0, 3554, 3554, "");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3554, "=E=0*My", options0);
      helpFormatter0.printHelp("30TKYP:{jH7&_BRHo9?", " :: ", options0, " ");
      int int1 = 0;
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, " ");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.rtrim(" ");
      helpFormatter0.getDescPadding();
      String string0 = "";
      Options options0 = new Options();
      String string1 = "[ARG...]";
      // Undeclared exception!
      try { 
        options0.addOption("-", true, "[ARG...]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(1725);
      helpFormatter0.defaultLeftPad = 1725;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", "org.apache.commons.cli.HelpFormatter$1", (Options) null, "org.apache.commons.cli.HelpFormatter$1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("bK+Em9d[ CBsRyx;5");
      helpFormatter0.setLeftPadding(44);
      String string0 = "usage: ";
      helpFormatter0.defaultOptPrefix = "usage: ";
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-378));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      helpFormatter0.defaultNewLine = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      int int0 = (-3242);
      helpFormatter0.defaultNewLine = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      helpFormatter0.setLeftPadding((-3242));
      String string0 = ",!lFN;0Qvl7/yMT,@";
      helpFormatter0.rtrim(",!lFN;0Qvl7/yMT,@");
      int int1 = 0;
      helpFormatter0.createPadding(0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, int0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
  }
}
