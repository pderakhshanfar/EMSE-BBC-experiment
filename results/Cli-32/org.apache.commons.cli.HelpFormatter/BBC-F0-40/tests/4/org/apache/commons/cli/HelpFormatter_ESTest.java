/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 20:23:24 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.CharBuffer;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte) (-24);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.setLeftPadding((-1221));
      String string0 = "org.apache.commons.cli.Option";
      helpFormatter0.setOptPrefix("org.apache.commons.cli.Option");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.Option", " | ", options0, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, (String) null, true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      option0.setArgName("");
      options1.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("arg", "XE26;fILdqP?", options1, "org.apache.commons.cli.HelpFormatter", true);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.setWidth((-3279));
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(11, "xL\"JsN{88!-e( wm@?", "-BdVVPf!ku", options0, "org.apache.com#ons.cli.ParseException");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "usage: ", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      option0.setArgName("].QYzy[QL W7@}abL");
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("\n", "\n", options1, "\n", true);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 0, "I");
      helpFormatter1.getOptPrefix();
      MockFile mockFile0 = new MockFile("8A");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 0, "\n", "B^E .", options0, 74, 13, ">9z1#;}].M>9gNR%", false);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, " ", true, "ABk:6R%2");
      option0.setValueSeparator('D');
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("Wh&f|.&{ b=", "Wh&f|.&{ b=", options0, "Wh&f|.&{ b=", true);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "usage: ", true, "`6DR{l-AoAo~+U$#");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Option option1 = new Option("", true, "");
      OptionGroup optionGroup2 = optionGroup1.addOption(option1);
      options0.addOptionGroup(optionGroup2);
      helpFormatter0.printHelp("arg", "`6DR{l-AoAo~+U$#", options0, "Qin", true);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1458);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "\n", "\n", options0, "-");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Yg7GgT 3nZ;Z\"Tu0EpJ";
      int int0 = 1;
      helpFormatter0.findWrapPos("Yg7GgT 3nZ;Z\"Tu0EpJ", 1, 1);
      helpFormatter0.setLeftPadding((-1127));
      Options options0 = new Options();
      boolean boolean0 = false;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.setWidth((-12));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2897, "", "@M9[/", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("Yg7GgT 3nZ;Z\"Tu0EpJ", 1, 455);
      helpFormatter0.setLeftPadding((-1127));
      helpFormatter0.setWidth(0);
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, 1, "Yg7GgT 3nZ;Z\"Tu0EpJ");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(">s)@[Hq{RDF4IN", "", options0, "", false);
      helpFormatter0.createPadding(4);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-1), 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "AjHkq~0,s";
      helpFormatter0.setDescPadding((-267));
      helpFormatter0.defaultWidth = 2788;
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)32;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("AjHkq~0,s", options0, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.defaultOptPrefix = "[";
      helpFormatter0.createPadding(34);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptPrefix();
      StringWriter stringWriter0 = new StringWriter(74);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) null, 4111, (-1892));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setArgName("");
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("%n6rjQ_Ca");
      Options options0 = new Options();
      options0.addOption((String) null, "", true, (String) null);
      String string0 = "IEm(S9BN*_:Zh\"#T";
      helpFormatter0.printHelp("IEm(S9BN*_:Zh\"#T", "", options0, "", true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append(':');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      int int0 = (-2596);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1109, (Options) null, 1109, (-2596));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      helpFormatter0.setArgName("%n6rjQ_Ca");
      Options options0 = new Options();
      options0.addOption((String) null, "-", true, "usage: ");
      helpFormatter0.printHelp("%n6rjQ_Ca", "-", options0, "%n6rjQ_Ca", true);
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-861), options0, 44, 9);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(3424, "\n", "\n", options0, (String) null);
      StringWriter stringWriter0 = new StringWriter(1);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Options options1 = options0.addOption("arg", true, "");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options1, 74, 74);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "", false, "");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 4232, "nxyHzF8", "g[Z!>4k6$?mzz{", options1, 4232, 32, "");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.renderOptions((StringBuffer) null, 2116, options0, 63, 2116);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 2177, options0, 2116, (-403));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1));
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter0.renderWrappedText(stringBuffer0, 32, 32, "");
      int int0 = 104;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = "_a-q9&wj$7b";
      // Undeclared exception!
      try { 
        options1.addOption("--", true, "_a-q9&wj$7b");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.lookup(linkedList0, linkedList1);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) linkedList0;
      objectArray0[3] = (Object) "arg";
      objectArray0[4] = (Object) linkedList0;
      PrintStream printStream0 = mockPrintStream1.format((Locale) null, "arg", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "--", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", " | ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 14, "30 iy<", "30 iy<", options3, (-1), (-2), "arg");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      options0.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Option option0 = new Option("", "usage: ", true, ")uVup");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOption("ise", true, "\n");
      Options options2 = options1.addOptionGroup(optionGroup0);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      options1.hasShortOption("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.printf("0H\"x=#c6vE1nbQQ6-", (Object[]) null);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, (String) null, options2);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = new Options();
      OptionGroup optionGroup1 = new OptionGroup();
      Option option0 = new Option((String) null, "WSIRoC>TJUhS#M", true, "WSIRoC>TJUhS#M");
      OptionGroup optionGroup2 = optionGroup0.addOption(option0);
      Options options3 = options1.addOptionGroup(optionGroup2);
      helpFormatter0.printHelp("WSIRoC>TJUhS#M", (String) null, options3, (String) null, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2), (String) null, (String) null, options1, 312, (-2), "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      helpFormatter0.getOptPrefix();
      Options options1 = new Options();
      Options options2 = options1.addOption("", (String) null, true, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1458, " ", " ]", options2, 1458, 37, "USdR=7c3>Ul", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      stringBuffer0.ensureCapacity(3);
      helpFormatter0.renderWrappedText(stringBuffer0, 2376, 94, "?)S]8M:CE");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("?)S]8M:CE", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(3);
      int int0 = 0;
      String string0 = null;
      Options options0 = new Options();
      Option option0 = new Option("", "   ");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "", options1, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = new Options();
      OptionGroup optionGroup1 = new OptionGroup();
      Option option0 = new Option((String) null, "WSIRoC>TJUhS#M", true, "WSIRoC>TJUhS#M");
      OptionGroup optionGroup2 = optionGroup0.addOption(option0);
      Options options3 = options1.addOptionGroup(optionGroup2);
      helpFormatter0.printHelp("WSIRoC>TJUhS#M", (String) null, options3, (String) null, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(601, "`fWG;>m&T$0F", "' contains an illegal character : '", (Options) null, "' contains an illegal character : '", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.printOptions(mockPrintWriter0, 1, options0, 2676, 1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 2720, "org.apache.commons.cli.Util", options0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 34, "org.apache.commons.cli.Util", (String) null, options0, 2, 60, "[ARG...]", false);
      helpFormatter2.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName(", ");
      String string0 = "--";
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("3", 3, 3);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("U0i_?g 2d", 3, (-3429));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printOptions(mockPrintWriter0, 2676, options0, 0, 0);
      helpFormatter0.getOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("-");
      helpFormatter0.getDescPadding();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2676, "]", options0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options2 = options1.addOption((String) null, false, "Pk");
      options2.addOptionGroup(optionGroup0);
      helpFormatter2.printHelp("rk]j~yi~/:9TR[lkG", "\n", options1, "-", false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "Pk", ">", options1, 3, 15, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("GZ;^ JBXtf");
      int int0 = 47;
      String string0 = "   ";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 47, 47, "   ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultArgName;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.toString();
      helpFormatter0.printHelp("s3YX[W", "arg", options0, "s3YX[W", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.toString();
      StringWriter stringWriter0 = new StringWriter(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      helpFormatter1.setSyntaxPrefix("z?O?IgFw:SeEbF}NyPE");
      helpFormatter0.rtrim(">");
      options0.addOption("", false, "arg");
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 74, (-1866), "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter1;
      objectArray0[1] = (Object) "z?O?IgFw:SeEbF}NyPE";
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) ">";
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]";
      objectArray0[7] = (Object) stringBuffer1;
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 1, "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", "9", options0, 74, 580, "usage: ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printOptions(mockPrintWriter0, 2676, options0, 0, 0);
      helpFormatter0.getOptPrefix();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2676, "-", options0);
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) " ");
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      helpFormatter0.renderOptions(stringBuffer0, 2943, options1, 231, 1);
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 3, (-1343), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 16, "$aPp1`@,v]", "", options0, 884, 16, "");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-283), (-283), "has already been selected: '");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printOptions(mockPrintWriter0, 2676, options0, 0, 0);
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2676, (String) null, (String) null, options1, 0, 0, "cmdLineSyntax not provided");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.toString();
      Options options1 = new Options();
      StringWriter stringWriter0 = new StringWriter(0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      Options options2 = options0.addOption("arg", "6PRG", true, "arg");
      helpFormatter0.printHelp("-", "org.apache.commons.cli.ParseException", options1, "|L\u0006*uv*6yX<jPC", false);
      helpFormatter1.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      helpFormatter0.printHelp("usage: ", "org.apache.commons.cli.ParseException", options2, "org.apache.commons.cli.ParseException", false);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printOptions(mockPrintWriter0, 2676, options0, 0, 0);
      helpFormatter0.getOptPrefix();
      helpFormatter0.setSyntaxPrefix("-");
      helpFormatter0.rtrim("-");
      helpFormatter0.getDescPadding();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 14, ";NRI^.+1}GO*<#/Xq", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options2 = options0.addOptionGroup(optionGroup0);
      helpFormatter1.printHelp(".Kt", "-", options2, " ", false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3300, "\n", ".Kt", options1, 3, 1, " ", false);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.optionComparator = null;
      helpFormatter0.printOptions(mockPrintWriter0, 2676, options0, 0, 0);
      helpFormatter0.getOptPrefix();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 11, " ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      CharBuffer.wrap((CharSequence) "arg");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      options1.addOption("", true, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 3, (Options) null, 3, 766);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      int int0 = 2676;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.optionComparator = null;
      int int1 = (-1712);
      String string0 = "8L!;Z$J=Ck|Q}9hGTL";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1712), "~45M3]Two", " ", options0, (-2), 2676, "8L!;Z$J=Ck|Q}9hGTL");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter1.printOptions(mockPrintWriter0, 74, options1, 74, 3510);
      helpFormatter1.getOptPrefix();
      helpFormatter1.setSyntaxPrefix("");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.rtrim(" ");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getDescPadding();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      Option option0 = new Option((String) null, "--", false, "arg");
      Options options2 = options1.addOption(option0);
      helpFormatter4.printUsage((PrintWriter) mockPrintWriter0, 31, (String) null, options2);
      helpFormatter3.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printOptions(mockPrintWriter0, 2676, options0, 0, 0);
      helpFormatter0.getOptPrefix();
      helpFormatter0.setSyntaxPrefix("-");
      helpFormatter0.rtrim("r2");
      helpFormatter0.getDescPadding();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 14, ";NRI^.+1}GO*<#/Xq", options0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.printHelp(88, "n2t 2|7", "#'!E1>", options0, "-", true);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "arg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      StringBuffer stringBuffer0 = new StringBuffer(5);
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2843, options0, 2843, 5);
      helpFormatter0.renderWrappedText(stringBuffer1, 2843, 5, "h$XAgK&'fk-d5d)");
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, options1, "{\"W 0Ggwz%n+x=<}B2", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", false, "usage: ");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      options0.getOptionGroups();
      options0.toString();
      helpFormatter0.printHelp("-", "-", options0, "-", false);
      helpFormatter0.printHelp("-", options0);
      MockFile mockFile0 = new MockFile("", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 33, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 33, ", ", "", options0, (-848), (-2010), "gT\"Y:N^N\";", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1);
      String string0 = "-";
      Options options0 = new Options();
      options0.addOption("arg", false, "usage: ");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      options0.getOptionGroups();
      options0.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", "-", options0, "-", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printOptions(mockPrintWriter0, 2676, options1, 0, 3);
      helpFormatter0.getOptPrefix();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 83, "-");
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.rtrim(", ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "{(8zs~pq_\"", options1);
      helpFormatter1.getNewLine();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 3, "", "{(8zs~pq_\"", options1, 2676, 11, "usage: ", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 0, "\n");
      Options options0 = new Options();
      helpFormatter0.printHelp(586, "-", "~t:j", options0, "~t:j");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "&PU2u?jG.Xf_ebI~$>";
      File file0 = MockFile.createTempFile("&PU2u?jG.Xf_ebI~$>", "arg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Locale locale0 = Locale.ITALY;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      int int0 = 74;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 74, (Options) null, 0, 74);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('~');
      mockPrintWriter0.println("");
      int int0 = 122;
      helpFormatter0.defaultLongOptPrefix = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 122, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printOptions(mockPrintWriter0, 32, options1, 2676, 32);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 119, "-");
      helpFormatter1.setSyntaxPrefix("<~0");
      helpFormatter0.rtrim((String) null);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, (-2746), "HjG/T%", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.optionComparator = comparator0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.rtrim((String) null);
      helpFormatter0.defaultLeftPad = 9;
      String string0 = null;
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1641));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.toString();
      Options options1 = new Options();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('{');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      helpFormatter0.printOptions(printWriter0, 448, options0, '{', 6);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      stringWriter0.append((CharSequence) " ");
      helpFormatter1.setSyntaxPrefix("z?O?IgFw:SeEbF}NyPE");
      helpFormatter0.rtrim("");
      Options options2 = new Options();
      helpFormatter1.printHelp("##bKcp3(RNbWW", "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", options1, "XFAahzB", true);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, 83, options1, 1094, (-919));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      helpFormatter1.setSyntaxPrefix("");
      helpFormatter0.rtrim("-");
      Options options0 = new Options();
      helpFormatter1.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("%n6rjQ_Ca");
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      options0.addOption((String) null, "-", true, "usage: ");
      helpFormatter0.getOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "%n6rjQ_Ca");
      helpFormatter0.setSyntaxPrefix("^Ga!<C#Z@Bd9wtnG");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.rtrim("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 1, " ", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.optionComparator = null;
      helpFormatter0.printOptions(mockPrintWriter0, 2676, options0, 0, 0);
      helpFormatter0.getOptPrefix();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 11, " ");
      helpFormatter0.setSyntaxPrefix("-");
      helpFormatter0.rtrim("r2");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "r2", options1);
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 10, "org.apache.commons.cli.OptionGroup", "r2", options1, 11, 3, "usage: ", false);
      helpFormatter1.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      int int0 = 1;
      String string0 = "org.apache.commons.cli.AlreadySelectedException";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1076, "org.apache.commons.cli.AlreadySelectedException", "org.apache.commons.cli.AlreadySelectedException", options0, 1, 8, "   ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.toString();
      StringBuffer stringBuffer0 = new StringBuffer(")\"L");
      int int0 = 0;
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 1740, options0, 1, 0);
      int int1 = 114;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, (-1), 114, "UQ8vnM,=3,oK<5::");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      helpFormatter0.printOptions(mockPrintWriter0, 0, options1, 9, 1457);
      helpFormatter0.getOptPrefix();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 9, "1$3jB`;G?");
      helpFormatter0.setSyntaxPrefix("-");
      helpFormatter0.rtrim("r2");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 11, " ", options1);
      helpFormatter0.getDescPadding();
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, "FiFb", options2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      Options options1 = new Options();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append('{');
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      mockPrintWriter0.append((CharSequence) " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 740, options1, 6, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.toString();
      Options options1 = new Options();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('{');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      helpFormatter0.printOptions(printWriter0, 448, options0, '{', 6);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      stringWriter0.append((CharSequence) " ");
      helpFormatter1.setSyntaxPrefix("z?O?IgFw:SeEbF}NyPE");
      helpFormatter0.rtrim(">");
      helpFormatter1.printHelp("P.;]N?xe", "$p,_9@2=(:8E(Z>Y<", options1, "", false);
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "usage: ", "z?O?IgFw:SeEbF}NyPE", options1, 2305, 3, "org.apache.commons.cli.OptionGroup", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("usage: ");
      helpFormatter0.setNewLine("Vku|@YbShzO](");
      String string0 = "[ Options: [ short ";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 16, 995, "[ Options: [ short ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      int int0 = 19;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options1.addOption("usage: ", "", true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 74, "3");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2910), "tv23A1T7|", "3", (Options) null, "3");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer("u%?YXASEeY6XX5c");
      helpFormatter0.renderWrappedText(stringBuffer0, 2676, 3, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, " ", " ", (Options) null, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFile mockFile0 = new MockFile("gQ", "arg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.ITALY;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "", (Object[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("V", "p8DH |?P", true, (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      option0.toString();
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "zS", "p8DH |?P", options1, "p8DH |?P");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.optionComparator = null;
      helpFormatter0.printOptions(mockPrintWriter0, 2676, options0, 0, 0);
      helpFormatter0.getOptPrefix();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 11, " ");
      helpFormatter0.setSyntaxPrefix("-");
      helpFormatter0.rtrim(" ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 9, "", options1);
      helpFormatter0.getDescPadding();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, ";NRI^.+1}GO*<#/Xq", options0);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "\n", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-5817), ">", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuffer stringBuffer1 = new StringBuffer();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<9it");
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "<9it";
      objectArray0[2] = (Object) "3";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 337, "xiyDh");
      helpFormatter0.renderWrappedText(stringBuffer1, 3, 337, "");
      helpFormatter0.renderWrappedText(stringBuffer1, 63, 74, "3");
      helpFormatter0.getOptionComparator();
      helpFormatter0.findWrapPos("o0T]kKN {L6 :} sH", 337, (-2));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("--");
      helpFormatter1.setNewLine("pEY c}!L0tC>C");
      MockFile mockFile0 = new MockFile(">", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "?T");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      String string0 = "1";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("1", "1", (Options) null, "[", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("usage: ");
      helpFormatter0.setNewLine("Vku|@YbShzO](");
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) "usage: ";
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) "Vku|@YbShzO](";
      mockPrintStream0.printf(locale0, "usage: ", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "usage: ", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          HelpFormatter helpFormatter0 = new HelpFormatter();
          MockFile mockFile0 = new MockFile("gQ", "arg");
          MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
          Locale locale0 = Locale.ITALY;
          PrintStream printStream0 = mockPrintStream0.printf(locale0, "", (Object[]) null);
          MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
          Options options0 = new Options();
          OptionGroup optionGroup0 = new OptionGroup();
          String string0 = null;
          Option option0 = new Option("V", "p8DH |?P", true, (String) null);
          OptionGroup optionGroup1 = optionGroup0.addOption(option0);
          Options options1 = options0.addOptionGroup(optionGroup1);
          // Undeclared exception!
          helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "[D*[JQc4%*|(", options1);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.optionComparator = null;
      helpFormatter0.printOptions(mockPrintWriter0, 2676, options0, 0, 0);
      helpFormatter0.getOptPrefix();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 11, " ");
      helpFormatter0.setSyntaxPrefix("-");
      helpFormatter0.rtrim(" ");
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "", options0, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      Options options1 = new Options();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('{');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      helpFormatter0.printOptions(printWriter0, 448, options0, '{', 6);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      helpFormatter1.setSyntaxPrefix("z?O?IgFw:SeEbF}NyPE");
      helpFormatter0.rtrim(">");
      helpFormatter1.printHelp("P.;]N?xe", "$p,_9@2=(:8E(Z>Y<", options1, "", false);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLongOptSeparator("-");
      helpFormatter0.createPadding(1);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, "usage: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // usage: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) ">";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 0, (-2), "");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", "<");
      MockFile mockFile1 = new MockFile(mockFile0, "<");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Locale locale0 = Locale.ITALIAN;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter1;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockPrintWriter1;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockFile1;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) mockPrintWriter1;
      objectArray0[7] = (Object) "<";
      PrintWriter printWriter0 = mockPrintWriter1.printf(locale0, " ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-1481), "<");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 74;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 74, "T");
      helpFormatter0.createPadding(74);
      helpFormatter0.getNewLine();
      MockFile mockFile0 = new MockFile("--", "T");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "has already been selected: '");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // has already been selected: '
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(1733);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 248;
      helpFormatter0.getArgName();
      String string0 = "[";
      helpFormatter0.rtrim("[");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLeftPadding();
      int int0 = 3;
      String string0 = "zB>h$";
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("-", "usage: ", false, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile((File) null, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "l_M";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) mockFile0;
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) null;
      mockPrintWriter0.printf(locale0, "l_M", objectArray0);
      helpFormatter0.defaultWidth = 9;
      mockPrintWriter0.write(74);
      helpFormatter0.defaultNewLine = "a5?e_cu";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-351), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 74;
      helpFormatter0.defaultDescPad = 74;
      helpFormatter0.setArgName(", ");
      String string0 = "--";
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("-", "--", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-2462));
      String string0 = "";
      Options options0 = new Options();
      Option option0 = new Option("", "\n");
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        options0.addOption(",", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ','
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      int int0 = 448;
      options0.toString();
      options0.getOption("cmdLineSyntax not provided");
      helpFormatter0.setDescPadding(448);
      helpFormatter0.printHelp("VJpp6M>>L", "VJpp6M>>L", options0, "VJpp6M>>L");
      String string0 = "usage: ";
      helpFormatter0.printHelp("usage: ", options0, false);
      options0.getMatchingOptions("usage: ");
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-165));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      Options options0 = new Options();
      Option option0 = new Option("D27", "--");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", "", true, "J#)<y,jd%lj|");
      Options options3 = new Options();
      helpFormatter0.printHelp("L", "", options2, "[", true);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "j|c&w7NC+*&";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("j|c&w7NC+*&", (String) null, (Options) null, "j|c&w7NC+*&");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", true, "usage: ");
      options0.getOptionGroups();
      options0.toString();
      options0.getOptions();
      helpFormatter0.printHelp("-", "-", options0, "-", false);
      helpFormatter0.printHelp("-", options0);
      MockFile mockFile0 = new MockFile("arg", "has already been selected: '");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "has already been selected: '";
      MockFile mockFile1 = new MockFile("usage: ", "has already been selected: '");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile1);
      mockFile0.getAbsolutePath();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2905, "");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", false, "usage: ");
      options0.getOptionGroups();
      options0.toString();
      helpFormatter0.printHelp("-", "-", options0, "-", false);
      helpFormatter0.printHelp("-", options0);
      MockFile mockFile0 = new MockFile("arg", "has already been selected: '");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "has already been selected: '";
      MockFile mockFile1 = new MockFile("usage: ", "has already been selected: '");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2905, "");
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("%n6rjQ_Ca");
      helpFormatter0.getOptionComparator();
      String string0 = null;
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "-", true, "usage: ");
      helpFormatter0.printHelp("%n6rjQ_Ca", (String) null, options1, "%n6rjQ_Ca", false);
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer(1032);
      String string1 = "lR]rpH&RU'mnYc/-e6";
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 74, 0, "lR]rpH&RU'mnYc/-e6");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 0, 74, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Options options0 = new Options();
      helpFormatter0.printOptions(mockPrintWriter0, 2676, options0, 0, 0);
      helpFormatter0.getOptPrefix();
      helpFormatter0.setSyntaxPrefix("-");
      helpFormatter0.rtrim("-");
      helpFormatter0.getDescPadding();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 14, ";NRI^.+1}GO*<#/Xq", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = new Option((String) null, "--");
      Options options1 = options0.addOption(option0);
      helpFormatter1.printHelp(3, "\n", "-", options1, "");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("org.apache.commons.cli.OptionValidator");
      options0.getOptionGroups();
      options0.toString();
      helpFormatter0.printHelp("-", "-", options0, "-", false);
      helpFormatter0.printHelp("-", options0);
      MockFile mockFile0 = new MockFile("arg", "has already been selected: '");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Yg7GgT 3nZ;Z\"Tu0EpJ";
      int int0 = 1;
      helpFormatter0.findWrapPos("Yg7GgT 3nZ;Z\"Tu0EpJ", 1, 455);
      helpFormatter0.setLeftPadding((-1127));
      Options options0 = new Options();
      boolean boolean0 = false;
      helpFormatter0.setWidth(0);
      // Undeclared exception!
      helpFormatter0.printHelp("Yg7GgT 3nZ;Z\"Tu0EpJ", options0, false);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) null;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) " ";
      PrintWriter printWriter0 = mockPrintWriter0.printf("\n", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped(printWriter0, 2676, "-");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLongOptPrefix("The option '");
      helpFormatter2.getOptionComparator();
      helpFormatter0.setLongOptPrefix(" ");
      helpFormatter0.getNewLine();
      helpFormatter1.getDescPadding();
      helpFormatter2.setOptionComparator((Comparator) null);
      helpFormatter2.printHelp("-", options0, true);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      helpFormatter0.optionComparator = null;
      helpFormatter0.printOptions(mockPrintWriter0, 2676, options0, 0, 0);
      helpFormatter0.getOptPrefix();
      helpFormatter0.setSyntaxPrefix("-");
      helpFormatter0.rtrim(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "-", options0, " | ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("%n6rjQ_Ca");
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "-", true, "usage: ");
      helpFormatter0.printHelp("%n6rjQ_Ca", (String) null, options1, "%n6rjQ_Ca", false);
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer(1032);
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 0, "lR]rpH&R0U'mnYc/-e6");
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", false, "usage: ");
      options0.getOptionGroups();
      options0.toString();
      helpFormatter0.printHelp("-", "-", options0, "-", false);
      helpFormatter0.printHelp("-", options0);
      MockFile mockFile0 = new MockFile("arg", "has already been selected: '");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "has already been selected: '";
      mockPrintWriter0.println('v');
      objectArray0[1] = (Object) "-";
      objectArray0[2] = (Object) "has already been selected: '";
      mockPrintWriter0.printf("", objectArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2905, "");
      helpFormatter0.setLongOptPrefix("O`N");
      helpFormatter0.getOptionComparator();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.printHelp("Wiw3_PuH/x~}>FU@|(", options0, false);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      options0.toString();
      options0.getOption("cmdLineSyntax not provided");
      helpFormatter0.setDescPadding(448);
      helpFormatter0.printHelp("VJpp6M>>L", "VJpp6M>>L", options0, "VJpp6M>>L");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "3M-", "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", options0, (String) null, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      int int0 = 0;
      String string0 = "3";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "3");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = (-2416);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-2416), (-2416), "gxNTqUr,t");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = null;
      helpFormatter0.setNewLine((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-4065));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("usage: ");
      helpFormatter0.setNewLine("Vku|@YbShzO](");
      MockFile mockFile0 = new MockFile(" ]", "?T");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, " ]");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      String string0 = "82w;\"O=l\\vLPUwq";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, (String) null, (String) null, (Options) null, "82w;\"O=lvLPUwq", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }
}
