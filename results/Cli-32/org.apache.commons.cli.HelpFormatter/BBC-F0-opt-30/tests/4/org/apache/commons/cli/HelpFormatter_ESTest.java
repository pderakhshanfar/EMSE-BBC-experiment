/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 08 08:40:09 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "usage: ", false, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (-1772), options2, 910, 69);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("g94,");
      helpFormatter0.rtrim("pmzQ5zNoGs^[*y");
      Options options0 = new Options();
      helpFormatter0.setWidth((-4618));
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.printHelp(1722, "The option '", "usage: ", options0, "U-@aKZI:w/v=^oqI?");
      helpFormatter1.printHelp(1579, "arg", "--", options0, "usage: ", true);
      helpFormatter0.getWidth();
      helpFormatter1.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = new Option("0C9", "arg", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      option0.setLongOpt("#Yw*Cd");
      option0.setArgName("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("|R", "arg", options0, "arg", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.findWrapPos("&:,", 74, 3);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", options0, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = new Option("0C9", "arg", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter1.rtrim(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", "k9UVPC1", options0, "~nymc@{iU*\"l[V,Vd");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 1039, options0, 1, 1039);
      String string0 = "z[uA/[~^'IqC!o8";
      MockFile mockFile0 = new MockFile("");
      File file0 = MockFile.createTempFile("z[uA/[~^'IqC!o8", "arg", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(file0, "usage: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // usage: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth(3);
      Options options1 = new Options();
      int int0 = (-1568);
      String string0 = "[";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("+Kqu?%A{", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.findWrapPos("\n", 0, 0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 0, options0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(114);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "Se7\"@,%#gYaG");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1270));
      helpFormatter0.rtrim("");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("usage: ");
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      String string0 = "org.apache.commons.cli.OptionGroup";
      mockFileOutputStream0.write((-74));
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "org.apache.commons.cli.OptionGroup", "org.apache.commons.cli.OptionGroup", options0, 2496, 0, "org.apache.commons.cli.OptionGroup");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Options options0 = new Options();
      options0.hasLongOption("org.apache.commons.cli.Util");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 74, 1, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 3, (-1), "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix(" | ");
      helpFormatter0.defaultLongOptPrefix = "";
      int int0 = (-1);
      helpFormatter0.defaultLeftPad = (-1);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptPrefix();
      String string0 = "3xj[vT%~+,q`j lbe\\";
      Options options0 = new Options();
      String string1 = "|w21p3czl46(['e7L";
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("|w21p3czl46(['e7L", "", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '|w21p3czl46(['e7L' contains an illegal character : '|'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = (-1733);
      options0.getOption("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(102, "--", "--", options0, "--");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.findWrapPos(" [ARG]", 0, 0);
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.setExecutable(true);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "ef[N2BzPuF]", options0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(74, "--", "--", options0, " ");
      helpFormatter0.getArgName();
      helpFormatter0.setDescPadding((-1964));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", "arg", options0, "[", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.getNewLine();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2145, "!", "!", options0, 74, 2145, (String) null, true);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) pipedOutputStream0;
      objectArray0[6] = (Object) pipedOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.format("-", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-239), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("x=");
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      helpFormatter0.setWidth(1857);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = new Option("9", "arg", true, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      option0.setArgName("");
      optionGroup0.addOption(option0);
      option0.setRequired(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      options0.hasOption("");
      helpFormatter0.printHelp(74, "usage: ", "arg", options0, "usage: ", true);
      helpFormatter1.getArgName();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, (-1559), "usage: ", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setDescPadding(214);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.createPadding(2401);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("--", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage(printWriter0, 3075, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("x=");
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      helpFormatter0.setWidth(1857);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
      Option option0 = new Option("9", "arg", true, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setNewLine("[m?A3");
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      PrintStream printStream0 = mockPrintStream0.printf("i4^", (Object[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "cmdLineSyntax not provided");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "x=";
      MockFile mockFile0 = new MockFile("x=");
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      helpFormatter0.setWidth(1857);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
      boolean boolean0 = true;
      Option option0 = new Option("9", "arg", true, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      option0.setArgName("");
      optionGroup0.addOption(option0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(74, "usage: ", "arg", options0, "usage: ", true);
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("-");
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.Option");
      helpFormatter0.rtrim("\n");
      Options options0 = new Options();
      helpFormatter1.setWidth(74);
      helpFormatter0.setOptionComparator((Comparator) null);
      Option option0 = new Option((String) null, ".M)R)(ew>j", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      option0.setArgName("\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup0.setRequired(true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(74, "\n", "", options0, "", true);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Options options0 = new Options();
      options0.addOption("", "", false, "\n");
      helpFormatter0.getArgName();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2141, "--", "--", options0, 2141, 1414, "", false);
      helpFormatter0.defaultArgName = "";
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.getArgName();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      boolean boolean0 = true;
      String string0 = "Css_o&=B)4B<Y20";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Ih<2* .B", "Css_o&=B)4B<Y20", (Options) null, "Ih<2* .B", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      String string0 = " [ARG]";
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, " [ARG]", "h~fx0nJj5x9~+", (Options) null, 1377, 1377, "h~fx0nJj5x9~+", false);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n");
      helpFormatter0.setLeftPadding(13);
      helpFormatter0.defaultLeftPad = 13;
      helpFormatter0.rtrim("af!Uyh");
      helpFormatter0.defaultWidth = 0;
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = options0.addOption("arg", true, "");
      StringBuffer stringBuffer0 = new StringBuffer();
      options0.hasShortOption("arg");
      helpFormatter0.renderOptions(stringBuffer0, 42, options1, 42, 13);
      StringBuffer stringBuffer1 = new StringBuffer(0);
      helpFormatter0.getWidth();
      helpFormatter0.createPadding(74);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 776, "af!Uyh", "af!Uyh", options0, 776, 0, "^#VXN/Rf\"V=mU4B8=~G", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.createPadding(1);
      helpFormatter0.findWrapPos("\n", 1, (-1039));
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "", false, "-");
      Option option0 = new Option("arg", false, "");
      Options options3 = options2.addOption(option0);
      MockFile mockFile0 = new MockFile("--", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 94, "--", "", options3, 94, (-1), "'", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("7JXpS");
      MockFile mockFile0 = new MockFile("7JXpS", "org.apache.commons.cli.HelpFormatter$1");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "--");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("7JXpS");
      Option option0 = new Option("", "", false, "1r}SvyAKr~^");
      options0.addOption(option0);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf("xr@a!bo'-4blL>^u(dH", objectArray0);
      options0.hasShortOption("org.apache.cpmmons.cli.Options");
      printWriter0.append((CharSequence) "xr@a!bo'-4blL>^u(dH");
      helpFormatter0.printUsage(printWriter0, 44, "[", options1);
      PrintWriter printWriter1 = printWriter0.append((CharSequence) "\n");
      mockPrintWriter0.print(0.0F);
      helpFormatter0.getArgName();
      helpFormatter0.printHelp(printWriter1, 44, "org.apache.commons.cli.HelpFormatter$1", "[", options1, 1414, 44, "7JXpS", true);
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("-");
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.Option");
      helpFormatter0.rtrim("\n");
      Options options0 = new Options();
      helpFormatter0.setOptionComparator((Comparator) null);
      Option option0 = new Option((String) null, ".M)R)(ew>j", true, "arg");
      helpFormatter0.printHelp("usage: ", ".M)R)(ew>j", options0, "org.apache.commons.cli.Option", false);
      OptionGroup optionGroup0 = new OptionGroup();
      option0.setArgName("\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup0.setRequired(true);
      options1.addOptionGroup(optionGroup1);
      helpFormatter1.printHelp(65, "P?f!?9BEm>}>.", "", options1, "usage: ", true);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(2);
      helpFormatter0.renderWrappedText(stringBuffer0, 2, 2, "");
      helpFormatter0.setNewLine("ChJ");
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      Options options1 = new Options();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      String string0 = "";
      String string1 = "";
      Options options0 = new Options();
      int int0 = 81;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 81, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("   ");
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      Options options0 = new Options();
      helpFormatter0.printHelp(2675, "!", "!", options0, "#*9rRS", false);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-672), 776);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("-");
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.Option");
      helpFormatter0.rtrim("\n");
      Options options0 = new Options();
      helpFormatter1.setWidth(74);
      helpFormatter0.setOptionComparator((Comparator) null);
      Option option0 = new Option((String) null, ".M)R)(ew>j", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      option0.setArgName("\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup0.setRequired(true);
      options1.addOptionGroup(optionGroup1);
      Options options2 = options0.addOptionGroup(optionGroup1);
      helpFormatter1.printHelp(65, "P?f!?9BEm>}>.", "", options2, "usage: ", true);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = (-1);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(74, " ", "t9'O#bU@wz#0C", options0, "1?(I@:");
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      mockPrintWriter0.print(0.0F);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-1359), options0, 1412, (-1359));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("-");
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.Option");
      helpFormatter0.rtrim("\n");
      Options options0 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      helpFormatter1.setWidth(74);
      helpFormatter0.setOptionComparator((Comparator) null);
      Option option0 = new Option("", "--", true, "pQT~2UfO4<Ak'IINc%");
      OptionGroup optionGroup0 = new OptionGroup();
      option0.setArgName("--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.addOptionGroup(optionGroup2);
      helpFormatter1.printHelp(74, "org.apache.commons.cli.Option", "--", options1, " ", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "pQT~2UfO4<Ak'IINc%");
      helpFormatter1.printWrapped(printWriter0, 44, "");
      helpFormatter1.findWrapPos("A.ev}(6<|r'p{ycv0", 1, 44);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("7JXpS");
      MockFile mockFile0 = new MockFile("7JXpS", ";mbUE");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "--");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("7JXpS");
      options0.helpOptions();
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf("w$", objectArray0);
      options0.hasShortOption("org.apache.cpmmons.cli.Options");
      helpFormatter0.printUsage(printWriter0, 44, "[", options1);
      mockPrintWriter0.append((CharSequence) "usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.printHelp(printWriter0, 10, "-", "--", options0, 1, 4, ";mbUE", false);
      helpFormatter0.setArgName("");
      helpFormatter1.getOptionComparator();
      helpFormatter0.getDescPadding();
      helpFormatter1.setSyntaxPrefix(" ]");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 3298, 74, "Cannot add value, list full.");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "k+s}hbiaOA<rwuc$");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getDescPadding();
      helpFormatter0.getSyntaxPrefix();
      int int0 = 44;
      StringWriter stringWriter0 = new StringWriter(44);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      stringWriter1.getBuffer();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", "'BDmT'8", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte) (-14);
      byteArray0[6] = (byte)15;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("fEf*[o ?y\"Jp&5[", "fEf*[o ?y\"Jp&5[", (Options) null, "fEf*[o ?y\"Jp&5[");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("7JXpS");
      MockFile mockFile0 = new MockFile("7JXpS", ";mbUE");
      Options options0 = new Options();
      options0.addOption("arg", true, "--");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("7JXpS");
      MockPrintStream mockPrintStream0 = new MockPrintStream("w$");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintStream0, true);
      mockPrintWriter0.print(924.0F);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter1, 3, 3, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("-");
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.Option");
      helpFormatter0.rtrim("\n");
      Options options0 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      helpFormatter1.setWidth(74);
      helpFormatter0.setOptionComparator((Comparator) null);
      Option option0 = new Option("", "--", true, "pQT~2UfO4<Ak'IINc%");
      OptionGroup optionGroup0 = new OptionGroup();
      option0.setArgName("--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.addOptionGroup(optionGroup2);
      helpFormatter1.printHelp(74, "org.apache.commons.cli.Option", "--", options1, " ", true);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("7JXpS");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "7JXpS");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      String string0 = "org.apache.cpmmons.cli.Options";
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) options1;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) options1;
      objectArray0[4] = (Object) helpFormatter0;
      mockPrintWriter0.printf("--", objectArray0);
      options1.hasShortOption("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2184), "w$", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("7JXpS");
      MockFile mockFile0 = new MockFile("7JXpS", ";mbUE");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "--");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("7JXpS");
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf("w$", objectArray0);
      options0.hasShortOption("org.apache.cpmmons.cli.Options");
      helpFormatter0.printUsage(printWriter0, 44, "[", options1);
      printWriter0.append((CharSequence) "\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getSyntaxPrefix();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, "ux)", " ]", options0, 74, 1, " ", false);
      helpFormatter1.setArgName("arg");
      helpFormatter1.getOptionComparator();
      helpFormatter1.getDescPadding();
      helpFormatter0.setSyntaxPrefix("7JXpS");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("-");
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.Option");
      helpFormatter0.rtrim("\n");
      Options options0 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      helpFormatter1.setWidth(74);
      helpFormatter1.printHelp(74, "-", "--", options0, (String) null, false);
      Options options1 = options0.addOption("?", false, "j\"lrZn5G'mWof");
      Options options2 = options1.addOption((String) null, "K{; ", true, "-");
      helpFormatter1.printHelp(928, "]", "usage: ", options2, "org.apache.commons.cli.Option", true);
      helpFormatter1.getArgName();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n");
      int int0 = 13;
      helpFormatter0.setLeftPadding(13);
      MockFile mockFile0 = new MockFile("arg");
      String string0 = "l";
      helpFormatter0.rtrim("l");
      Options options0 = null;
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("7JXpS");
      MockFile mockFile0 = new MockFile("7JXpS", ";mbUE");
      Options options0 = new Options();
      options0.addOption("arg", true, "--");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("7JXpS");
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf("w$", objectArray0);
      options0.hasShortOption("org.apache.cpmmons.cli.Options");
      helpFormatter0.printUsage(printWriter0, 44, "7JXpS", options0);
      PrintWriter printWriter1 = mockPrintWriter0.append((CharSequence) "usage: ");
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter1, 224, ";mbUE", "7JXpS", options0, 224, (-2059), "7JXpS", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "7JXpS";
      helpFormatter0.rtrim("7JXpS");
      String string1 = ";mbUE";
      MockFile mockFile0 = new MockFile(";mbUE");
      boolean boolean0 = true;
      Options options0 = new Options();
      options0.addOption("arg", true, "--");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("7JXpS");
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.printf("w$", objectArray0);
      options0.hasShortOption("org.apache.commons.cli.Options");
      mockPrintWriter0.append((CharSequence) "usage: ");
      mockPrintWriter0.println();
      int int0 = 230;
      int int1 = (-2035);
      helpFormatter0.printHelp(";mbUE", options0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("7JXpS", (-2035), (-2035));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(74, " ", "t9'O#bU@wz#0C", options0, "1?(I@:");
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      mockPrintWriter0.print(0.0F);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, (-1), "@'N#p*:M[?O!/");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n");
      helpFormatter0.setLeftPadding(27);
      helpFormatter0.defaultLeftPad = 27;
      Options options0 = new Options();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      helpFormatter0.setWidth(2342);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
      Option option0 = new Option("12CY", "Illegal option name '", false, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      option0.setArgName(" ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      Options options1 = options0.addOption("arg", false, "usage: ");
      options0.addOptionGroup(optionGroup0);
      helpFormatter1.printHelp(64, "arg", "--", options0, "|Jn~D,%;dOf_lR", true);
      helpFormatter1.printHelp(1103, "|Jn~D,%;dOf_lR", "arg", options1, "--", true);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "--", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption("", true, "-(AV 1M)P0");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "pL9#k", options2, "_4j}xgk", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("7JXpS");
      MockFile mockFile0 = new MockFile(";mbUE");
      Options options0 = new Options();
      options0.addOption("arg", true, "--");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("7JXpS");
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.printf("w$", objectArray0);
      options0.hasShortOption("org.apache.commons.cli.Options");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 230, ";mbUE", "7JXpS", options0, 230, (-2035), "7JXpS", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n");
      int int0 = 13;
      MockFile mockFile0 = new MockFile("arg");
      helpFormatter0.rtrim("l");
      Options options0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("<", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2762), "", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("-");
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.Option");
      helpFormatter0.rtrim("\n");
      Options options0 = new Options();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      helpFormatter0.printHelp(2, "-", "-", options0, "-", true);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("v^B3", 3, (-2001));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("-");
      MockFile mockFile0 = new MockFile("WVw1_{B8yB7Z");
      helpFormatter0.rtrim("\n");
      Options options0 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      helpFormatter1.setWidth(74);
      helpFormatter0.setOptionComparator((Comparator) null);
      Option option0 = new Option((String) null, ".M)R)(ew>j", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("k/he=2-:W97P95IB!");
      options0.hasLongOption("WVw1_{B8yB7Z");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "-";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "' contains an illegal character : '";
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 1707, "WVw1_{B8yB7Z", "arg", options0, 74, (-2121), "+&%+vkwX&/~zK");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n");
      helpFormatter0.setLeftPadding(13);
      helpFormatter0.defaultLeftPad = 13;
      Options options0 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      helpFormatter0.setWidth(2342);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
      Option option0 = new Option("12CY", "Illegal option name '", false, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      option0.setArgName(" ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      options0.addOptionGroup(optionGroup2);
      options0.addOptionGroup(optionGroup0);
      helpFormatter1.printHelp(64, "arg", "--", options0, "|Jn~D,%;dOf_lR", true);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("7JXpS");
      MockFile mockFile0 = new MockFile(";mbUE");
      helpFormatter0.rtrim("7JXpS");
      Options options0 = new Options();
      options0.addOption("arg", true, "--");
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("7JXpS");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 4038, "g1TS>&v", "", options0, 3693, 3693, "7JXpS");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 230, ";mbUE", (String) null, options0, 230, (-2035), "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n");
      int int0 = 13;
      helpFormatter0.setLeftPadding(13);
      String string0 = "af!Uyh";
      helpFormatter0.defaultLeftPad = 13;
      helpFormatter0.rtrim("af!Uyh");
      helpFormatter0.defaultWidth = 0;
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 7, options1, 7, 13);
      Options options2 = new Options();
      String string1 = "z";
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      helpFormatter0.printOptions(mockPrintWriter0, 13, options1, 3, 7);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, 13, "#RdUIZmk;t");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "M,p6|*qh|tu^d;^";
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.setDescPadding((-930));
      Options options0 = new Options();
      Options options1 = options0.addOption("sSL", "", false, "sSL");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("JEHLa<8", "JEHLa<8", options1, "JEHLa<8");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(".H8", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("7JXpS");
      MockFile mockFile0 = new MockFile(";mbUE");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "\n");
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      String string0 = "";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "7JXpS", "7JXpS", options1, (-2820), 66, "\n", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "?;*: o", "", (Options) null, "   ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(74, " ", "t9'O#bU@wz#0C", options0, "1?(I@:");
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      mockPrintWriter0.print(0.0F);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, (-1), "");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n");
      helpFormatter0.setLeftPadding(13);
      helpFormatter0.defaultLeftPad = 13;
      helpFormatter0.rtrim("af!Uyh");
      helpFormatter0.defaultWidth = 0;
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 7, options1, 7, 13);
      Options options2 = options1.addOption("", true, "usage: ");
      helpFormatter0.printHelp(321, "%6", (String) null, options0, "af!Uyh", false);
      helpFormatter0.printHelp(1853, "%6", "", options2, (String) null);
      helpFormatter0.rtrim("?OE:Jb}^u5h]c");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      PrintWriter printWriter0 = mockPrintWriter1.append('*');
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-278), "]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "-$$]KJQN4LCbU";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      helpFormatter0.printHelp("-$$]KJQN4LCbU", "-$$]KJQN4LCbU", options0, "!TbjJ[R@vp3qQ7Ft");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, "-$$]KJQN4LCbU", "", options0, " ]", false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter2.setOptionComparator(comparator1);
      helpFormatter1.findWrapPos("!TbjJ[R@vp3qQ7Ft", 3543, 64);
      helpFormatter2.getArgName();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("-");
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.Option");
      helpFormatter0.rtrim("\n");
      Options options0 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      helpFormatter1.setWidth(74);
      helpFormatter0.setOptionComparator((Comparator) null);
      Option option0 = new Option((String) null, ".M)R)(ew>j", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      option0.setArgName("\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOptionGroup(optionGroup2);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-2), " ", "", options2, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "-$$]KJQN4LCbU";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-2), (String) null, "-", options0, (-1027), (-43), "--", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n");
      int int0 = 13;
      helpFormatter0.setLeftPadding(13);
      String string0 = "af!Uyh";
      helpFormatter0.defaultLeftPad = 13;
      helpFormatter0.rtrim("af!Uyh");
      helpFormatter0.defaultWidth = 13;
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "");
      StringBuffer stringBuffer0 = new StringBuffer();
      options1.toString();
      helpFormatter0.renderOptions(stringBuffer0, 7, options1, 7, 13);
      String string1 = "";
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        options1.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(3);
      helpFormatter0.defaultLeftPad = 74;
      helpFormatter0.rtrim("af!Uyh");
      helpFormatter0.defaultWidth = (-17);
      Options options0 = new Options();
      options0.addOption("arg", false, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 776, "af!Uyh", "af!Uyh", options0, 776, 0, "^#VXN/Rf\"V=mU4B8=~G", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("7JXpS");
      MockFile mockFile0 = new MockFile(";mbUE");
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 46, 14, ";mbUE");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, 2409, (Options) null, 46, 2409);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 43, "o", "org.apache.commons.cli.HelpFormatter", options1, 1407, (-4180), "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("7JXpS");
      MockFile mockFile0 = new MockFile(";mbUE");
      helpFormatter0.rtrim("7JXpS");
      helpFormatter0.rtrim((String) null);
      Options options0 = new Options();
      helpFormatter0.printHelp(776, ".ZYW4A\"K `Iv'8AG183", ";mbUE", options0, (String) null, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, "NO_ARGS_ALLOWED", "arg", (Options) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      helpFormatter0.setOptionComparator(comparator1);
      String string0 = "?;\\*: o";
      String string1 = "-$$]KJQN4LCbU";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "org.apache.commons.cli.HelpFormatter", options0, "`Kbv%F'?OB0UjnK:|Np");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("-");
      MockFile mockFile0 = new MockFile("WVw1_{B8yB7Z");
      helpFormatter0.rtrim("\n");
      Options options0 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      helpFormatter1.setWidth(74);
      Comparator<Object> comparator0 = null;
      helpFormatter0.setOptionComparator((Comparator) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (String) null, options0, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n");
      int int0 = 13;
      helpFormatter0.setLeftPadding(13);
      String string0 = "af!Uyh";
      helpFormatter0.defaultLeftPad = 13;
      helpFormatter0.rtrim("af!Uyh");
      helpFormatter0.defaultWidth = 0;
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 7, options1, 7, 13);
      options1.addOption("", true, "usage: ");
      String string1 = "";
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      helpFormatter0.printOptions(mockPrintWriter0, 13, options1, 3, 7);
      helpFormatter0.renderWrappedText(stringBuffer0, 101, 13, "#RdUIZmk;t");
      // Undeclared exception!
      try { 
        options1.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("-");
      MockFile mockFile0 = new MockFile("WVw1_{B8yB7Z");
      helpFormatter0.rtrim("\n");
      Options options0 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      helpFormatter1.setWidth(74);
      helpFormatter0.setOptionComparator((Comparator) null);
      String string0 = null;
      Option option0 = new Option((String) null, ".M)R)(ew>j", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOptionGroup(optionGroup2);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-2), " ", "", options2, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "79.K$k", "3Q]%S", (Options) null, "l^{S3:i|%KRVp");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "' contains an illegal character : '";
      Options options0 = new Options();
      helpFormatter0.printHelp("' contains an illegal character : '", options0);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      int int0 = 407;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 407, options0, (-1038), (-611));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("7JXpS");
      MockFile mockFile0 = new MockFile(";mbUE");
      helpFormatter0.rtrim("7JXpS");
      Options options0 = new Options();
      options0.addOption("arg", true, "--");
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append('%');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 230, ";mbUE", (String) null, options0, 230, (-2037), "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = "-$$]KJQN4LCbU";
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("-$$]KJQN4LCbU");
      int int0 = (-2672);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2672), "u^?x%uAqA$}wh@QV)", "u^?x%uAqA$}wh@QV)", (Options) null, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("7JXpS");
      MockFile mockFile0 = new MockFile(";mbUE");
      helpFormatter0.rtrim("7JXpS");
      Options options0 = new Options();
      boolean boolean0 = false;
      String string0 = "";
      helpFormatter0.printHelp(776, ";mbUE", "7JXpS", options0, "", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(776, "", "]BybK:5NEbO2gAyhF", options0, "G7>wyocsm8{hF_O+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n");
      helpFormatter0.setLeftPadding(13);
      helpFormatter0.defaultLeftPad = 13;
      helpFormatter0.rtrim("af!Uyh");
      helpFormatter0.defaultWidth = 0;
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = options0.addOption("arg", true, "");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 63, options1, 63, 13);
      StringBuffer stringBuffer1 = new StringBuffer(13);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 776, "af!Uyh", "af!Uyh", options0, 776, 0, "^#VXN/Rf\"V=mU4B8=~G", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n");
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)63;
      byteArray0[0] = (byte)63;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.getArgName();
      int int0 = 0;
      helpFormatter0.findWrapPos("'`AI*6`xnMr", (byte)63, (byte)63);
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, " ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("7JXpS");
      String string0 = ";mbUE";
      MockFile mockFile0 = new MockFile(";mbUE");
      helpFormatter0.rtrim("7JXpS");
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      String string1 = "up7b)0U5 !Gj";
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 7;
      int int1 = 2089;
      helpFormatter0.renderOptions(stringBuffer0, 2089, options0, 0, 7);
      int int2 = 853;
      StringBuffer stringBuffer1 = null;
      try {
        stringBuffer1 = new StringBuffer((-3130));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("7JXpS");
      String string0 = ";mbUE";
      MockFile mockFile0 = new MockFile(";mbUE");
      helpFormatter0.rtrim("7JXpS");
      PrintWriter printWriter0 = null;
      int int0 = 0;
      Options options0 = new Options();
      String string1 = "";
      Options options1 = options0.addOption("", true, "up7b)0U5 !Gj");
      int int1 = (-480);
      options1.hasShortOption("");
      int int2 = (-1917);
      String string2 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("usage: ");
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      int int0 = 0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      String string0 = "org.apache.commons.cli.OptionGroup";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "org.apache.commons.cli.OptionGroup");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("usage: ");
      boolean boolean0 = false;
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      int int0 = 0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "org.apache.commons.cli.OptionGroup");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("7JXpS");
      MockFile mockFile0 = new MockFile(";mbUE");
      helpFormatter0.rtrim("7JXpS");
      Options options0 = new Options();
      options0.addOption("arg", true, "--");
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append('%');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 3, ";mbUE", (String) null, options0, 3, (-2037), "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      String string0 = "?;\\*: o";
      String string1 = "-$$]KJQN4LCbU";
      Options options0 = null;
      int int0 = (-3);
      String string2 = "o$Z";
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "--", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-3), "-$$]KJQN4LCbU", "A\"Ig)8`-", (Options) null, (-3), (-3), "&", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("7JXpS");
      MockFile mockFile0 = new MockFile(";mbUE");
      helpFormatter0.rtrim("7JXpS");
      Options options0 = null;
      int int0 = 776;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(776, "7y%D8", ";mbUE", (Options) null, "-$$]KJQN4LCbU", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("-");
      MockFile mockFile0 = new MockFile("WVw1_{B8yB7Z");
      helpFormatter0.rtrim("\n");
      Options options0 = new Options();
      helpFormatter1.setWidth(74);
      helpFormatter0.setOptionComparator((Comparator) null);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setOptionComparator((Comparator) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-5877), "-", (String) null, options0, 34, (-3788), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("7JXpS");
      MockFile mockFile0 = new MockFile(";mbUE");
      helpFormatter0.rtrim("7JXpS");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 63, (String) null, "' contains an illegal character : '", (Options) null, 1975, 3, "org.aache.commons.cli.HelpFormatter$OptionComparator");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "-$$]KJQN4LCbU";
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1), "-$$]KJQN4LCbU", "-$$]KJQN4LCbU", (Options) null, (-687), 63, "' contains an illegal character : '");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(2385);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setArgName("[ option: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      helpFormatter0.getDescPadding();
      helpFormatter1.setSyntaxPrefix("5*<");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      String string0 = "?;\\*: o";
      String string1 = "-$$]KJQN4LCbU";
      Options options0 = null;
      int int0 = 2;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2, "-$$]KJQN4LCbU", "?;*: o", (Options) null, "-$$]KJQN4LCbU", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.createPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">");
      int int1 = 1963;
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "--", 1, 1963);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "?;\\*: o";
      String string1 = "-$$]KJQN4LCbU";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "?;*: o", "-$$]KJQN4LCbU", (Options) null, "-$$]KJQN4LCbU", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = null;
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("-");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ",N&I2";
      helpFormatter0.setLongOptSeparator(",N&I2");
      Options options0 = new Options();
      boolean boolean0 = false;
      options0.addOption("", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("[ Options: [ short ", ",N&I2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '[ Options: [ short ' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("|$9TnNgJCKOJH[");
      helpFormatter0.getArgName();
      String string0 = ")=[L";
      String string1 = "NO_ARGS_ALLOWED";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("   ", "NO_ARGS_ALLOWED");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '   ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-964);
      String string0 = null;
      StringBuffer stringBuffer0 = new StringBuffer();
      char[] charArray0 = new char[6];
      charArray0[0] = 'q';
      charArray0[1] = '~';
      charArray0[2] = 'M';
      charArray0[3] = 'H';
      charArray0[4] = '#';
      charArray0[5] = 'B';
      stringBuffer0.append(charArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-964), (-964), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("-");
      MockFile mockFile0 = new MockFile("WVw1_{B8yB7Z");
      helpFormatter0.rtrim("\n");
      Options options0 = new Options();
      helpFormatter1.setWidth(74);
      helpFormatter0.setOptionComparator((Comparator) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "", "", options0, " ", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptPrefix();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      MockFile mockFile0 = new MockFile("|ojhm>", "8Xzr)AYF");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('&');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      int int0 = 31;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options1.addOption("|ojhm>", "arg", true, "org.apache.commons.cli.Option");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '|ojhm>' contains an illegal character : '|'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 430;
      helpFormatter0.defaultDescPad = 430;
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setLeftPadding(0);
      Options options0 = new Options();
      String string0 = " [ARG]";
      Option option0 = null;
      try {
        option0 = new Option("w2\"`Bb%mE@3lYD%X", " [ARG]", false, "*_yOgy~0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'w2\"`Bb%mE@3lYD%X' contains an illegal character : '\"'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setNewLine("usage: ");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getWidth();
      helpFormatter0.setLongOptPrefix("usage: ");
      helpFormatter0.setWidth(74);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", false, "NS]x6UG>qx;nv ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setLongOptPrefix("");
      int int0 = (-513);
      helpFormatter0.defaultLeftPad = (-513);
      String string1 = "7`|2cH|vgENs";
      Options options0 = null;
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "usage: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // usage: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      Options options0 = new Options();
      options0.hasOption("usage: ");
      boolean boolean0 = false;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "KlW&^-r+GC6(\"}Gc{", "KlW&^-r+GC6(\"}Gc{", options0, "KlW&^-r+GC6(\"}Gc{", false);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("7JXpS");
      MockFile mockFile0 = new MockFile(";mbUE");
      helpFormatter0.rtrim("7JXpS");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "7y%D8", ";mbUE", (Options) null, "--", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)54;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("arg", 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, "f'n7VS<izi$");
      options1.getOptions();
      Options options2 = options1.addOption("", true, "");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.reset();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      int int0 = 2320;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2320, "");
      // Undeclared exception!
      try { 
        options2.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = " ";
      helpFormatter0.setOptPrefix("");
      String string0 = null;
      helpFormatter0.rtrim((String) null);
      String string1 = "NO_ARGS_ALLOWED";
      helpFormatter0.setLongOptPrefix("NO_ARGS_ALLOWED");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(" ", " ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.createPadding(1);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", (-2502), (-1050));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("");
      String string0 = ";mbUE";
      MockFile mockFile0 = new MockFile("WVw1_{B8yB7Z");
      helpFormatter0.rtrim("\n");
      PrintWriter printWriter0 = null;
      int int0 = 0;
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("Z1zN*$v'L&v,'O", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'Z1zN*$v'L&v,'O' contains an illegal character : '*'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n");
      helpFormatter0.rtrim("org.apache.commons.cli.AlreadySelectedException");
      MockFile mockFile0 = new MockFile("arg");
      helpFormatter0.rtrim("l");
      Options options0 = null;
      String string0 = "7y%D8";
      String string1 = " ?+U8,V`q.";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(13, "+@'hh.zB=", "7$ZALBl#@0C4(O", (Options) null, " ?+U8,V`q.", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.createPadding(1);
      int int0 = (-2502);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("\n", (-2502), (-1039));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-393));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setOptPrefix("P*-^,%Lcz(:9SM");
      helpFormatter0.setOptPrefix("W)XcjgoV[3I>[J}UQ");
      helpFormatter0.rtrim("P*-^,%Lcz(:9SM");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "#O=k)N,GIZ>43/CYGBX";
      String string0 = "";
      helpFormatter0.setArgName("");
      helpFormatter0.setLeftPadding(1918);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('X');
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "wBwTm", false, "<${[=85w-e+{N[");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.defaultLongOptPrefix = "#O=k)N,GIZ>43/CYGBX";
      Options options2 = options1.addOption((String) null, false, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 1918, "", "", options2, 31, 272, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setSyntaxPrefix((String) null);
      String string0 = "-";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "-", "-", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n");
      helpFormatter0.setLeftPadding(13);
      helpFormatter0.defaultLeftPad = 13;
      helpFormatter0.rtrim("af!Uyh");
      helpFormatter0.defaultWidth = 0;
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = options0.addOption("arg", true, "");
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 7, options1, 7, 13);
      helpFormatter0.renderWrappedText(stringBuffer1, 853, 44, "af!Uyh");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 776, "af!Uyh", "af!Uyh", options0, 776, 0, "^#VXN/Rf\"V=mU4B8=~G", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(13);
      helpFormatter0.defaultLeftPad = 13;
      helpFormatter0.rtrim("af!Uyh");
      helpFormatter0.defaultWidth = 0;
      Options options0 = new Options();
      options0.addOption("arg", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 776, "af!Uyh", "af!Uyh", options0, 776, 0, "^#VXN/Rf\"V=mU4B8=~G", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "KlW&^-r+GC6(\"}Gc{";
      Options options0 = new Options();
      options0.hasOption("usage: ");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "KlW&^-r+GC6(\"}Gc{", "KlW&^-r+GC6(\"}Gc{", options0, "KlW&^-r+GC6(\"}Gc{", false);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "+2um8";
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.defaultArgName = "+2um8";
      helpFormatter0.setNewLine("+2um8");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getDescPadding();
      String string1 = null;
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("+2um8", true, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '+2um8' contains an illegal character : '+'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      int int0 = 766;
      String string0 = "";
      String string1 = "{ CFwZ4`J8R!Kw-lC";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOption("", true, "");
      String string2 = "<0Q&n\"g*";
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("`yR6nHI>W[MJ^`", true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '`yR6nHI>W[MJ^`' contains an illegal character : '`'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.getNewLine();
      assertEquals("\n", string0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
  }
}
