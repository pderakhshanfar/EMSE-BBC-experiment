/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 15:02:46 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.ObjectOutputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.printHelp("arg", "\n", options0, "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("_B[>$TOa }Cr<V4,");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "\u0001]2!0FMI^bl1=D", "geW", options0, 3036, 2270, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.rtrim("h0");
      helpFormatter0.defaultOptPrefix = "";
      byte[] byteArray0 = new byte[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte) (-126);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 1, options0, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 106;
      String string0 = "+_";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string1 = null;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(106, "+_", (String) null, (Options) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      Options options2 = new Options();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      options2.addOption("", "-j+7>J,XabUMs9m'0Z$", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", false, "c4<_q;>F$4");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("-j+7>J,XabUMs9m'0Z$", "org.apache.commons.cli.AlreadySelectedException", options3, "org.apache.commons.cli.AlreadySelectedException");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "", options3);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getOptPrefix();
      Options options1 = options0.addOption("", true, "vBb0Ta8N^_KrK7[=K&");
      Option option0 = new Option((String) null, " ");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("arg", "", true, "cmdLineSyntax not provided");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options4 = options3.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options4, "org.apache.commons.cli.HelpFormatter$1", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "", true, (String) null);
      helpFormatter0.printHelp("e", options1, true);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("v!Aw@l/5Yb");
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "8d", true, "--");
      helpFormatter0.renderOptions(stringBuffer0, 1248, options2, 123, 87);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 87, "v!Aw@l/5Yb", "", options2, 1248, 123, "org.apache.commons.cli.ParseException", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", "-", (Options) null, "-", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "+M6v<x~4So QdZZpQ'";
      Options options0 = new Options();
      Option option0 = new Option("arg", true, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-1), 32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      helpFormatter0.setNewLine("NTe{AY3]r");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.createPadding(847);
      helpFormatter0.defaultArgName = "?Sj 2c!v{+jZi>&)$q0";
      helpFormatter0.setWidth(44);
      String string0 = "";
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.getNewLine();
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(44, "", "?Sj 2c!v{+jZi>&)$q0", (Options) null, "NTe{AY3]r");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-714), "usage: ", "usage: ", options0, (-714), (-714), "*FK#FN:_!5vJ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-460);
      helpFormatter0.setDescPadding((-460));
      helpFormatter0.getNewLine();
      Options options0 = null;
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", "", (Options) null, (String) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos(" :: ", 1, 1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "\"U/8[M";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"U/8[M");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string1 = "g_,QxM{i_B'XO2";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "g_,QxM{i_B'XO2");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter$1");
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter1.append('A');
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0);
      String string0 = helpFormatter0.defaultArgName;
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintWriter2;
      objectArray0[1] = (Object) printWriter0;
      objectArray0[2] = (Object) printWriter0;
      objectArray0[3] = (Object) mockPrintWriter1;
      objectArray0[4] = (Object) printWriter0;
      objectArray0[5] = (Object) printWriter0;
      mockPrintWriter2.format(locale0, "usage: ", objectArray0);
      mockPrintWriter1.append((CharSequence) "arg");
      int int0 = 96;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter2, 96, "org.apache.commons.cli.HelpFormatter$1", "org.apache.commons.cli.HelpFormatter$1", (Options) null, 96, 96, "org.apache.commons.cli.HelpFormatter$1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-339), (String) null, (String) null, options0, (-615), (-339), (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer(9);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      StringBuffer stringBuffer1 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer2 = new StringBuffer();
      helpFormatter1.renderWrappedText(stringBuffer2, 74, 1, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "ZuG|^&S4$L2/Z/5s";
      String string0 = helpFormatter0.defaultArgName;
      helpFormatter0.defaultWidth = (-415);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("ZuG|^&S4$L2/Z/5s", "\n", (Options) null, "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "\n", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter1.printHelp("--", "org.apache.commons.cli.Util", options0, "xE{K5-ynmXPmI[3K");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-[I:$");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "usage: ", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-15), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", "\n", options0, "\n");
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("arg", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "{zA$<6 XVkF/", (String) null, options0, 15, 15, "--", false);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultOptPrefix;
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.printHelp("\n", "\n", options0, "\n");
      String string1 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.setOptPrefix("-");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockFileOutputStream0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) mockFileOutputStream0;
      objectArray0[7] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[8] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, " ", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 10, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-839), options1, 163, (-58));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultOptPrefix;
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", "\n", options0, "\n");
      String string1 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 15, " ", " ", options0, 1089, 501, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp("\n", "arg", options0, "--");
      helpFormatter1.getArgName();
      helpFormatter0.getDescPadding();
      helpFormatter1.renderOptions((StringBuffer) null, 3, options0, 9, 10);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp("arg", "_li\"<", options0, "!OP))D4r;2!*p>q");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("!OP))D4r;2!*p>q");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1253, "usage: ", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 997, "_li\"<", "_li\"<", options0, 3, (-1), "IIw|(_KZ.Vo[9:Q");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "\n");
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 97, "N|5C", "'-8Uw~", options1, 501, 15, "\"", true);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1647, "`bBz}fQ^:+\"", "-", options1, 870, (-131), (String) null, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultOptPrefix;
      Options options0 = new Options();
      helpFormatter0.printHelp("J=bR*/z*s?>|3'", "org.apache.commons.cli.Option", options0, "");
      String string1 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
      MockFile mockFile0 = new MockFile("--", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter1.setDescPadding(5);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 5, "arg", "J=bR*/z*s?>|3'", options0, (-573), 63, "EZiD/qx-7vR,M$2'8", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-4173));
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Illegal option name '", options0, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer1 = new StringBuffer();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)123;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter1.renderWrappedText(stringBuffer1, 74, 1, "\n");
      StringBuffer stringBuffer2 = new StringBuffer("--");
      helpFormatter1.getLongOptSeparator();
      helpFormatter1.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) stringBuffer2;
      PrintWriter printWriter0 = mockPrintWriter0.format(".TT3+W]~!Ffi", objectArray0);
      helpFormatter1.printWrapped(printWriter0, 6, (int) (byte)123, "--");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      int int0 = (-1);
      Options options0 = new Options();
      String string0 = " ";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "--", "", options0, " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)63;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options1 = options0.addOption((String) null, "-", true, " ~n$S[p");
      options0.getOptionGroups();
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", options1, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("A", "\n", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      optionGroup2.setRequired(true);
      options0.addOptionGroup(optionGroup2);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-795), "35z(L'UOi", "uwm_5", options0, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      options0.addOption("", "N@>Qd3@", true, "");
      Options options1 = options0.addOption("arg", false, "\n");
      helpFormatter0.printHelp("N|5C", options0, false);
      helpFormatter0.printHelp("jb,iW.x+4$-!&[,ro\u0002", "org.apache.commons.cli.HelpFormatter$OptionComparator", options1, ">");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 69, ">", options0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("A", "\n", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      options0.addOptionGroup(optionGroup2);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-795), "35z(L'UOi", "uwm_5", options0, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)63;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options1 = options0.addOption((String) null, "-", true, " ~n$S[p");
      options0.getOptionGroups();
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("-", options1, false);
      Options options2 = new Options();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, (-1590), "-", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultOptPrefix = "";
      String string0 = "";
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator1).toString();
      doReturn(0).when(comparator1).compare(any() , any());
      helpFormatter0.optionComparator = comparator1;
      helpFormatter0.defaultWidth = (-47);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "cmdLineSyntax not provided", false, "--");
      Options options2 = options1.addOption("", true, "EE.RLq]R");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "\n", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      Options options4 = options3.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1172), "\"", "6 ", options4, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-934), "[ Options: [ short ", "Kl", options0, 3296, 10, "NO_ARGS_ALLOWED", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) stringWriter0;
      helpFormatter0.getLongOptPrefix();
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) "\n";
      objectArray0[4] = (Object) stringWriter0;
      objectArray0[5] = (Object) stringWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("\n", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-2093), (-2093), "+E>]H.{([");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      String string0 = "?3{WlhO&B\"";
      Options options1 = options0.addOption("arg", "?3{WlhO&B\"", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      options1.hasShortOption("");
      int int0 = 15;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 97, "", "", options1, 71, 15, "hdQI", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("\n", options1, true);
      Options options2 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 11, (-2753), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultOptPrefix;
      Options options0 = new Options();
      helpFormatter0.printHelp("p/", "#D^WHH&Z;c-iyxA", options0, "");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("EZiD/qx-7vR,M$2'8");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 97, "'-8Uw~", "", options0, 15, 501, "", true);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "--");
      Options options1 = options0.addOption(option0);
      StringBuffer stringBuffer0 = new StringBuffer();
      options0.getMatchingOptions(">");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderOptions(stringBuffer0, 3, options0, 3, 3);
      // Undeclared exception!
      helpFormatter1.renderOptions(stringBuffer0, 0, options1, 115, 47);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 1409;
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      options0.addOption("arg", "N|5C", false, "\n");
      helpFormatter0.printHelp("<", "N|5C", options0, ">");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.printHelp(69, ">", "S%YbuN+", options0, "");
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "?3{WlhO&B\"", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("\n", options1, true);
      Options options2 = new Options();
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(37, "", "J", options0, "\n", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("sKHD^+fJ8Ca");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 3, options0, 1450, 31);
      helpFormatter1.renderWrappedText(stringBuffer0, 3, 3, " ");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter4.renderWrappedText(stringBuffer1, 74, (-258), "cmdLineSyntax not provided");
      helpFormatter4.setWidth((-448));
      helpFormatter3.findWrapPos("<", 74, 74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      helpFormatter3.printUsage(printWriter0, 1450, "usage: ", options0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "--");
      Options options1 = options0.addOption(option0);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "9CU:PYa\"m<wZGTKpS", " ]", options1, "9CU:PYa\"m<wZGTKpS", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      options0.addOption("arg", "?3{WlhO&B\"", false, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(478, "?3{WlhO&B\"", " [ARG]", options1, " [ARG]", true);
      helpFormatter0.setOptPrefix("has already been selected: '");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Locale locale0 = Locale.UK;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      boolean boolean0 = false;
      Options options1 = options0.addOption("arg", false, "\n");
      helpFormatter0.printHelp("N|5C", options0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "--");
      options0.addOption(option0);
      StringBuffer stringBuffer0 = new StringBuffer();
      options0.getMatchingOptions(">");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderOptions(stringBuffer0, 3, options0, 3, 3);
      StringBuffer stringBuffer1 = null;
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText((StringBuffer) null, 1, 1, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "\n");
      helpFormatter0.printHelp("N|5C", options0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption((String) null, "usage: ", false, "-");
      helpFormatter0.printHelp("-", options3, false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.setLongOptPrefix("");
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp(26, "", "bx[((*^7p(:G", options1, "4l=~aX/~>T/ow7=w", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "N|5C", false, "\n");
      helpFormatter0.printHelp("N|5C", options0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix(" ");
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, "usage: ", "g>P-APf77AN", options1, "-", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.setLongOptPrefix("Og");
      helpFormatter0.printHelp(2665, "fw,r43", "<", options0, "", true);
      helpFormatter0.setOptPrefix("E!nB%*8.i0At~>%");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("' was specified but an option from this group ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Locale locale0 = Locale.UK;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 9, "^M", options0);
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3069, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      options0.addOption("arg", false, "\n");
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printHelp("N|5C", options0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      int int0 = (-4139);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-4139), options0, 1085, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("L5?-POk^lxikI}m;", 3, (-949));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 401;
      String string0 = null;
      helpFormatter0.defaultLongOptPrefix = null;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      int int0 = 0;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int1 = (-182);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("@UwrR", 0, (-182));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "\n");
      helpFormatter0.printHelp("N|5C", options0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix(" ");
      String string0 = "^M";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "^M", "^M", options1, "E!nB%*8.i0At~>%", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "-";
      objectArray0[3] = (Object) "arg";
      objectArray0[4] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "`vi]", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage(printWriter0, 3, "arg", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "k5:HFpA*L3:|o";
      helpFormatter0.getDescPadding();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Locale locale0 = Locale.FRENCH;
      locale0.getDisplayLanguage();
      locale0.hasExtensions();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "[ option: ";
      objectArray0[1] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      locale0.stripExtensions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      objectArray0[3] = (Object) locale0;
      mockPrintWriter1.flush();
      objectArray0[4] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter1.format(locale0, "[ option: ", objectArray0);
      mockPrintWriter0.format(locale0, "-", objectArray0);
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.printWrapped(printWriter0, 96, "-pG0");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderOptions(stringBuffer0, 3, options0, 3, 3);
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText((StringBuffer) null, 1, 1, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 6;
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 6, 6, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "N|5C", false, "\n");
      helpFormatter0.printHelp(" pL[!Fj=uj", options1, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("Illegal option name '");
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(10, "H^-%I!", "BJaKDj(%JXT0jTPC", options2, "arg", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "N~_7~A1)bAEW");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("#I,g.t|+k\"");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "-", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp("#I,g.t|+k\"", "#I,g.t|+k\"", options0, "#I,g.t|+k\"", false);
      helpFormatter0.printUsage(printWriter0, 1226, "");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer(9);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 9, options1, 9, (-115));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "7\"031}F4%%";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", "", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer1 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText((StringBuffer) null, 1, 1, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]");
      Options options0 = new Options();
      String string0 = "%N T]O:lD:w}B}";
      int int0 = 5;
      String string1 = "A CloneNotSupportedException was thrown: ";
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1978, " | ", "%N T]O:lD:w}B}", options0, 5, 5, "A CloneNotSupportedException was thrown: ");
      options0.hasLongOption("org.apache.commons.cli.HelpFormatter");
      String string2 = "--";
      String string3 = "";
      // Undeclared exception!
      try { 
        options0.addOption("%N T]O:lD:w}B}", "arg", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '%N T]O:lD:w}B}' contains an illegal character : '%'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      mockPrintWriter0.append('k');
      Options options1 = new Options();
      helpFormatter0.printHelp(1394, "NGMfv_", "NGMfv_", options0, "3J> [", false);
      helpFormatter0.setOptPrefix((String) null);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer1 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer1, 3, 3, "usage: ");
      helpFormatter0.defaultOptPrefix = "";
      StringBuffer stringBuffer2 = new StringBuffer("Zq@");
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer2, (-1533), (-2), " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      String string0 = null;
      helpFormatter0.setLongOptPrefix("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(44, "org.apache.commons.cli.OptionGroup", "arg", (Options) null, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.setDescPadding(63);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(6, "9CU:PYa\"m<wZGTKpS", "--", options0, "arg", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("q){zVHi.za*ad=k", "-", options0, "\n");
      MockFile mockFile0 = new MockFile("-", "gf#0TFWC!");
      // Undeclared exception!
      try { 
        MockFile.createTempFile((String) null, "usage: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[ARG...]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options0 = new Options();
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer1 = new StringBuffer();
      helpFormatter1.renderWrappedText(stringBuffer1, 74, 1, " ");
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer1, 1, 450, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", (String) null, (Options) null, "P ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[ARG...]");
      mockFileOutputStream0.release();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options0 = new Options();
      helpFormatter0.defaultWidth = 0;
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 3, "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      int int0 = 0;
      String string0 = "%N T]O:lD:w}B}";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]");
      String string1 = " | ";
      String string2 = "7Z&H";
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, (String) null);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, " | ", "7Z&H", options1, 0, 0, "7Z&H");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.append((CharSequence) "-");
      String string0 = null;
      helpFormatter0.printHelp(1781, "-", (String) null, options0, (String) null);
      helpFormatter0.setNewLine("we{(\"';$;z>J]URt.uu");
      String string1 = "29/3";
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1781, (String) null, "", options1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "S";
      Options options0 = new Options();
      helpFormatter1.printHelp("S", "S", options0, "S");
      MockFile mockFile0 = new MockFile("usage: ", "S");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        MockFile.createTempFile(" ", "Ah:b1i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      Options options0 = new Options();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "U}B";
      objectArray0[1] = (Object) stringBuffer0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "U}B";
      objectArray0[5] = (Object) pipedOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("U}B", objectArray0);
      helpFormatter0.printOptions(printWriter0, 0, options0, 548, 0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("M#VwO}K`%?}v3;");
      helpFormatter0.printHelp("usage: ", options0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "N|5C", false, "\n");
      helpFormatter0.printHelp("\n", options1, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix((String) null);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, "", "org.apache.commons.cli.OptionGroup", options0, "\n", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[ARG...]");
      Options options0 = new Options();
      options0.hasLongOption("S~y,");
      helpFormatter0.defaultWidth = 0;
      // Undeclared exception!
      helpFormatter0.printHelp("baA/", options0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options0 = new Options();
      stringBuffer0.append((double) 1);
      options0.hasShortOption("-");
      helpFormatter0.renderOptions(stringBuffer0, (-2), options0, 1366, 1366);
      String string0 = "org.apache.commons.cli.OptionGroup";
      options0.hasLongOption("16q)SjU@HT7");
      Option option0 = null;
      try {
        option0 = new Option("tm,kSK5`7u6gs]2O", "line.separator");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'tm,kSK5`7u6gs]2O' contains an illegal character : ','
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      helpFormatter0.setLeftPadding(1);
      helpFormatter0.rtrim("");
      helpFormatter0.setOptPrefix((String) null);
      String string0 = "";
      Options options0 = new Options();
      String string1 = "j6t5C}f7;<Vz";
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("j6t5C}f7;<Vz", (String) null, false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'j6t5C}f7;<Vz' contains an illegal character : '}'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "\n", (String) null, options0, " ] [ long ", false);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
      helpFormatter0.setSyntaxPrefix("N(``pR");
      helpFormatter0.getArgName();
      int int0 = (-3185);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-3185));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "<";
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "<", "<", options0, "<");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 194;
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("#I,g.t|+k\"");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "-", objectArray0);
      helpFormatter0.printUsage(printWriter0, 1226, "");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "+FhRr7~EpUm";
      Option option0 = null;
      try {
        option0 = new Option("\n", "\n", true, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      int int0 = (-3254);
      String string0 = "n}KDRpAaX(qQVP";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("--", "--", false, "+FhRr7~EpUm");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "*";
      helpFormatter0.setLongOptPrefix("*");
      String string1 = "";
      helpFormatter0.setArgName("");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getArgName();
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      helpFormatter0.getOptionComparator();
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      int int0 = (-1389);
      String string1 = "b<yROvN)*`(<;o,U@";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("t\"R=e6>6A /h", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 't\"R=e6>6A /h' contains an illegal character : '\"'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append('#');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, (-1), 1509, "),Ja");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("]");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "eIz<@:fit7;]me?%";
      helpFormatter0.setLongOptSeparator("eIz<@:fit7;]me?%");
      String string1 = "_zmk`B-R@{XNiQ}$jP";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(false);
      String string2 = "u9x<c";
      // Undeclared exception!
      try { 
        options1.addOption(" ", false, "u9x<c");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      helpFormatter0.defaultDescPad = 1586;
      helpFormatter0.rtrim("o.:hd~+5=*2(wua*6n!");
      helpFormatter0.setArgName("o.:hd~+5=*2(wua*6n!");
      helpFormatter0.setWidth(3246);
      helpFormatter0.setLeftPadding(3246);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      options0.hasLongOption("&?l0d{4[|H7ws!@X]");
      // Undeclared exception!
      try { 
        options0.addOption("--", false, "o.:hd~+5=*2(wua*6n!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[ARG...]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options0 = new Options();
      helpFormatter0.printOptions(mockPrintWriter0, 3, options0, 0, 3);
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.setSyntaxPrefix("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("baA/", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 31, (Options) null, 31, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "iio1D9Li";
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      int int0 = 691;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 691, (Options) null, 691, 691);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, (String) null, "bVcq>nM3", options0, " ] [ long ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.ParseException";
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('k');
      int int0 = 0;
      int int1 = 1235;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 0, "", "qG_aBRk<xNiIN\"s", options0, 0, 1235, "%N T]O:lD:w}B}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-2));
      helpFormatter0.getDescPadding();
      helpFormatter0.setDescPadding(44);
      helpFormatter0.defaultLeftPad = (-1459);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(44, ", ", ", ", (Options) null, "arg", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultWidth = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.getNewLine();
      helpFormatter0.getWidth();
      String string0 = "Etx^IEF&t^X/7iNx";
      Options options0 = new Options();
      boolean boolean0 = true;
      String string1 = "A4Gr\\CJ&`3Unz\")QP";
      // Undeclared exception!
      try { 
        options0.addOption("\n", "Etx^IEF&t^X/7iNx", true, "A4GrCJ&`3Unz\")QP");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "?{HX";
      objectArray0[1] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "?{HX";
      objectArray0[4] = (Object) mockPrintWriter1;
      objectArray0[5] = (Object) mockPrintWriter1;
      Object object1 = new Object();
      objectArray0[6] = object1;
      mockPrintWriter1.format("?{HX", objectArray0);
      int int0 = 0;
      String string0 = ":hAR/-A+";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options1.addOption(" ", ")2HwD?ku", false, "q-P)m]<<\"G{lB51IIsO");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptionComparator();
      helpFormatter0.createPadding(1);
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLeftPadding((-1555));
      String string0 = "qZ=*fYO{8#QT";
      String string1 = "EXi7wbms3ol>]a";
      Options options0 = new Options();
      options0.hasLongOption("--");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(false);
      // Undeclared exception!
      try { 
        optionGroup0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.OptionGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "QBlU/wBaEbc<qt:Bq");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 2006, 2006, "n^sd$~#c");
      assertEquals(8, stringBuffer0.length());
      
      helpFormatter0.defaultSyntaxPrefix = "M:GaZ\"j 0UM tGb<tX7";
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals(1, int0);
  }
}
