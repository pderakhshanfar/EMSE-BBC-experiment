/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 20:24:54 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      options0.addOptionGroup(optionGroup1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "-", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getLongOptPrefix();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 74;
      String string1 = "";
      Options options0 = new Options();
      String string2 = "2G[u|.@9-xR#?AsC";
      // Undeclared exception!
      try { 
        options0.addOption("--", "", false, "2G[u|.@9-xR#?AsC");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, "has already been selected: '");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 338, "org.apache.commons.cli.AlreadySelectedException");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", true, "--");
      option0.setArgName("");
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("jYzb{E1gu(V[");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1744, "kJ(05,,IhInQLj4G=", options1);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-2), options1, 497, 2231);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(13, "n|djMJ_1aZv7B?t", "", (Options) null, "~+");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setArgName((String) null);
      helpFormatter0.printHelp(" ]", "' was specified but an option from this group ", options0, "*]kbZ\"A%^");
      helpFormatter0.rtrim("IxDDDO95-@");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "HJ+]r(#Cvq=\"";
      helpFormatter0.setLeftPadding((-914));
      helpFormatter0.rtrim("HJ+]r(#Cvq=\"");
      helpFormatter0.getLeftPadding();
      String string1 = ">";
      String string2 = "";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-914), ">", "", (Options) null, "/MO6uD*nT", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 74, "");
      String string0 = helpFormatter0.createPadding(1699);
      helpFormatter0.getArgName();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(3, "]", "", options1, "arg", false);
      helpFormatter0.findWrapPos(string0, 1527, 1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = new Option("arg", "-", true, "\n");
      options0.addOption(option0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("YuVy`qb");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "]", "]", options0, (-1), 5038, "?bXsP$HRnjWxz");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("XX,UG>nwB/$3Y5/");
      char[] charArray0 = new char[7];
      charArray0[0] = 'z';
      charArray0[1] = '*';
      charArray0[2] = '6';
      charArray0[3] = 'C';
      charArray0[4] = '8';
      charArray0[5] = 'Q';
      charArray0[6] = 'H';
      mockPrintWriter0.write(charArray0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "XX,UG>nwB/$3Y5/", "", options0, 13, 32, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasLongOption("usage: ");
      String string0 = helpFormatter0.defaultOptPrefix;
      PrintWriter printWriter0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string1 = "-";
      String string2 = "+m@Kv*./PIW*ay}EP";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 3, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      Option option0 = new Option("", "--", false, "usage: ");
      options0.getOption("");
      Options options1 = options0.addOption(option0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-1), options1, 17, 18);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", " ");
      helpFormatter0.defaultDescPad = (-2);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("usage: ", options1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("");
      File file0 = MockFile.createTempFile("M53Dc[z 1BDX@dO~>?", "", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", (Object[]) null);
      mockPrintWriter0.printf("", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 16, "", "--", (Options) null, (-2708), (-2708), " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      helpFormatter0.rtrim("arg");
      options0.getOptionGroups();
      int int0 = HelpFormatter.DEFAULT_WIDTH;
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Bmo;.cR");
      PrintWriter printWriter0 = mockPrintWriter0.append('e');
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1169), "Bmo;.cR", "Bmo;.cR", options0, (-1169), (-1), (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      String string0 = helpFormatter0.defaultArgName;
      // Undeclared exception!
      helpFormatter0.printHelp("arg", "arg", options0, "arg", true);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-2694));
      helpFormatter0.setLeftPadding(27);
      helpFormatter0.setWidth((-2694));
      Options options0 = new Options();
      helpFormatter0.rtrim((String) null);
      options0.getOptionGroups();
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "~N8qDxap:zs;]~6uP+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1);
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      helpFormatter0.rtrim("arg");
      Collection collection0 = new LinkedList<OptionGroup>();
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", options0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1395, (Options) null, 46, 46);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      mockPrintWriter0.println((-701.4271944821985));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 85, (String) null, "9V\"/d.V", options0, 64, 1, "arg", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, " ");
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 274, "&J<x0RXo; @i", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "'Va$/Uv[vOj<u E";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'Va$/Uv[vOj<u E");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-1745);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      String string1 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      Options options0 = new Options();
      helpFormatter0.printOptions(mockPrintWriter1, (-1745), options0, 2281, 21);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(2281);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 2281, options0, (-2279), 5837);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("zg;\"y@PG)m.i[");
      File file0 = MockFile.createTempFile("O)9eT]AKf", (String) null, (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) "zg;\"y@PG)m.i[";
      objectArray0[3] = (Object) "O)9eT]AKf";
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) file0;
      objectArray0[6] = (Object) "zg;\"y@PG)m.i[";
      objectArray0[7] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("-", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-36), (-36), "O)9eT]AKf");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.defaultWidth;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("8");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 123, "-", "line.separator", options0, 34, 32, " ", true);
      Options options1 = new Options();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.defaultLeftPad;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('W');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2, "\"XGCI=ohf6");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1);
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setWidth(3);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      OptionGroup optionGroup1 = new OptionGroup();
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 10, 63);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = null;
      int int0 = 3354;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      int int1 = 669;
      helpFormatter0.renderOptions((StringBuffer) null, 3354, options0, 3354, 63);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 21, 3354, "sS5LVnuR:");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          HelpFormatter helpFormatter0 = new HelpFormatter();
          helpFormatter0.setLeftPadding(1);
          helpFormatter0.setLongOptSeparator("   ");
          helpFormatter0.setWidth(3);
          Options options0 = new Options();
          options0.toString();
          helpFormatter0.getLongOptSeparator();
          File file0 = null;
          StringWriter stringWriter0 = new StringWriter();
          StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
          MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
          Locale locale0 = Locale.ROOT;
          Object[] objectArray0 = new Object[6];
          objectArray0[0] = (Object) "   ";
          objectArray0[1] = (Object) options0;
          objectArray0[2] = (Object) null;
          objectArray0[3] = (Object) "   ";
          objectArray0[4] = (Object) "   ";
          objectArray0[5] = (Object) locale0;
          PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "   ", objectArray0);
          OptionGroup optionGroup0 = new OptionGroup();
          Option option0 = new Option("qRcmiwhB$", false, "-");
          OptionGroup optionGroup1 = optionGroup0.addOption(option0);
          Options options1 = options0.addOptionGroup(optionGroup1);
          // Undeclared exception!
          helpFormatter0.printHelp(printWriter0, 0, "   ", "=~", options1, 16, (-1829), "   ");
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(false);
      Option option0 = new Option("", "xM$");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("S.l:jJ+dms=s<cK", options1);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printHelp(" ", "9zI#ON iK4aH[&7=", options1, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, options0, 1, 455);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 8, options0, 64, 257);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 20;
      StringBuffer stringBuffer0 = new StringBuffer(20);
      int int1 = 1;
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 1, " ] [ long ");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("8");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp("[ Options: [ short ", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.defaultWidth = (-1051);
      Option option0 = new Option("", "xM$");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("S.l:jJ+dms=s<cK", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("8");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 123, "-", "line.separator", options0, 34, 32, "LC&j9w", true);
      Options options1 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = helpFormatter0.createPadding(2004);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      helpFormatter0.printWrapped(printWriter0, 15, "");
      helpFormatter0.createPadding(72);
      helpFormatter0.createPadding(50);
      helpFormatter0.rtrim(string0);
      helpFormatter0.findWrapPos("[", 72, 13);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("5aF_f3gEgq0Ecn4U\u0006H");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Object object0 = new Object();
      mockPrintWriter0.print(object0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 64, "5aF_f3gEgq0Ecn4U\u0006H", "5aF_f3gEgq0Ecn4U\u0006H", options0, 9, 0, "[");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "", true, "\n");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      helpFormatter0.printHelp("Xe+_1q=S", "", options1, "", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("c[]3'", options1);
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 635, "--", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte)115;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-2));
      helpFormatter0.getLongOptPrefix();
      int int0 = 2;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 2719, (-2), "--");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append('3');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 33, "Z4=mSsgbs;} E", "", options0, (-274), 1, "-", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("--");
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ]");
      Options options1 = new Options();
      int int0 = (-1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 108, "arg", "-", options1, (-1), 9, "R^`7QB", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.defaultWidth;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      StringBuffer stringBuffer1 = new StringBuffer(74);
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile(", ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 74, "usage: ");
      Options options1 = options0.addOption("", true, "usage: ");
      helpFormatter1.printHelp("-", "", options1, "-");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[";
      helpFormatter0.setLongOptSeparator(">ttoi<4hK(oM4vG");
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = (-2282);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Th#\u0004a+pYs", "", options0, "[", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Xe+_1q=S";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3, "arg", "--", (Options) null, 74, 58, "--", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-2));
      helpFormatter0.setLongOptSeparator("-Z99YC2KeF+Yi5N");
      helpFormatter0.setWidth(64);
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", "", options0, "t.L>;ON{ZO=(16hO");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "S.l:jJ+dms=s<cK";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string1 = "";
      Options options1 = null;
      int int0 = 1935;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("9=LJ97^<#f");
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 28, "c_d;?:9=c~Xzjh", (String) null, options2, (-1), (-1), "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "/";
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("/", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.defaultDescPad = 0;
      String string0 = "l&Jq";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "nTUcSL.a },", "_", (Options) null, "aOw Fy6>!v_/|+wbp%v", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1411, 0, "arg");
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer1, 0, (-1), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(43);
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Option option0 = new Option("arg", "Zon?{gAPs;u'-uUQB");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option1 = new Option("arg", "", true, "arg");
      options0.addOption(option1);
      OptionGroup optionGroup1 = new OptionGroup();
      optionGroup1.addOption(option0);
      optionGroup0.toString();
      Options options1 = options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(74, "arg", "-", options1, "Zon?{gAPs;u'-uUQB");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 74, 74, " ");
      stringBuffer1.insert(3, false);
      helpFormatter0.renderWrappedText(stringBuffer1, 1, 1, "usage: ");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[";
      helpFormatter0.setLongOptSeparator("[");
      String string1 = "org.apache.commons.cli.Hel6Formatter";
      Options options0 = new Options();
      helpFormatter0.defaultWidth = 11;
      String string2 = "zwL#5e+GZd(SC3+_L";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[", "org.apache.commons.cli.Hel6Formatter", options0, "zwL#5e+GZd(SC3+_L", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, 54, options0, 115, (-1225));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      StringBuffer stringBuffer1 = new StringBuffer(74);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer2 = new StringBuffer(stringBuffer1);
      int int0 = (-1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 34, "", "??4U.-r\"5da", options0, 1, 7, " ", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      helpFormatter0.defaultNewLine = "   ";
      helpFormatter0.setLeftPadding(1);
      Options options0 = null;
      int int1 = 44;
      String string0 = "B:h";
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 44, "B:h", "", (Options) null, (-1), (-649), "#46w#/avL", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("[");
      Options options0 = new Options();
      helpFormatter0.printHelp("[", "org.apache.commons.cli.Hel6Formatter", options0, "zwL#5e+GZd(SC3+_L", true);
      helpFormatter0.createPadding(0);
      helpFormatter0.printHelp("zwL#5e+GZd(SC3+_L", (String) null, options0, "org.apache.commons.cli.Hel6Formatter");
      helpFormatter0.setArgName("[");
      helpFormatter0.setWidth(0);
      boolean boolean0 = true;
      Options options1 = new Options();
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      Options options2 = options1.addOption("", true, "org.apache.commons.cli.HelpFormatter$1");
      options2.hasLongOption((String) null);
      Options options3 = options0.addOption("", (String) null, true, "*`(>ox(sq1");
      helpFormatter0.printHelp(4740, "{Na;$'(d>SG+\r", "", options3, "org.apache.commons.cli.HelpFormatter$1", true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('{');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "{Na;$'(d>SG+\r", 0, 0);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) charBuffer0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, false);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "h+d*#=_@wcw", "", options3, 24, 24, "", false);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(35);
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Option option0 = new Option("arg", "Zon?{gAPs;u'-uUQB");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("' contains an illegal character : '", options1, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(9);
      Options options2 = new Options();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('?');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "arg", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "   ";
      helpFormatter0.setLeftPadding(1);
      helpFormatter0.setLongOptSeparator("#46w#/avL");
      helpFormatter0.setWidth(1);
      Options options0 = new Options();
      options0.toString();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(343);
      helpFormatter1.renderWrappedText(stringBuffer0, 74, (-834), " ");
      helpFormatter1.getArgName();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("[");
      Options options0 = new Options();
      helpFormatter0.printHelp("[", "org.apache.commons.cli.Hel6Formatter", options0, "zwL#5e+GZd(SC3+_L", true);
      String string0 = helpFormatter0.defaultNewLine;
      helpFormatter0.printHelp("zwL#5e+GZd(SC3+_L", (String) null, options0, "org.apache.commons.cli.Hel6Formatter");
      helpFormatter0.setArgName("[");
      helpFormatter0.setWidth(0);
      Options options1 = new Options();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append(']');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "sVz\"{E2\"?r>Fh)\"I\"", options1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 1, 74);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer2 = new StringBuffer((CharSequence) "--");
      helpFormatter1.renderWrappedText(stringBuffer1, 74, (-279), "iYQl;8'UHP");
      helpFormatter0.renderWrappedText(stringBuffer1, 74, 1, "arg");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter3.printUsage((PrintWriter) null, 1, "-", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 3;
      helpFormatter0.defaultDescPad = 3;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      int int1 = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 74, "-", "--", (Options) null, 9, 1, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      int int0 = 338;
      Options options0 = new Options();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Option option0 = new Option("", "-", false, "");
      Options options1 = options0.addOption(option0);
      helpFormatter0.renderOptions(stringBuffer0, 338, options1, 4, 10);
      String string0 = null;
      String string1 = "";
      MockFile mockFile0 = new MockFile((String) null, "");
      MockFile mockFile1 = new MockFile(mockFile0, "--");
      String string2 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile1, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("[");
      Options options0 = new Options();
      helpFormatter0.printHelp("[", "org.apache.commons.cli.Hel6Formatter", options0, "zwL#5e+GZd(SC3+_L", true);
      helpFormatter0.createPadding(0);
      helpFormatter0.printHelp("zwL#5e+GZd(SC3+_L", (String) null, options0, "org.apache.commons.cli.Hel6Formatter");
      helpFormatter0.setArgName("[");
      helpFormatter0.setWidth(0);
      Options options1 = new Options();
      options1.hasOption("O+ayvO{DS^e ");
      options1.toString();
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      helpFormatter0.printHelp("| *B%=Sm9", (String) null, options1, "H*yV3W");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "-");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "", true, "A?!8R^nD*");
      helpFormatter0.printHelp("5k", options2);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("org.apache.commons.cli.HelpFormatter$1", 9, 13);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1);
      helpFormatter0.setLeftPadding(34);
      helpFormatter0.setWidth(34);
      Options options0 = new Options();
      Option option0 = new Option("arg", (String) null);
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption((String) null, "", false, "");
      options2.addOption("arg", "usage: ", true, "GC]*{5/Q~8-Rd");
      helpFormatter0.printHelp("has already been selected: '", "", options0, "/", true);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1);
      helpFormatter0.setLongOptSeparator("8");
      helpFormatter0.setWidth(31);
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.getOptionComparator();
      Option option0 = new Option("", true, "-");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption((String) null, false, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", "#46w#/avL", options2, "org.apache.commons.cli.OptionGroup");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "   ";
      Option option0 = new Option("arg", "F=,aM0.q84XF", true, "6D");
      Options options0 = new Options();
      String string1 = "";
      Options options1 = options0.addOption("6D", "", true, "arg");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      helpFormatter0.printHelp("6D", "   ", options0, "M}$J", true);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      doReturn(0).when(comparator0).compare(anyString() , anyString());
      helpFormatter0.setOptionComparator(comparator0);
      String string2 = helpFormatter0.createPadding(2589);
      helpFormatter0.printHelp(string2, "F=,aM0.q84XF", options2, string2);
      helpFormatter0.setArgName("F=,aM0.q84XF");
      int int0 = 42;
      helpFormatter0.setWidth(865);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 3;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, (-1), "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("[");
      Options options0 = new Options();
      helpFormatter0.printHelp("[", "org.apache.commons.cli.Hel6Formatter", options0, "zwL#5e+GZd(SC3+_L", true);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("[<'6=;'*n[*h-n>j1Ek").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.createPadding(0);
      helpFormatter0.printHelp("zwL#5e+GZd(SC3+_L", (String) null, options0, "org.apache.commons.cli.Hel6Formatter");
      helpFormatter0.setArgName("[");
      helpFormatter0.setWidth(0);
      Options options1 = new Options();
      Options options2 = options1.addOption("", true, "org.apache.commons.cli.HelpFormatter$1");
      options2.hasLongOption((String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      helpFormatter0.defaultNewLine = "   ";
      helpFormatter0.setLeftPadding(1);
      helpFormatter0.setLongOptSeparator("#46w#/avL");
      helpFormatter0.setWidth(1);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "0BRE~:}D- T");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      boolean boolean0 = false;
      option0.setRequired(false);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "--", "", options1, "2O13TRJ7zM=t");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "   ";
      helpFormatter0.setLeftPadding(1);
      helpFormatter0.setLongOptSeparator("#46w#/avL");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(114);
      String string0 = "";
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp("05G/0j6(M", " ", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "IW8E%8@`U.Y";
      helpFormatter0.defaultDescPad = 0;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "l&Jq", "nTUcSL.a },", (Options) null, "l&Jq", false);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "";
      String string1 = "cz^lx*Su2e^:OpD";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", "cz^lx*Su2e^:OpD", options0, "usage: ", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText((StringBuffer) null, 74, 3, "org.apache.commons.cli.ParseException");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "JN.EU&.NB&O");
      MockFile mockFile0 = new MockFile("-", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "#46w#/+vL";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) mockFile0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      helpFormatter0.printUsage(printWriter0, 1, "   ");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding(1);
      helpFormatter0.setLongOptSeparator("#zG@3X12gh3g#tb$");
      helpFormatter0.setWidth((-282));
      Options options1 = new Options();
      options0.toString();
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "?c>njh9Qb;vF/Wg2pg", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "", true, "\n");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      helpFormatter0.printHelp("Xe+_1q=S", "", options1, "", true);
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.createPadding(4740);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, true, "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 101, "f6mO||9+6@-c_l\"u", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "-", true, "\n");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.getOptionGroups();
      option0.setArgName("-");
      option0.clearValues();
      helpFormatter0.printHelp("<", options1);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "]", "\n", options0, "uWbx'g%Yq8", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "-", true, "\n");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      option0.setArgName("-");
      helpFormatter0.printHelp("<", options1);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("[");
      Options options0 = new Options();
      helpFormatter0.printHelp("[", "org.apache.commons.cli.Hel6Formatter", options0, "zwL#5e+GZd(SC3+_L", true);
      helpFormatter0.createPadding(0);
      helpFormatter0.printHelp("zwL#5e+GZd(SC3+_L", (String) null, options0, "org.apache.commons.cli.Hel6Formatter");
      helpFormatter0.setArgName("[");
      helpFormatter0.setWidth(0);
      Options options1 = new Options();
      Options options2 = options1.addOption("", true, "org.apache.commons.cli.HelpFormatter$1");
      options2.hasLongOption((String) null);
      Options options3 = options0.addOption("", (String) null, true, "*`(>ox(sq1");
      helpFormatter0.printHelp(4740, "{Na;$'(d>SG+\r", "", options3, "org.apache.commons.cli.HelpFormatter$1", true);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = new Option("arg", (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("usage: ", options1);
      helpFormatter2.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2), "-", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      boolean boolean0 = true;
      Option option0 = new Option("arg", "", true, "\n");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      optionGroup0.toString();
      helpFormatter0.printHelp("Xe+_1q=S", "", options1, "", true);
      String string1 = "";
      Option option1 = null;
      try {
        option1 = new Option("\n", "-", true, "jufDhh^{nZ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(35);
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Option option0 = new Option("arg", "Zon?{gAPs;u'-uUQB");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      helpFormatter0.printHelp("' contains an illegal character : '", options1, true);
      Options options2 = new Options();
      OptionGroup optionGroup1 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      options0.hasLongOption("");
      // Undeclared exception!
      try { 
        options2.addOption("*Y>#Cctq7;W=]/e1~", "", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '*Y>#Cctq7;W=]/e1~' contains an illegal character : '*'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("[");
      Options options0 = new Options();
      helpFormatter0.printHelp("[", "org.apache.commons.cli.Hel6Formatter", options0, "zwL#5e+GZd(SC3+_L", true);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("[<'6=;'*n[*h-n>j1Ek", (String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.createPadding(0);
      helpFormatter0.printHelp("zwL#5e+GZd(SC3+_L", (String) null, options0, "org.apache.commons.cli.Hel6Formatter");
      helpFormatter0.setArgName("[");
      helpFormatter0.setWidth(0);
      Options options1 = new Options();
      Options options2 = options1.addOption("", true, "org.apache.commons.cli.HelpFormatter$1");
      options2.hasLongOption((String) null);
      Options options3 = options0.addOption("", (String) null, true, "*`(>ox(sq1");
      helpFormatter0.printHelp(4740, "{Na;$'(d>SG+\r", "", options3, "org.apache.commons.cli.HelpFormatter$1", true);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "-", true, "\n");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      helpFormatter0.setLeftPadding(10);
      Options options2 = new Options();
      helpFormatter0.printHelp("usage: ", "", options1, "");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 74, 3, " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter1;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) stringBuffer1;
      objectArray0[3] = (Object) stringBuffer1;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter1.printf(locale0, "usage: ", objectArray0);
      helpFormatter1.printWrapped(printWriter0, 9, 9, "--");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1052));
      helpFormatter0.getArgName();
      Options options0 = new Options();
      String string0 = null;
      String string1 = null;
      Option option0 = new Option((String) null, "");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 1;
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 1, 74);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 1017, (-2), "arg");
      helpFormatter0.renderWrappedText(stringBuffer2, 74, 0, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      helpFormatter0.defaultSyntaxPrefix = "usage: ";
      helpFormatter0.setSyntaxPrefix("[$[gxOGT7l0");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter1.createPadding(3);
      helpFormatter1.getOptionComparator();
      MockFile mockFile0 = new MockFile("NO_ARGS_ALLOWED", "AHx2");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 2194, "[$[gxOGT7l0", options0);
      helpFormatter0.printHelp("--", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.getOptPrefix();
      String string0 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      Options options0 = new Options();
      OptionGroup optionGroup0 = null;
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "i74ce2Ehza{u?ka[o";
      String string0 = "g,PChK3mQQb/\\&zc";
      helpFormatter0.rtrim("g,PChK3mQQb/&zc");
      helpFormatter0.getLeftPadding();
      String string1 = "<";
      Options options0 = new Options();
      String string2 = "-";
      boolean boolean0 = true;
      File file0 = MockFile.createTempFile("usage: ", "N1p");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(file0, "\"=");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // \"=
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 3186;
      helpFormatter0.setDescPadding(3186);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-", true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 74);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte)118;
      try { 
        mockFileOutputStream0.write(byteArray0, (int) (byte) (-12), 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getSyntaxPrefix();
      int int0 = 0;
      String string0 = "4D`r):w]&}#T>";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = true;
      Options options2 = options1.addOption("arg", true, "");
      options2.addOption("arg", "arg", true, "arg");
      Option option0 = null;
      try {
        option0 = new Option(" ", true, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.optionComparator = null;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("h[cS`.qBKD", 0, (-1161));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      String string0 = "   ";
      helpFormatter0.defaultNewLine = "   ";
      helpFormatter0.setLeftPadding(1);
      String string1 = "#46\\w#/avL";
      helpFormatter0.setLongOptSeparator("#46w#/avL");
      String string2 = "Wf+l$r;Is.Id4O0@@";
      helpFormatter0.setWidth(1);
      Options options0 = new Options();
      String string3 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("#46w#/avL", "Wf+l$r;Is.Id4O0@@", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp(58, "<", "-", options0, "line.separator", true);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "   ";
      helpFormatter0.setLeftPadding(1);
      Options options0 = new Options();
      helpFormatter0.printHelp("#46w#/avL", "Wf+l$r;Is.Id4O0@@", options0, "");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      String string1 = "`)P\\*]c` O81";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("line.separator", ".TGo:?zuPoc7^eJ", (Options) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-364));
      helpFormatter0.setDescPadding(991);
      String string0 = "";
      int int0 = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", 0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("[");
      Options options0 = new Options();
      helpFormatter0.printHelp("[", "org.apache.commons.cli.HelpFormatter", options0, "zwL#5e+GZd(SC3+_L", true);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      int int0 = 0;
      helpFormatter0.createPadding(0);
      helpFormatter0.printHelp("zwL#5e+GZd(SC3+_L", (String) null, options0, "org.apache.commons.cli.HelpFormatter");
      helpFormatter0.setArgName("[");
      helpFormatter0.setWidth(0);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = null;
      try {
        option0 = new Option("-", true, "Q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-4117));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1651);
      helpFormatter0.defaultLeftPad = (-1651);
      helpFormatter0.getOptPrefix();
      helpFormatter0.setLongOptSeparator("-");
      ByteArrayOutputStream byteArrayOutputStream0 = null;
      try {
        byteArrayOutputStream0 = new ByteArrayOutputStream((-1651));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -1651
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(2267);
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "-");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("arg", options2, false);
      Options options3 = new Options();
      OptionGroup optionGroup2 = new OptionGroup();
      optionGroup2.toString();
      Options options4 = options3.addOptionGroup(optionGroup2);
      options4.hasLongOption("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "Y~6g_TN0%(Th8mbQ~]<", "arg", options3, "Y~6g_TN0%(Th8mbQ~]<", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "org.apache.commons.cli.ParseException";
      helpFormatter0.defaultSyntaxPrefix = "org.apache.commons.cli.ParseException";
      Options options0 = null;
      String string0 = "S9l,P/N6*v0";
      boolean boolean0 = false;
      helpFormatter0.defaultOptPrefix = "d& |.";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "-y94kUp+{oK-[_a{.,", "org.apache.commons.cli.ParseException", (Options) null, "S9l,P/N6*v0", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-2150);
      String string0 = null;
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.findWrapPos("", 1903, 1903);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      int int0 = 31;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("\n", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.createPadding(1);
      helpFormatter0.setOptPrefix("");
      String string1 = "rj>P`";
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setNewLine("rj>P`");
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setLongOptPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" | ");
      mockPrintWriter0.print('F');
      mockPrintWriter0.print((Object) "rj>P`");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "rj>P`");
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("5P@KHDhO!w\"rl", "", true, "@Bp-$!hQe7;5,:gGf&m");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '5P@KHDhO!w\"rl' contains an illegal character : '@'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("\n", "\n");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.setLongOptPrefix("org.apache.commons.cli.AlreadySelectedException");
      helpFormatter0.getDescPadding();
      String string0 = "";
      Options options0 = new Options();
      String string1 = "r6-,hy";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("r6-,hy", "", false, "r6-,hy");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'r6-,hy' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.createPadding(3);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "   ");
      int int0 = 304;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      int int1 = 0;
      int int2 = 1;
      boolean boolean0 = false;
      int int3 = 0;
      int int4 = (-738);
      Option option0 = null;
      try {
        option0 = new Option("-", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 74, (-1949), " ");
      helpFormatter0.renderWrappedText(stringBuffer1, 1, 374, "usage: ");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      options0.getMatchingOptions((String) null);
      Option option0 = new Option("arg", "\n", false, "-");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      option0.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), (String) null, "mV) )*!2J}c", options1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2), "}&XZ#c#8/81oPvL");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "--");
      optionGroup0.addOption(option0);
      Option option1 = new Option("", " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      options0.addOptionGroup(optionGroup1);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1);
      helpFormatter0.setLongOptSeparator("   ");
      helpFormatter0.setWidth(3);
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.getOptionComparator();
      helpFormatter0.printHelp("-", "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", options0, "");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "";
      String string1 = "xv";
      Options options0 = new Options();
      Option option0 = new Option("arg", "", true, "\n");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "Xe+_1q=S", "", options2, "");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 1, 74);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 1017, (-2), "arg");
      helpFormatter0.renderWrappedText(stringBuffer2, 74, 0, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      helpFormatter0.defaultSyntaxPrefix = "usage: ";
      StringBuffer stringBuffer3 = new StringBuffer((CharSequence) "arg");
      int int0 = 31;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2), 31, "G~3tI|e{Cqx(#");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 1, 74);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer2 = new StringBuffer(stringBuffer1);
      // Undeclared exception!
      try { 
        helpFormatter2.renderWrappedText(stringBuffer2, (-1), 74, "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      char[] charArray0 = new char[9];
      charArray0[0] = '}';
      charArray0[1] = 'r';
      charArray0[2] = '0';
      charArray0[3] = ']';
      charArray0[4] = '';
      charArray0[5] = '?';
      charArray0[6] = '&';
      charArray0[7] = 'w';
      charArray0[8] = '3';
      stringBuffer0.append(charArray0);
      helpFormatter0.renderWrappedText(stringBuffer0, 1569, 1569, " ] [ long ");
      assertEquals("\n}r0]?&w3 ] [ long", stringBuffer0.toString());
      
      helpFormatter0.setOptionComparator((Comparator) null);
      assertEquals(74, helpFormatter0.getWidth());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setLongOptPrefix("");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, false);
      String string1 = "+C5hi";
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format("+C5hi", objectArray0);
      int int0 = (-3281);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, (-3281), (Options) null, (-3281), (-3281));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(35);
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Option option0 = new Option("arg", "Zon?{gAPs;u'-uUQB");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Options options2 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("' contains an illegal character : '", options1, true);
      Options options3 = new Options();
      OptionGroup optionGroup1 = new OptionGroup();
      options2.addOptionGroup(optionGroup0);
      options0.hasLongOption("");
      // Undeclared exception!
      try { 
        options3.addOption("*Y>#Cctq7;W=]/e1~", "", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '*Y>#Cctq7;W=]/e1~' contains an illegal character : '*'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 1, 74);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 1017, (-2), "arg");
      helpFormatter0.renderWrappedText(stringBuffer2, 74, 0, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      String string0 = "usage: ";
      helpFormatter0.defaultSyntaxPrefix = "usage: ";
      helpFormatter0.setSyntaxPrefix("[$[gxOGT7l0");
      helpFormatter1.renderWrappedText(stringBuffer2, 44, 1, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, (-1147), "[ option: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 31;
      String string0 = "";
      Options options0 = new Options();
      options0.hasShortOption("-");
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(31, "", "", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "   ";
      helpFormatter0.setLeftPadding(1);
      String string0 = "#46\\w#/avL";
      helpFormatter0.setLongOptSeparator("#46w#/avL");
      helpFormatter0.defaultSyntaxPrefix = "";
      String string1 = "Wf+l$r;Is.Id4O0@@";
      helpFormatter0.setWidth(1);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(2267);
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "-");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("arg", options2, false);
      int int0 = (-2);
      String string0 = "Y~6g_TN0%(Th8mbQ~]<";
      Options options3 = new Options();
      OptionGroup optionGroup2 = new OptionGroup();
      Options options4 = options3.addOptionGroup(optionGroup2);
      options4.hasLongOption("usage: ");
      // Undeclared exception!
      try { 
        options4.addOption("=Cp+T'Pt+0 SE0vH", "Y~6g_TN0%(Th8mbQ~]<", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '=Cp+T'Pt+0 SE0vH' contains an illegal character : '='
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      String string0 = "";
      mockPrintWriter0.print("");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Option option0 = new Option("", false, "-");
      mockPrintWriter1.println((Object) option0);
      int int0 = 1741;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 1741, "");
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setArgName("1,`1+");
      helpFormatter0.getLongOptPrefix();
      String string1 = "<";
      String string2 = " | ";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("6<uGDD{)G", "org.apache.commons.cli.HelpFormatter$1", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '6<uGDD{)G' contains an illegal character : '<'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      helpFormatter0.setLeftPadding(1);
      helpFormatter0.setLongOptSeparator("   ");
      helpFormatter0.setWidth(3);
      Options options0 = new Options();
      options0.toString();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.printHelp("   ", "", options0, "");
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals(3, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 1;
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 1, 74);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 1017, (-2), "arg");
      helpFormatter0.renderWrappedText(stringBuffer2, 74, 0, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      helpFormatter0.defaultSyntaxPrefix = "usage: ";
      helpFormatter0.setSyntaxPrefix("[$[gxOGT7l0");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter1.createPadding(3);
      helpFormatter1.getOptionComparator();
      MockFile mockFile0 = new MockFile("NO_ARGS_ALLOWED", "AHx2");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 2194, "", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setNewLine((String) null);
      PrintWriter printWriter0 = null;
      int int0 = (-2);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getOption("arg");
      options0.getOptionGroups();
      // Undeclared exception!
      try { 
        options1.addOption("--", false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      String string1 = null;
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("-", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
