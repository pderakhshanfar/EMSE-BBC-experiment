/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 20:24:57 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.setSyntaxPrefix("--");
      helpFormatter0.setArgName("");
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Option option0 = new Option("", "\n");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.toString();
      options0.addOptionGroup(optionGroup1);
      options1.hasShortOption("org.apache.commons.cli.ParseException");
      helpFormatter0.printHelp("-", "\n", options1, "-");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "arg", "", options1, 0, 74, "\n");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "\n");
      helpFormatter0.getWidth();
      helpFormatter0.rtrim("org.apache.commons.cli.ParseException");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-", 1, 1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "org.apache.commons.cli.ParseException", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 0, "");
      helpFormatter0.findWrapPos(" [ARG]", 0, 0);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "`A{'W(\"4}7MxFQOA*", true, "The option '");
      Options options1 = options0.addOption(option0);
      option0.setArgName("");
      helpFormatter0.printHelp(55, "`A{'W(\"4}7MxFQOA*", (String) null, options1, "`A{'W(\"4}7MxFQOA*", true);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("arg");
      Option option0 = new Option("arg", "usage: ", true, "usage: ");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      option0.setArgName("");
      OptionGroup optionGroup1 = new OptionGroup();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "-", "", options0, "-", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setDescPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", false, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("Hq", "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("3L*oW82Bo]XW1r", "Hq", options2, "", true);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-2);
      byteArray0[5] = (byte) (-115);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("[ Options: [ short ");
      helpFormatter0.setWidth(1);
      helpFormatter0.defaultSyntaxPrefix = "[ Options: [ short ";
      helpFormatter0.getArgName();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, (int) (byte)0, " *Mn|p{%~F");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[lO)N%,h)YsrOK(";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[lO)N%,h)YsrOK(", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-2296), "usage: ", "arg", (Options) null, "z_nPlV,1G-&pz", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setDescPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setArgName("");
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Option option0 = new Option("", "\n");
      Options options1 = options0.addOption(option0);
      options1.hasShortOption("--");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "arg", "", options1, 0, 74, "\n");
      helpFormatter0.getWidth();
      helpFormatter0.getLeftPadding();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 115, "\n");
      helpFormatter0.findWrapPos("\n", 0, 0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      stringWriter1.getBuffer();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-1), " ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "zgZ", false, "-");
      helpFormatter0.printHelp("org.apache.commons.cli.ParseException", ",BI!V", options1, "org.apache.commons.cli.ParseException", true);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      Options options2 = options0.addOption("", "org.apache.commons.cli.ParseException", false, "-");
      helpFormatter0.renderOptions(stringBuffer0, 3250, options2, 113, 2);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 12, "org.apache.commons.cli.ParseException", options2);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.defaultNewLine = "org.apache.commons.cli.AlreadySelectedException";
      helpFormatter0.getWidth();
      helpFormatter0.createPadding(74);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 61, "org.apache.commons.cli.AlreadySelectedException");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "arg", (String) null, options0, "", true);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "dSXB";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("dSXB");
      Options options0 = null;
      int int0 = 108;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 46, "dSXB", "dSXB", (Options) null, 108, 108, "*f<+_DcD~XQTFWypV", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(394);
      helpFormatter0.defaultNewLine = "dSmq{[E;'KxpfiNZs&";
      helpFormatter0.getLeftPadding();
      helpFormatter0.setDescPadding((-1019));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      Options options0 = new Options();
      options0.hasShortOption("");
      helpFormatter0.renderOptions((StringBuffer) null, 6612, options0, 1079, 6612);
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(";:_Quumz");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("NO_ARGS_ALLOWED", "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      mockPrintWriter0.print((Object) optionGroup1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 99, "1%}", options0);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setDescPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setArgName("");
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Option option0 = new Option("", "\n");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "arg", "", options1, 0, 74, "\n");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.helpOptions();
      optionGroup1.toString();
      optionGroup0.setRequired(true);
      optionGroup1.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1504), "\n", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "--");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(63, "--", "--", options2, "--", true);
      optionGroup1.setRequired(true);
      optionGroup1.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("usage: ");
      helpFormatter1.printHelp(34, "T", "--", options0, "arg", true);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setDescPadding(10);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setArgName("");
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Option option0 = new Option("", "\n");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options1 = new Options();
      options1.hasShortOption("org.apache.commons.cli.ParseException");
      helpFormatter0.printHelp("-", "\n", options1, "-");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "arg", "", options1, 10, 74, "\n");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "\n");
      int int0 = helpFormatter0.defaultLeftPad;
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1514, (String) null, "", options1, 36, (-307), "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setArgName(" :: ");
      helpFormatter0.getNewLine();
      Options options1 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, " ");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setDescPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setArgName("");
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Option option0 = new Option("", "\n");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "arg", "", options1, 0, 74, "\n");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 313, "\n");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 2;
      helpFormatter0.setLeftPadding(2);
      Options options0 = new Options();
      options0.getOptions();
      Options options1 = new Options();
      options0.hasShortOption("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.ParseException", "", options1, "org.apache.commons.cli.ParseException");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setDescPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setArgName("");
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "Gg$^=>n>Slho";
      Option option0 = new Option("", "\n");
      Options options1 = options0.addOption(option0);
      options1.hasShortOption("org.apache.commons.cli.ParseException");
      helpFormatter0.printHelp("-", "\n", options1, "-");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "arg", "", options1, 0, 74, "\n");
      options0.toString();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "\n");
      helpFormatter0.getWidth();
      helpFormatter0.rtrim("org.apache.commons.cli.ParseException");
      helpFormatter0.printHelp("&Xxd V", "", options0, "NV8)R:FX8JyU", false);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "[ Options: [ short java.util.HashMap@0000000007 ] [ long {} ]", "e^PaKV8'Bsun9_", options0, 13, (-2), "", false);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 2;
      helpFormatter0.setLeftPadding(2);
      Options options0 = new Options();
      options0.addOption("arg", "-", true, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("FBI!V|+", "", options0, "km&wJiE\"8*x*MIbbP", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.setLongOptSeparator(" ]");
      helpFormatter0.setArgName("^<Ke=iO+^F[v");
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Option option0 = new Option("", "--");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options1 = options0.addOption(option0);
      options1.hasShortOption("\n");
      helpFormatter0.printHelp("\n", "~_i{A(46U(x", options0, "^<Ke=iO+^F[v");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "~_i{A(46U(x", "", options1, 0, 0, "By-6OCo,cH");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.setArgName("");
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Option option0 = new Option("", "\n");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options1 = options0.addOption(option0);
      options1.hasShortOption("org.apache.commons.cli.ParseException");
      helpFormatter0.printHelp("-", "\n", options1, "-");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "arg", "", options1, 0, 74, "\n");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "\n");
      helpFormatter0.getWidth();
      helpFormatter0.rtrim("org.apache.commons.cli.ParseException");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Object object0 = new Object();
      Object object1 = new Object();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "B}\"/]tGr`)=&", "B}\"/]tGr`)=&", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 2135, "]", "\"", options0, 44, 1, "Cannot add value, list full.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append('K');
      helpFormatter0.printWrapped(printWriter0, 1686, 1686, "");
      helpFormatter0.getDescPadding();
      helpFormatter0.setDescPadding(3);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("--", "org.apache.commons.cli.ParseException").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Locale locale0 = Locale.CANADA_FRENCH;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) " | ";
      objectArray0[1] = (Object) " | ";
      objectArray0[2] = (Object) " | ";
      MockPrintStream mockPrintStream0 = new MockPrintStream("1.>1]q");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, (String) null, true, "V|V(<Ida#cTRf!G(");
      helpFormatter0.printHelp(printWriter0, 1686, "-neG|j<n^5'k", "", options1, 1686, 3, "-neG|j<n^5'k");
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, (String) null);
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      option0.setArgName("-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(63, "--", "--", options2, "--", true);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 2;
      helpFormatter0.setLeftPadding(2);
      Options options0 = new Options();
      helpFormatter0.setNewLine("");
      options0.addOption("arg", "-", true, " ");
      StringBuffer stringBuffer0 = new StringBuffer();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.renderOptions(stringBuffer0, 448, options1, 2, 2);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("FBI!V|+", "", options0, "km&wJiE\"8*x*MIbbP", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append('K');
      helpFormatter0.printWrapped(printWriter0, 1686, 1686, "");
      helpFormatter0.getDescPadding();
      helpFormatter0.setDescPadding(3);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Locale locale0 = Locale.CANADA_FRENCH;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) " | ";
      objectArray0[1] = (Object) " | ";
      objectArray0[2] = (Object) " | ";
      objectArray0[3] = (Object) helpFormatter0;
      PrintWriter printWriter1 = mockPrintWriter0.format(locale0, " | ", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "D2*4FL*&;Jhc2(7D");
      Options options2 = options1.addOption("arg", "-", true, "*Z,,*V*J<=J] a");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      Options options4 = options3.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter1, 3, "N^c;f`sSZ[d2Vt p~2", options4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setArgName("");
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Option option0 = new Option("", "\n");
      options0.hasShortOption("org.apache.commons.cli.ParseException");
      helpFormatter0.printHelp("-", "\n", options0, "-");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "arg", "", options0, 0, 74, "\n");
      helpFormatter0.getWidth();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "usage: ", true, "usage: ");
      Options options1 = options0.addOption(option0);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, options1, 74, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("*QKrtyA!");
      helpFormatter0.setLongOptSeparator("");
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printStream0);
      mockPrintWriter1.flush();
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 2, "", options0);
      helpFormatter0.getArgName();
      helpFormatter0.getOptionComparator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("f", "*QKrtyA!", options0, "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setDescPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setArgName("");
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Option option0 = new Option("", " ");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("/ ", "\n", options1, "/ ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1025, "/ ", "", options1, 0, 1025, "\n");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2523, "\n");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setDescPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setArgName("");
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Option option0 = new Option("", " ");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("/ ", "\n", options1, "/ ");
      helpFormatter0.printHelp(625, "org.apache.commons.cli.Option", "8CdD#Of*l/H", options1, "8CdD#Of*l/H", true);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "arg", true, "-");
      helpFormatter0.printHelp("Cannot add value, list full.", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "--", options0);
      helpFormatter0.getArgName();
      helpFormatter1.getOptionComparator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "The option '", "--", options1, 74, 74, "arg");
      helpFormatter1.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 74, options1, (-1931), 126);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-5119), 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Cannot add value, list full.";
      helpFormatter0.setLongOptSeparator("");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      mockPrintWriter0.flush();
      Options options0 = new Options();
      Locale locale0 = Locale.CHINESE;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) byteArrayOutputStream0;
      objectArray0[2] = (Object) "";
      mockPrintWriter0.printf(locale0, "-", objectArray0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "", options0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.setLongOptSeparator("");
      MockFile mockFile0 = new MockFile("has already been selected: '", "usage: ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 0, "", options2);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", (String) null, false, "--");
      helpFormatter0.printHelp("   ", options1);
      helpFormatter0.printHelp("RN96=+k4Ir8}", "v~p Sg_nu9wNC:", options1, "RN96=+k4Ir8}", true);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "usage: ", true, "Cannot add value, list full.");
      helpFormatter0.printHelp(",FBI!V|+", options0);
      helpFormatter0.printHelp("v~p Sg_nu9wNC:", "A CloneNotSupportedException was thrown: ", options1, "B:g|3x\"~,4/a8IM:", true);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 3062;
      helpFormatter0.createPadding(3062);
      String string0 = "";
      String string1 = "-";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("=2", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, (-1), options0, 66, 66);
      helpFormatter0.renderWrappedText(stringBuffer1, 115, 66, ", ");
      Options options1 = new Options();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setDescPadding(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile(" | ", ">");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(mockFile0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 42, "(j(ujt|?_Ay'A)s", options0);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      int int0 = 354;
      StringBuffer stringBuffer1 = stringBuffer0.replace(1, 354, "usage: ");
      int int1 = 16;
      Options options0 = new Options();
      int int2 = 311;
      helpFormatter0.renderOptions(stringBuffer0, 16, options0, 311, 311);
      helpFormatter0.getOptPrefix();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringBuffer1.append((Object) options0);
      PrintWriter printWriter0 = null;
      String string0 = "";
      char[] charArray0 = new char[9];
      charArray0[0] = '?';
      charArray0[1] = 'B';
      charArray0[2] = 'B';
      charArray0[3] = 'w';
      charArray0[4] = 'q';
      charArray0[5] = 'L';
      charArray0[6] = '!';
      charArray0[7] = 'o';
      charArray0[8] = 'T';
      // Undeclared exception!
      try { 
        stringBuffer1.insert(34, charArray0, 3, 44);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // offset 3, len 44, str.length 9
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      helpFormatter1.printHelp("\n", "\n", options1, "\n", true);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.hasOption("\".zBzoi9(");
      helpFormatter1.printHelp("--", "--", options0, "", false);
      MockFile mockFile0 = new MockFile("<5~B9+w~(Iw$;m", "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, (-1069), 110, "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      String string1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 294, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.setArgName("~mAL!8DA`.kkSuv7#");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.hasOption("\".zBzoi9(");
      helpFormatter1.printHelp("--", "--", options0, "", false);
      MockFile mockFile0 = new MockFile("<5~B9+w~(Iw$;m", "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "<5~B9+w~(Iw$;m";
      objectArray0[3] = (Object) options0;
      objectArray0[4] = (Object) mockFileOutputStream0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) helpFormatter1;
      PrintWriter printWriter0 = mockPrintWriter0.format("arg", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage(printWriter0, 1, "-", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 74, "Jt:R*5e0f`#", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("-").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(58);
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream(10);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream1, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream1, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 121, ", ", (String) null, options0, 10, 10, "", false);
      helpFormatter0.setArgName((String) null);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "arg", true, "-");
      helpFormatter0.printHelp("Cannot add value, list full.", options0);
      helpFormatter0.printHelp("A CloneNotSupportedException was thrown: ", "v~p Sg_nu9wNC:", options1, (String) null, true);
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "?%/~/K<o1uRal1m@qi");
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      options0.addOption((String) null, "arg", true, "-");
      helpFormatter0.printHelp("Cannot add value, list full.", options0);
      helpFormatter0.setSyntaxPrefix((String) null);
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("\n", "6w2FZg=+k}t/+``J9", options1, (String) null, false);
      helpFormatter0.getSyntaxPrefix();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter1.setNewLine((String) null);
      helpFormatter1.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 3, (-16), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Locale locale0 = new Locale("usage: ", "usage: ", "");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) helpFormatter1;
      objectArray0[1] = (Object) "+XqAa]] }hR/[";
      objectArray0[2] = (Object) pipedOutputStream0;
      objectArray0[3] = (Object) helpFormatter1;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "-", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      helpFormatter1.printOptions(mockPrintWriter1, 74, options0, 74, 3);
      helpFormatter0.printHelp("+XqAa]] }hR/[", "arg", options0, "-", false);
      helpFormatter0.createPadding(3);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) comparator0;
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 121, "XF%VQU6*'!ji(!ZXS", "8EvtFnh", options0, 121, 121, (String) null, true);
      helpFormatter0.setArgName("");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) comparator0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) comparator0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      PrintStream printStream0 = mockPrintStream0.printf("usage: ", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Options options0 = new Options();
      Locale locale0 = Locale.JAPANESE;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintStream0, false);
      Option option0 = new Option((String) null, false, ">,GR[`XoAo");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 1904, (String) null, ")lbwf'Zx", options1, (-1966), (-1), "K)9FF", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(121);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 121, "8EvtFnh", (String) null, options0, 121, 121, "(1<.,y", false);
      helpFormatter0.setArgName("");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Object object0 = new Object();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      Object object1 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[3] = object0;
      PrintStream printStream0 = mockPrintStream0.printf("arg", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Options options0 = new Options();
      Locale locale0 = Locale.JAPANESE;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("usage: ");
      int int0 = 67;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 1, "Cannot add value, list full.", "arg", options0, 67, 1, "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) comparator0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) comparator0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      PrintStream printStream0 = mockPrintStream0.printf("usage: ", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Options options0 = new Options();
      Locale locale0 = Locale.JAPANESE;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "K)9FF", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 1, "dPvnA=,E{/zgE )]", "-", options0, 179, (-921), "3@c},2");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Object object0 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      Object object1 = new Object();
      Object object2 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.printf("\n", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Options options0 = new Options();
      String string0 = "5&#gB^rgv.";
      int int0 = 3;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 179, "arg", "", options0, (-242), 3, "--", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printHelp("b4GS6zj5 Cw!&p#_'HG", options0, false);
      helpFormatter0.getWidth();
      helpFormatter0.rtrim("b4GS6zj5 Cw!&p#_'HG");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Object object0 = new Object();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      mockPrintStream0.printf(" ", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1);
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 406, "A(v", "5&#gB^rgv.", options0, (-1440), (-2), (String) null, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Object object0 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "?%/~/K<o1uRal1m@qi");
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      options0.addOption((String) null, "arg", true, "-");
      helpFormatter0.printHelp("Cannot add value, list full.", options0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.setSyntaxPrefix((String) null);
      Options options1 = new Options();
      options1.getMatchingOptions("arg");
      options1.addOption(option0);
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("A CloneNotSupportedException was thrown: ", "v~p Sg_nu9wNC:", options1, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      int int0 = 67;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 67, "C(>");
      StringBuffer stringBuffer0 = new StringBuffer(27);
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("--", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) options0;
      objectArray0[5] = (Object) helpFormatter0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      Object object2 = new Object();
      objectArray0[7] = object2;
      Object object3 = new Object();
      objectArray0[8] = object3;
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-930), "I?~CuX\"1,j&%");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "?%/~/K<o1uRal1m@qi");
      Object object0 = new Object();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(bufferedOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0, false);
      mockPrintStream0.printf("arg", (Object[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Options options1 = new Options();
      Options options2 = options0.addOption("arg", "Cannot add value, list full.", false, "?%/~/K<o1uRal1m@qi");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1225), "6!77<q]`=EP*;S]", "", options2, (-1), (-1), (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "j`:";
      helpFormatter0.setDescPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("7f 1)E.im)3OQ[,/Z");
      helpFormatter0.setLongOptSeparator("69f");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 0, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "\n", objectArray0);
      Options options0 = new Options();
      int int0 = (-2450);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 66, options0, 66, (-2450));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("v").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      helpFormatter0.getArgName();
      helpFormatter0.findWrapPos("?asw/sf#_Qn~yyb<7`", 0, 34);
      helpFormatter0.printHelp(85, "?asw/sf#_Qn~yyb<7`", (String) null, options0, "f;[Pf%P-yxAUx:q");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(" ");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "?%/~/K<o1uRal1m@qi");
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      options0.addOption((String) null, "arg", true, "-");
      helpFormatter0.printHelp("Cannot add value, list full.", options0);
      helpFormatter0.setSyntaxPrefix((String) null);
      Options options1 = new Options();
      options1.getMatchingOptions("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("A CloneNotSupportedException was thrown: ", "v~p Sg_nu9wNC:", options1, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = ")j<H8YO+*OXbk:i";
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, false, (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.setLongOptPrefix("pjWk4VI`J;");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptPrefix();
      helpFormatter0.setDescPadding(0);
      helpFormatter1.printHelp("arg", options1);
      helpFormatter1.getWidth();
      helpFormatter1.setLongOptPrefix(" [ARG]");
      helpFormatter0.setOptPrefix("");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("usage: ", "\n");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "?%/~/K<o1uRal1m@qi");
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      options0.addOption((String) null, "arg", true, "-");
      helpFormatter0.printHelp("Cannot add value, list full.", options0);
      helpFormatter0.setSyntaxPrefix((String) null);
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("\n", "6w2FZg=+k}t/+``J9", options1, (String) null, false);
      helpFormatter0.getSyntaxPrefix();
      MockFile mockFile0 = new MockFile("~J~");
      // Undeclared exception!
      try { 
        MockFile.createTempFile((String) null, "\n", (File) mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      helpFormatter0.printHelp("5MsU@0fs", "[A3,x", options0, "");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      options0.addOption("arg", "\n", false, "[A3,x");
      helpFormatter0.renderWrappedText(stringBuffer0, 5241, 5241, "");
      optionGroup0.setRequired(false);
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.setLongOptPrefix("5MsU@0fs");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setDescPadding(74);
      helpFormatter0.printHelp("Z", options0);
      helpFormatter0.getWidth();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setOptPrefix("e[");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("1<NbpF_JS18:e8", " ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) comparator0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) comparator0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) mockPrintStream0;
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) helpFormatter0;
      objectArray0[8] = (Object) helpFormatter0;
      PrintStream printStream0 = mockPrintStream0.printf("arg", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 17, "0SRc-`.Cf->|", "", options0, 17, 17, "6!77<q]`=EP*;S]");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      options0.addOption((String) null, "arg", true, "-");
      helpFormatter0.printHelp("Cannot add value, list full.", options0);
      helpFormatter0.setSyntaxPrefix((String) null);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("A CloneNotSupportedException was thrown: ", "v~p Sg_nu9wNC:", options1, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Object object0 = new Object();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      PrintStream printStream0 = mockPrintStream0.printf("\n", objectArray0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(printStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1540), "6!77<q]`=EP*;S]", (String) null, options0, (-1), 55, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Object object0 = new Object();
      Object object1 = new Object();
      MockPrintStream mockPrintStream0 = new MockPrintStream("Na`g");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "Na`g";
      mockPrintStream1.printf("--", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1);
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 929, "Na`g", "5&#gB^rgv.", options0, (-1), (-242), " :: ", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) comparator0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) comparator0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      mockPrintStream0.println((float) 3);
      objectArray0[5] = (Object) mockPrintStream0;
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) helpFormatter0;
      objectArray0[8] = (Object) helpFormatter0;
      PrintStream printStream0 = mockPrintStream0.printf("arg", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Options options0 = new Options();
      helpFormatter0.printHelp(32, "6!77<q]`=EP*;S]", "", options0, "6!77<q]`=EP*;S]");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(74, "", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      helpFormatter0.printHelp("5MsU@0fs", "[A3,x", options0, "");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      options0.addOption("arg", "\n", false, "[A3,x");
      optionGroup0.setRequired(false);
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.setLongOptPrefix("5MsU@0fs");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.printHelp("Z", options0);
      helpFormatter0.getWidth();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setOptPrefix("e[");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("1<NbpF_JS18:e8", " ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Cannot add value, list full.";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Options options1 = options0.addOption((String) null, "arg", true, "Ns&8");
      helpFormatter0.printHelp("Cannot add value, list full.", options0);
      options1.addOption((String) null, true, "org.apache.commons.cli.AlreadySelectedException");
      helpFormatter0.getArgName();
      Options options2 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((String) null, "--", options1, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.setSyntaxPrefix("Illegal option name '");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(" ", " ", options0, "", true);
      helpFormatter0.createPadding(796);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Jq$Tr Y;v";
      helpFormatter0.setLongOptPrefix("Jq$Tr Y;v");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      // Undeclared exception!
      try { 
        optionGroup0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.OptionGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "j`:";
      helpFormatter0.defaultNewLine = "j`:";
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("7f 1)E.im)3OQ[,/Z");
      helpFormatter0.setLongOptSeparator(" ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, 1, "7f 1)E.im)3OQ[,/Z");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Options options1 = options0.addOption((String) null, "arg", true, "Ns&8");
      helpFormatter0.printHelp("Cannot add value, list full.", options0);
      options1.addOption((String) null, true, "org.apache.commons.cli.AlreadySelectedException");
      String string0 = "";
      Option option0 = new Option("", "arg");
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "-", "-", options1, "<6Cm)};0Sf", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      helpFormatter0.printHelp("5MsU@0fs", "[A3,x", options0, "");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      optionGroup0.setRequired(false);
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.setLongOptPrefix("5MsU@0fs");
      helpFormatter0.getLongOptPrefix();
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      helpFormatter0.printHelp("Z", options0);
      helpFormatter0.getWidth();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setOptPrefix("e[");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("1<NbpF_JS18:e8", " ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("-");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getArgName();
      optionGroup0.setRequired(true);
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.getLongOptPrefix();
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      helpFormatter0.printHelp("usage: ", options0);
      helpFormatter0.getWidth();
      String string0 = "<)W!";
      helpFormatter0.setLongOptPrefix("<)W!");
      helpFormatter0.setOptPrefix("");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("puse9?J+2X]-APLE!Ak", " ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "j`:";
      helpFormatter0.defaultNewLine = "j`:";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("8@");
      int int0 = (-154);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 174, "&e6x~9", "j`:", (Options) null, 260, (-154), "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLeftPadding();
      String string0 = helpFormatter0.defaultOptPrefix;
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 3, "");
      // Undeclared exception!
      try { 
        stringBuffer0.deleteCharAt(1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "j`:";
      helpFormatter0.setDescPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("7f 1)E.im)3OQ[,/Z");
      String string0 = "";
      helpFormatter0.setLongOptSeparator("");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 1460, "", "oAxBFg*", options0, 929, (-242), "a[e/M9i>;Y", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) comparator0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) comparator0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) mockPrintStream0;
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) helpFormatter0;
      objectArray0[8] = (Object) helpFormatter0;
      PrintStream printStream0 = mockPrintStream0.printf("arg", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "", "6!77<q]`=EP*;S]", options0, 17, 17, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "[";
      helpFormatter0.setSyntaxPrefix("rg.apache.cmmons.cli.HelpFormatter$1");
      String string0 = "rZInv}p";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("rZInv}p");
      Object[] objectArray0 = new Object[18];
      objectArray0[0] = (Object) "rZInv}p";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "[";
      objectArray0[3] = (Object) "The option '";
      PrintWriter printWriter0 = mockPrintWriter0.format("1tA", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-139), (-132), "Fj^!6r^V");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.HelpFormatter";
      Options options0 = null;
      String string1 = " PQXqMv$>n;&?{";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", "org.apache.commons.cli.HelpFormatter", (Options) null, " PQXqMv$>n;&?{");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-235);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-235), options0, (-235), 640);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Options options1 = options0.addOption((String) null, "arg", true, "Ns&8");
      helpFormatter0.printHelp("Cannot add value, list full.", options0);
      options1.addOption((String) null, true, "org.apache.commons.cli.AlreadySelectedException");
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("arg", 1, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 340, (Options) null, 340, 25);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (Options) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "j`:";
      helpFormatter0.defaultNewLine = "j`:";
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      String string1 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter$OptionComparator");
      String string2 = "69f";
      helpFormatter0.setLongOptSeparator("");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, (-3092), "j`:");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      int int0 = 1134;
      helpFormatter0.setDescPadding(1134);
      helpFormatter0.defaultNewLine = "]";
      String string0 = "";
      helpFormatter0.setArgName("");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setOptPrefix("usage: ");
      String string1 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = ">2S?KM&H^qT";
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptPrefix();
      int int0 = 0;
      helpFormatter0.createPadding(0);
      File file0 = MockFile.createTempFile("tlFA=h", (String) null);
      // Undeclared exception!
      try { 
        MockFile.createTempFile("-", " ", file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      Options options0 = new Options();
      options0.getOption("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, options0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", (String) null, options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("X{*(Z");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.setOptPrefix("MQ,fctd3I]9");
      helpFormatter0.setNewLine("]");
      helpFormatter0.setArgName("!<*2[Od?");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "/";
      helpFormatter0.setNewLine("/");
      int int0 = 0;
      String string1 = "#v7J2R71z>,f6e')9|";
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = new Option("", false, "arg");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option1 = null;
      try {
        option1 = new Option("u[GS?t", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'u[GS?t' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("org.apache.commons.cli.AlreadySelectedException");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "[";
      helpFormatter0.setSyntaxPrefix("pjWk4VI`J;");
      Options options0 = new Options();
      helpFormatter0.printHelp("mWN=PR", "[", options0, "[", false);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      String string0 = "*`dI";
      helpFormatter0.setArgName("*`dI");
      String string1 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string2 = "The option '";
      boolean boolean0 = false;
      String string3 = "[";
      Option option0 = null;
      try {
        option0 = new Option("The option '", false, "[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'The option '' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-629), (String) null, (String) null, (Options) null, 4829, 31, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "j`:";
      helpFormatter0.setDescPadding(0);
      String string0 = "7f 1)E.im)3OQ[,/Z";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("7f 1)E.im)3OQ[,/Z");
      helpFormatter0.setLongOptSeparator("");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, 0, "7f 1)E.im)3OQ[,/Z");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append('K');
      helpFormatter0.printWrapped(printWriter0, 1686, 1686, "");
      helpFormatter0.getDescPadding();
      helpFormatter0.setDescPadding(3);
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      Locale locale0 = Locale.CANADA_FRENCH;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) " | ";
      objectArray0[1] = (Object) " | ";
      objectArray0[2] = (Object) " | ";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) comparator0;
      objectArray0[5] = (Object) printWriter0;
      mockPrintWriter0.format(locale0, " | ", objectArray0);
      String string0 = "N^c;f`sSZ[d2Vt p~2";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("{U|T", true, "D2*4FL*&;Jhc2(7D");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '{U|T' contains an illegal character : '{'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "j`:";
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setLongOptSeparator("69f");
      helpFormatter0.setNewLine("arg");
      helpFormatter0.setArgName("7f 1)E.im)3OQ[,/Z");
      helpFormatter0.getNewLine();
      assertEquals("7f 1)E.im)3OQ[,/Z", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      MockFile mockFile0 = new MockFile("");
      String string0 = ">";
      MockFile mockFile1 = new MockFile(mockFile0, ">");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile1, "\n");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "bu8RO!2/wU9ulbKEU*m";
      helpFormatter0.setArgName("bu8RO!2/wU9ulbKEU*m");
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultLeftPad = 3623;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 115, (String) null, options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "\\u=B81T>";
      helpFormatter1.defaultOptPrefix = string0;
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter1.defaultLeftPad = 3;
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 10, 74, "usage: ");
      // Undeclared exception!
      try { 
        stringBuffer1.setCharAt(601, 'd');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.getWidth();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 74, 3, "");
      stringBuffer0.deleteCharAt(1);
      helpFormatter0.renderWrappedText(stringBuffer1, 74, 1507, "yt8ScE}ca=S$v|]%<");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setLongOptPrefix("--");
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-3137));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Y=k`MY";
      Options options0 = new Options();
      int int0 = (-1434);
      helpFormatter0.setWidth((-1434));
      int int1 = 0;
      options0.getOptionGroups();
      String string1 = "LB|V";
      helpFormatter0.setArgName("LB|V");
      helpFormatter0.setLeftPadding(0);
      boolean boolean0 = true;
      options0.hasOption("--");
      String string2 = "R#a8!h\\CJeFc";
      // Undeclared exception!
      try { 
        options0.addOption("--", true, "R#a8!hCJeFc");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 0, "3");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2121;
      String string0 = " :: ";
      Options options0 = new Options();
      String string1 = "";
      boolean boolean0 = false;
      String string2 = "9N_`v$L^;C>Zf.[O4{";
      options0.addOption("", "", false, "9N_`v$L^;C>Zf.[O4{");
      String string3 = "]";
      Option option0 = null;
      try {
        option0 = new Option("-", "]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
