/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 20:24:06 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "uv9pi=+=gHzdBl";
      helpFormatter0.defaultSyntaxPrefix = "";
      Options options0 = new Options();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", "-", (Options) null, ", ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding((-1044));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("usage: ", "usage: ", options0, "usage: ", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "-", true, "-");
      Option option1 = new Option("", "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Option option2 = new Option("", true, "");
      optionGroup1.addOption(option2);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 74, "' was specified but an option from this group ", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultSyntaxPrefix = null;
      Option option0 = new Option("arg", "usage: ", true, " ");
      helpFormatter0.setWidth((-2));
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "-JCBXPo", "-JCBXPo", options0, 0, 0, "-JCBXPo");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "`!E:>2i+Iz!ci*h5";
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 307, options0, 307, 307);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      Option option0 = new Option("arg", "-", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte) (-48);
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      optionGroup0.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup2);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "usage: ", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "L _g!v,C.;>nA_8KrV4");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = new Option("arg", "-", true, "-");
      option0.setArgName("");
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      mockPrintWriter0.checkError();
      String string0 = "5VH'";
      helpFormatter1.printHelp(74, "A CloneNotSupportedException was thrown: ", "5VH'", options1, ">");
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-1), options0, 3, 33);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      Option option0 = new Option("arg", "-", true, "-");
      option0.setArgName("");
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "-", "", options0, "-", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      Option option0 = new Option("arg", "usage: ", true, "");
      option0.setArgName("--");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(554, "A CloneNotSupportedException was thrown: ", "A CloneNotSupportedException was thrown: ", options1, "", true);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      Option option0 = new Option("arg", "usage: ", true, "");
      option0.setArgName("--");
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "--", "--", options0, "usage: ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-1520);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.setNewLine("");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", (-287), (-287));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.findWrapPos("Np)Ktf !5=", 1, 1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultSyntaxPrefix = null;
      Option option0 = new Option("arg", "usage: ", true, " ");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2;
      MockFile mockFile0 = new MockFile("\"", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      PrintWriter printWriter0 = mockPrintWriter0.format("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", objectArray0);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.setWidth((-1));
      Option option0 = new Option("", "!<J5", true, "usage: ");
      options0.addOption("arg", "usage: ", true, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("!<J5", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "--", true, "usage: ");
      options2.hasShortOption(" ");
      Options options3 = options2.addOption("", true, (String) null);
      Option option0 = new Option("Sw9E", "C&([;H^lk", true, (String) null);
      Options options4 = options3.addOption(option0);
      helpFormatter1.printHelp("04bvLBU7", "/LKM#", options4, "");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      options0.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("arg", "arg", true, "\n");
      Options options0 = new Options();
      Options options1 = options0.addOption("m1", "\n", false, "-");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp("m1", "", options2, "");
      StringBuffer stringBuffer0 = new StringBuffer("");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1352, 1352, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      CharBuffer charBuffer0 = CharBuffer.allocate(74);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 26, (Options) null, 92, 92);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = (-3308);
      MockFile mockFile0 = new MockFile(">");
      helpFormatter0.renderOptions((StringBuffer) null, (-3308), options0, 3, 3);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "X)>$72", "", options0, "X)>$72");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 1, options0, 74, 74);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = " | ";
      options0.hasOption(" | ");
      // Undeclared exception!
      helpFormatter0.printHelp(0, ">", ">", options0, ">", true);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("&<J-!,Y;~y-zl*f");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 32, "`WE*u6*;fTUc(;", "`WE*u6*;fTUc(;", options1, 31, 74, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      mockPrintWriter0.print(1245.705F);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 520, "arg", "!<J5", options0, 520, 520, "arg", true);
      helpFormatter0.printOptions(mockPrintWriter0, 520, options0, 520, 520);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      MockFile mockFile0 = new MockFile("", "arg");
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.createPadding(0);
      String string1 = "`2a)sV>4xag/XA$!0";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("`2a)sV>4xag/XA$!0", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '`2a)sV>4xag/XA$!0' contains an illegal character : '`'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      options0.addOption("", false, "usage: ");
      Options options2 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
      helpFormatter1.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, options0, 1, 4222);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("`6f-!&o1g2");
      helpFormatter0.defaultDescPad = 1710;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1710, "tGb");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      MockFile mockFile1 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, (-2), "P^c^ v)dd6`vMuu! ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = 31;
      Object object0 = new Object();
      helpFormatter0.getOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 3360, "\n");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("yvStVG2!H)p");
      options0.helpOptions();
      helpFormatter0.printHelp("--", "--", options0, "");
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) options0;
      mockPrintWriter0.format("--", objectArray0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 520, "yvStVG2!H)p", "arg", options0, 520, 520, "yvStVG2!H)p", true);
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2472, options0, 19, 0);
      helpFormatter0.renderOptions(stringBuffer1, 3, options0, 31, 520);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 2239, 536);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(37);
      Options options0 = new Options();
      options0.hasOption("\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultNewLine = "--";
      helpFormatter1.printHelp("\n", "arg", options0, "-");
      helpFormatter0.printHelp("--", options0, false);
      options0.getOptionGroups();
      helpFormatter1.printHelp("usage: ", "NZ+i7^hQhhD#)E\"1Q`", options0, "usage: ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      Comparator comparator0 = helpFormatter4.getOptionComparator();
      helpFormatter3.setOptionComparator(comparator0);
      int int0 = helpFormatter0.defaultLeftPad;
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp(74, "", " :: ", options0, "arg", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 23, "z+/<OK^MZt", (String) null, (Options) null, (-243), 102, " ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2962), "", "[W8R'y/M?~S", options0, (-2962), 0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1);
      Options options0 = new Options();
      Options options1 = new Options();
      Collection collection0 = options1.getOptionGroups();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) collection0;
      mockPrintWriter0.format(" ", objectArray0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 707, "-", "", options0, 4829, 655, "XX*]W", true);
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.print(true);
      mockPrintWriter0.append((CharSequence) "arg");
      String string0 = ", ";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(", ", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      Options options0 = new Options();
      String string0 = null;
      Options options1 = null;
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 32, 32, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, " ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator comparator0 = helpFormatter1.getOptionComparator();
      helpFormatter0.getLongOptSeparator();
      helpFormatter1.setOptionComparator(comparator0);
      helpFormatter0.printHelp("usage: ", options1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1);
      Options options0 = new Options();
      Options options1 = new Options();
      Options options2 = options0.addOption("", false, "thPDD");
      Option option0 = new Option("", false, "arg");
      Options options3 = options0.addOption("arg", "--", false, "--");
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) option0;
      objectArray0[1] = object0;
      mockPrintWriter0.format("arg", objectArray0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1542, "zLQ_S~`)C9=([hu+m3?", "thPDD", options2, 4829, 259, "thPDD", true);
      helpFormatter0.getArgName();
      helpFormatter0.printHelp(4829, "zLQ_S~`)C9=([hu+m3?", "thPDD", options3, "X-szM:i", true);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2022;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2022, "=NXdt*GfO:>", "has already been selected: '", (Options) null, "=NXdt*GfO:>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1);
      Options options0 = new Options();
      Options options1 = new Options();
      options0.addOption("", true, "thPDD");
      Option option0 = new Option("", false, "arg");
      Options options2 = options0.addOption("arg", "--", true, "--");
      helpFormatter0.printHelp("thPDD", options2);
      helpFormatter0.printHelp("usage: ", options0, false);
      Option option1 = null;
      try {
        option1 = new Option("/F", " ", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '/F' contains an illegal character : '/'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1038);
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", "l2M5Maw.cd<V1r>:v", options0, "usage: ", true);
      Collection collection0 = options0.getOptionGroups();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "l2M5Maw.cd<V1r>:v";
      objectArray0[1] = (Object) collection0;
      objectArray0[2] = (Object) "zLQ_S~`)C9=([hu+m3?";
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "l2M5Maw.cd<V1r>:v";
      objectArray0[5] = (Object) "l2M5Maw.cd<V1r>:v";
      objectArray0[6] = (Object) stringWriter0;
      objectArray0[7] = (Object) "l2M5Maw.cd<V1r>:v";
      objectArray0[8] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.format("cG*46z`3\"7VLm<[v](-+", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 1338, "arg", "]", (Options) null, 1, 74, "-", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-2475));
      Options options0 = new Options();
      Options options1 = new Options();
      options1.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Ad;<K&gF)H9", "", (Options) null, ",GwjuE<7Eu|(Ua");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1);
      Options options0 = new Options();
      Options options1 = new Options();
      options0.addOption("", true, "thPDD");
      Option option0 = new Option("", false, "arg");
      helpFormatter0.printHelp("thPDD", options1);
      helpFormatter0.printHelp("usage: ", options0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      Option option1 = null;
      try {
        option1 = new Option("/F", " ", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '/F' contains an illegal character : '/'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", " ", false, "T@%ds$:vK9n5");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", false, "-");
      Options options3 = new Options();
      helpFormatter0.printHelp("L=n`^gt.hI[zxKi'", options2, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      MockFile mockFile0 = new MockFile("", "T%qa=cKwN:h");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) options2;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) optionGroup1;
      PrintWriter printWriter0 = mockPrintWriter0.format("usage: ", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-169), (String) null, "", options1, (-2778), (-1), "   ", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1038);
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", "l2M5Maw.cd<V1r>:v", options0, "usage: ", true);
      Collection collection0 = options0.getOptionGroups();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "l2M5Maw.cd<V1r>:v";
      objectArray0[1] = (Object) collection0;
      objectArray0[2] = (Object) "zLQ_S~`)C9=([hu+m3?";
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "l2M5Maw.cd<V1r>:v";
      objectArray0[5] = (Object) "l2M5Maw.cd<V1r>:v";
      objectArray0[6] = (Object) stringWriter0;
      objectArray0[7] = (Object) "l2M5Maw.cd<V1r>:v";
      objectArray0[8] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.format("cG*46z`3\"7VLm<[v](-+", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      printWriter0.write("d `XBW[");
      helpFormatter1.printHelp(printWriter0, 1038, "}/", "}/", options0, 1, 1, "d~*x<NB)rrFjw.?Y", false);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator0);
      helpFormatter1.printUsage(printWriter0, 1038, "org.apache.commons.cli.HelpFormatter");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1);
      Options options0 = new Options();
      Options options1 = new Options();
      options0.addOption("", false, "thPDD");
      Option option0 = new Option("", false, "arg");
      Options options2 = options0.addOption("arg", "--", false, "--");
      helpFormatter0.printHelp("thPDD", options2);
      helpFormatter0.printHelp("usage: ", options0, false);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append((CharSequence) "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) null, (-1371), (-1371), "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setDescPadding(1231);
      helpFormatter0.getSyntaxPrefix();
      Options options1 = new Options();
      helpFormatter0.printHelp("usage: ", options0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(".E5\"03ngu#=J#zTr");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      StringBuffer stringBuffer0 = new StringBuffer();
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) stringBuffer0);
      Options options2 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, ".E5\"03ngu#=J#zTr");
      options0.addOption((String) null, "", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options2.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-1), "h>j(]8C~8Y", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1);
      Options options0 = new Options();
      Options options1 = new Options();
      options0.helpOptions();
      String string0 = "";
      helpFormatter0.defaultWidth = (-1968);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Ad;<K&gF)H9", "", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", " ", false, "T@%ds$:vK9n5");
      optionGroup0.toString();
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", false, "-");
      Options options3 = new Options();
      helpFormatter0.printHelp("L=n`^gt.hI[zxKi'", options2, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      mockPrintWriter0.append((CharSequence) " ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-1), "usage: ", "arg", options3, 1, 793, "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", options0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) stringWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format(" ", objectArray0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'n';
      printWriter0.print(1.0F);
      charArray0[1] = 'g';
      printWriter0.println(charArray0);
      helpFormatter0.printHelp(printWriter0, 584, "cmdLineSyntax not provided", "has already been selected: '", options0, 13, 36, "has already been selected: '", true);
      helpFormatter0.setLongOptPrefix("b%v4'hM{I.@l857");
      helpFormatter0.getOptionComparator();
      helpFormatter0.printHelp(printWriter0, 515, " ] [ long ", "b%v4'hM{I.@l857", options0, 584, 13, "has already been selected: '");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 1, options0, 1, 1);
      int int0 = (-583);
      options0.toString();
      int int1 = (-158);
      String string0 = " ";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, (-583), (-158), " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp("T@%ds$:vK9n5", options0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0);
      char[] charArray0 = new char[4];
      charArray0[0] = '?';
      charArray0[1] = 'v';
      charArray0[2] = '\'';
      charArray0[3] = ';';
      options0.toString();
      mockPrintWriter1.println(charArray0);
      mockPrintWriter0.append((CharSequence) "arg");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ", 3, 3);
      helpFormatter0.printUsage(printWriter0, 77, "]NS?h%[T", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-697), "org.apache.commons.cli.Util", "j@Iz,&'", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", " ", false, "T@%ds$:vK9n5");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("u],", "T@%ds$:vK9n5", options1, "[ option: ", false);
      Collection collection0 = options2.getOptionGroups();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) collection0;
      objectArray0[1] = (Object) "T@%ds$:vK9n5";
      objectArray0[2] = (Object) "zLQ_S~`)C9=([hu+m3?";
      objectArray0[3] = (Object) option0;
      objectArray0[4] = (Object) optionGroup0;
      objectArray0[5] = (Object) collection0;
      PrintWriter printWriter0 = mockPrintWriter0.format("zLQ_S~`)C9=([hu+m3?", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 520, "zLQ_S~`)C9=([hu+m3?", (String) null, options0, 520, (-2), "T@%ds$:vK9n5", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.defaultLeftPad = (-1311);
      helpFormatter0.setDescPadding(4458);
      helpFormatter0.rtrim("");
      helpFormatter0.getArgName();
      File file0 = MockFile.createTempFile("arg", "org.apache.commons.cli.HelpFormatter");
      // Undeclared exception!
      try { 
        MockFile.createTempFile(" ", "usage: ", file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp(" ", "S~OaYT8hSn*'Nd>hxO0", (Options) null, "--");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.close();
      char[] charArray0 = new char[0];
      mockPrintWriter0.println(charArray0);
      mockPrintWriter0.append((CharSequence) "arg");
      helpFormatter0.findWrapPos("Np)Ktf !5=", 505, 1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(37);
      Options options0 = new Options();
      options0.hasOption("\n");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultNewLine = "--";
      helpFormatter1.printHelp("\n", "", options0, "The option '");
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("R.J`$Pf](zjQu_mGP", " ", false, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'R.J`$Pf](zjQu_mGP' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", options0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 15, 475, "usage: ");
      String string0 = null;
      String string1 = "4j##}vtfb>6*}";
      Option option0 = null;
      try {
        option0 = new Option("usage: ", "", false, "1SWfJLVjq`v");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", options0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      mockPrintWriter0.println((long) 74);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 5, 31, "usage: ");
      Option option0 = new Option("arg", "4j##}vtfb>6*}", true, "ee");
      Options options1 = options0.addOption(option0);
      options0.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 5, "ee", "k(sQp46jPD3Vo%(e+", options1, 406, (-121), "(7$G_F", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", " ", false, "T@%ds$:vK9n5");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("u],", "T@%ds$:vK9n5", options1, "[ option: ", false);
      Collection collection0 = options2.getOptionGroups();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) collection0;
      objectArray0[1] = (Object) "T@%ds$:vK9n5";
      objectArray0[2] = (Object) "zLQ_S~`)C9=([hu+m3?";
      objectArray0[3] = (Object) option0;
      objectArray0[4] = (Object) optionGroup0;
      objectArray0[5] = (Object) collection0;
      PrintWriter printWriter0 = mockPrintWriter0.format("zLQ_S~`)C9=([hu+m3?", objectArray0);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-1), "O,qXB6`*GpVW2Pu^H&A", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", options0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      mockPrintWriter0.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 0, "0?69h10j&Yc", "usage: ", options0, 9, 9, "", true);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(2);
      Options options0 = new Options();
      Options options1 = new Options();
      Options options2 = options0.addOption("", false, "usage: ");
      Collection collection0 = options2.getOptionGroups();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) collection0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) "--";
      mockPrintWriter0.format("--", objectArray0);
      MockFile mockFile0 = new MockFile("", "L3X\"(p v/c");
      File file0 = MockFile.createTempFile("5ra9^i", "[", (File) mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(file0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 3, "W!3bOw-@ky&\"wf", "", options0, 2, 3, "5ra9^i", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultArgName;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "u", options0, "arg", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("yvStVG2!H)p");
      options0.helpOptions();
      helpFormatter0.printHelp("!<J5", "!<J5", options0, "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("2}Ggc~R");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      mockPrintWriter0.append((CharSequence) "usage: ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 4422, "B=v)m", options0);
      helpFormatter0.printHelp(10, "{rQgO_`B85{)3R&.d", "6n<'Y%75@K", options0, "");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", options0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      mockPrintWriter0.println((long) 74);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 15, 31, "usage: ");
      Option option0 = new Option((String) null, "4j##}vtfb>6*}", true, "ee");
      Options options1 = options0.addOption(option0);
      options0.getOptionGroups();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("k(sQp46jPD3Vo%(e+");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 15, "ee", "k(sQp46jPD3Vo%(e+", options1, 406, (-121), "(7$G_F", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", " ", false, "T@%ds$:vK9n5");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("u],", "T@%ds$:vK9n5", options1, "[ option: ", false);
      Collection collection0 = options2.getOptionGroups();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) collection0;
      objectArray0[1] = (Object) "T@%ds$:vK9n5";
      objectArray0[2] = (Object) "zLQ_S~`)C9=([hu+m3?";
      objectArray0[3] = (Object) option0;
      objectArray0[4] = (Object) optionGroup0;
      objectArray0[5] = (Object) collection0;
      PrintWriter printWriter0 = mockPrintWriter0.format("zLQ_S~`)C9=([hu+m3?", objectArray0);
      helpFormatter0.printHelp(printWriter0, 520, "T@%ds$:vK9n5", (String) null, options1, 4829, 584, "[ option: ", false);
      helpFormatter0.setLongOptPrefix("zLQ_S~`)C9=([hu+m3?");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      helpFormatter0.setLongOptPrefix((String) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLongOptPrefix(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-1), (Options) null, (-1), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-", "has already been selected: '");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      PrintWriter printWriter1 = mockPrintWriter1.append('r');
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter1, 1725, "z`[ss7Nq%>7Z:f", "has already been selected: '", options0, 1725, 1725, "", false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 1725, "");
      helpFormatter0.getArgName();
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1), (Options) null, (-1), 33);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-598);
      String string0 = null;
      Options options0 = new Options();
      options0.getOptionGroups();
      String string1 = "$[CG}'72_";
      int int1 = 74;
      options0.hasLongOption(" ");
      int int2 = 45;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 74, options0, (-598), 45);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(25);
      Options options0 = new Options();
      options0.getOptions();
      Options options1 = options0.addOption("TZT", "arg", false, "");
      Options options2 = options1.addOption("", false, "TZT");
      helpFormatter0.renderOptions(stringBuffer0, 25, options2, 25, 25);
      MockFile mockFile0 = new MockFile((String) null, "WCs6ky");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 25, "", options2);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", " ", false, "T@%ds$:vK9n5");
      optionGroup0.addOption(option0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", "org.apache.commons.cli.HelpFormatter$OptionComparator", options1, "org.apache.commons.cli.HelpFormatter$OptionComparator", false);
      options1.getOptionGroups();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "W!3bOw-@ky&\"wf";
      objectArray0[1] = (Object) options1;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) stringWriter1;
      Options options2 = new Options();
      OptionGroup optionGroup2 = new OptionGroup();
      OptionGroup optionGroup3 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup3);
      options2.addOption(option0);
      helpFormatter0.printHelp(74, "qdbRA61iZ", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Option option0 = new Option("", true, (String) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[ARG...]", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", " ", false, "T@%ds$:vK9n5");
      options0.hasOption(" ");
      optionGroup0.addOption(option0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", "org.apache.commons.cli.HelpFormatter$OptionComparator", options1, "org.apache.commons.cli.HelpFormatter$OptionComparator", false);
      helpFormatter0.getOptionComparator();
      helpFormatter0.setLongOptPrefix("`Kkd^EKe'9ap]W%");
      helpFormatter0.rtrim("org.apache.commons.cli.HelpFormatter$OptionComparator");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.cli.HelpFormatter$1");
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setOptPrefix("org.apache.commons.cli.HelpFormatter$1");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, (String) null);
      Options options2 = options1.addOption((String) null, " ", true, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "org.apache.commons.cli.HelpFormatter$1", "org.apache.commons.cli.HelpFormatter$1", options2, "Cannot add value, list full.", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string1 = "F2Z";
      Option option0 = new Option("F2Z", "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(63, "", "", options2, "F2Z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      String string0 = "";
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 348, 19, "");
      helpFormatter0.renderWrappedText(stringBuffer1, 19, 19, "");
      int int0 = 9;
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("usage: ", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1);
      helpFormatter0.getWidth();
      MockFile mockFile0 = new MockFile("\n", "MW");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.print(0.0);
      int int0 = 74;
      mockPrintWriter0.print(1);
      mockPrintWriter0.println("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-890), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 1, 1, "Np)Ktf !5=");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", options0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-9), ">", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Option option0 = new Option("", true, (String) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "^,>n'6NrI@k:", (String) null, options2, "iH.-");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      MockFile mockFile1 = new MockFile("arg", " ] [ long ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      helpFormatter0.printWrapped(printWriter0, 1, "");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", options0, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 31, "usage: ");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", " ", false, "T@%ds$:vK9n5");
      optionGroup0.addOption(option0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", "org.apache.commons.cli.HelpFormatter$OptionComparator", options1, "org.apache.commons.cli.HelpFormatter$OptionComparator", false);
      options1.getOptionGroups();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "W!3bOw-@ky&\"wf";
      objectArray0[1] = (Object) options1;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) stringWriter1;
      objectArray0[4] = (Object) option0;
      PrintWriter printWriter0 = mockPrintWriter0.format(" ", objectArray0);
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 34, "", "T@%ds$:vK9n5", options1, 50, 520, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "yvStVG2!H)p";
      String string1 = "+AS{Ws9";
      options0.hasOption("+AS{Ws9");
      options0.helpOptions();
      String string2 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "!<J5", options0, "yvStVG2!H)p");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setDescPadding((-1536));
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("usage: ", options0, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-8), 2633, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = options0.addOption("arg", true, "\"#");
      String string1 = "";
      Option option0 = new Option("", true, (String) null);
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(10);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('Y');
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 0, 0, "\"U");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.defaultWidth = 3316;
      helpFormatter0.defaultDescPad = (-3665);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.defaultLongOptPrefix = "usage: ";
      helpFormatter0.getNewLine();
      helpFormatter0.getOptionComparator();
      String string0 = "B|x5#_:";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", "", true, "!.r9'rep`J\"wGabU/c");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(10);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine((String) null);
      helpFormatter1.setWidth(74);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("org.apache.commons.cli.OptionGroup");
      helpFormatter0.setWidth(0);
      String string0 = "_1%$5_";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultArgName = "_1%$5_";
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.setNewLine("HR4kng}(a&SswYD");
      helpFormatter0.defaultSyntaxPrefix = "HR4kng}(a&SswYD";
      int int0 = 3;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("HR4kng}(a&SswYD", 3, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "%+:e;:[K{wXXB";
      helpFormatter0.getOptPrefix();
      helpFormatter0.setLongOptPrefix("-");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(";jfg1,~2xoTD=$0", options1, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("WZ$^");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      mockPrintWriter0.append((CharSequence) "-");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 2462, "", options2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      byteArrayOutputStream0.writeTo(dataOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 44, 44, "[ARG...]");
      byteArrayOutputStream0.writeTo(dataOutputStream0);
      mockPrintWriter0.print((double) 1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1, 2633, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-2703);
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      helpFormatter0.setArgName("org.apache.commons.cli.HelpFormatter$1");
      int int0 = (-483);
      helpFormatter0.setDescPadding((-483));
      String string1 = "wNhrC0";
      MockFile mockFile0 = new MockFile("usage: ");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile1, "org.apache.commons.cli.HelpFormatter$1");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // org.apache.commons.cli.HelpFormatter$1
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(2);
      Options options0 = new Options();
      String string0 = "9n6P21^'-82`s8p>>";
      options0.hasOption("9n6P21^'-82`s8p>>");
      options0.helpOptions();
      helpFormatter0.printHelp("9n6P21^'-82`s8p>>", "", options0, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      Options options1 = new Options();
      String string1 = "MqIK@J=t";
      // Undeclared exception!
      try { 
        options1.addOption("$S?z^I;u>", "", false, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '$S?z^I;u>' contains an illegal character : '?'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(2);
      Options options0 = new Options();
      Options options1 = new Options();
      boolean boolean0 = true;
      String string0 = "7x3Vdi|W`@<#!\\Qj";
      options0.addOption("", false, "7x3Vdi|W`@<#!Qj");
      Option option0 = new Option("", false, "4");
      Options options2 = options0.addOption(option0);
      helpFormatter0.printHelp("7x3Vdi|W`@<#!Qj", options2);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, " [ARG]", false, "--");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "uh", "uh", options1, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "DQ");
      String string0 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setOptionComparator((Comparator) null);
      int int0 = (-541);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("-", (-541), (-541));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 0;
      Options options0 = new Options();
      options0.hasOption("yvStVG2!H)p");
      options0.helpOptions();
      helpFormatter0.printHelp("!<J5", "!<J5", options0, "");
      String string0 = "[#t_ {9j6TRcI";
      String string1 = "";
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        options1.addOption("MqIK@J=t", "[#t_ {9j6TRcI", false, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'MqIK@J=t' contains an illegal character : '@'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", " ", false, "T@%ds$:vK9n5");
      optionGroup0.addOption(option0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", "org.apache.commons.cli.HelpFormatter$OptionComparator", options1, "org.apache.commons.cli.HelpFormatter$OptionComparator", false);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLongOptPrefix("T@%ds$:vK9n5");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("yvStVG2!H)p");
      options0.helpOptions();
      helpFormatter0.printHelp("!<J5", "!<J5", options0, "");
      Option option0 = new Option("", "f", false, "\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator comparator0 = helpFormatter1.getOptionComparator();
      helpFormatter1.getLongOptSeparator();
      helpFormatter1.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", options0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, ">", options0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Orhl;nCk<#^+h3r";
      Options options0 = new Options();
      options0.hasShortOption("usage: ");
      helpFormatter0.printHelp("Orhl;nCk<#^+h3r", "Orhl;nCk<#^+h3r", options0, "Orhl;nCk<#^+h3r");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string1 = "rOkup;c(I7OzB[Kv?C6";
      String string2 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("rOkup;c(I7OzB[Kv?C6", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.createPadding(1490);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2692;
      helpFormatter0.setWidth(2692);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.codePoints();
      int int1 = 1;
      stringBuffer0.setLength(1);
      // Undeclared exception!
      try { 
        stringBuffer0.insert((-1), (CharSequence) "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "=-h)XdI7";
      String string0 = "--";
      helpFormatter0.setLongOptSeparator("--");
      String string1 = "Nr90/u";
      Options options0 = new Options();
      String string2 = "]}@\\b6F~%";
      Option option0 = null;
      try {
        option0 = new Option("]}@\b6F~%", "YV}=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ']}@\b6F~%' contains an illegal character : ']'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-226));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "d\"EmVU@b{2_T|I<";
      helpFormatter0.setOptPrefix("d\"EmVU@b{2_T|I<");
      String string1 = "P";
      helpFormatter0.defaultArgName = "P";
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        MockFile.createTempFile(" ", "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      String string0 = "";
      helpFormatter0.renderWrappedText(stringBuffer0, 467, 467, "");
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setDescPadding(0);
      String string1 = "org.apache.commons.cli.HelpFormatter";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("--", "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2251);
      helpFormatter0.setWidth((-2251));
      String string0 = "?jV";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("?jV");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2251), "?jV");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.defaultWidth = 1;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      int int0 = 0;
      stringBuffer0.append(74);
      String string0 = "[6_$oG0-Z%";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-2238), "[6_$oG0-Z%");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 1, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("-S`ktt~p{y,n");
      helpFormatter0.getLongOptPrefix();
      String string0 = null;
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("-", "4Nq/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
