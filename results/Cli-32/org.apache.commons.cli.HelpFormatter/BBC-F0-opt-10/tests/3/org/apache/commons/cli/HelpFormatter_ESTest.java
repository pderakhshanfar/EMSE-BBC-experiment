/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 18:04:41 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.URI;
import java.nio.CharBuffer;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "4z'&.{u)861'yS5", true, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Options options2 = options1.addOption("iQn", false, ",");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "iQn", "CG#4hCg03BP8baa", options2, "[");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.defaultArgName = "";
      Option option0 = new Option("", true, "arg");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      option0.setArgName("");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("WA'~edNgo", "org.apache.commons.cli.AlreadySelectedException", options0, ",f3|>:p]UB*)W'1,", true);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "";
      int int0 = (-1741);
      helpFormatter0.setDescPadding((-1741));
      helpFormatter0.setArgName("");
      Options options0 = new Options();
      options0.hasOption("org.apache.commons.cli.OptionGroup");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.Util", options0, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuffer stringBuffer1 = new StringBuffer();
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      Option option0 = new Option("arg", "-");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", "", true, "-");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "", options2);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-1469), options0, 32, 32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "-", true, "arg");
      optionGroup0.addOption(option0);
      Option option1 = new Option("", true, "arg");
      option1.setArgName("");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("z", ",0eWZQ]z}H", options0, "", true);
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = new StringBuffer(1);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "%", "", options1, "%", true);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.optionComparator = null;
      helpFormatter0.defaultLongOptPrefix = "i=)N_gzwclb\"oE";
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("i=)N_gzwclb\"oE", 64, (-765));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer(21);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 21, ">", "BUp?{g!fdPmNx", options0, 21, 21, "'n`]h&~+vzaJCaCW}I");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "usage: ");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options1, 0, 0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setArgName((String) null);
      int int0 = 0;
      String string1 = "org.apache.commons.cli.HelpFormatter";
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options0 = new Options();
      options0.getOption("org.apache.commons.cli.HelpFormatter");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", options0, true);
      String string2 = ")]c+^QrE";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, ")]c+^QrE");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "\"JsDW+Ls");
      option0.setArgName(" ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", "usage: ", options1, "--", true);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "   ");
      option0.setArgName("arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("-");
      StringBuffer stringBuffer0 = new StringBuffer("Ak?!fJz#k#Bq1!s7");
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 114, options1, 1, 32);
      helpFormatter0.renderWrappedText(stringBuffer1, 52, 3, "");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "\"JsDW+Ls");
      option0.setArgName("");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options2 = options1.addOptionGroup(optionGroup0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, (-898), "-", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("U", true, " ");
      helpFormatter0.printHelp("U", "U", options0, "U", true);
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, "arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // arg
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "\"JsDW+Ls");
      option0.setArgName("");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("cmdLineSyntax not provided");
      StringBuffer stringBuffer0 = new StringBuffer("--");
      helpFormatter0.renderOptions(stringBuffer0, 250, options1, 958, 250);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      MockFile mockFile0 = new MockFile("\n", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      helpFormatter0.printUsage(printWriter0, 9, "");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getNewLine();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      String string0 = null;
      helpFormatter0.defaultNewLine = null;
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.createPadding(236);
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer("V%K4");
      stringBuffer0.reverse();
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 236, options0, 236, 236);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 236, 236, "[qVhy$)$-");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringBuffer2.setLength(6);
      int int0 = 2970;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer2, 1, 2970, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("A CloneNotSupportedException was thrown: ", "Ys71qUl$T*UF", options0, "$[>,", false);
      helpFormatter0.findWrapPos("A CloneNotSupportedException was thrown: ", 3, 3);
      MockPrintStream mockPrintStream0 = new MockPrintStream("v0NPaQq=");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1);
      helpFormatter0.printOptions(mockPrintWriter0, 28, options0, 28, 28);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "U";
      String string1 = "gfiU";
      String string2 = "]";
      boolean boolean0 = true;
      MockFile mockFile0 = new MockFile((String) null, "   ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "]";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      int int0 = 2;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 2, "#_#Mvw7RX8np");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(34, "line.separator", "line.separator", (Options) null, "line.separator", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1490, "5[8RwZ'");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "U";
      int int0 = (-3630);
      helpFormatter0.defaultWidth = (-3630);
      options0.addOption("U", true, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", "\n", options0, " ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = new StringBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "", true, " ");
      option0.setOptionalArg(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 74, "P5y!:j", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = new StringBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "", true, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), "P5y!:j", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      helpFormatter0.setNewLine(" :: ");
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.setSyntaxPrefix("has already been selected: '");
      int int0 = 10;
      helpFormatter0.findWrapPos("-", 10, 44);
      helpFormatter0.findWrapPos("", (-1), 3420);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "-";
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) " ";
      objectArray0[5] = (Object) helpFormatter0;
      mockPrintWriter0.format(" :: ", objectArray0);
      int int1 = 826;
      String string1 = "";
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, " :: ");
      Option option0 = null;
      // Undeclared exception!
      try { 
        options1.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2298, "gX", "", (Options) null, " | ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "~p:]dS", "~p:]dS", (Options) null, 25, 20, "<");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, (String) null, "-", options0, 34, (-2), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.print(642);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "xxR1*gnjWz|7Fq");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 642, "EPe }YNNR4U{}KWi6}", "PMe|~oA-zB[ mJv", options1, 13, 13, (String) null, false);
      StringBuffer stringBuffer0 = new StringBuffer("");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1), options0, (-1), (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      helpFormatter0.setLeftPadding((-1371));
      helpFormatter0.renderWrappedText(stringBuffer0, 104, 104, "nFOckm");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "kL*Kr^g&";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      String string1 = "|d2*#k3~_;9t\\!!Vh";
      Options options1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("|d2*#k3~_;9t!!Vh", "", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 31;
      helpFormatter0.defaultDescPad = 31;
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getArgName();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.defaultLongOptPrefix = ">0O|r;5Q'9]Y}x";
      Option option0 = null;
      try {
        option0 = new Option(">0O|r;5Q'9]Y}x", "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '>0O|r;5Q'9]Y}x' contains an illegal character : '>'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("U", true, " ");
      helpFormatter0.printHelp("`", "U", options1, "`", false);
      helpFormatter0.rtrim("9Y{8Bo^uy;heh.AYS");
      helpFormatter0.createPadding(10);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 10, 11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = (-378);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", "\n", options0, " ", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("U", true, " ");
      helpFormatter0.printHelp("\n", "\n", options0, " ", false);
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 367, " ");
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      int int0 = 2447;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 2447, (Options) null, 2447, 2447);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 13;
      StringBuffer stringBuffer0 = new StringBuffer(13);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("3Q,g#aS-Nt*s}Jlz<;Q", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      int int0 = (-994);
      Options options0 = new Options();
      options0.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-994), "", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      File file0 = MockFile.createTempFile("z]0qY7lP[8Cztm>", "--");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      mockPrintWriter0.print(3527);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 367, "z]0qY7lP[8Cztm>", (String) null, options0, 118, (-563), "z]0qY7lP[8Cztm>", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.setLongOptPrefix(" ");
      StringBuffer stringBuffer1 = stringBuffer0.append((long) 3);
      stringBuffer1.append(stringBuffer0);
      stringBuffer0.setCharAt(1, '\\');
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer1, 0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.setLongOptPrefix("");
      stringBuffer0.append(1L);
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.createPadding(0);
      stringWriter0.getBuffer();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 445;
      StringWriter stringWriter0 = new StringWriter(445);
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "-", options0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      URI uRI0 = MockURI.aFileURI;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(uRI0);
      MockFile mockFile1 = new MockFile(mockFile0, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "org.apache.commons.cli.HelpFormatter$1";
      objectArray0[1] = (Object) "org.apache.commons.cli.HelpFormatter$1";
      objectArray0[2] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("org.apache.commons.cli.HelpFormatter$1", objectArray0);
      // Undeclared exception!
      helpFormatter1.printWrapped(printWriter0, 0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(445);
      stringWriter0.getBuffer();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      int int0 = (-5482);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(445);
      Options options0 = new Options();
      int int0 = (-1016);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1016), "", "", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 13, options0, 96, 96);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      helpFormatter0.setArgName("80PVU1G;x");
      helpFormatter0.setDescPadding(13);
      helpFormatter0.renderOptions(stringBuffer0, 96, options0, 13, 96);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.rtrim(" ");
      options0.toString();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 13, options0, 96, (-437));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(4396);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 4396, "org.apache.commons.cli.HelpFormatter$OptionComparator", "org.apache.commons.cli.HelpFormatter$OptionComparator", (Options) null, 4396, 4396, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 0;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.Util");
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf("\n", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-637), "org.apache.commons.cli.Util", (String) null, options0, (-1), 0, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append('$');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 14, "", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 34, "fQZ=RqjyHRAK", "arg", options0, 74, 1, "A CloneNotSupportedException was thrown: ", true);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("usage: ", 2, (-191));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 445;
      StringWriter stringWriter0 = new StringWriter(445);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Object object0 = new Object();
      stringBuffer0.append(object0);
      Options options0 = new Options();
      boolean boolean0 = true;
      String string0 = "pd;0\\/";
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2355);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2355, "pd;0/", "The option '", options0, 445, (-2), "org.apache.commons.cli.ParseException");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 10, options0, 10, 1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "&lec6";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("&lec6");
      Option option0 = new Option("arg", "-", true, "usage: ");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2, "EX/R}zhQ49yD@wN", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(445);
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      Options options1 = new Options();
      Options options2 = options0.addOption((String) null, true, "*@. z056()T}");
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-3010), options2, 31, 445);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, " ", "{je'2/i:4", options0, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append('#');
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 1770, (Options) null, 2221, 1770);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "+<zf[7CP", options0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setDescPadding(12);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getSyntaxPrefix();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter4.printHelp((PrintWriter) mockPrintWriter0, 0, "\n", "arg", options0, 800, 1, ",B#ToyL", true);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(445);
      stringWriter0.getBuffer();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2, "", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("usage: ", "D])v}70~gR\"m", options0, "\n", false);
      helpFormatter0.rtrim("tF[b(_)1iK");
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 82, "tF[b(_)1iK", options0);
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 109;
      Options options0 = new Options();
      String string0 = "Shd*g9}]";
      helpFormatter0.printHelp("ncYtsJ2c_Q", "ncYtsJ2c_Q", options0, "Shd*g9}]");
      Options options1 = new Options();
      helpFormatter0.printHelp(109, "ncYtsJ2c_Q", "ncYtsJ2c_Q", options1, "ncYtsJ2c_Q");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptionComparator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.createPadding(1);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      helpFormatter0.printHelp("9o)\"@y.^}Nj", "nuMC!8zH.}>zgG(9 )B", options0, "Q");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.setWidth((-1276));
      helpFormatter0.getArgName();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 2427, 1108, "HF3FTS");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter1.printf("usage: ", objectArray0);
      Options options0 = new Options();
      Option option0 = new Option("", "org.apache.commons.cli.OptionGroup", true, "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage(printWriter0, 1, "\n", options0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.setDescPadding(31);
      helpFormatter2.getSyntaxPrefix();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 53, "usage: ");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getArgName();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Locale locale0 = Locale.GERMANY;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "[ARG...]";
      objectArray0[1] = (Object) "[ARG...]";
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) "[ARG...]";
      objectArray0[4] = (Object) " | ";
      objectArray0[5] = (Object) stringWriter0;
      objectArray0[6] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, " | ", objectArray0);
      helpFormatter0.printHelp(printWriter0, 522, "osa)<q!9A]nMQ~F},", "", options0, 70, 70, ">", false);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(445);
      stringWriter0.getBuffer();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2, "", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      mockPrintWriter0.checkError();
      helpFormatter1.setDescPadding(12);
      helpFormatter1.getSyntaxPrefix();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      stringWriter0.append('s');
      Options options1 = options0.addOption("arg", true, "Cz86!K,t&e:V+qh':'");
      Option option0 = new Option((String) null, "usage: ", true, "--");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, (-1719), "8%F0vEXua", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(74);
      Options options0 = new Options();
      Options options1 = options0.addOption("Q", "usage: ", true, "-");
      helpFormatter0.printHelp("9o)\"@y.^}Nj", "[ Options: [ short ", options1, "[ Options: [ short ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[ARG...]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("K");
      CharBuffer.allocate(3);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter2, (-298), "Q", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 1, options0, 1152, 1);
      String string0 = "aKtzabD&Ezk.*WmP";
      StringWriter stringWriter1 = new StringWriter(44);
      StringWriter stringWriter2 = new StringWriter(1);
      stringWriter2.getBuffer();
      Options options1 = new Options();
      options1.addOption("", true, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, 1, options1, 1146, 52);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(445);
      stringWriter0.getBuffer();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2, "", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(12);
      helpFormatter1.getSyntaxPrefix();
      Locale locale0 = Locale.ROOT;
      Locale.setDefault(locale0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) stringWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "usage: ";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "G:xzN\"OP*`\"*M\"(KP", objectArray0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printOptions(printWriter0, 1, options0, 1, 1670);
      helpFormatter2.printHelp(";=@O*+q", "usage: ", options0, "*O8q:f+1Y&x5]yl_7");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter1.printf("usage: ", objectArray0);
      Options options0 = new Options();
      Option option0 = new Option("", "org.apache.commons.cli.OptionGroup", true, "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage(printWriter0, 1, "\n", options0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.setDescPadding(31);
      helpFormatter2.getSyntaxPrefix();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 53, "usage: ");
      helpFormatter1.printHelp(printWriter0, 44, "--", "-", options0, 3366, 1, "", true);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(445);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2, "", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(12);
      helpFormatter1.getSyntaxPrefix();
      helpFormatter0.renderWrappedText(stringBuffer0, 12, 2, " ");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("jN#gaG");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "!B)";
      objectArray0[1] = (Object) mockPrintWriter1;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf("!B)", objectArray0);
      Options options0 = new Options();
      Option option0 = new Option((String) null, "--", false, "org.apache.commons.cli.OptionGroup");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      int int0 = 34;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 80, "org.apache.commons.cli.OptionGroup", "!B)", options1, 34, (-590), "jN#gaG", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.defaultSyntaxPrefix = "org.apache.commons.cli.Options";
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter1.printf("org.apache.commons.cli.Options", objectArray0);
      Options options0 = new Options();
      Option option0 = new Option("", "org.apache.commons.cli.OptionGroup", true, "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage(printWriter0, 1, "\n", options0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.setDescPadding(31);
      helpFormatter2.getSyntaxPrefix();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 53, "usage: ");
      helpFormatter1.printHelp(printWriter0, 436, "\"o9jM", " ", options0, 6, 1, "\"NmW/PC<");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(31);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("\n", "--", options0, "arg", false);
      MockFile mockFile0 = new MockFile("j:X1(Z]ffW&IZS");
      MockFile mockFile1 = new MockFile(mockFile0, "cmdLineSyntax not provided");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile1, "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintWriter1;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) mockPrintWriter1;
      objectArray0[7] = (Object) mockPrintWriter1;
      objectArray0[8] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      Options options0 = new Options();
      Option option0 = new Option("A", "usage: ", true, "--");
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-590), "ZI2s82 PmoZm<{T", (String) null, options0, (-239), 0, "ZI2s82 PmoZm<{T", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(88);
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, "");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      mockPrintWriter0.append((CharSequence) "usage: ", 1, 1);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.renderOptions(stringBuffer0, 88, options0, 2, 88);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("a[N");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1379), "^[.%k`yTCtpE|,", "[*%|WsgckL", options0, (-2583), (-685), "IG", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.rtrim(" [ARG]");
      URI uRI0 = MockURI.aHttpURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 1, options0, 1152, 1152);
      helpFormatter0.setArgName("aKtzabD&Ezk.*WmP");
      options0.hasLongOption("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "org.apache.commons.cli.OptionGroup", "aKtzabD&Ezk.*WmP", options0, "aKtzabD&Ezk.*WmP", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      StringWriter stringWriter0 = new StringWriter(445);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "");
      helpFormatter0.renderOptions(stringBuffer0, 445, options1, 445, 445);
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setOptPrefix("");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(88);
      helpFormatter0.renderWrappedText(stringBuffer0, 1244, 1244, "");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ", 1, 1);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("", false, "");
      Option option0 = new Option("", "arg", true, "");
      Option option1 = new Option("", "OeeS*c'*xXhF,`<A");
      options0.addOption(option1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-1), "", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 644, 0, "cmdLineSyntax not provided");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, options0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("Cannot add value, list full.", "Cannot add value, list full.", options0, "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("CHc@y}Y6*-kFfn<i");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("usage: ");
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 0, (-2), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 1, options0, 1152, 644);
      helpFormatter0.setArgName("aKtzabD&Ezk.*WmP");
      options0.hasLongOption("");
      helpFormatter0.printHelp(644, "org.apache.commons.cli.OptionGroup", "aKtzabD&Ezk.*WmP", options0, "aKtzabD&Ezk.*WmP", false);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(31);
      String string0 = "[ Options: [ short ";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-2046), "/#J.8won#b_g");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 0;
      String string0 = "yuGV-)KmKWx^Xja";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("yuGV-)KmKWx^Xja", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[1];
      mockPrintWriter0.printf("arg", objectArray0);
      objectArray0[0] = (Object) helpFormatter0;
      mockPrintWriter1.printf("usage: ", objectArray0);
      Options options0 = new Options();
      Option option0 = new Option("", "org.apache.commons.cli.OptionGroup", true, "-");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer0 = new StringBuffer(677);
      helpFormatter0.renderWrappedText(stringBuffer0, 97, (-2), "");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      int int0 = (-1406);
      String string0 = null;
      String string1 = "";
      Options options0 = new Options();
      String string2 = "iO|e:";
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("--", "iO|e:", true, "org.apache.commons.cli.OptionGroup");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("{zQN%Ce%fOSi$Lj");
      File file0 = MockFile.createTempFile("cU/%r!|&.n6Q-", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.append('');
      int int0 = 1026;
      String string0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string1 = "";
      String string2 = "Dbdf8ph0(";
      Option option0 = null;
      try {
        option0 = new Option("6+qlu^'EFvH'1/QSY", "`r%F}gI(F");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '6+qlu^'EFvH'1/QSY' contains an illegal character : '+'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(1234);
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 13, 0, "{w?1M!hk");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix(". !");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(". !");
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) charBuffer0);
      helpFormatter0.setDescPadding(3486);
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-2684), "   ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("I@B2=P", 1, 718);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 1, options0, 1152, 1);
      helpFormatter0.setArgName("aKtzabD&Ezk.*WmP");
      MockPrintStream mockPrintStream0 = new MockPrintStream("',%[g=)P!4cX`Y");
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.format(locale0, "\"ODvcnIou", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "-", objectArray0);
      helpFormatter0.printUsage(printWriter0, 13, "',%[g=)P!4cX`Y", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(1);
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printWrapped((PrintWriter) mockPrintWriter0, 306, "PC");
      // Undeclared exception!
      try { 
        helpFormatter2.printOptions(printWriter0, 10, options0, (-1159), 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = " ";
      Options options1 = options0.addOption("arg", " ", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("C", false, "Cannot add value, list full.");
      helpFormatter0.printHelp(445, "org.apache.commons.cli.HelpFormatter$1", "Jvb?<UUNH-5DneZAc", options3, "vY/(z(y3?q");
      StringWriter stringWriter0 = new StringWriter(445);
      Options options4 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "", options4);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "})L]M(HJ1/^[^<]T^", options4, "Y", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "$sKky";
      String string1 = null;
      Options options0 = new Options();
      helpFormatter0.printHelp("$sKky", (String) null, options0, "$sKky");
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      Options options0 = new Options();
      String string1 = "P31";
      Option option0 = new Option("P31", "Q");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.toString();
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp("{]6CI`8YgFA9VUYw]", options2, false);
      helpFormatter0.setOptionComparator((Comparator) null);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
      Locale locale0 = Locale.forLanguageTag("usage: ");
      Locale.setDefault(locale0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) filterOutputStream0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) options1;
      mockPrintWriter0.format(locale0, "qguv", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 44, options0, 56, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      helpFormatter0.setLongOptSeparator("Zf");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("org.apache.commons.cli.HelpFormatter$1");
      helpFormatter1.setLongOptPrefix((String) null);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", (Options) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "cmdLineSyntax not provided");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 3;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter0.print(9);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter2;
      objectArray0[1] = (Object) mockPrintWriter2;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) mockPrintWriter2;
      mockPrintWriter1.print('g');
      PrintWriter printWriter0 = mockPrintWriter2.format(locale0, "\"*x+", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 116, "\"*x+");
      assertEquals(11, byteArrayOutputStream0.size());
      
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.createPadding(3);
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, (String) null);
      helpFormatter0.printHelp("usage: ", options1);
      String string0 = helpFormatter0.getOptPrefix();
      assertEquals("-", string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Rs1k$Yupwn),";
      helpFormatter0.defaultLongOptPrefix = "Rs1k$Yupwn),";
      helpFormatter0.getWidth();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      String string1 = "P31";
      Option option0 = new Option("P31", "Rs1k$Yupwn),");
      options0.toString();
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("-", options1, false);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
      Locale locale0 = Locale.forLanguageTag("0)\"fi");
      Object[] objectArray0 = new Object[3];
      Locale.setDefault(locale0);
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) "[ Options: [ short java.util.HashMap@0000000005 ] [ long {} ]";
      objectArray0[2] = (Object) "[ Options: [ short java.util.HashMap@0000000005 ] [ long {} ]";
      mockPrintWriter0.format(locale0, "-", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 44, options0, (-2), 44);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (-4272), options1, 0, (-4272));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Fwcg0PrX9]63bN/";
      String string1 = "--";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("/THI.>@@zA[l}NhTO!");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2044, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 0;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      String string2 = "--";
      Option option0 = null;
      try {
        option0 = new Option("   ", "HVlZXZH}{:t;_I,z", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '   ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1660, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      String string0 = "[ Options: [ short ";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-826), "[ Options: [ short ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 1, options0, 1152, 644);
      helpFormatter0.setArgName("aKtzabD&Ezk.*WmP");
      helpFormatter0.setLeftPadding((-1996));
      helpFormatter0.getNewLine();
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      assertEquals("aKtzabD&Ezk.*WmP", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-144));
      helpFormatter0.setLongOptSeparator("67=.J<vN:7");
      helpFormatter0.setLongOptSeparator("ad[t|K3:eoeFrRS>i");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("cmdLineSyntax not provided");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", " | ", (Options) null, "qkQRku4dE)W ajR[", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter1.printf("usage: ", objectArray0);
      Options options0 = new Options();
      Option option0 = new Option("", "org.apache.commons.cli.OptionGroup", true, "-");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-590), "", "arg", options2, (-2), (-1), "(qd#H{[~", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(1234);
      Options options0 = new Options();
      Option option0 = new Option("", "HL", true, "");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      options1.addOptionGroup(optionGroup2);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 56, (String) null, "", options0, (-2), 32, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(31);
      helpFormatter0.setLongOptSeparator("67=.J<vN:7");
      helpFormatter0.setLongOptSeparator("7?Cg");
      helpFormatter0.setLongOptPrefix((String) null);
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("4gF$7C9*!k", "c|_5VRaT=SiO(}4GZU", (Options) null, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0, false);
      mockPrintStream0.print("org.apache.commons.cli.HelpFormatter$1");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 1380);
      bufferedOutputStream0.flush();
      bufferedOutputStream0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      String string0 = "org.apache.commons.cli.OptionGroup";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, (-892), "org.apache.commons.cli.OptionGroup");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ". !";
      helpFormatter0.setLongOptPrefix(". !");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(". !");
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) charBuffer0);
      int int0 = (-2);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-2), ". !", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(445);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "arg");
      helpFormatter0.renderOptions(stringBuffer0, 445, options1, 445, 445);
      helpFormatter0.setLongOptPrefix("");
      assertEquals("", helpFormatter0.getLongOptPrefix());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setDescPadding(3308);
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals(3308, helpFormatter0.defaultDescPad);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-920);
      helpFormatter0.setLongOptSeparator("usage: ");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setSyntaxPrefix("");
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1812));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("KF^yRN=");
      helpFormatter0.setArgName("KF^yRN=");
      assertEquals("KF^yRN=", helpFormatter0.getLongOptPrefix());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.defaultNewLine = "";
      Comparator<Object> comparator0 = null;
      String string0 = "5/hqDiq";
      File file0 = MockFile.createTempFile("5/hqDiq", (String) null);
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "--", file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      int int0 = 13;
      String string0 = "GQDCt";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string1 = "YUg(ug_r{v)'y:4:C";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options1.addOption("3R4==:1@J", " ", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '3R4==:1@J' contains an illegal character : '='
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
