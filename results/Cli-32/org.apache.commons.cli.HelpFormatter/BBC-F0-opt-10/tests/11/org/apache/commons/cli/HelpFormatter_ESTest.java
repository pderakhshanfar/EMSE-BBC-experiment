/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 04:33:04 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.setWidth((-634));
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "cs";
      Options options0 = new Options();
      Options options1 = options0.addOption("", "%k.%VV\"}", false, "q+ZWEZGYXHC^");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", "\n", options1, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append('`');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      int int0 = 1;
      Options options0 = new Options();
      options0.hasOption("usage: ");
      helpFormatter0.renderOptions(stringBuffer0, 1, options0, 1182, 1182);
      int int1 = (-1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      helpFormatter0.defaultLeftPad = (-1);
      Comparator<OptionGroup> comparator0 = (Comparator<OptionGroup>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String string0 = null;
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      String string1 = "line.separator";
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("line.separator", (-1), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.getArgName();
      helpFormatter0.getOptPrefix();
      helpFormatter0.createPadding(38);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = new Locale("--", "--", "");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) mockFile0;
      objectArray0[7] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, " ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-68), "", "", (Options) null, (-303), 32, "2;\"wfgKI/\"g2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", "6P'E!bH!(HF~^", (Options) null, "--");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("2qT>BJ5)7l8>TwLuD");
      helpFormatter0.optionComparator = null;
      helpFormatter0.setOptPrefix("[");
      Options options0 = new Options();
      helpFormatter0.createPadding(0);
      options0.hasShortOption("");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.helpOptions();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getOption(" ");
      helpFormatter0.printHelp("2qT>BJ5)7l8>TwLuD", "D`<M", options1, "");
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      Options options0 = new Options();
      char[] charArray0 = new char[2];
      charArray0[0] = 'Y';
      charArray0[1] = 'Q';
      mockPrintWriter0.write(charArray0);
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "`2+>xWNgF#30?qT3,p", "`2+>xWNgF#30?qT3,p", options0, 10, 63, "");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      String string0 = "Ak/u 8b!{+i2/";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-177), "7{?lEh5`a]+LwZTohO+", "Ak/u 8b!{+i2/", options0, (-177), (-177), (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.setLongOptPrefix("]");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine(")uE4k'/-gjezhY[fUx");
      helpFormatter0.setSyntaxPrefix((String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) ")uE4k'/-gjezhY[fUx";
      Object object0 = new Object();
      objectArray0[1] = object0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      Options options1 = new Options();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "+c`5qwayyu.");
      Options options2 = options1.addOption((String) null, "usage: ", true, ")uE4k'/-gjezhY[fUx");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      optionGroup1.setRequired(true);
      helpFormatter0.getSyntaxPrefix();
      Options options3 = options2.addOptionGroup(optionGroup1);
      options3.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "I", "]", options3, "J*I,5b-s");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-51);
      int int1 = 0;
      helpFormatter0.setWidth(0);
      helpFormatter0.defaultLeftPad = (-51);
      helpFormatter0.getOptionComparator();
      Options options0 = null;
      // Undeclared exception!
      helpFormatter0.printHelp("T K:", "T K:", (Options) null, "", false);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 9;
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "[OhzDpw\"", "Q7%Wts!3RXoeQPQ", options0, "[OhzDpw\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("BCY}zn{p", (Object[]) null);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "BCY}zn{p", options0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 199;
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions((PrintWriter) null, 74, options0, 3, 199);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("\n", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      PrintWriter printWriter1 = mockPrintWriter1.append((CharSequence) "arg");
      Options options0 = new Options();
      String string0 = "";
      Option option0 = new Option("", "+|OQ]U]N@.Tx=u^V");
      Options options1 = options0.addOption(option0);
      mockPrintWriter0.write(116);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.addOption("arg", "usage: ", true, "usage: ");
      String string1 = "ji\"zNb*m%,q9/";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter1, 1984, (String) null, "org.apache.commons.cli.OptionValidator", options2, (-2851), (-2), "ji\"zNb*m%,q9/", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1784;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = "";
      Options options2 = options1.addOption("", "", false, "sDCSU^}y6L54p");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1784, "sDCSU^}y6L54p", "sDCSU^}y6L54p", options2, (-845), 901, ", ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      StringBuffer stringBuffer1 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer1, 0, 0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "--");
      helpFormatter0.defaultLeftPad = (-1);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("W");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("P^`ZS<@D@%YKioe8p%B", options0, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 9;
      helpFormatter0.setWidth(9);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      int int1 = (-1882);
      MockFile mockFile0 = new MockFile("{F/lu6vS|c>2", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.TAIWAN;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "-", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-2835), (-2835), "{F/lu6vS|c>2");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "(c2<#i", options0, "(c2<#i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "\"");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-3512), options1, (-3512), (-3512));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding((-235));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("z3", "z3", options0, "<", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("9yb=", "9yb=", (Options) null, "LJEr2|h,-B^v", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter1.rtrim("\n");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) helpFormatter0;
      mockPrintWriter0.format(locale0, "^'Wp;5P", objectArray0);
      String string0 = "{)W.J!Tz$2t\\uA9O^B";
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 42, "usage: ", (String) null, options0, 74, 1, string0, false);
      helpFormatter0.printHelp("$z~`]rQ/s3)v&", options0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(9);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "aJ", " n", (Options) null, " n", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) stringBuffer0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "usage: ", objectArray0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter2.printHelp(printWriter0, 0, " ", "", options0, 1, 3, "\n", false);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "cmdLineSyntax not provided");
      helpFormatter0.defaultLongOptPrefix = "";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append(':');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      mockPrintWriter0.append('6');
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-1446), "cmdLineSyntax not provided", "   ", (Options) null, (-1144), 62, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Object object0 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(676);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = Locale.US;
      locale0.stripExtensions();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "z3";
      mockPrintWriter0.format(locale0, "--", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 442, "@9N-:t5k|\"Tj@Uxx7[r", "org.apache.commons.cli.Util", options0, 3, 74, "", false);
      helpFormatter0.printHelp("@9N-:t5k|\"Tj@Uxx7[r", options0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", "-", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "--");
      optionGroup0.addOption(option0);
      Options options1 = new Options();
      String string0 = ",^_e`";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 32, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("arg");
      helpFormatter0.defaultDescPad = (-2);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2626, "eJx*w(5[4+4sF", "usage: ", options0, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setNewLine("");
      helpFormatter0.getNewLine();
      helpFormatter0.getOptionComparator();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = null;
      helpFormatter0.defaultWidth = 111;
      int int0 = 8;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1218, (Options) null, 8, (-710));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("z3", "z3", options0, " ", true);
      Options options1 = options0.addOption("", false, "#Xz.EMXu!WPZ.@l9");
      helpFormatter0.getWidth();
      List list0 = options0.helpOptions();
      MockFile mockFile0 = new MockFile((File) null, "XH/~c>g,2I+");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.ITALIAN;
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      options0.getOptionGroups();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) helpFormatter0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      objectArray0[5] = (Object) list0;
      objectArray0[6] = (Object) mockFile0;
      Object object1 = new Object();
      objectArray0[7] = object1;
      mockPrintWriter0.format(locale0, "arg", objectArray0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "aP[dsw]^ELBX[=o", "}pacrV", options1, 42, 160, (String) null, true);
      helpFormatter0.printHelp("~\"ze>#E#^%Yxtj`rq3", options0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-2475));
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultNewLine;
      helpFormatter0.findWrapPos("usage: ", 3, 3);
      Options options0 = new Options();
      boolean boolean0 = false;
      Options options1 = options0.addOption("arg", "-", false, "--");
      options0.getMatchingOptions("y\"(B");
      Option option0 = new Option("arg", "-");
      option0.setArgs(3);
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setWidth((-2));
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      optionGroup0.toString();
      char[] charArray0 = new char[1];
      charArray0[0] = '.';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) optionGroup1;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "\n", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-2), "", "", options2, 50, (-938), "y\"(B", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Collection collection0 = new LinkedList<Object>();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 74, 3, "--");
      helpFormatter0.renderWrappedText(stringBuffer1, 3, 3, "\n");
      helpFormatter0.printHelp("-", options0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Collection collection0 = options0.getOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "-");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Object object0 = new Object();
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[2] = (Object) collection0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "' was specified but an option from this group ", objectArray0);
      helpFormatter2.printHelp(printWriter0, 74, "arg", ")8", options0, 3, 50, "usage: ", true);
      helpFormatter1.printHelp("&", options0, false);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "-");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Object object0 = new Object();
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) stringBuffer0;
      objectArray0[2] = (Object) "C.Le=G";
      Object object1 = new Object();
      objectArray0[3] = object1;
      Object object2 = new Object();
      objectArray0[4] = object2;
      objectArray0[5] = object0;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1649, 1649, "3B*Y!,0C`");
      objectArray0[6] = (Object) stringBuffer0;
      mockPrintWriter0.format(locale0, "C.Le=G", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 50, "-", "-", options0, (-1086), 2302, "x#|UY6?@0h#U'3WAH_o", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", (String) null);
      option0.clearValues();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      Options options0 = new Options();
      options0.addOptionGroup(optionGroup0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      Object object0 = new Object();
      helpFormatter0.printHelp("Nx(>y", options0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(244, "", "-T$dEX[", options0, "-T$dEX[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
      int int0 = 1005;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 1005, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Collection collection0 = options0.getOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "-");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Object object0 = new Object();
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) collection0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "' was specified but an option from this group ", objectArray0);
      helpFormatter2.printHelp(printWriter0, 74, "arg", "", options0, 3, 50, "usage: ", false);
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 74, options0, 44, 74);
      StringBuffer stringBuffer2 = helpFormatter1.renderWrappedText(stringBuffer1, 74, (-968), "usage: ");
      helpFormatter0.renderWrappedText(stringBuffer2, 3, 1, "-");
      helpFormatter2.printHelp("arg", options0, false);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "JHhDHn/9";
      options0.getMatchingOptions(". ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "D6UU", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.findWrapPos("usage: ", 3, 3);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", false, "--");
      options0.getMatchingOptions("y\"(B");
      Option option0 = new Option("arg", "-");
      option0.setArgs(3);
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setWidth((-2));
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      optionGroup0.toString();
      optionGroup0.setRequired(true);
      Options options3 = options2.addOptionGroup(optionGroup1);
      options0.hasShortOption("k%5Zsb33;");
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintStream0;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("<Z~", options3, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 58, options0, 3167, 3167);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 44, options1, (-2), (-220));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      helpFormatter0.renderOptions(stringBuffer0, 74, options1, 1268, 74);
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 1, 74, "F(oJK/Vpc7c~");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte) (-99);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.setLeftPadding(25);
      helpFormatter0.rtrim("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth((-433));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("\n", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.findWrapPos("usage: ", 3, 3);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", false, "|tj-B]Dsi4'2(s");
      options0.getMatchingOptions("y\"(B");
      Option option0 = new Option("arg", "-");
      option0.setArgs(3);
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setWidth((-2));
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      optionGroup0.toString();
      optionGroup0.setRequired(true);
      options0.hasShortOption("k%5Zsb33;");
      helpFormatter0.rtrim("--");
      helpFormatter0.setWidth((-698));
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("|tj-B]Dsi4'2(s", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("--");
      helpFormatter0.rtrim((String) null);
      Option option0 = null;
      try {
        option0 = new Option("[", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte)101;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.setLeftPadding(13);
      String string0 = null;
      helpFormatter0.rtrim((String) null);
      helpFormatter0.setWidth(25);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.findWrapPos("usage: ", 3, 3);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", false, "|tj-B]Dsi4'2(s");
      options0.getMatchingOptions("y\"(B");
      Option option0 = new Option("arg", "-");
      option0.setArgs(3);
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setWidth((-2));
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      optionGroup0.toString();
      optionGroup0.setRequired(true);
      Options options3 = options2.addOptionGroup(optionGroup1);
      options0.hasShortOption("k%5Zsb33;");
      MockPrintStream mockPrintStream0 = new MockPrintStream("o");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintStream0;
      helpFormatter0.getWidth();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 6, "", options3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setWidth(6);
      Option option0 = new Option("", "arg", false, ":;@;I'.fH");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      OptionGroup optionGroup1 = new OptionGroup();
      optionGroup1.toString();
      optionGroup0.setRequired(true);
      String string0 = "";
      options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "]", "", options1, "", false);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.findWrapPos("usage: ", 3, 3);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", false, "|tj-B]Dsi4'2(s");
      options0.getMatchingOptions("y\"(B");
      String string0 = "";
      Option option0 = new Option("arg", "-");
      option0.setArgs(3);
      OptionGroup optionGroup0 = new OptionGroup();
      int int0 = 6;
      helpFormatter0.setWidth((-2));
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      optionGroup0.toString();
      optionGroup0.setRequired(true);
      String string1 = "";
      options2.addOptionGroup(optionGroup1);
      options0.hasShortOption("k%5Zsb33;");
      String string2 = "[ Options: [ short ";
      String string3 = null;
      String string4 = "<Od}O%V|s!AMwFF&H";
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[0];
      MockPrintStream mockPrintStream0 = new MockPrintStream("o");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) optionGroup1;
      objectArray0[3] = (Object) "o";
      objectArray0[4] = (Object) optionGroup1;
      PrintStream printStream0 = mockPrintStream0.printf("|tj-B]Dsi4'2(s", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "|tj-B]Dsi4'2(s");
      Options options3 = options1.addOption("4v3", "y\"(B", false, "f;hQk^2A=TFM");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-2), "tPgRl8o$E/%", "--", options3, 6, 6, "k%5Zsb33;", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1200), "' contains an illegal character : '", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.findWrapPos("usage: ", 3, 3);
      Options options0 = new Options();
      options0.addOption("arg", "-", true, "|tj-B]Dsi4'2(s");
      options0.getMatchingOptions("y\"(B");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      optionGroup0.setRequired(true);
      Comparator<OptionGroup> comparator0 = (Comparator<OptionGroup>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 11, "D88WzP0", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultNewLine;
      helpFormatter0.findWrapPos("usage: ", 3, 3);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", false, "--");
      String string1 = "y\"(B";
      options0.getMatchingOptions("y\"(B");
      Option option0 = new Option("arg", "-");
      option0.setArgName(" ");
      option0.setArgs(3);
      helpFormatter0.setWidth((-2));
      char[] charArray0 = new char[1];
      charArray0[0] = '.';
      CharBuffer.wrap(charArray0);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      int int0 = 26;
      helpFormatter0.renderOptions(stringBuffer0, 1301, options1, 6, 26);
      Options options2 = options0.addOption("arg", "^o", false, "&=>r\u0000'");
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("y\"(B", "\n", options2, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "arg", false, "0>nZZvI+-?WY@3");
      options1.getMatchingOptions("hZxO");
      Option option0 = new Option((String) null, " ");
      option0.setArgs(1);
      OptionGroup optionGroup0 = new OptionGroup();
      int int0 = 2109;
      helpFormatter0.setWidth(2109);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      optionGroup1.setRequired(true);
      String string0 = "";
      options0.addOptionGroup(optionGroup0);
      String string1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "", "0>nZZvI+-?WY@3", options2, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.findWrapPos("usage: ", 3, 3);
      Option option0 = new Option("arg", false, "arg");
      option0.setArgs(3);
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setWidth((-2));
      optionGroup0.addOption(option0);
      helpFormatter0.getWidth();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-2), "57");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.findWrapPos("usage: ", 3, 3);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", false, "|tj-B]Dsi4'2(s");
      options0.getMatchingOptions("y\"(B");
      String string0 = "";
      Option option0 = new Option("arg", "-");
      option0.setArgs(3);
      OptionGroup optionGroup0 = new OptionGroup();
      int int0 = 6;
      helpFormatter0.setWidth((-2));
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      optionGroup0.toString();
      optionGroup0.setRequired(true);
      String string1 = "";
      Options options3 = options2.addOptionGroup(optionGroup1);
      String string2 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(6, "[ Options: [ short ", (String) null, options3, "<Od}O%V|s!AMwFF&H", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) stringBuffer0;
      helpFormatter0.printHelp("-", options0);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, (-2301), "O/~");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 24;
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.getWidth();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1);
      helpFormatter0.printOptions(mockPrintWriter2, 74, options0, 390, 24);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("}oO$sgA%DyWhp|w,/");
      helpFormatter0.printHelp("P", " ", options0, " ", true);
      Options options1 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(".");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 69, "[", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultLongOptPrefix = "q";
      Option option0 = new Option("", true, "o6P:Sfo~H?Ho");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption((String) null, "Lk1*F", false, " ");
      helpFormatter0.defaultLongOptPrefix = "--";
      option0.setArgs(2233);
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setWidth(6);
      Options options3 = options2.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      optionGroup0.setRequired(false);
      Options options4 = options3.addOption((String) null, "--", true, " ");
      helpFormatter0.printHelp(460, "2L1s?X:", "", options4, "2L1s?X:", false);
      helpFormatter0.printHelp(76, "Lk1*F", " ", options3, "vXg(.h7lbiYYF5hD", true);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine(")uE4k'/-gjezhY[fUx");
      helpFormatter0.setSyntaxPrefix((String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) ")uE4k'/-gjezhY[fUx";
      Object object0 = new Object();
      objectArray0[1] = object0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      Options options1 = new Options();
      Options options2 = options1.addOption((String) null, "usage: ", true, ")uE4k'/-gjezhY[fUx");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      optionGroup1.setRequired(true);
      Options options3 = options2.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "I", "]", options3, "J*I,5b-s");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = null;
      helpFormatter0.defaultOptPrefix = "";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.setSyntaxPrefix("I?*x'% *DYSb");
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.defaultLeftPad = (-186);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("V", "usage: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // usage: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultNewLine;
      helpFormatter0.findWrapPos("usage: ", 3, 3);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", false, "--");
      options0.getMatchingOptions("y\"(B");
      Option option0 = new Option("arg", "-");
      option0.setArgs(3);
      helpFormatter0.setLeftPadding(6);
      helpFormatter0.rtrim("");
      helpFormatter0.setWidth(0);
      Options options2 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp("y\"(B", options1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 33;
      StringWriter stringWriter0 = new StringWriter(33);
      StringWriter stringWriter1 = stringWriter0.append('I');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 1, "");
      int int1 = 74;
      Options options0 = new Options();
      int int2 = 68;
      helpFormatter0.setOptPrefix("He");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "P=", "", options0, 68, 74, "P=");
      helpFormatter0.getLeftPadding();
      helpFormatter0.defaultOptPrefix = "";
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-492), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("1kC6h(oNSb)?2&rQ");
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", false, "|tj-B]Dsi4'2(s");
      List list0 = options0.getMatchingOptions("y\"(B");
      Options options2 = options1.addOption("", false, "");
      MockFile mockFile0 = new MockFile("--", "|tj-B]Dsi4'2(s");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "|tj-B]Dsi4'2(s";
      objectArray0[3] = (Object) list0;
      PrintWriter printWriter0 = mockPrintWriter1.format(locale0, " ", objectArray0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0, false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter2, 1924, "rKc4)", options0);
      Option option0 = new Option("", "TKXHUC8$gL|x");
      Options options3 = options2.addOption(option0);
      options3.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "S~RY", "", options3, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, 1, options0, (-4131), 3);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultLongOptPrefix = "q";
      Option option0 = new Option("", true, "o6P:Sfo~H?Ho");
      Options options1 = options0.addOption(option0);
      options1.getOption("q");
      Options options2 = options1.addOption((String) null, "Lk1*F", false, " ");
      helpFormatter0.defaultLongOptPrefix = null;
      option0.setArgs(2233);
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasOption("");
      helpFormatter0.setWidth(6);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      optionGroup1.toString();
      optionGroup1.setRequired(true);
      Options options4 = options3.addOption((String) null, "--", true, " ");
      helpFormatter0.printHelp(460, "2L1s?X:", "", options4, "2L1s?X:", false);
      helpFormatter0.printHelp(76, "Lk1*F", " ", options3, "vXg(.h7lbiYYFhD", true);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("1kC6h(oNSb)?2&rQ");
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", false, "|tj-B]Dsi4'2(s");
      options0.getMatchingOptions("y\"(B");
      Options options2 = options1.addOption("", false, "");
      Option option0 = new Option("", "TKXHUC8$gL|x");
      Options options3 = options2.addOption(option0);
      options3.getMatchingOptions("arg");
      options3.getOptions();
      helpFormatter0.printHelp("org.apache.commons.cli.Option", "org.apache.commons.cli.HelpFormatter$1", options1, "1kC6h(oNSb)?2&rQ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "S~RY", "", options3, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultLongOptPrefix = "q";
      options0.getOptions();
      helpFormatter0.defaultLongOptPrefix = null;
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasOption("");
      helpFormatter0.setWidth(6);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 76;
      Options options0 = new Options();
      helpFormatter0.defaultLongOptPrefix = "q";
      String string0 = "";
      Option option0 = new Option("", true, "o6P:Sfo~H?Ho");
      Options options1 = options0.addOption(option0);
      options1.getOption("q");
      Options options2 = options1.addOption((String) null, "Lk1*F", false, " ");
      String string1 = null;
      Options options3 = options2.addOption(option0);
      options2.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), (String) null, "Lk1*F", options3, "q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", false, "|tj-B]Dsi4'2(s");
      options0.getMatchingOptions("y\"(B");
      Options options2 = options1.addOption("", false, "");
      helpFormatter0.defaultDescPad = helpFormatter0.defaultDescPad;
      Option option0 = new Option("", "TKXHUC8$gL|x");
      Options options3 = options2.addOption(option0);
      options3.getOptions();
      helpFormatter0.printHelp(74, "arg", "", options3, "usage: ");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      helpFormatter0.getLongOptPrefix();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.renderWrappedText(stringBuffer0, 58, 31, "line.separator");
      helpFormatter0.defaultNewLine = ">";
      helpFormatter0.rtrim(" ");
      StringBuffer stringBuffer1 = new StringBuffer(3);
      helpFormatter0.getArgName();
      helpFormatter0.setArgName((String) null);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "u";
      helpFormatter0.printHelp("u", options0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-523));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.rtrim("");
      helpFormatter0.setSyntaxPrefix("au)o!bXt.s3;`yD.");
      helpFormatter0.rtrim(":(");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("au)o!bXt.s3;`yD.", options1);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("Wx^8deuf#JX>");
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", false, "arg");
      Options options1 = options0.addOption(option0);
      options1.hasLongOption("cmdLineSyntax not provided");
      Options options2 = options1.addOption("arg", false, "I");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      helpFormatter0.setDescPadding((-1548));
      helpFormatter0.rtrim("J");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("kN_A1n9w[:Th3o", options2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.findWrapPos("usage: ", 3, 3);
      Options options0 = new Options();
      options0.addOption("arg", "-", false, "|tj-B]Dsi4'2(s");
      options0.getMatchingOptions("y\"(B");
      helpFormatter0.rtrim("b5bU`) <");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine(")uE4k'/-gjezhY[fUx");
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setSyntaxPrefix((String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) ")uE4k'/-gjezhY[fUx";
      Object object0 = new Object();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(")uE4k'/-gjezhY[fUx");
      StringBuffer stringBuffer0 = new StringBuffer(2);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(")uE4k'/-gjezhY[fUx", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine(")uE4k'/-gjezhY[fUx");
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setSyntaxPrefix("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) ")uE4k'/-gjezhY[fUx";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) "arg";
      helpFormatter0.setDescPadding(40);
      helpFormatter0.rtrim("Bzg0");
      helpFormatter0.setWidth((-881));
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 104, "Bzg0");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = ">";
      helpFormatter0.rtrim(" ");
      StringBuffer stringBuffer0 = new StringBuffer(3);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1281), 747, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("qhH");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) " ";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) "qhH";
      objectArray0[3] = (Object) " ";
      objectArray0[4] = (Object) " ";
      objectArray0[5] = (Object) " ";
      mockPrintWriter0.format(" ", objectArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "");
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 74);
      helpFormatter0.renderOptions(stringBuffer1, 9, options0, 0, 74);
      helpFormatter0.renderOptions(stringBuffer1, 1473, options0, 74, 0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine(")uE4k'/-gjezhY[fUx");
      helpFormatter0.createPadding(13);
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setSyntaxPrefix((String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) ")uE4k'/-gjezhY[fUx";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) ")uE4k'/-gjezhY[fUx";
      objectArray0[8] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 0, "XC\".<>sUOHp;*SF.");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine(")uE4k'/-gjezhY[fUx");
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setSyntaxPrefix((String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) ")uE4k'/-gjezhY[fUx";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) ")uE4k'/-gjezhY[fUx";
      helpFormatter0.setDescPadding(4193);
      helpFormatter0.rtrim("");
      helpFormatter0.setWidth((-1));
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 4193, "aqFFW\"zph&l,[.'D8");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine(")uE4k'/-gjezhY[fUx");
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setSyntaxPrefix((String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) ")uE4k'/-gjezhY[fUx";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) ")uE4k'/-gjezhY[fUx";
      objectArray0[8] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 1, "XC\".<>sUOHp;*SF.");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("1kC6h(oNSb)?2&rQ");
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("1kC6h(oNSb)?2&rQ", 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine(")uE4k'/-gjezhY[fUx");
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setSyntaxPrefix((String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.setDescPadding(0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) ")uE4k'/-gjezhY[fUx";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) ")uE4k'/-gjezhY[fUx";
      objectArray0[8] = (Object) helpFormatter0;
      mockPrintWriter0.format("", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("Wx^8deuf#JX>");
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", false, "arg");
      Options options1 = options0.addOption(option0);
      options1.hasLongOption("cmdLineSyntax not provided");
      Options options2 = options1.addOption("arg", false, "I");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-26), "Wx^8deuf#JX>", "kN_A1n9w[:Th3o", options3, "Wx^8deuf#JX>");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("Y]9TdY$N");
      helpFormatter0.defaultSyntaxPrefix = "   ";
      helpFormatter0.setDescPadding((-2917));
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(false);
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2917), "   ", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options1, "!,Qd=(''12kHs/8phX");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      int int0 = (-603);
      helpFormatter0.defaultArgName = "x\"BNe/";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-603), (-1349), " :: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 44, (-5716), "");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.createPadding(0);
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getDescPadding();
      helpFormatter0.createPadding(0);
      String string0 = "*hf&eB%^G%T";
      MockFile mockFile0 = new MockFile("TKiat0\"", "");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("-", "*hf&eB%^G%T", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptSeparator();
      String string0 = "org.apache.commons.cli.AlreadySelectedException";
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = 0;
      Option option0 = new Option("", ").eRtv\"JMu4", false, "");
      Options options1 = options0.addOption(option0);
      option0.setLongOpt("-");
      option0.getValues();
      // Undeclared exception!
      try { 
        options1.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.setLongOptPrefix(";,vjn}>Q<n5");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine(")uE4k'/-gjezhY[fUx");
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setSyntaxPrefix((String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) ")uE4k'/-gjezhY[fUx";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) ")uE4k'/-gjezhY[fUx";
      objectArray0[8] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 0, "XC\".<>sUOHp;*SF.");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      boolean boolean0 = false;
      Options options1 = options0.addOption("", "usage: ", false, " ");
      // Undeclared exception!
      try { 
        options1.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderWrappedText(stringBuffer0, 3, 382, "");
      int int0 = 34;
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, (-2544), (Options) null, 3, 59);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      options0.addOption("arg", "", false, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 2, options0, 44, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "RKQLn";
      MockFile mockFile0 = new MockFile("RKQLn");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.close();
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      String string1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 1043, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      int int0 = 971;
      String string0 = "T";
      Options options0 = new Options();
      String string1 = " :: ";
      options0.helpOptions();
      // Undeclared exception!
      try { 
        options0.addOption(" :: ", "arg", true, "org.apache.commons.cli.Option");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ' :: ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      String string0 = "(F=Hr/^";
      String string1 = "has already been selected: '";
      Options options0 = new Options();
      String string2 = "cmdLineSyntax not provided";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("cmdLineSyntax not provided", "|pR,}#", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'cmdLineSyntax not provided' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator(" :: ");
      helpFormatter0.setSyntaxPrefix("usage: ");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      int int0 = 1504;
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption(" :: ", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ' :: ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.defaultDescPad = (-2672);
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getSyntaxPrefix();
      String string0 = "";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("arg", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 24;
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", "<", options0, "", false);
      helpFormatter0.getWidth();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(31);
      Object object0 = new Object();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.setNewLine("IDyCQ`c2zb");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getNewLine();
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      String string0 = "";
      Option option0 = null;
      try {
        option0 = new Option("--", "", true, "3t$4B`KS7Z}`NGB<:zq");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.rtrim("");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLeftPadding();
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      options0.getOptions();
      helpFormatter0.printHelp(" ] [ long ", " ] [ long ", options0, "", true);
      helpFormatter0.getWidth();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      BufferedOutputStream bufferedOutputStream0 = null;
      try {
        bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, (-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultLongOptPrefix = "q";
      Option option0 = new Option("", true, "o6P:Sfo~H?Ho");
      Options options1 = options0.addOption(option0);
      options1.getOption("q");
      Options options2 = options1.addOption((String) null, "Lk1*F", false, " ");
      helpFormatter0.defaultLongOptPrefix = null;
      option0.setArgs(2233);
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasOption("");
      helpFormatter0.setWidth(6);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      optionGroup1.toString();
      Options options4 = options3.addOption((String) null, "--", false, " ");
      helpFormatter0.printHelp(460, "2L1s?X:", "", options4, "2L1s?X:", false);
      helpFormatter0.printHelp(76, "Lk1*F", " ", options3, "vXg(.h7lbiYYFhD", true);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = ">";
      helpFormatter0.rtrim(" ");
      StringBuffer stringBuffer0 = new StringBuffer(3);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.findWrapPos("usage: ", 3, 3);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", false, "|tj-B]Dsi4'2(s");
      options0.getMatchingOptions("y\"(B");
      Options options2 = options1.addOption("", false, "");
      helpFormatter0.defaultDescPad = 6;
      Option option0 = new Option("", "TKXHUC8$gL|x");
      Options options3 = options2.addOption(option0);
      options3.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(6, "arg", "", options3, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("Wx^8deuf#JX>");
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", false, "arg");
      Options options1 = options0.addOption(option0);
      options1.hasLongOption("cmdLineSyntax not provided");
      Options options2 = options1.addOption("arg", false, "I");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "Wx^8deuf#JX>", "kN_A1n9w[:Th3o", options3, "Wx^8deuf#JX>");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("<", options0, true);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.rtrim("8ps-&y~zaI<e#");
      assertEquals("8ps-&y~zaI<e#", string0);
      
      String string1 = helpFormatter0.getArgName();
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("arg", string1);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      StringBuffer stringBuffer1 = helpFormatter2.renderOptions(stringBuffer0, 2, options0, 44, 1268);
      StringBuffer stringBuffer2 = helpFormatter2.renderWrappedText(stringBuffer1, 74, (-1), "--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer2, 3, (-1460), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("1kC6h(oNSb)?2&rQ");
      helpFormatter0.getNewLine();
      helpFormatter0.findWrapPos("", 0, 0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", false, "|tj-B]Dsi4'2(s");
      options0.getMatchingOptions("y\"(B");
      Options options2 = options1.addOption("", false, "");
      Option option0 = new Option("", "TKXHUC8$gL|x");
      Options options3 = options2.addOption(option0);
      options3.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "", "", options3, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('Z');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) locale0;
      PrintWriter printWriter1 = mockPrintWriter1.format(locale0, "\n", objectArray0);
      helpFormatter0.printWrapped(printWriter1, 1, "");
      int int0 = helpFormatter0.getWidth();
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, int0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 0;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      String string0 = "'j<-l`=;j%W,b7qA0(";
      helpFormatter0.printHelp("'j<-l`=;j%W,b7qA0(", "'j<-l`=;j%W,b7qA0(", options0, "'j<-l`=;j%W,b7qA0(", false);
      String string1 = " | ";
      Option option0 = null;
      try {
        option0 = new Option("-", "usage: ", false, " | ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ] [ long ");
      int int0 = 0;
      String string0 = "";
      options0.getOptions();
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
      String string1 = "";
      boolean boolean0 = true;
      helpFormatter0.printHelp(" ] [ long ", " ] [ long ", options0, "", true);
      helpFormatter0.getWidth();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      BufferedOutputStream bufferedOutputStream0 = null;
      try {
        bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, (-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      String string0 = "'pSaNnQ/\\";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = null;
      try {
        option0 = new Option("--", "arg", false, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-733);
      helpFormatter0.setLeftPadding((-733));
      String string0 = null;
      Options options0 = new Options();
      String string1 = "w6^8(@HVGiKm C6^dN";
      // Undeclared exception!
      try { 
        options0.addOption(" ", false, "w6^8(@HVGiKm C6^dN");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.print('A');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, (-244), "byRSin5A[t<gl6");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.defaultNewLine = "[ option: ";
      helpFormatter0.getOptionComparator();
      int int0 = (-1555);
      int int1 = 44;
      String string0 = " ";
      String string1 = "zweMD";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("[ option: ", "zweMD", false, "[ option: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '[ option: ' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "53_v\"QNM";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = true;
      options1.addOption("arg", ",", true, "\n");
      Option option0 = null;
      try {
        option0 = new Option("+k", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '+k' contains an illegal character : '+'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
