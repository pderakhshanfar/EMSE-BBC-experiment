/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 18:14:11 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.CharBuffer;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultArgName = null;
      helpFormatter0.setSyntaxPrefix("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "\n", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 25, 25);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("!}2V]gw", "!}2V]gw", (Options) null, "!}2V]gw");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption((String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "\n", true, "--");
      option0.setArgName(" ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup1.setRequired(true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "\n", "usage: ", options1, "--", true);
      helpFormatter0.getNewLine();
      helpFormatter1.getArgName();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("NO_ARGS_ALLOWED", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.getOption("");
      Option option1 = new Option((String) null, "`Bb8", false, "`Bb8");
      optionGroup1.addOption(option1);
      options0.addOptionGroup(optionGroup1);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 104, "`Bb8", options0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 999, "org.apache.commons.cli.HelpFormatter$1");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getDescPadding();
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-2);
      Options options0 = new Options();
      String string0 = "I.V![0ni";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(10, "I.V![0ni", "I.V![0ni", options0, "I.V![0ni", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("   ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, true, "arg");
      option0.setArgName(" ");
      option0.addValueForProcessing("`OKC/aYA");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(34, "arg", (String) null, options0, "}Z GzV_XSjdm\"lew#", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Options options1 = new Options();
      helpFormatter0.createPadding(34);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "arg", false, "   ");
      Options options3 = options2.addOption(option0);
      helpFormatter0.printHelp(90, "f>0p@$", "t2e*qUJvFU;F{ze", options3, (String) null);
      Options options4 = new Options();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      helpFormatter0.setSyntaxPrefix("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "\n", options4);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, true, "arg");
      option0.setArgName(" ");
      option0.addValueForProcessing("`OKC/aYA");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(34, "arg", (String) null, options0, "}Z GzV_XSjdm\"lew#", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-5427), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = "}\\uj ^Q^F5d~";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, (-2914), string0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 594, "[", "[", options0, 594, 594, (String) null, true);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "#7JIjAvn>7!bjS";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      String string1 = "";
      Options options1 = options0.addOption("", "--", true, "--");
      Option option0 = new Option("arg", "   ");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      options2.getOption("   ");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Options options4 = options3.addOption("arg", true, "G,V;UU<J9*5");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 18, "#7JIjAvn>7!bjS", "#7JIjAvn>7!bjS", options4, (-1), (-1), "G,V;UU<J9*5");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("W8A<Yjp'cbF.t+ Nk");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 15, "W8A<Yjp'cbF.t+ Nk");
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer("&[w$qGT\":]tXov'");
      helpFormatter0.renderOptions(stringBuffer0, 3, options0, 3, 3);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      helpFormatter0.renderWrappedText(stringBuffer0, 14, (-2344), "");
      helpFormatter0.defaultSyntaxPrefix = "";
      String string0 = "";
      helpFormatter0.findWrapPos("", 10, 1);
      helpFormatter0.getSyntaxPrefix();
      try { 
        MockURI.URI("n>TO{z4Y@&}", "", "n>TO{z4Y@&}");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 1: n>TO{z4Y@&}:#n%3ETO%7Bz4Y@&%7D
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "-");
      helpFormatter0.setArgName("");
      options1.getMatchingOptions(";s ~G}#Iz");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 35, options1, 35, 35);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      helpFormatter0.setSyntaxPrefix("");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, true, "arg");
      option0.setArgName(" ");
      option0.addValueForProcessing("`OKC/n/aYA");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 34, "", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      int int0 = 2616;
      helpFormatter0.defaultNewLine = "";
      Options options0 = null;
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2616, "KPTGJk2uy1u+e", "KPTGJk2uy1u+e", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "usage: ", true, "\n");
      optionGroup0.addOption(option0);
      Option option1 = new Option("", (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      optionGroup1.addOption(option1);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("Uv", "Uv", options1, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 51, (Options) null, 51, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 10, "Illegal option name '", "Illegal option name '", options0, 10, 10, "Illegal option name '");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "[";
      mockPrintWriter0.format("arg", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      char[] charArray0 = new char[2];
      charArray0[0] = 'r';
      charArray0[1] = 'r';
      mockPrintWriter0.write(charArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "[", true, (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp(11, "[", "y.N", options2, "[", false);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 1261;
      helpFormatter0.getArgName();
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = options0.addOption("arg", true, "\n");
      helpFormatter0.printHelp("arg", options0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-907), options1, 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.renderOptions((StringBuffer) null, 604, options0, 91, 74);
      helpFormatter0.renderOptions((StringBuffer) null, 32, options0, 1, 1);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      Options options0 = new Options();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("8w`u{FI[BR");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("--");
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter1, 3, "\n", options0);
      helpFormatter0.setArgName("q!%f51Yk");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("<.:'g_Z(]u1UfD", options0, true);
      options0.getOptionGroups();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-7), "pCvly^o", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, (String) null, true, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "arg", options1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setArgName("\n");
      helpFormatter1.findWrapPos("QOb%p,nTJNr", 862, 887);
      helpFormatter2.rtrim("NO_ARGS_ALLOWED");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "", false, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption("", true, ", ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "org.apache.commons.cli.Options", options2, ", ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp(414, "\u0000,j}gAB8EK*o_7u", "", options0, "", false);
      helpFormatter0.createPadding(74);
      helpFormatter1.setArgName("");
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderOptions(stringBuffer0, 3, options0, 1, 2040);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      File file0 = MockFile.createTempFile("arg", "\n");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      PrintStream printStream0 = mockPrintStream0.append('+');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "D\"G,", (String) null, options0, 479, 110, "D\"G,", true);
      helpFormatter0.getOptPrefix();
      helpFormatter0.printOptions(mockPrintWriter0, 20, options0, 66, 20);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("usage: ");
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "I.V!PM0ni";
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, ";hrHgu");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("I.V!PM0ni", options1, true);
      Options options2 = new Options();
      options0.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2, "I.V!PM0ni", "I.V!PM0ni", options2, "-", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(349);
      helpFormatter0.renderWrappedText(stringBuffer0, 843, 8, "");
      Options options0 = new Options();
      Options options1 = new Options();
      options1.getOptionGroups();
      helpFormatter0.defaultWidth = 688;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 13, "e?ROH;8!|O}f3%", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, (String) null, false, "");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 0, "'", options1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1413, 0, "R>rc2*");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, (String) null, false, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, 0, options1, 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      helpFormatter0.defaultWidth = 11;
      int int0 = 814;
      mockPrintWriter1.write(814);
      helpFormatter0.getArgName();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 814, "[", (String) null, options0, (-1155), 1132, "[", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      int int0 = 11;
      helpFormatter0.defaultWidth = 11;
      mockPrintWriter1.write(814);
      helpFormatter0.getArgName();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      String string0 = "[";
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 814, ">", "I", options0, 3, 2409, "", false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockFileOutputStream0);
      String string1 = "m;CRBPA8";
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("#lq]4Z]yD}!7+", "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '#lq]4Z]yD}!7+' contains an illegal character : '#'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "[";
      mockPrintWriter0.format("arg", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      char[] charArray0 = new char[2];
      charArray0[0] = 'r';
      charArray0[1] = 'r';
      mockPrintWriter0.write(charArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 11, 1, "[");
      helpFormatter0.getArgName();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options0.addOption("arg", "", false, "arg");
      options0.addOptionGroup(optionGroup0);
      Options options3 = options1.addOption("", "--", false, "\n");
      options3.getOptionGroups();
      helpFormatter0.printHelp(42, "z", "", options3, "ibSZ6|r#q", false);
      helpFormatter0.setArgName("zopO6E8MP2EmgU");
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options2, 11, 42);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "[";
      mockPrintWriter0.format("arg", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      char[] charArray0 = new char[2];
      charArray0[0] = 'r';
      charArray0[1] = 'r';
      mockPrintWriter0.write(charArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 11, 1, "[");
      helpFormatter0.getArgName();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.addOption("arg", "", false, "arg");
      Options options2 = options0.addOptionGroup(optionGroup0);
      Options options3 = options1.addOption("", "--", false, "\n");
      options3.getOptionGroups();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 4025, "", options2);
      helpFormatter0.setArgName("N");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      boolean boolean0 = true;
      boolean boolean1 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      helpFormatter0.setWidth((-1));
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getWidth();
      PrintWriter printWriter0 = null;
      helpFormatter0.setLongOptPrefix("Y);)");
      int int0 = 590;
      Options options0 = new Options();
      options0.hasLongOption("usage: ");
      boolean boolean2 = false;
      Option option0 = null;
      try {
        option0 = new Option(" ", "qZ[E1Ve rV}'rPJK?.p", false, "WZDIpL<M$!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.getOptionGroups();
      Options options1 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("UQZ9S2O");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, "--", " | ", options0, "line.separator");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setSyntaxPrefix("");
      options0.addOption("arg", (String) null, true, " ");
      // Undeclared exception!
      try { 
        helpFormatter2.printUsage((PrintWriter) null, 74, "\n", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 1;
      Options options0 = new Options();
      options0.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.HelpFormatter");
      helpFormatter1.setLongOptSeparator("   ");
      Options options1 = options0.addOption("", "Illegal option name '", true, "--");
      helpFormatter1.printHelp(1941, "NA%JVoy8~@*_le", "arg", options1, "wjxdlsV)om^cUNT/", true);
      Options options2 = new Options();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "H7xAfh,bb";
      helpFormatter0.getLeftPadding();
      helpFormatter0.rtrim("");
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("H7xAfh,bb");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 1, (Options) null, (-2705), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      char[] charArray0 = new char[2];
      charArray0[0] = 'r';
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("[");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "'kWA0bI<6");
      charArray0[1] = 'r';
      mockPrintWriter0.write(charArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 11, 1, "[");
      helpFormatter0.getArgName();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "");
      helpFormatter0.printHelp("usage: ", "", options0, "V/w%Y1L", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter1, 10, "pfQ0UBv.yV", options1);
      helpFormatter1.setArgName("usage: ");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      char[] charArray0 = new char[2];
      helpFormatter0.defaultWidth = 11;
      mockPrintWriter1.write(814);
      charArray0[0] = 'r';
      charArray0[1] = 'r';
      helpFormatter0.getArgName();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 3, "[", "I", options0, 3, 3, "[", false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter0.printHelp(11, "org.apache.commons.cli.Option", "I", options0, "arg");
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      File file0 = MockFile.createTempFile("Ati1kkw]VXX", "usage: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      mockPrintWriter0.write(10);
      helpFormatter0.getArgName();
      helpFormatter1.getSyntaxPrefix();
      Options options0 = new Options();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) file0;
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "usage: ", objectArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "[", (String) null, options0, 3, 74, "I", false);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      char[] charArray0 = new char[2];
      charArray0[0] = 'r';
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("[");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "'kWA0bI<6");
      charArray0[1] = 'r';
      mockPrintWriter0.write(charArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 11, 1, "[");
      helpFormatter0.getArgName();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "");
      helpFormatter0.printHelp("usage: ", "", options0, "V/w%Y1L", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("arg");
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(11, "", "org.apache.commons.cli.Option", options1, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      char[] charArray0 = new char[2];
      charArray0[0] = 'r';
      charArray0[1] = 'r';
      mockPrintWriter0.write(charArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 11, 1, "[");
      helpFormatter0.getArgName();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "--", false, "\n");
      options2.getOptionGroups();
      helpFormatter0.printHelp(26, "z", "", options2, "ibSZ6|r#q", false);
      Options options3 = new Options();
      helpFormatter0.createPadding(2);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      char[] charArray0 = new char[2];
      charArray0[0] = 'r';
      charArray0[1] = 'r';
      mockPrintWriter0.write(charArray0);
      Options options0 = new Options();
      Option option0 = new Option((String) null, (String) null, true, "dsM");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 11, "[", "[", options1, 1708, 43, (String) null);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 11, 1, "[");
      helpFormatter0.getArgName();
      helpFormatter0.getSyntaxPrefix();
      Options options2 = new Options();
      options2.addOption("", false, "");
      helpFormatter0.printHelp("usage: ", "", options2, "V/w%Y1L", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("arg");
      helpFormatter0.getOptionComparator();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('r');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 74, (-330), "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-330), 74, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte)17;
      byteArray0[7] = (byte) (-126);
      byteArray0[8] = (byte)52;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options0 = new Options();
      helpFormatter1.printHelp(2, "-", (String) null, options0, "", false);
      helpFormatter0.createPadding(10);
      helpFormatter0.setArgName("pBo\"lUO?g#MPm");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "5+", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      char[] charArray0 = new char[2];
      charArray0[0] = 'r';
      charArray0[1] = 'r';
      mockPrintWriter0.write(charArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 11, 1, "[");
      helpFormatter0.getArgName();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getArgName();
      helpFormatter0.getSyntaxPrefix();
      Options options1 = new Options();
      Options options2 = options0.addOption((String) null, false, "arg");
      helpFormatter0.printHelp("V/w%Y1L", "arg", options2, "", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("-");
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) optionGroup0;
      // Undeclared exception!
      try { 
        mockPrintWriter0.printf(locale0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp(2438, "]", ">", options1, ">", true);
      helpFormatter0.createPadding(3);
      helpFormatter0.setArgName("");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 2438, "usage: ", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("B7");
      Options options0 = new Options();
      String string0 = "org.apache.commons.cli.Option";
      Options options1 = options0.addOption((String) null, "org.apache.commons.cli.Option", false, " ");
      options0.hasLongOption((String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      options1.getOptionGroups();
      options1.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      options0.addOption("Vdkxm6", "0}}O$oo>", true, "=b5\"");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, "The option '", " ", options1, "JDCB,/7>O7qje`?H=CL", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The.opt[n ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      char[] charArray0 = new char[2];
      charArray0[0] = 'r';
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 0, (String) null, (String) null, (Options) null, 13, 0, "The.opt[n ", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      helpFormatter0.defaultWidth = 1099;
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1310, (-1096), "arg");
      helpFormatter0.getWidth();
      helpFormatter0.findWrapPos("", (-202), 1099);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 116, 1099, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("?e");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)16;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options1 = new Options();
      options0.getOptionGroups();
      options1.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      options0.addOption("", "-", false, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((-2361), "'", "org.apache.commons.cli.OptionGroup", (Options) null, "arg", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The.opt[n ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      char[] charArray0 = new char[2];
      charArray0[0] = 'r';
      charArray0[1] = '.';
      mockPrintWriter0.write(charArray0);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 1, 1, "The.opt[n ");
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      char[] charArray0 = new char[2];
      helpFormatter0.defaultWidth = 11;
      mockPrintWriter1.write(814);
      charArray0[0] = 'r';
      charArray0[1] = 'r';
      mockPrintWriter0.write(charArray0);
      helpFormatter0.getArgName();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 31, "[", "I", options0, 31, 31, "[", false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter2, 11, "#lq]4Z]yD}!7+", options0);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, "arg", "", options1, (-453), (-453), "I", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      char[] charArray0 = new char[2];
      charArray0[0] = 'r';
      charArray0[1] = 'r';
      mockPrintWriter0.write(charArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 11, 1, "[");
      helpFormatter0.getArgName();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "--", false, "\n");
      options2.getOptionGroups();
      helpFormatter0.printHelp(42, "z", "", options2, "ibSZ6|r#q", false);
      Options options3 = new Options();
      helpFormatter0.createPadding(2);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The.opt[n ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      char[] charArray0 = new char[2];
      charArray0[0] = 'r';
      charArray0[1] = '.';
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 2249, 2249, "");
      helpFormatter0.getArgName();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-2663), "", "NO_ARGS_ALLOWED", options0, 118, (-3142), "*HQ6", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.getSyntaxPrefix();
      Options options2 = new Options();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      helpFormatter0.printWrapped(printWriter0, 63, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options3, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 63, "usage: ", "?Zfqmx", options0, 63, 993, "?Zfqmx");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 993, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The.opt[n ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      int int0 = 0;
      char[] charArray0 = new char[2];
      charArray0[0] = 'r';
      charArray0[1] = '.';
      mockPrintWriter0.write(charArray0);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "\"r+<", "", (Options) null, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "'";
      int int0 = (-2);
      String string1 = "Cannot add value, list full.";
      String string2 = "";
      Options options0 = new Options();
      boolean boolean0 = false;
      Options options1 = new Options();
      String string3 = "Wej`7QnZ]b:";
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2), (-2), "Wej`7QnZ]b:");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "[v4N%gk";
      Options options0 = new Options();
      helpFormatter0.printHelp("5Z39]<xs &>+fG", options0, true);
      Options options1 = new Options();
      options1.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "-", "usage: ", options0, "/:r", true);
      helpFormatter1.printHelp(78, " ", "", options1, "--", true);
      helpFormatter0.createPadding(105);
      helpFormatter0.setArgName("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1, "{DUBOm)&TT^Lvo 9JUK");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      String string0 = "0";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", "t<0T94nODMg~kO0E", options1, "]", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("0", true, "3e,w8I*");
      helpFormatter0.printHelp("<.:'g_Z(]u1UfD", "cmdLineSyntax not provided", options1, "V/w%Y1L", true);
      helpFormatter0.setArgName("-");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(44, "dl[;Xr)kZWO1", "U$s0qp9?|`]{", options0, "\n", true);
      helpFormatter1.printHelp(74, "R\"l<kWJ6'|_P:}", "usage: ", options0, "-", true);
      helpFormatter0.createPadding(0);
      helpFormatter1.setArgName("arg");
      helpFormatter1.createPadding(44);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setNewLine("fmS8deKR&g;#");
      helpFormatter0.setNewLine("--");
      helpFormatter0.setLeftPadding(489);
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, "[");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // [
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(74, " ", "<", options0, "\n", true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.createPadding(3);
      helpFormatter0.setArgName(" [&");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 1;
      helpFormatter0.setLongOptSeparator("'");
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options1 = options0.addOption("", "Illegal option name '", true, "--");
      helpFormatter2.printHelp(1941, "NA%JVoy8~@*_le", "arg", options1, "wjxdlsV)om^cUNT/", true);
      helpFormatter0.setArgName("--");
      helpFormatter2.getWidth();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      Options options0 = new Options();
      options0.addOption("0", false, "3e,w8I*");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("0", "V/w%Y1L", (Options) null, "   ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      char[] charArray0 = new char[2];
      charArray0[0] = 'r';
      charArray0[1] = '.';
      mockPrintWriter0.write(charArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 11, 1, "[");
      helpFormatter0.getArgName();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 31, "[", "I", options0, 31, 31, "[", false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter2, 11, "#lq]2Z]yD(G7V+", options0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, "[");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      char[] charArray0 = new char[2];
      charArray0[0] = 'r';
      charArray0[1] = '.';
      mockPrintWriter0.write(charArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 11, 1, "[");
      helpFormatter0.getArgName();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 1, "I", "[", options0, 9, 18, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = false;
      helpFormatter0.printHelp("+>:_'LVG2o@Y6Kahp9E", options0, false);
      Options options1 = new Options();
      int int0 = 2395;
      String string0 = "";
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2395, "", " ] [ long ", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("5Z39]<xs &>+fG", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("5Z39]<xs &>+fG", options0, true);
      Options options1 = new Options();
      options1.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(3, "The option '", "--", options0, "--", false);
      helpFormatter1.printHelp(31, "arg", "arg", options1, "o>", true);
      helpFormatter1.createPadding(31);
      helpFormatter0.setArgName("The option '");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      helpFormatter0.setOptPrefix("--");
      helpFormatter0.getArgName();
      helpFormatter0.setNewLine("arg");
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 74, "arg");
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = new Option("arg", true, "v7>");
      option0.setValueSeparator('|');
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options2.addOption("v7>", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'v7>' contains an illegal character : '>'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The.opt[n ");
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      int int0 = (-21);
      char[] charArray0 = new char[2];
      charArray0[0] = 'r';
      charArray0[1] = '.';
      mockPrintWriter0.write(charArray0);
      int int1 = 1;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, (-21), 1, "The.opt[n ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      Options options1 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 506, options0, 8, 97);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)44;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options1 = new Options();
      options1.getOptions();
      helpFormatter0.printHelp("?H%S(&EN", options1, false);
      Options options2 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(892, "2yfl!6yPFj^H:vzo`L", " ", options1, ")8k%3D5:S~b;", true);
      // Undeclared exception!
      try { 
        helpFormatter1.createPadding((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("usage: ");
      String string0 = "6]dpWPHL";
      PrintWriter printWriter0 = null;
      int int0 = 0;
      String string1 = "oiz<]JimN+=";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 0, "oiz<]JimN+=");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("5Z39]<xs &>+fG", options0, true);
      Options options1 = new Options();
      options1.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "-", "usage: ", options0, "/:r", true);
      helpFormatter1.printHelp(78, " ", "", options1, "--", true);
      helpFormatter0.createPadding(74);
      helpFormatter1.setArgName("5Z39]<xs &>+fG");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("", 3746, 3746);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, 1, options0, 74, (-242));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.defaultLongOptPrefix = "N,j/cNBw1ALJVt";
      helpFormatter0.printHelp("N,j/cNBw1ALJVt", options0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "[0QoA,1R?Ot";
      helpFormatter0.printHelp("[0QoA,1R?Ot", options0, true);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2194), "[0QoA,1R?Ot", "+|{: $#'\"iVt^(ujw]1", options1, "<.:'g_Z(]u1UfD", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "<.:'g_Z(]u1UfD";
      int int0 = 0;
      Options options0 = null;
      boolean boolean0 = true;
      String string1 = "3e,w8I*";
      Options options1 = new Options();
      Options options2 = options1.addOption("0", false, "3e,w8I*");
      helpFormatter0.printHelp("<.:'g_Z(]u1UfD", "cmdLineSyntax not provided", options2, "V/w%Y1L", true);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("3e,w8I*", "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The option '");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("arg", options0, true);
      Options options1 = new Options();
      helpFormatter0.printHelp(74, "usage: ", "--", options1, "", true);
      helpFormatter1.createPadding(74);
      helpFormatter1.setArgName((String) null);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("5Z39]<xs &>+fG", options0, false);
      Options options1 = new Options();
      options1.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "-", "usage: ", options0, "/:G", true);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(74, (String) null, "/:G", options0, "arg", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "6]dpWPHL";
      PrintWriter printWriter0 = null;
      int int0 = 26;
      String string1 = "oiz<]JimN+=";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 26, "oiz<]JimN+=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      char[] charArray0 = new char[9];
      charArray0[0] = 'A';
      charArray0[1] = 'S';
      charArray0[2] = 'T';
      charArray0[3] = '[';
      charArray0[4] = 'N';
      charArray0[5] = 'k';
      charArray0[6] = 'B';
      charArray0[7] = 'W';
      charArray0[8] = 'r';
      int int0 = 0;
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, (-361), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile((File) null, "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "Vx_upc?)'T)o", "hA[T4ss61@$4SB", (Options) null, 0, 0, "XtPWDH]]", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1893, 1893, "?khOgSP_r<;f");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\n");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      Options options0 = new Options();
      stringWriter1.flush();
      stringBuffer0.append(true);
      stringWriter0.write(3);
      Option option0 = new Option("arg", false, "IKNQ-Mv}B%f");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, options1, (-1), (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      char[] charArray0 = new char[2];
      charArray0[0] = 'r';
      helpFormatter0.setNewLine("(Aa bJ");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("org.apache.commons.cli.ParseException");
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter1.printf("}n^O,B_&`", objectArray0);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "}n^O,B_&`");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setNewLine("fmS8deKR&g;#");
      helpFormatter0.defaultLongOptPrefix = "line.separator";
      String string0 = "}n^O,B_&`";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("g_0jEcYyqjo'CpQ^s");
      mockPrintWriter0.println(false);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "}n^O,B_&`");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The option '");
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      int int0 = 0;
      char[] charArray0 = new char[2];
      charArray0[0] = 'r';
      charArray0[1] = '.';
      mockPrintWriter0.write(charArray0);
      int int1 = 1;
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 0, 1, "The option '");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setWidth((-752));
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("?Hut'Tzg-P9\"q", ")}O @'C/", false, "{|!Qsxd)gm%~a1a");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '?Hut'Tzg-P9\"q' contains an illegal character : '?'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("[ option: ");
      helpFormatter0.rtrim("A CloneNotSupportedException was thrown: ");
      PrintWriter printWriter0 = null;
      int int0 = (-870);
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("-", "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setArgName("");
      String string1 = "org.apache.commons.cli.AlreadySelectedException";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "org.apache.commons.cli.AlreadySelectedException");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // org.apache.commons.cli.AlreadySelectedException
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "   ";
      helpFormatter0.setNewLine("   ");
      helpFormatter0.getWidth();
      String string1 = ">0M7yn&[<V#8c0w";
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.printHelp(">0M7yn&[<V#8c0w", "", options0, ">0M7yn&[<V#8c0w");
      helpFormatter0.setLongOptSeparator("");
      String string2 = "@lX)wfV1hM87g5SsE0";
      String string3 = null;
      try { 
        MockURI.URI("@lX)wfV1hM87g5SsE0", "   ", (String) null, "-", "--");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0: @lX)wfV1hM87g5SsE0://%20%20%20?-#--
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      String string0 = ">0M7yn&[<V#8c0w";
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.printHelp(">0M7yn&[<V#8c0w", "", options0, ">0M7yn&[<V#8c0w");
      helpFormatter0.setLongOptSeparator("");
      try { 
        MockURI.URI("@lX)wfV1hM87g5SsE0", "\n", (String) null, "-", "--");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0: @lX)wfV1hM87g5SsE0://%0A?-#--
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "X- k9i";
      helpFormatter0.setNewLine("X- k9i");
      helpFormatter0.getWidth();
      helpFormatter0.getOptPrefix();
      String string1 = "`Er~1thOG2_I[";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string2 = "LXPx;N@";
      // Undeclared exception!
      try { 
        options1.addOption("LXPx;N@", "--", true, "org.apache.commons.cli.HelpFormatter$1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'LXPx;N@' contains an illegal character : ';'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      int int0 = 1;
      helpFormatter0.setWidth(1);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      Options options0 = new Options();
      Options options1 = options0.addOption("YU", true, "--");
      // Undeclared exception!
      try { 
        options1.addOption("org.apache.commons.cli.AlreadySelectedException", "org.apache.commons.cli.HelpFormatter$1", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.AlreadySelectedException' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1928);
      String string0 = "Cannot add value, list full.";
      String string1 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "6]dpWPHL";
      PrintWriter printWriter0 = null;
      int int0 = 0;
      String string1 = "oiz<]JimN+=";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 0, "oiz<]JimN+=");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals(1, int0);
      
      int int1 = helpFormatter0.getDescPadding();
      assertEquals(3, int1);
      
      String string0 = helpFormatter0.getNewLine();
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", string0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1873);
      assertEquals(1873, helpFormatter0.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp("<.:'g_Z(]u1UfD", options0);
      helpFormatter0.getOptionComparator();
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      char[] charArray0 = new char[2];
      charArray0[0] = 'r';
      charArray0[1] = '.';
      mockPrintWriter0.write(charArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 11, 1, "[");
      String string0 = helpFormatter0.getArgName();
      assertEquals("arg", string0);
      
      String string1 = helpFormatter0.getSyntaxPrefix();
      assertEquals("usage: ", string1);
      
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 31, "*HQ6", "[", options0, 11, 11, "I", false);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "'";
      helpFormatter0.defaultDescPad = (-2);
      helpFormatter0.setLongOptSeparator("'");
      String string1 = "";
      helpFormatter0.setNewLine("");
      helpFormatter0.setNewLine("org.apache.commons.cli.OptionGroup");
      helpFormatter0.setLeftPadding((-2));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultWidth = (-2);
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("}zPsSW<~8S8", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("A8{|mt;");
      helpFormatter0.getLongOptSeparator();
      assertEquals("A8{|mt;", helpFormatter0.getNewLine());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("5Z39]<xs &>+fG", (-1092), (-1092));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      String string0 = "^`ADN)\"-5O=-I";
      MockFile mockFile0 = new MockFile("^`ADN)\"-5O=-I", "-");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "[");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // [
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1838);
      helpFormatter0.setLeftPadding((-1838));
      helpFormatter0.getLongOptPrefix();
      int int1 = 0;
      helpFormatter0.setLeftPadding(0);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-517));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = null;
      String string1 = null;
      URI uRI0 = MockURI.create("");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }
}
