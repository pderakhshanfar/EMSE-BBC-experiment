/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 10:04:44 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      helpFormatter0.defaultWidth = 0;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-117);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      helpFormatter0.printHelp("Q8ciuechbf51iM+V", (Options) null, false);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "CDI71?.tboFf*uU";
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "\n", "\n", options0, "\n");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      String string0 = "M=v:9F)";
      helpFormatter0.setArgName("M=v:9F)");
      stringWriter0.getBuffer();
      int int0 = (-1945);
      Options options0 = null;
      int int1 = 3083;
      int int2 = (-361);
      String string1 = "?WOo5";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("?WOo5", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("OvH>ds:(ehrw~u");
      String string0 = "";
      StringWriter stringWriter0 = new StringWriter(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      mockPrintWriter0.print((double) 74);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(952);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      int int0 = 31;
      // Undeclared exception!
      try { 
        stringBuffer0.delete(1, 952);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "[B");
      option0.setLongOpt("");
      optionGroup0.addOption(option0);
      Option option1 = new Option("B", "B");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      Options options1 = options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), "B", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setArgName(" ");
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      String string0 = "";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1377, "");
      helpFormatter0.setSyntaxPrefix("3[8");
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options1, 34, 34);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "2T U_2G{5";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("2T U_2G{5");
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, "2T U_2G{5");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-2);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" *", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.rtrim("\n");
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "0mc&2", (String) null, options0, 1190, (-392), "org.apache.commons.cli.HelpFormatter");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, "usage: ");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-223);
      String string0 = helpFormatter0.defaultSyntaxPrefix;
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = null;
      helpFormatter0.defaultNewLine = null;
      helpFormatter0.printHelp("-sEwk^R%/V", options0, false);
      helpFormatter0.getNewLine();
      int int0 = 33;
      String string1 = "\"";
      // Undeclared exception!
      try { 
        options0.addOption("\"", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '\"'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-2110);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(681, "ufvy!g@Y*", "--", options0, "ufvy!g@Y*");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(7, "\n", " :: ", options0, "\n");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      helpFormatter0.getDescPadding();
      String string0 = "!dq2'%'Mj +a";
      helpFormatter0.findWrapPos("!dq2'%'Mj +a", 3, 3);
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 3513;
      helpFormatter0.defaultDescPad = 3513;
      String string0 = ")^9UpBk0|57yG4_}{";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("8L^&", "8L^&", (Options) null, ")^9UpBk0|57yG4_}{");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 58, options0, 58, 35);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.rtrim("The option '");
      helpFormatter0.defaultOptPrefix = "The option '";
      helpFormatter0.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "t50p";
      options0.addOption((String) null, true, "x}\"oH28n<_H\"g2\";E.{");
      String string1 = "*51UIW{m`AuM@";
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 9, options0, (-658), (-658));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos((String) null, (-680), 74);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", " ] [ long ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "--", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped(printWriter0, (-141), 832, "~'m");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "-", "[", options0, "[", false);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth((-1724));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" [ARG]", options0, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 3418, (-2), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("usage: ", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      options0.hasLongOption("}6?kxK@");
      Options options1 = new Options();
      Option option0 = new Option("C", "");
      options0.addOption(option0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = mockPrintWriter0.append('3');
      helpFormatter1.printWrapped(printWriter0, 1, "\n");
      helpFormatter0.rtrim("-");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 3, "--", (String) null, options0, (-1), 42, (String) null, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      options0.hasOption("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) null, 3786, "usage: ", "7'b\"", options0, 3, 3, "m)YA;N+pC7Rvu8C2v", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      Options options1 = new Options();
      Options options2 = new Options();
      options2.hasOption("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "   ", "usage: ", options2, 74, 34, (String) null, false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 15, "-");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "yWyQ(jmFyv'iC3.Y?";
      MockFile mockFile0 = new MockFile("arg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-390), (Options) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      int int0 = 4473;
      Options options0 = null;
      int int1 = 10;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 4473, "arg", "arg", (Options) null, (-3777), 10, "arg");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("usage: ", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      Options options1 = new Options();
      Option option0 = new Option("C", "");
      Options options2 = options0.addOption(option0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-2079), options2, 0, 1962);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.setArgName("yWyQ(jmFyv'iC3.Y?");
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.ParseException");
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Option option0 = new Option("", true, "");
      options0.addOption(option0);
      helpFormatter0.setOptPrefix("[ARG...]");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.createPadding(445);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("usage: ", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      Options options1 = new Options();
      Option option0 = new Option("C", "");
      Options options2 = options0.addOption(option0);
      options2.hasOption("C");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      helpFormatter0.printHelp("-", options1, false);
      options1.addOption(option0);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 2127, (-1), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "uMcpg#-5~Qk0%#L6.";
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.setLongOptPrefix("[ARG...]");
      int int0 = 1805;
      String string0 = "[";
      Options options0 = null;
      int int1 = 2394;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1805, "/1S=@F~8$^`g[:dm)", "[", (Options) null, 1805, 2394, "/1S=@F~8$^`g[:dm)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1030);
      helpFormatter0.getDescPadding();
      String string0 = "line.separator";
      Options options0 = new Options();
      options0.getOptions();
      options0.hasLongOption("org.apache.commons.cli.Util");
      boolean boolean0 = false;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("line.separator", options0, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("yWyQ(jmFyv'iC3.Y?");
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.ParseException");
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Option option0 = new Option("", true, "");
      helpFormatter0.setLeftPadding((-2));
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", "--", options1, "\n", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("usage: ", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 1821, options0, 1821, 1821);
      helpFormatter0.setArgName("' contains an illegal character : '");
      helpFormatter0.setLongOptSeparator("),ICjJbFt^vxr/sNy^");
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-2951), (-6181), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("usage: ", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      Options options1 = new Options();
      Option option0 = new Option("C", "");
      Options options2 = options0.addOption(option0);
      options2.hasOption("C");
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter1.printHelp("C", options1, true);
      helpFormatter1.setDescPadding(74);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1763, (String) null, (String) null, options0, (-1), (-2), "-", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("usage: ", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      Options options1 = new Options();
      Options options2 = new Options();
      Options options3 = new Options();
      options0.hasOption("");
      helpFormatter0.getLongOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 0, "-", options1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("arg", "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup0.setRequired(true);
      optionGroup1.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("XrZ;39c(M", (String) null, options1, "", true);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("usage: ", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      Options options1 = new Options();
      Option option0 = new Option("C", "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      options1.addOptionGroup(optionGroup0);
      options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1280), "C", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "\n");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(" ", "org.apache.commons.cli.OptionValidator", "usage: ").when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultOptPrefix = "Eoasb>n7 z'A";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      MockFile.createTempFile("usage: ", "");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "N#yX #d#^[![");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 73, "", options2);
      helpFormatter0.getOptionComparator();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, "org.apache.commons.cli.OptionGroup");
      helpFormatter0.rtrim("BMQ$o(IF");
      helpFormatter0.setOptPrefix("Eoasb>n7 z'A");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("usage: ", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      Options options1 = new Options();
      Option option0 = new Option("C", "");
      Options options2 = options0.addOption(option0);
      options2.hasOption("C");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      file0.setWritable(false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", options0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2087, "", "arg", options1, (-1), 74, "-", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "\n");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(" ", "org.apache.commons.cli.OptionValidator").when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultOptPrefix = "Eoasb>n7 z'A";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2127, "57c*Kk!(", options0);
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "", "eD8y?/Ipn", options0, 2127, 2127, "org.apache.commons.cli.OptionValidator", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", "arg");
      helpFormatter0.defaultOptPrefix = "oasb>n7 z'A";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      options0.hasOption("@");
      mockFile0.createNewFile();
      options0.toString();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 8, "[ option: ", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("usage: ", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      Options options1 = new Options();
      Option option0 = new Option("C", "");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/usage: 0arg");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "arg");
      options0.hasOption("C");
      char[] charArray0 = new char[1];
      charArray0[0] = 'L';
      mockPrintWriter0.println(charArray0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.printHelp("-", options1, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 5, "C", " ", options1, 1763, 74, "", false);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("usage: ", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      Options options1 = new Options();
      Option option0 = new Option("C", "");
      Options options2 = options0.addOption(option0);
      options2.hasOption("C");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      helpFormatter0.printHelp("-", options1, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-16), "C", "\n", options1, 1763, 74, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 203, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("usage: ", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      Options options1 = new Options();
      Option option0 = new Option("C", "");
      Options options2 = options0.addOption(option0);
      options2.hasOption("C");
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      PrintWriter printWriter0 = mockPrintWriter0.append('U');
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped(printWriter0, 1, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "0\\H67l),^VcA5";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      helpFormatter0.setLongOptPrefix("0H67l),^VcA5");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      helpFormatter0.defaultDescPad = 6;
      helpFormatter0.setSyntaxPrefix("0H67l),^VcA5");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("0H67l),^VcA5", (-2128), 31);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("usage: ", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      Options options1 = new Options();
      Option option0 = new Option("C", "");
      Options options2 = options0.addOption(option0);
      options2.hasOption("C");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      helpFormatter0.printHelp("-", options1, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 5, "C", "\n", options1, 1763, 74, "usage: ", true);
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.setLongOptSeparator("G");
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "\n");
      helpFormatter0.defaultOptPrefix = "oasb>n7 z'A";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("+");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      Options options1 = new Options();
      options0.getOption("Cannot add value, list full.");
      Option option0 = new Option("", false, (String) null);
      options0.addOption(option0);
      helpFormatter0.printHelp("57c*Kk!(", "", options0, "", true);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("cq");
      helpFormatter0.setLongOptSeparator("cq");
      String string0 = "x.B)~sSnTv[4R1";
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.getSyntaxPrefix();
      String string1 = helpFormatter0.defaultLongOptPrefix;
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("\n", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "\n");
      MockFile mockFile0 = new MockFile("arg");
      file0.renameTo(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      Options options1 = new Options();
      options1.hasOption(",=H");
      StringBuffer stringBuffer0 = new StringBuffer("(i>M/FBwU*j];");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      Options options2 = new Options();
      Option option0 = new Option("arg", true, "");
      Options options3 = new Options();
      options3.addOption(option0);
      helpFormatter0.printHelp("@", "", options3, "oasb>n7 z'A", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "", "2QN.07T|L7gii)", options0, "THE^5?TMG9", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile.createTempFile("arg", "\n");
      helpFormatter0.setArgName("yWyQ(jmFyv'iC3.Y?");
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.ParseException");
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Option option0 = new Option("", true, "");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("\n", " CXMX2p}PN|<D", options1, "\n", true);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1), options1, 0, 63);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("usage: ", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      Options options1 = new Options();
      Option option0 = new Option("C", "");
      option0.setType(file0);
      Options options2 = options0.addOption(option0);
      options2.hasOption("C");
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getOptionComparator();
      PrintWriter printWriter0 = mockPrintWriter0.append('T');
      helpFormatter1.printWrapped(printWriter0, 1, "\n");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 271, "usage: ", "yVPI66]C", options0, (-2), 74, "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "\n");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(" ", "org.apache.commons.cli.OptionValidator", "usage: ", (String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultOptPrefix = "Eoasb>n7 z'A";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2127, "57c*Kk!(", options0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.printHelp(9, "57c*Kk!(", "Eoasb>n7 z'A", options0, "57c*Kk!(");
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 373, "&_'x1q", "--", options0, (-700), 9, "@", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("usage: ", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      Options options1 = new Options();
      Option option0 = new Option("C", "");
      Options options2 = options0.addOption(option0);
      options2.hasOption("C");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      helpFormatter0.printHelp("-", options1, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 5, "C", "\n", options1, 1763, 74, "", true);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile.createTempFile("arg", "\n");
      helpFormatter0.setArgName("yWyQ(jmFyv'iC3.Y?");
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.ParseException");
      helpFormatter0.setSyntaxPrefix("x.B)~sSnTv[4R1");
      String string0 = helpFormatter0.defaultArgName;
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Option option0 = new Option((String) null, true, "");
      Options options1 = new Options();
      Options options2 = options0.addOption(option0);
      helpFormatter0.printHelp("org.apache.commons.cli.ParseException", "", options2, "org.apache.commons.cli.ParseException", true);
      String string1 = "q_x$t *Hh";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(" ]", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("usage: ", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      Options options1 = new Options();
      Option option0 = new Option("C", "");
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options2 = options0.addOption(option0);
      options2.hasOption("C");
      StringBuffer stringBuffer0 = new StringBuffer("-");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      Options options3 = new Options();
      Option option1 = new Option("T", false, "");
      Options options4 = new Options();
      options2.addOption(option0);
      helpFormatter0.printHelp("\n", "", options2, "usage: ", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 63, "", "C", options4, 31, 63, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "\n");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(" ", "org.apache.commons.cli.OptionValidator", "usage: ").when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultOptPrefix = "Eoasb>n7 z'A";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Eoasb>n7 z'A");
      Options options0 = new Options();
      options0.hasOption("@");
      mockPrintWriter0.println(false);
      file0.createNewFile();
      options0.toString();
      options0.addOption("arg", "arg", false, "-");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2156, "57c*Kk!(", options0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.printHelp(9, "57c*Kk!(", "Eoasb>n7 z'A", options0, "57c*Kk!(");
      helpFormatter0.getLongOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = new Option("", false, "Eoasb>n7 z'A");
      option0.setArgs(74);
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("@", "-", false, "--");
      options1.addOption(option0);
      helpFormatter1.printHelp("--", "org.apache.commons.cli.OptionValidator", options2, "{<C7w,l4[js", true);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      Options options1 = new Options();
      Option option0 = new Option((String) null, false, "Gt+jJbXEBAv");
      Options options2 = new Options();
      options0.addOption(option0);
      helpFormatter0.printHelp("\n", "\n", options2, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile.createTempFile("arg", "\n");
      helpFormatter0.setArgName("yWyQ(jmFyv$iC3=.Y?");
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.ParseException");
      String string0 = helpFormatter0.defaultArgName;
      String string1 = helpFormatter0.defaultLongOptPrefix;
      Options options0 = new Options();
      Option option0 = new Option((String) null, true, "");
      Options options1 = new Options();
      Options options2 = options0.addOption(option0);
      options0.addOption("", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.ParseException", "", options2, "org.apache.commons.cli.ParseException", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "\n");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(" ", "org.apache.commons.cli.OptionValidator", "usage: ").when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultOptPrefix = "Eoasb>n7 z'A";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      options0.hasOption("X@GtQ-4+Q2G_ARCH.iW");
      options0.toString();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("-");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter2, 1517, "8-R/atz?9Jq$GsE&", options0);
      helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Object[] objectArray0 = new Object[5];
      mockFile0.toPath();
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) helpFormatter0.optionComparator;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) "org.apache.commons.cli.OptionValidator";
      objectArray0[4] = (Object) " ";
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray0);
      helpFormatter1.printWrapped(printWriter0, 1517, "X@GtQ-4+Q2G_ARCH.iW");
      helpFormatter1.rtrim((String) null);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.printOptions(mockPrintWriter2, 3, options0, 124, 2);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      Options options1 = new Options();
      options1.hasOption(",=H");
      StringBuffer stringBuffer0 = new StringBuffer("(i>M/FBwU*j];");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      Options options2 = new Options();
      Option option0 = new Option("arg", true, "");
      Options options3 = options0.addOption(option0);
      options0.addOption("arg", "_", false, "");
      helpFormatter0.printHelp("{<C7w,l4[js", "oasb>n7 z'A", options3, "", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "_", "", options1, "qi~u'vFQ\"J.;t", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getWidth();
      int int0 = 17;
      Options options0 = new Options();
      String string1 = "G_&k1zX=g^d. ";
      Option option0 = new Option((String) null, "G_&k1zX=g^d. ", true, "G_&k1zX=g^d. ");
      Options options1 = options0.addOption(option0);
      helpFormatter0.defaultLongOptPrefix = "G_&k1zX=g^d. ";
      String string2 = "%\"]C0FCn=o";
      // Undeclared exception!
      try { 
        options1.addOption("org.apache.commons.cli.Option", true, "%\"]C0FCn=o");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.Option' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "\n");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(" ").when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultOptPrefix = "Eoasb>n7 z'A";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      options0.hasOption("@");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("Eoasb>n7 z'A", options0, false);
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setDescPadding(1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("", true, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "\n");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(" ", "org.apache.commons.cli.OptionValidator", "usage: ", (String) null).when(comparator0).toString();
      doReturn(0, 0).when(comparator0).compare(anyString() , anyString());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultOptPrefix = "Eoasb>n7 z'A";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      options0.hasOption("@");
      file0.createNewFile();
      options0.toString();
      options0.addOption("arg", "arg", false, "-");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2156, "57c*Kk!(", options0);
      helpFormatter0.getOptionComparator();
      Option option0 = new Option((String) null, false, "arg");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", "57c*Kk!(", options1, (String) null, false);
      file0.deleteOnExit();
      helpFormatter0.rtrim(" ] [ long ");
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      String string0 = "7";
      boolean boolean0 = false;
      String string1 = "m5<I\\q{%A(?-B.LL";
      Options options1 = options0.addOption("7", "a0", false, "m5<Iq{%A(?-B.LL");
      Option option0 = new Option("", "", true, "arg");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2368), "", options3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("yWyQ(jmFyv'iC3.Y?");
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.ParseException");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "-", false, "arg");
      Option option0 = new Option((String) null, "", true, "rdQUD(");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(3473, "A~#49x,PjGs", "", options3, "");
      helpFormatter0.setSyntaxPrefix("x.B)~sSnTv[4R1");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      Options options4 = new Options();
      Option option1 = new Option("", true, "");
      Options options5 = options4.addOption(option1);
      helpFormatter0.printHelp("\n", "arg", options5, "\n", true);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      Options options1 = new Options();
      Option option0 = new Option((String) null, false, "Gt+jJbXEBAv");
      Options options2 = new Options();
      Options options3 = options0.addOption(option0);
      helpFormatter0.printHelp("\n", options3, true);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      helpFormatter0.setArgName("");
      helpFormatter0.setLongOptSeparator("");
      String string0 = "";
      helpFormatter0.setSyntaxPrefix("");
      StringBuffer stringBuffer0 = new StringBuffer("--");
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getNewLine();
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("-", " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "\n");
      Options options0 = new Options();
      helpFormatter0.printHelp("Eoasb>n7 z'A", options0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultOptPrefix = "Eoasb>n7 z'A";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options1 = new Options();
      options1.hasOption("Eoasb>n7 z'A");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options1.addOption("--", true, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      options1.hasOption(",=H");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter1.printHelp("tG#F>3i4T]gHw|", options2, true);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer("/c JZ\"V.M");
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 0, options0, 44, 32);
      String string0 = "(pT#&}y,obx#0cxQ";
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 32, 0, "(pT#&}y,obx#0cxQ");
      helpFormatter0.renderWrappedText(stringBuffer2, 44, 0, "5$K2Gj^>P#MS*,");
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", true, "org.apache.commons.cli.Option");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("G)qzc2z");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = (-258);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "\n");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(" ", "org.apache.commons.cli.OptionValidator", "usage: ").when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultOptPrefix = "oasb>n7 z'A";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      options0.hasOption("@");
      file0.createNewFile();
      options0.toString();
      Options options1 = options0.addOption("arg", "", false, "-");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2156, "57c*Kk!(", options0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.printHelp(9, "57c*Kk!(", "oasb>n7 z'A", options0, "57c*Kk!(");
      helpFormatter0.getLongOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator(helpFormatter0.optionComparator);
      helpFormatter1.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      helpFormatter1.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "yWyQ(jmFyv'iC3.Y?";
      helpFormatter0.setArgName("yWyQ(jmFyv'iC3.Y?");
      String string1 = "org.apache.commons.cli.ParseException";
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.ParseException");
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.ParseException", options0);
      boolean boolean0 = true;
      String string2 = "";
      Option option0 = new Option("", true, "");
      // Undeclared exception!
      try { 
        options0.addOption("-", "\n", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile.createTempFile("arg", "\n");
      helpFormatter0.setArgName("yWyQ(jmFyv'iC3.Y?");
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.ParseException");
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/arg0\n");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Option option0 = new Option("", true, "");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("\n", " CXMX2p}PN|<D", options1, "\n", true);
      helpFormatter0.findWrapPos("yWyQ(jmFyv'iC3.Y?", (-2), 63);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      byteArrayOutputStream0.write(byteArray0, (int) (byte)1, (int) (byte)2);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (int) (byte)0, "");
      helpFormatter0.rtrim(" ");
      helpFormatter0.setOptPrefix("");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("usage: ", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      Options options1 = new Options();
      Option option0 = new Option("C", "");
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options2 = options0.addOption(option0);
      options2.hasOption("C");
      StringBuffer stringBuffer0 = new StringBuffer("-");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      Options options3 = new Options();
      Option option1 = new Option("@", true, "T");
      Options options4 = new Options();
      options2.addOption(option0);
      helpFormatter0.printHelp("T", ",=H", options0, "", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "@", "Cannot add value, list full.", options0, (-1), (-2), "q_x$t *Hh");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "\n");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(" ", "org.apache.commons.cli.OptionValidator", "usage: ").when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultOptPrefix = "Eoasb>n7 z'A";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      options0.hasOption("@");
      file0.createNewFile();
      options0.toString();
      options0.addOption("arg", "", false, "-");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2156, "57c*Kk!(", options0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.printHelp(9, "57c*Kk!(", "Eoasb>n7 z'A", options0, "57c*Kk!(");
      helpFormatter0.getLongOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator(helpFormatter0.optionComparator);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "Eoasb>n7 z'A", 891, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "\n");
      helpFormatter0.defaultOptPrefix = "oasb>n7 z'A";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      options0.hasOption("@");
      file0.createNewFile();
      options0.toString();
      Options options1 = options0.addOption("arg", "", false, "-");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2156, "57c*Kk!(", options0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.printHelp(9, "57c*Kk!(", "oasb>n7 z'A", options0, "57c*Kk!(");
      helpFormatter0.getLongOptPrefix();
      options1.helpOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator(helpFormatter0.optionComparator);
      helpFormatter1.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      helpFormatter1.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte) (-112);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 45, (byte)2, "cQi9l~k/#tW'jD{1;");
      StringBuffer stringBuffer1 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer1, 64, (byte)70, "cQi9l~k/#tW'jD{1;");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      String string0 = "";
      options0.hasOption("57c*Kk!(");
      options0.toString();
      Options options1 = options0.addOption("", "", false, "-");
      helpFormatter0.printHelp(38, "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", "?vQ", options1, "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 38, "", options1);
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "", "", options0, "org.apache.commons.cli.HelpFormatter");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "\n");
      helpFormatter0.defaultOptPrefix = "oasb>n7 z'A";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      String string0 = "57c*Kk!(";
      Options options0 = new Options();
      options0.hasOption("@");
      file0.createNewFile();
      options0.toString();
      options0.addOption("arg", "", false, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "57c*Kk!(", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "\n");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("Eoasb>n7 z'A", "\n").when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultOptPrefix = "Eoasb>n7 z'A";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      String string0 = "";
      options0.hasOption("Eoasb>n7 z'A");
      options0.toString();
      options0.addOption("@", "8-R/atz?9Jq$GsE&", false, " )-?z{s?GgZ1p(M1+u");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 10, "8-R/atz?9Jq$GsE&", options0);
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(32, "", "gg%hG%>+Wx}Vl@m", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.setLongOptSeparator("a-D`");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte) (-112);
      byteArray0[8] = (byte)0;
      byteArrayOutputStream0.write(byteArray0, 3, 0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (int) (byte)0, "");
      helpFormatter0.rtrim("/S");
      helpFormatter0.setOptPrefix(" ");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-609));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("dzTVQN\"4sNh(E,3}~");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 116, 3019, "usage: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      int int0 = 9;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.rtrim("");
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      Options options1 = new Options();
      options1.hasOption(",=H");
      StringBuffer stringBuffer0 = new StringBuffer("(i>M/FBwU*j];");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      Options options2 = new Options();
      Option option0 = new Option("arg", true, "");
      Options options3 = new Options();
      options3.addOption(option0);
      helpFormatter0.printHelp("@", "", options3, "oasb>n7 z'A", true);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "\n");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(" ", "org.apache.commons.cli.OptionValidator", "usage: ").when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultOptPrefix = "Eoasb>n7 z'A";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      options0.hasOption("@");
      options0.toString();
      options0.addOption("arg", "", false, "-");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2127, "57c*Kk!(", options0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.printHelp(9, "57c*Kk!(", "Eoasb>n7 z'A", options0, "57c*Kk!(");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter$OptionComparator");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, options0, 10, (-2032));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "2T U_2G{5";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("2T U_2G{5");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, "");
      int int0 = (-1129);
      String string1 = "G gFO";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1129), "G gFO");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ";
      helpFormatter0.setLongOptPrefix(" ");
      Options options0 = new Options();
      String string1 = ">=RJc5Lc,Uo~q8";
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", "usage: ", false, ">=RJc5Lc,Uo~q8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("cmdLineSyntax not provided");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, (Options) null, 0, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1424), "Cannot add value, list full.", "", (Options) null, " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(file0);
      Options options1 = new Options();
      options0.hasOption("--");
      String string0 = "NO_ARGS_ALLOWED";
      Options options2 = options0.addOption("S_", "", true, "");
      helpFormatter0.printHelp("NO_ARGS_ALLOWED", "NO_ARGS_ALLOWED", options2, "");
      String string1 = "%c*oC";
      Option option0 = null;
      try {
        option0 = new Option("-", "NO_ARGS_ALLOWED", true, "%c*oC");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "<", false, "_?X%");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 2332, options1, 46, 46);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "--", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Option option1 = new Option("arg", false, "");
      optionGroup1.addOption(option1);
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", "tF`L9]iV.", options0, "]", true);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1070;
      helpFormatter0.createPadding(1070);
      helpFormatter0.createPadding(1343);
      helpFormatter0.getLeftPadding();
      helpFormatter0.setWidth(1752);
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      int int1 = 0;
      String string0 = "}Qm";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 0, "}Qm");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.getNewLine();
      MockFile mockFile0 = new MockFile("c^7!", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, "\n", options0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "ius1aOI\\qCvW*&u+?|+";
      String string1 = "6o255(6`wO=!J&";
      Options options0 = new Options();
      options0.hasLongOption("usage: ");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "ius1aOIqCvW*&u+?|+", "6o255(6`wO=!J&", options0, "ius1aOIqCvW*&u+?|+");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("<6Ud}>1~;ope");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      String string0 = "57c*Kk!(";
      Options options0 = new Options();
      String string1 = "@";
      options0.hasOption("Eoasb>n7 z'A");
      options0.toString();
      Options options1 = options0.addOption("", "", false, "");
      options1.getOptionGroups();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3406, "@", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      // Undeclared exception!
      try { 
        options1.addOption("org.apache.commons.cli.Util", false, "<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.Util' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "5$K2Gj^>P#MS*,");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte) (-112);
      byteArray0[8] = (byte)55;
      byteArrayOutputStream0.write(byteArray0, 3, 0);
      String string0 = " ";
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, " ");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "\n");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultOptPrefix = "Eoasb>n7 z'A";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      options0.hasOption("@");
      options0.toString();
      options0.addOption("arg", "", false, "EL\"a/}2Lb");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2127, "57c*Kk!(", options0);
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "57c*Kk!(", "Eoasb>n7 z'A", options0, "57c*Kk!(");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile.createTempFile("arg", "\n");
      helpFormatter0.setArgName("yWyQ(jmFyv'iC3.Y?");
      helpFormatter0.setLongOptSeparator("org.apachJ.commons.cli.ParseException");
      helpFormatter0.setLeftPadding(74);
      helpFormatter0.setSyntaxPrefix("x.B)~sSnTv[4R1");
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Option option0 = new Option("arg", "x.B)~sSnTv[4R1");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("\n", " CXMX2p}PN|<D", options1, "\n", true);
      assertEquals("yWyQ(jmFyv'iC3.Y?", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile.createTempFile("arg", "\n");
      helpFormatter0.setArgName("yWyQ(jmFyv'iC3.Y?");
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.ParseException");
      helpFormatter0.setSyntaxPrefix("x.B)~sSnTv[4R1");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      helpFormatter0.printHelp("A CloneNotSupportedException was thrown: ", (String) null, options0, "org.apache.commons.cli.ParseException", false);
      Option option0 = new Option("fj", false, "");
      Options options1 = options0.addOption(option0);
      options1.getMatchingOptions("ol_5Gg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "\n", options1, "org.apache.commons.cli.ParseException", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Cannot add value, list full.";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(42, "Cannot add value, list full.", "Cannot add value, list full.", (Options) null, "Q");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "]";
      helpFormatter0.setNewLine("]");
      helpFormatter0.rtrim("_{`br&Emhpb");
      StringBuffer stringBuffer0 = new StringBuffer(74);
      int int0 = 1564;
      Options options0 = new Options();
      String string1 = "";
      Options options1 = options0.addOption("", false, " | ");
      // Undeclared exception!
      try { 
        options1.addOption("usage: ", "-", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getOptionComparator();
      int int0 = 0;
      helpFormatter0.setLeftPadding(0);
      String string1 = "";
      Options options0 = new Options();
      Options options1 = options0.addOption("lpMdHU", false, "--");
      options1.getOptions();
      options1.hasOption("");
      options0.addOption("", false, "");
      Option option0 = new Option("", "");
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        options1.addOption("[", "-", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      String string0 = null;
      helpFormatter0.setArgName((String) null);
      int int0 = (-3098);
      String string1 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption((String) null, (String) null, false, " ");
      // Undeclared exception!
      try { 
        options2.addOption("--", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "usage: ";
      helpFormatter0.defaultSyntaxPrefix = "usage: ";
      String string1 = "384GwP{8T[";
      helpFormatter0.setNewLine("384GwP{8T[");
      helpFormatter0.getWidth();
      helpFormatter0.setNewLine("usage: ");
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("384GwP{8T[", "IOM.K");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // IOM.K
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, "");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("", (String) null, true, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 9, options3, 0, 74);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.getLongOptPrefix();
      assertEquals("--", string0);
      
      int int0 = helpFormatter0.getDescPadding();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, int0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getDescPadding();
      String string0 = "qsWdcX$|nQjp";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "qsWdcX$|nQjp", "qsWdcX$|nQjp", (Options) null, "2iyMHz$)", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.setLongOptSeparator("G");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 1, 1, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setArgName(" ");
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1377, "");
      helpFormatter0.setSyntaxPrefix("3[8");
      assertEquals("3[8", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "\"8*'K1(+R\\\\2w";
      helpFormatter0.setSyntaxPrefix("\"8*'K1(+R\\2w");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("--", "\n");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-2));
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'U';
      charArray0[1] = '!';
      charArray0[2] = 'C';
      charArray0[3] = '9';
      charArray0[4] = 'e';
      charArray0[5] = 'y';
      mockPrintStream0.print(charArray0);
      mockPrintStream0.println(3448);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 413, "Cannot add value, list full.");
      helpFormatter0.setLeftPadding((-2));
      int int0 = helpFormatter0.getWidth();
      assertEquals((-2), helpFormatter0.defaultWidth);
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2300), 44, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultNewLine = "";
      String string1 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter$OptionComparator");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }
}
