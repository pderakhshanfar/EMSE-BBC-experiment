/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:27:58 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = null;
      Options options0 = new Options();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-2229);
      int int0 = 10;
      Options options0 = new Options();
      boolean boolean0 = true;
      String string0 = "&L%xY8|:-?F-[!|*?u";
      Option option0 = new Option("arg", "arg", true, "&L%xY8|:-?F-[!|*?u");
      Options options1 = options0.addOption("arg", "arg", true, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", "-", options1, "arg", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", "--", options0, "-");
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.defaultSyntaxPrefix = "\n";
      helpFormatter0.defaultOptPrefix = "J^&7kdX";
      // Undeclared exception!
      helpFormatter0.printHelp(0, "\n", "\n", options0, "J^&7kdX");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "?9kk{7YBs>(l~");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1);
      helpFormatter0.defaultLeftPad = (-1);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("?9kk{7YBs>(l~", options0, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "-");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.defaultWidth = 0;
      Options options1 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp("0ewXt1$d.J", options1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "org.apache.commons.cli.HelpFormatter$1", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("--", "--", options0, "--");
      helpFormatter0.printHelp(1, "\n", "\n", options0, "-");
      helpFormatter0.renderOptions((StringBuffer) null, 1083, options0, 1083, 680);
      helpFormatter0.getNewLine();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "\n", "usage: ", options0, "", false);
      helpFormatter0.setOptPrefix("usage: ");
      Options options1 = options0.addOption((String) null, "\n", false, "org.apache.commons.cli.ParseException");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.toString();
      Option option1 = new Option("arg", true, "usage: ");
      optionGroup0.addOption(option1);
      OptionGroup optionGroup2 = optionGroup0.addOption(option0);
      OptionGroup optionGroup3 = optionGroup2.addOption(option0);
      Options options2 = options0.addOptionGroup(optionGroup3);
      options2.addOption("arg", false, (String) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("_m0/*d>i%a2~");
      PrintStream printStream0 = mockPrintStream0.append('9');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 386, "| ZC4iUgn^s%", options1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      Option option0 = new Option("", "-)C", false, "Cx f##$w)ljvA[)A~#");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("arg", ":%M-<KyDV6uP&/;L", options0, "pnmTXLI,");
      helpFormatter1.findWrapPos("usage: ", 3, 1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(201, "z,}\"El", "z,}\"El", (Options) null, "z,}\"El");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The option '");
      Locale locale0 = Locale.JAPANESE;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 48, "org.apache.commons.cli.OptionGroup", (String) null, options0, 73, (-250), "The option '", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 2, (-2028), " ] [ long ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "?L}w{.'h ");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      options0.addOptionGroup(optionGroup1);
      Option option1 = new Option("", "?L}w{.'h ");
      Options options1 = options0.addOption(option1);
      helpFormatter0.printHelp("?L}w{.'h ", options1, true);
      helpFormatter0.rtrim("ZA");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1159);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Locale locale0 = Locale.JAPANESE;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "line.separator", "line.separator", options0, "-");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setOptPrefix("usage: ");
      String string0 = null;
      Options options1 = options0.addOption((String) null, "\n", true, "org.apache.commons.cli.ParseException");
      String string1 = "";
      helpFormatter0.setNewLine("");
      Options options2 = options1.addOption("", "arg", false, "");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, "usage: ", "arg", options2, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 0, "org.apache.commons.cli.HelpFormatter", "", options0, 1440, 0, "", true);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      Locale locale0 = Locale.GERMANY;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) "W7R%$Fe==(C\"z#X|";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "--", objectArray0);
      helpFormatter0.printUsage(printWriter0, 9, "", options0);
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "\n", "usage: ", options0, "", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setOptPrefix("usage: ");
      Options options1 = options0.addOption((String) null, "\n", true, "org.apache.commons.cli.ParseException");
      PrintWriter printWriter0 = null;
      Options options2 = options1.addOption("", "arg", false, "");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, "usage: ", "arg", options2, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("31UT", false, "4W3t4q>");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp("4W3t4q>", "4W3t4q>", options2, "4W3t4q>");
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      String string0 = "\\a^-!ezkZ&O>0's";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("a^-!ezkZ&O>0's", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 102, "B)Q(vvT*m", "u''_#@8(-DMNQf%m", options0, 117, 117, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      Option option0 = new Option("arg", "-");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", "-", false, " ");
      options2.addOption(option0);
      options2.getMatchingOptions("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string1 = "<,Kj9U6$X";
      helpFormatter1.setWidth((-1156));
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("<,Kj9U6$X", (Options) null, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "   ");
      helpFormatter0.printHelp("Illegal option name '", options0, false);
      Options options1 = new Options();
      helpFormatter0.printHelp(1, "   ", "Illegal option name '", options1, "Illegal option name '");
      helpFormatter0.rtrim("   ");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "\n", "usage: ", options0, "", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setOptPrefix("usage: ");
      helpFormatter1.printHelp("--", "--", options0, "arg", false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Options options1 = new Options();
      helpFormatter1.setDescPadding(3);
      helpFormatter0.getOptionComparator();
      int int0 = 117;
      helpFormatter0.defaultLeftPad = 117;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 117, "usage: ", options0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 676, (String) null, "ahxvt QoE&e", options0, 117, 3463, "org.apache.commons.cli.AlreadySelectedException", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      stringWriter0.close();
      int int0 = 32;
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 32, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("", true, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-17));
      MockPrintStream mockPrintStream0 = new MockPrintStream("Uo1H+{+[;y[]Ib;5`F");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      Options options2 = new Options();
      helpFormatter0.setDescPadding(1882);
      helpFormatter0.getOptionComparator();
      options1.addOption((String) null, true, "Uo1H+{+[;y[]Ib;5`F");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1539), "|bCsyl#- '1#@R[x;}", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      options0.getMatchingOptions("");
      options1.getMatchingOptions("");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp(" ", "--", options0, "", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 37, "k#X+u;|0|*y5Nnny=Sx", "arg", options1, 1, 3, "usage: ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("\n");
      MockFile mockFile0 = new MockFile("o#~\"T$U7j[5CYUX");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      mockFileOutputStream0.flush();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("arg");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 74, "--");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter2, 74, " ]", "-QfTt6kzLqL$b6", options0, 74, 1465, "\n", true);
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter2, 2515, "", " ", options0, 3, 554, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", " ", false, (String) null);
      helpFormatter0.printHelp("9_k>Z9;PTz", " ", options1, "", false);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-3738), "*[:Qh6V#W", "dq3QlP-", options0, "9@soe", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      options0.getMatchingOptions("");
      options1.getMatchingOptions("");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options2 = options0.addOption((String) null, true, (String) null);
      helpFormatter1.printHelp("oQd-Cs+`", "", options2, (String) null, true);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-995), "oQd-Cs+`", (String) null, options1, "usage: ", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setArgName("");
      String string1 = "";
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setLongOptPrefix("");
      int int0 = 360;
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("c", "c");
      option0.setValueSeparator('\"');
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      options0.hasShortOption("c");
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      options0.addOption("arg", "--", true, "--");
      Options options1 = new Options();
      helpFormatter0.setDescPadding((-1));
      helpFormatter0.getOptionComparator();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1884), "c", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("", true, "");
      MockFile mockFile0 = new MockFile("", " N:e");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 64, "0~]s|(J.q");
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(printWriter0, 370, "--", " ", options1, 1, 3, "arg", true);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      Options options0 = new Options();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 36, "arg", "usage: ", options0, (-1), 1465, "6{R`", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "?L}w{.'h ");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Option option1 = new Option("y", "", false, "<V\"tE_[");
      Options options1 = options0.addOption(option1);
      OptionGroup optionGroup2 = optionGroup1.addOption(option1);
      Options options2 = options1.addOptionGroup(optionGroup2);
      options2.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(" ", (String) null, options1, ">gE9;\u0005 +f~v1>", true);
      helpFormatter1.printHelp(74, "--", "<", options0, ">e=K`4s\"j_|_4}cUk", true);
      OptionGroup optionGroup3 = new OptionGroup();
      helpFormatter0.setDescPadding((-3161));
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(">e=K`4s\"j_|_4}cUk", options1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      MockFile mockFile0 = new MockFile("o#~\"T$U7j[5CYUX");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      mockFileOutputStream0.flush();
      PrintWriter printWriter0 = mockPrintWriter0.append('');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped(printWriter0, 74, "");
      helpFormatter1.getLongOptSeparator();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 74, " ]", "j-QfTt6kzLqo$b6", options0, 74, 1465, ">", true);
      helpFormatter1.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 2515, "", " ", options0, 3, 554, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, true, "-");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOption((String) null, true, "\n");
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.addOption(option0);
      helpFormatter0.printHelp("9WtC~wl}RO", options2, true);
      Options options3 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((-1), "#", "usage: ", options3, "g1l<\"c&IC");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("KDLlSS>;");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('j');
      mockFile0.createNewFile();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printWrapped(printWriter0, 36, "");
      helpFormatter0.getLongOptSeparator();
      int int0 = (-1260);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 36, "", "3uHs!Ki.c xA|NHn$", options0, (-1260), (-1260), "usage: ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = new Options();
      Option option0 = new Option("c", "c");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options2 = options1.addOption("arg", "--", true, "--");
      options2.addOption(option0);
      helpFormatter0.printHelp("c", options2, false);
      Options options3 = new Options();
      optionGroup0.toString();
      Options options4 = options1.addOption("", "", false, "");
      optionGroup0.toString();
      helpFormatter0.printHelp(63, "c", "zZ", options4, "", true);
      helpFormatter0.rtrim("zZ");
      helpFormatter0.findWrapPos("*&aIr&", (-1), 63);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("v$/\"M", "v$/\"M", options0, "v$/\"M");
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.printHelp("v$/\"M", options0);
      String string0 = "3EB5`*(D 5Y6R}\"1";
      MockPrintStream mockPrintStream0 = new MockPrintStream("3EB5`*(D 5Y6R}\"1");
      PrintStream printStream0 = mockPrintStream0.append('a');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      int int1 = 83;
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "v$/\"M", "]gBXv!1rZj\"Hbm", options0, 83, 83, "oLRQQm8q9?6xum");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("xn<QgJDI6f$Ij");
      MockFile mockFile0 = new MockFile("KDLlSS>;");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('z');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 74, "KDLlSS>;");
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "j>HHuoHgcs.(T>=t5", "a*", options0, 3, 1, "arg", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[2];
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("", true, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("Uo1H+{+[;y[]Ib;5`F");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1882, "", options1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1882, "", "", options0, 1882, 1882, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "?L}w{.'h ");
      helpFormatter0.defaultLeftPad = (-1);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Q9M5K%+)LW3", "?L}w{.'h ", options0, "%5-9nv-GpJ3!_");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      helpFormatter0.setDescPadding(2825);
      helpFormatter0.defaultOptPrefix = "usage: ";
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 123, 2558);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 3628;
      helpFormatter0.createPadding(3628);
      Options options0 = new Options();
      String string0 = null;
      options0.getOptions();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")I.W!NO`IB2^/YJ~\"XV");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('w');
      String string1 = HelpFormatter.DEFAULT_OPT_PREFIX;
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2);
      helpFormatter0.printOptions(mockPrintWriter0, 10, options0, 0, 76);
      Options options1 = options0.addOption((String) null, true, "\n");
      String string2 = "@K+-7}$I#ZRTiTU6*A";
      options1.toString();
      // Undeclared exception!
      try { 
        options1.addOption("@K+-7}$I#ZRTiTU6*A", "arg", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '@K+-7}$I#ZRTiTU6*A' contains an illegal character : '@'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.flush();
      StringWriter stringWriter1 = stringWriter0.append('q');
      stringWriter1.flush();
      Options options0 = new Options();
      options0.getMatchingOptions(" | ");
      options0.getMatchingOptions(" ");
      Options options1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" | ", " | ", (Options) null, "=LY1>YSs~I", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.rtrim("Q\"j,eY:_MVJ,~2Aqy:");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("NC~3", "il!uU AEH;vb+VCg#", options0, "NC~3");
      helpFormatter0.printHelp(55, "[ARG...]", "#fm&{wAP%ca", options0, "Qm9mf,Y|C!N");
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.flush();
      StringWriter stringWriter1 = stringWriter0.append('`');
      stringWriter1.flush();
      Options options0 = new Options();
      options0.getMatchingOptions("usage: ");
      options0.getMatchingOptions("");
      helpFormatter0.printHelp(9, "=pO(^", "=pO(^", options0, "", false);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setSelected((Option) null);
      optionGroup0.toString();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.setDescPadding((-454));
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 9, "");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.flush();
      StringWriter stringWriter1 = stringWriter0.append('`');
      stringWriter1.flush();
      Options options0 = new Options();
      options0.getMatchingOptions("usage: ");
      options0.getMatchingOptions("");
      helpFormatter0.printHelp("=pO(^", "=pO(^", options0, "", true);
      helpFormatter0.printHelp(9, "=pO(^", "=pO(^", options0, "", false);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.setDescPadding(32);
      helpFormatter0.getOptionComparator();
      helpFormatter0.printHelp("[ option: ", options1);
      String string0 = " SBrWCk:[<MAhIMy";
      File file0 = MockFile.createTempFile(" SBrWCk:[<MAhIMy", "-");
      MockFile mockFile0 = new MockFile(file0, "-");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 1, "   ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getMatchingOptions("org.apache.commons.cli.AlreadySelectedException");
      Option option0 = new Option("arg", "arg", false, "&L%xYf|:-?F1[!~*?u");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", "_o0UI<nwUlhqS\"eqn", options1, "", true);
      helpFormatter0.printHelp(58, "org.apache.commons.cli.AlreadySelectedException", "", options0, (String) null, false);
      OptionGroup optionGroup1 = new OptionGroup();
      OptionGroup optionGroup2 = new OptionGroup();
      optionGroup2.toString();
      Options options2 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.setDescPadding(1733);
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, (-1), options2, 9, 396);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.flush();
      StringWriter stringWriter1 = stringWriter0.append('`');
      stringWriter1.flush();
      Options options0 = new Options();
      options0.getMatchingOptions("usage: ");
      options0.getMatchingOptions("");
      helpFormatter0.printHelp("=pO(^", "=pO(^", options0, "", true);
      helpFormatter0.printHelp(9, "=pO(^", "=pO(^", options0, "", false);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.setDescPadding((-454));
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      Option option0 = new Option("arg", "-");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", "-", false, " ");
      options2.addOption(option0);
      options2.getMatchingOptions("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string1 = "<,Kj9U6$X";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("<,Kj9U6$X", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "\"";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Options options0 = new Options();
      helpFormatter0.printHelp("\"", "\"", options0, "\"", true);
      String string1 = "";
      helpFormatter0.rtrim("");
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "org.apache.commons.cli.HelpFormatter", true, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.addOption("", true, "");
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-454), "$8]a4~<");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Locale locale0 = Locale.JAPANESE;
      File file0 = MockFile.createTempFile("{Pg=L$G&dZ}{R=", "arg", (File) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[0];
      mockPrintWriter1.printf(locale0, "arg", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      String string0 = "";
      String string1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-455), (String) null, "--", options1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Locale locale0 = Locale.JAPANESE;
      StringWriter stringWriter0 = new StringWriter(34);
      StringWriter stringWriter1 = stringWriter0.append('`');
      stringWriter1.write(34);
      StringWriter stringWriter2 = stringWriter1.append('<');
      stringWriter2.flush();
      Options options0 = new Options();
      options0.getMatchingOptions("arg");
      options0.getMatchingOptions("l7g7G/M(6j)8Us,ddaI");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "l7g7G/M(6j)8Us,ddaI");
      helpFormatter0.printHelp("xZY'P&v!W0DIt", "", options0, "$)^*%e:", false);
      helpFormatter0.printHelp(73, "l7g7G/M(6j)8Us,ddaI", " | ", options0, "I&k", false);
      // Undeclared exception!
      helpFormatter0.printHelp(0, " | ", "$)^*%e:", options0, "");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "org.apache.commons.cli.HelpFormatter", true, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup2);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "~D", "", options1, "]_;>vqg);L");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "usage: ");
      Options options2 = options1.addOption("", "arg", false, "XM:");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "usage: ", "arg", options2, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.flush();
      stringWriter0.flush();
      stringWriter0.append('7');
      StringBuffer stringBuffer0 = new StringBuffer(3);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3247, 10, "   ");
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer1, 3595, options0, 108, 108);
      helpFormatter0.setLongOptPrefix("%EiG;S-{Mcc!l");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.flush();
      StringWriter stringWriter1 = stringWriter0.append('m');
      int int0 = 0;
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "usage: ", 0, 0);
      stringWriter1.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, true);
      mockPrintWriter0.checkError();
      int int1 = (-2);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "\n", "usage: ", options0, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1829, "pNsfXRZWSE", "pNsfXRZWSE", (Options) null, 1829, 1829, "pNsfXRZWSE");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.flush();
      stringWriter0.append('m');
      StringBuffer stringBuffer0 = new StringBuffer(74);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 19, 1, "--");
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer1, 10, options0, 3280, 3280);
      helpFormatter0.setLongOptPrefix("arg");
      helpFormatter0.setDescPadding(3280);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "}gec4!iGiY,9aT";
      helpFormatter0.createPadding(6);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.flush();
      stringWriter0.append('m');
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.renderWrappedText(stringBuffer0, 10, 3247, "   ");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 118, options0, (-4712), 3247);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.flush();
      StringWriter stringWriter1 = stringWriter0.append('`');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "usage: ", 0, 0);
      stringWriter1.flush();
      stringWriter1.flush();
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-3209), (-157), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.flush();
      StringWriter stringWriter1 = stringWriter0.append('`');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "usage: ", 0, 0);
      stringWriter1.flush();
      stringWriter1.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, true);
      Options options0 = new Options();
      options0.getMatchingOptions("usage: ");
      options0.getMatchingOptions("-");
      helpFormatter0.printHelp("=pO(^", "=pO(^", options0, "", true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "!<@T-S5`_", "!<@T-S5`_", options0, 74, 74, "");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.flush();
      StringWriter stringWriter1 = stringWriter0.append('`');
      stringWriter1.append((CharSequence) "usage: ", 0, 0);
      stringWriter1.flush();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions(";Jak;L+glN+eGNry/");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "IcQ:t@ZgoDk8\"l,", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter1.printHelp(2381, "arg", " | ", options1, "-", false);
      OptionGroup optionGroup2 = optionGroup0.addOption(option0);
      Options options2 = options0.addOptionGroup(optionGroup2);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "-", "]_;>vqg);L", options2, "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "2 c|*dB?dukQ>t";
      helpFormatter0.defaultOptPrefix = "2 c|*dB?dukQ>t";
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options0 = new Options();
      boolean boolean0 = true;
      options0.getMatchingOptions("arg");
      Options options1 = options0.addOption((String) null, "2 c|*dB?dukQ>t", true, "arg");
      helpFormatter0.renderOptions(stringBuffer0, 105, options1, 3, 3);
      int int0 = (-2391);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2651));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.flush();
      StringWriter stringWriter1 = stringWriter0.append('`');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "usage: ", 0, 0);
      stringWriter1.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, true);
      mockPrintWriter0.checkError();
      StringWriter stringWriter3 = stringWriter0.append('7');
      stringWriter3.flush();
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("xIO2p", "QT", (Options) null, "QT");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "org.apache.commons.cli.HelpFormatter", true, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption("", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 1, "~D", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.flush();
      StringWriter stringWriter1 = stringWriter0.append('m');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "usage: ", 0, 0);
      stringWriter1.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator0);
      helpFormatter1.getLeftPadding();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, "' contains an illegal character : '", "-", options0, "\n", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "usage: ", true, "-");
      StringBuffer stringBuffer0 = new StringBuffer(0);
      helpFormatter0.renderOptions(stringBuffer0, 42, options1, 0, 0);
      helpFormatter0.setLongOptPrefix("~D");
      helpFormatter0.setDescPadding(1033);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.flush();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
      int int0 = 10;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 10, 1219, "}r");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.flush();
      StringWriter stringWriter1 = stringWriter0.append('`');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "usage: ", 0, 0);
      stringWriter1.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, true);
      mockPrintWriter0.checkError();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions(";Jak;L+glN+eGNry/");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "IcQ:t@ZgoDk8\"l,", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup1.setRequired(true);
      helpFormatter1.printHelp("--", options1, false);
      Options options2 = new Options();
      Options options3 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "@{:%qnSe", options3, "\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("", (-2), 6);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "QT", options0, "QT");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(9);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "=%nrs", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "org.apache.commons.cli.HelpFormatter", true, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      String string0 = null;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "]AHqm59-O,rlL", (String) null, options2, "org.apache.commons.cli.HelpFormatter", true);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.flush();
      String string0 = " ]";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "arg", true, "B\"\fEYBNF%A");
      Option option0 = new Option("arg", "-");
      Options options3 = options2.addOption(option0);
      Options options4 = options3.addOption("", true, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      options4.hasOption("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      String string1 = "rV18";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ]");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = objectArray0[0];
      objectArray0[2] = (Object) stringWriter0;
      mockPrintWriter1.format("\n", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2), "B\"\fEYBNF%A", "", options2, (-82), (-4274), " ]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption(" ]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("rV18");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "rV18";
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintWriter1;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "rV18";
      objectArray0[6] = (Object) mockPrintWriter1;
      objectArray0[7] = (Object) mockPrintWriter1;
      objectArray0[8] = (Object) "gQqO*uz{'!#|RS;f";
      String string0 = "";
      mockPrintWriter0.print("\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1324), "gQqO*uz{'!#|RS;f", "", options0, "gQqO*uz{'!#|RS;f", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('A');
      stringWriter1.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 0, (Options) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.flush();
      StringWriter stringWriter1 = stringWriter0.append('`');
      int int0 = (-187);
      String string0 = "";
      Options options0 = new Options();
      String string1 = "' contains an illegal character : '";
      helpFormatter0.setDescPadding(2);
      String string2 = "";
      boolean boolean0 = true;
      MockFile mockFile0 = new MockFile("r*rXSxy (-W?QW");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) stringWriter1;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "kih";
      objectArray0[5] = (Object) mockFile0;
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) stringWriter0;
      objectArray0[8] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf("kih", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 3304, "[", "", options0, 2, (-187), "[ option: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.flush();
      StringWriter stringWriter1 = stringWriter0.append('`');
      stringWriter1.append((CharSequence) "usage: ", 0, 0);
      stringWriter1.flush();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions(";Jak;L+glN+eGNry/");
      Option option0 = new Option("arg", "IcQ:t@ZgoDk8\"l,", true, "");
      helpFormatter1.printHelp(1659, "\n", "has already been selected: '", options0, "", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 58, "", "arg", options0, 74, 0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "");
      Options options1 = options0.addOption(option0);
      options0.getMatchingOptions("J_zp1");
      helpFormatter0.printHelp("?L}w{.'h ", options1, true);
      Options options2 = new Options();
      helpFormatter0.printHelp("?L}w{.'h ", "?L}w{.'h ", options2, "?L}w{.'h ", false);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLeftPadding();
      helpFormatter0.printHelp(32, "-", "", options0, "", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1, "", "!<@T-S5`_", options1, (-1), 74, "J_zp1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 32;
      String string0 = "";
      helpFormatter0.setNewLine("");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 32, 5621, "f|V.yKk%gt:=hUK64=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      String string0 = "IVw'?ILzcR2,l1%1\\B";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", (Options) null, "IVw'?ILzcR2,l1%1B", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", (-2), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", (-2), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.getArgName();
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        stringBuffer0.insert(446, (CharSequence) "arg", 1, 74);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset 446
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setLongOptPrefix("usage: ");
      StringWriter stringWriter0 = new StringWriter(360);
      StringWriter stringWriter1 = stringWriter0.append('A');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 360, (Options) null, 360, (-3489));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.flush();
      StringWriter stringWriter1 = stringWriter0.append('`');
      int int0 = 0;
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "usage: ", 0, 0);
      stringWriter1.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, true);
      mockPrintWriter0.checkError();
      String string0 = "#2,I:qM%g075{fSjiH";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "#2,I:qM%g075{fSjiH");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setDescPadding(1323);
      helpFormatter0.defaultOptPrefix = "(.zg#pu brtv";
      helpFormatter0.setLeftPadding(3138);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setArgName("-");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      String string0 = "juMF%c@;03Z";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", "", true, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("]");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append('!');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      Locale locale0 = Locale.ENGLISH;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) printStream0;
      objectArray0[2] = (Object) "]";
      objectArray0[3] = (Object) printStream0;
      objectArray0[4] = (Object) mockFile0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) printStream0;
      objectArray0[7] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, (-2034), options0, 0, (-2034));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0, true);
      printWriter0.checkError();
      int int0 = 6;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 6, "");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "NMBPr<Q-9}gA", options0, "tw!4Bv!Zj.=3tT2", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption(" ]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("rV18");
      Options options1 = new Options();
      helpFormatter0.printHelp(" ]", "rV18", options0, "-w5_Ux2' cT+#0w$");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = new Options();
      Option option0 = new Option("c", "c");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options2 = options1.addOption("arg", "--", true, "--");
      helpFormatter0.printHelp("c", options2, false);
      Options options3 = new Options();
      optionGroup0.toString();
      int int0 = 63;
      String string0 = "";
      Options options4 = options1.addOption("", "", false, "");
      optionGroup0.toString();
      helpFormatter0.printHelp(63, "c", "zZ", options4, "", true);
      OptionGroup optionGroup1 = new OptionGroup();
      optionGroup0.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.flush();
      StringWriter stringWriter1 = stringWriter0.append('`');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "usage: ", 0, 0);
      stringWriter1.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, true);
      mockPrintWriter0.checkError();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "zq$5z^X?XJyg:B4|@", false, "}'d35]\"");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", "[ARG...]", false, "");
      Options options3 = options2.addOption(option0);
      Options options4 = options3.addOption("", true, "arg");
      helpFormatter1.printHelp("QT", "org.apache.commons.cli.Util", options4, "");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("Uv$/\"M", "Uv$/\"M", options0, "Uv$/\"M");
      Option option0 = new Option((String) null, "arg", false, "usage: ");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("org.apache.commons.cli.OptionValidator", "", options1, (String) null, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "p", "tb?", options1, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("org.apache.commons.cli.HelpFormatter$1", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "org.apache.commons.cli.HelpFormatter$1";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) file0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 3778, 3778, "   ");
      Options options0 = new Options();
      String string0 = "   ";
      Option option0 = null;
      try {
        option0 = new Option("   ", "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '   ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      int int0 = 10;
      String string0 = ".8*5h6?Yt8v#";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 10, 10, ".8*5h6?Yt8v#");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption(" ]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("rV18");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "rV18";
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintWriter1;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "rV18";
      objectArray0[6] = (Object) mockPrintWriter1;
      objectArray0[7] = (Object) mockPrintWriter1;
      helpFormatter0.getLeftPadding();
      helpFormatter0.printHelp(32, "\"kYE&5", "rV18", options0, (String) null, false);
      int int0 = 77;
      String string0 = "S^=";
      String string1 = null;
      // Undeclared exception!
      try { 
        options0.addOption("\n", false, "Illegal option name '");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "");
      Options options1 = options0.addOption(option0);
      options0.getMatchingOptions("J_zp1");
      helpFormatter0.printHelp("?L}w{.'h ", options1, true);
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "?L}w{.'h ", options2, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.flush();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "=%nrs", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "org.apache.commons.cli.HelpFormatter", true, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption("", true, "");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 0, "~D", options3);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("arg", (Object[]) null);
      Options options0 = new Options();
      helpFormatter0.printUsage(printWriter0, 685, "a:dYcD>=!R&S_/;", options0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "?L}w{.'h ";
      Options options0 = new Options();
      Option option0 = new Option("", "");
      Options options1 = options0.addOption(option0);
      options0.getMatchingOptions("J_zp1");
      helpFormatter0.printHelp("?L}w{.'h ", options1, true);
      Options options2 = new Options();
      helpFormatter0.printHelp("?L}w{.'h ", "?L}w{.'h ", options2, "?L}w{.'h ", false);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(32, "", "", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "QT");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "4_?Yj0gcj4f~a8HlEKA", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-1), "org.apache.commons.cli.OptionGroup");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getWidth();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      int int0 = (-2433);
      // Undeclared exception!
      try { 
        mockPrintStream0.append((CharSequence) "arg", (-2433), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1713;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1713, "9QG4%(<!8K;");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
      String string0 = "";
      MockFile mockFile0 = new MockFile("A CloneNotSupportedException was thrown: ", "");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, " ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "c.t2B;-^I8O]%";
      helpFormatter0.setArgName("");
      helpFormatter0.setArgName("cmdLineSyntax not provided");
      int int0 = 2568;
      String string0 = null;
      String string1 = "org.apache.commons.cli.ParseException";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("ixzJ\"9Iw-)!!.", " ", false, "cmdLineSyntax not provided");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'ixzJ\"9Iw-)!!.' contains an illegal character : '\"'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "gQqO*uz{'!#|RS;f";
      Options options0 = new Options();
      options0.hasOption(" ]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("rV18");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "rV18";
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintWriter1;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "rV18";
      objectArray0[6] = (Object) mockPrintWriter1;
      objectArray0[7] = (Object) mockPrintWriter1;
      objectArray0[8] = (Object) "gQqO*uz{'!#|RS;f";
      PrintWriter printWriter0 = mockPrintWriter1.format("usage: ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 44, "[", " ]", options0, (-82), 1, " ]");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option(";`&xhl~YoY,SXO", "\n", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ';`&xhl~YoY,SXO' contains an illegal character : ';'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("89uXD");
      helpFormatter0.getDescPadding();
      int int0 = 0;
      String string0 = "#%6~Ba]0x7@-?2`";
      String string1 = "lDGpO|u-)]?(r";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("#%6~Ba]0x7@-?2`", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '#%6~Ba]0x7@-?2`' contains an illegal character : '#'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
