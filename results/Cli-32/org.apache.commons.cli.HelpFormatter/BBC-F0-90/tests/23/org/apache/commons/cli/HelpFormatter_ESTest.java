/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:28:21 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1016));
      helpFormatter0.defaultArgName = "[";
      Options options0 = new Options();
      Option option0 = new Option("", true, "[");
      options0.addOption(option0);
      options0.getOptions();
      options0.getMatchingOptions("B+y");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(31, "has already been selected: '", (String) null, options0, (String) null, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      boolean boolean0 = true;
      Option option0 = new Option("arg", true, "arg");
      option0.setArgName("\n");
      options0.addOption(option0);
      helpFormatter1.defaultWidth = (-2);
      PrintWriter printWriter0 = null;
      helpFormatter1.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(" ", options0, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = new Option("arg", true, "arg");
      option0.setArgName("\n");
      StringBuffer stringBuffer0 = new StringBuffer(3);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringBuffer stringBuffer1 = new StringBuffer("");
      Options options1 = options0.addOption(option0);
      PrintWriter printWriter0 = null;
      int int0 = 3;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 3, options1, 74, 33);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-323));
      helpFormatter0.setLeftPadding((-323));
      helpFormatter0.getOptPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.getWidth();
      helpFormatter0.findWrapPos("-", 15, 15);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      boolean boolean0 = true;
      String string0 = "";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = new Option("arg", true, "arg");
      option0.setArgName("\n");
      StringBuffer stringBuffer0 = new StringBuffer(3);
      StringBuffer stringBuffer1 = new StringBuffer("'-9Fk<$!ZH7S{fj<,");
      options0.addOption(option0);
      String string0 = "org.apache.commons.cli.OptionGroup";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 44, "org.apache.commons.cli.OptionGroup", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("/Mjw[UQ7", "", (Options) null, "/Mjw[UQ7");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = new Option("arg", true, "arg");
      option0.setArgName("\n");
      StringBuffer stringBuffer0 = new StringBuffer(3);
      StringBuffer stringBuffer1 = new StringBuffer("");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1, "&s{", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-425));
      String string0 = "Zf2uTbBKV6q!gt,)?>";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Zf2uTbBKV6q!gt,)?>", options0, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "-", true, "usage: ");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 102, options0, 96, 2449);
      helpFormatter1.renderWrappedText(stringBuffer1, 3, (-2), "-");
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 3, (-448), "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.rtrim((String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      int int0 = 4;
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("-", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.defaultDescPad = 0;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("usage: ");
      String string0 = "usag: ";
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "usag: ");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      helpFormatter0.rtrim("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Vb;");
      Locale locale0 = Locale.forLanguageTag("vZ5(0;0^I\"V");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "--", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "$c-$_#^,J%y}}", false, "--");
      Options options2 = options1.addOption("", false, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-3508), "' contains an illegal character : '", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Locale locale0 = Locale.GERMAN;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 58, "xlRpgm+cAw(x]m3<gQ+", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.defaultOptPrefix = "5=@;OkDl,6Dq0 >yDVJb";
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasShortOption("5=@;OkDl,6Dq0 >yDVJb");
      Option option0 = new Option("arg", "-", true, "usage: ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      option0.setArgName("");
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = new StringBuffer("\n");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) stringBuffer1);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "Yo!n[F6n606=@u=<8T", options1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      Option option0 = new Option("do", "[ARG.X..]");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      options0.addOptionGroup(optionGroup2);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2687, "");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Locale locale0 = new Locale("arg", "*");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) "*";
      objectArray0[7] = (Object) locale0;
      objectArray0[8] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 1092, 1092, "*");
      helpFormatter0.createPadding(0);
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "-", "TPzJ`n9", options0, 2916, 31, (String) null, true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter2.renderOptions(stringBuffer0, 1, options0, (-261), 63);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.getLongOptPrefix();
      String string1 = "";
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setOptPrefix("V-f4ZOyu~IMEHc1^");
      int int0 = 106;
      helpFormatter0.findWrapPos("Z[Y/V", 106, 106);
      helpFormatter0.getSyntaxPrefix();
      String string2 = " | ";
      MockFile mockFile0 = new MockFile(" | ");
      String string3 = "?T4`(LtLq";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "?T4`(LtLq");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // ?T4`(LtLq
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      options0.hasLongOption("--");
      String string1 = "";
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-1602), options0, 21, 2095);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("<");
      Options options0 = new Options();
      options0.hasLongOption("arg");
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter0.renderOptions(stringBuffer0, 1, options0, 18, 1);
      helpFormatter0.printHelp("usage: ", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.setArgName("--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      mockPrintWriter1.append((CharSequence) "-");
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 1202, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "4kiqg";
      // Undeclared exception!
      helpFormatter0.printHelp(0, ";HP|fUW,pTz", " cvcj~u_'iHEf", options1, "", false);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.defaultOptPrefix = "5=@;OkDl,6Dq0 >yDVJb";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasShortOption("5=@;OkDl,6Dq0 >yDVJb");
      Option option0 = new Option("arg", "-", true, "usage: ");
      optionGroup0.addOption(option0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter1.defaultArgName = "";
      option0.setArgName("");
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 123, 32, "usage: ");
      mockPrintWriter0.append((CharSequence) stringBuffer1);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter1.printHelp(32, "arg", "JbZx~it\"zhyqqR", options1, "\n");
      helpFormatter1.getNewLine();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      Option option0 = new Option("do", "[ARG...]");
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(byteArrayOutputStream0, true);
      Options options2 = options1.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 630, "{JX9+1mICP!UE)", options2);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.defaultOptPrefix = "5=@;OkDl,6Dq0 >yDVb";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", (String) null, true, "usage: ");
      optionGroup0.addOption(option0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter1.defaultArgName = "";
      optionGroup0.setRequired(true);
      option0.setArgName("");
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 123, 32, "usage: ");
      mockPrintWriter0.append((CharSequence) stringBuffer1);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("cmdLineSyntax not provided", "wTt;", options0, "", true);
      OptionGroup optionGroup2 = new OptionGroup();
      Option option1 = new Option("", (String) null);
      OptionGroup optionGroup3 = new OptionGroup();
      options0.addOptionGroup(optionGroup3);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "^$/TI!K>tG9NC6@HQA", "wTt;", options1, 1, (-1), "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("'&<m6PK:WEA+");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, false);
      mockPrintWriter0.append((CharSequence) "'&<m6PK:WEA+");
      Options options1 = new Options();
      Option option0 = new Option("", "\n");
      Options options2 = options1.addOption(option0);
      int int0 = 860;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter1, (-2), options2, 860, 81);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 243;
      helpFormatter0.setWidth(243);
      String string0 = "EjdQE%lNT}ie";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("EjdQE%lNT}ie", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.defaultOptPrefix = "5=@;OkDl,6Dq0 >yDVb";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", (String) null, true, "usage: ");
      optionGroup0.addOption(option0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter1.defaultArgName = "";
      option0.setArgName("");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("cmdLineSyntax not provided", "wTt;", options0, "", true);
      OptionGroup optionGroup2 = new OptionGroup();
      Option option1 = new Option("", (String) null);
      OptionGroup optionGroup3 = new OptionGroup();
      options0.addOptionGroup(optionGroup3);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 2963, "^$/TI!K>tG9NC6@HQA", "wTt;", options1, 1, (-1), "--");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 113, "-", "'Ell{QN]", options0, 113, 113, "'Ell{QN]", false);
      helpFormatter0.printHelp(6, "*Ie39oY}0aJ Bkj", "-", options0, "");
      helpFormatter0.getNewLine();
      helpFormatter0.getOptionComparator();
      helpFormatter0.renderOptions((StringBuffer) null, 6, options0, 111, 0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-1), 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("wQ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2032, " ", (String) null, options1, 2032, (-1186), "org.apache.commons.cli.Option", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("wQ");
      Options options0 = new Options();
      Option option0 = new Option("do", "[ARG...]");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", true, "rT4S#!8");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "bj", "   ", options2, "rT4S#!8", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("<");
      Options options0 = new Options();
      options0.hasLongOption("arg");
      helpFormatter0.printHelp("<", "", options0, "<", false);
      helpFormatter0.printHelp("usage: ", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("C");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "-");
      helpFormatter1.printOptions(printWriter0, 1202, options0, 11, 81);
      helpFormatter0.printHelp(330, "R`yI[M!k!%*,ecCC", "R`yI[M!k!%*,ecCC", options0, "C", false);
      helpFormatter1.rtrim((String) null);
      Option option0 = null;
      try {
        option0 = new Option(" ", false, "4@ru");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      int int0 = 44;
      Options options0 = new Options();
      stringBuffer0.append(1.0F);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.renderOptions(stringBuffer0, 44, options0, 44, 3212);
      String string0 = "";
      File file0 = MockFile.createTempFile("usage: ", "-");
      try { 
        MockFile.createTempFile("usage: ", "", file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.setLeftPadding((-1339));
      MockFile mockFile0 = new MockFile("--");
      Options options0 = new Options();
      options0.hasLongOption("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("line.separator", "", options0, "arg", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("wQ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2032, "wQ", "", options1, 34, 3446, "wQ", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.println((Object) " ");
      PrintWriter printWriter0 = mockPrintWriter0.append('v');
      Options options1 = new Options();
      Options options2 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped(printWriter0, 3, (-1), "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("<");
      Options options0 = new Options();
      options0.hasLongOption("arg");
      helpFormatter0.printHelp("<", "", options0, "<", false);
      helpFormatter0.printHelp("usage: ", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("C");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "-");
      helpFormatter1.printOptions(printWriter0, 1202, options0, 11, 81);
      helpFormatter0.printHelp(")gkKU^s.:gB#", "-", options0, " ", false);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter1, 81, "usage: ", options1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("Sc", (-669), 124);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ");
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) " ";
      objectArray0[3] = (Object) "usage: ";
      objectArray0[5] = (Object) " ";
      objectArray0[6] = (Object) helpFormatter0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "usage: ", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, " ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp("-", options0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 2370, "", options0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      MockFile mockFile0 = new MockFile("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      OptionGroup optionGroup1 = new OptionGroup();
      option0.setArgName("--");
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(330, "4viqg", "", options0, "-", false);
      helpFormatter0.rtrim("");
      optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1156);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3379, "v}j@X]SNEH#OtS=L8%Mr", "", (Options) null, (-761), 9, "-");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ");
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) " ";
      objectArray0[3] = (Object) "usage: ";
      objectArray0[5] = (Object) " ";
      objectArray0[6] = (Object) helpFormatter0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "usage: ", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, " ");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("--").when(comparator0).toString();
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      helpFormatter0.setOptionComparator(comparator0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "?Wid]I");
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOption("8IE", "8IE", true, "2Z@2_$)K<yDrfIb");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "?Wid]I");
      Options options1 = options0.addOption("arg", true, (String) null);
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, " ", "", options2, " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "-", true, "usage: ");
      option0.setArgName("");
      StringBuffer stringBuffer0 = new StringBuffer(1);
      StringBuffer stringBuffer1 = new StringBuffer("\n");
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options2 = options1.addOption("", "org.apache.commons.cli.OptionGroup", true, "line.separator");
      helpFormatter2.printHelp("K\"c", "line.separator", options2, ")|TX", true);
      // Undeclared exception!
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 0, "A CloneNotSupportedException was thrown: ", options0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(5);
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Option option0 = new Option("", "");
      option0.setArgs(2213);
      options0.addOption(option0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      helpFormatter0.printHelp(74, "`5j7jz`VL^W'", "cmdLineSyntax not provided", options0, "");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      OptionGroup optionGroup1 = new OptionGroup();
      option0.setArgName("--");
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(330, "4viqg", "", options0, "arg", false);
      helpFormatter0.rtrim("");
      OptionGroup optionGroup2 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup2);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-761), "usage: ", "", options1, 1, 1, "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 26, "\n", " ", (Options) null, 9, 1, "-", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 34, (Options) null, 34, 34);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ");
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[21];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) " ";
      objectArray0[3] = (Object) "usage: ";
      objectArray0[5] = (Object) " ";
      objectArray0[6] = (Object) helpFormatter0;
      mockPrintStream0.printf(locale0, "usage: ", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, " ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp(74, "$hE@<!eDV~PB.\"Q$", " ", options0, "_lMm \"EUWp&{/V", true);
      options0.getOption("");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", "Pm0EJyDVwx}-ZDNl}/", options0, "usage: ", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 602, 602, "");
      helpFormatter0.setArgName("[ARG...]");
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "[ARG...]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      PrintWriter printWriter0 = mockPrintWriter0.append('1');
      Options options0 = new Options();
      options0.addOption("", "{;%$[|D6?/Z*", true, "");
      String string0 = "Y2a)yQ`2C]4-[X5AP6";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 1461, (String) null, "G5?aK!B,I0&IE&S[", options0, 1056, 1461, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("~Y1k%");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = 3076;
      helpFormatter0.findWrapPos(" | ", 3076, 3076);
      helpFormatter0.defaultOptPrefix = " | ";
      helpFormatter0.setLeftPadding((-1));
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = true;
      Option option0 = new Option((String) null, "-", true, (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      option0.setArgName("-");
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "qMNh,dP!6+^,l", "XB/k8hQ", options1, "4viqg", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ");
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) " ";
      objectArray0[3] = (Object) "usage: ";
      objectArray0[5] = (Object) " ";
      objectArray0[6] = (Object) helpFormatter0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "usage: ", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      int int0 = 1;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, " ");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "?Wid]I");
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOption("8IE", "8IE", true, "2Z@2_$)K<yDrfIb");
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, " ", "?Wid]I", options1, 13, 13, "?Wid]I", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("arg", "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      OptionGroup optionGroup1 = new OptionGroup();
      option0.setArgName("--");
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(330, "4viqg", "", options0, "arg", false);
      helpFormatter0.rtrim("");
      OptionGroup optionGroup2 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup2);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 1, "arg", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      OptionGroup optionGroup1 = new OptionGroup();
      option0.setArgName("--");
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(330, "4viqg", "", options0, "arg", false);
      helpFormatter0.rtrim("");
      optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 93, "A~X|R|T?r:\"2&)z", "usage: ", options0, 1, 74, "usage: ");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = true;
      Option option0 = new Option((String) null, "-", true, (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      option0.setArgName(" ] [ long ");
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1015), "qMNh,dP!6+^,l", "XB/k8hQ", options1, "4viqg", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ");
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) " | ";
      objectArray0[3] = (Object) "usage: ";
      objectArray0[5] = (Object) " | ";
      objectArray0[6] = (Object) helpFormatter0;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("' was specified but an option from this group ", "line.separator", (Options) null, " | ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ");
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) " ";
      objectArray0[3] = (Object) "usage: ";
      objectArray0[5] = (Object) " ";
      objectArray0[6] = (Object) helpFormatter0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "usage: ", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, " ");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "?Wid]I");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("-");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("<");
      Options options0 = new Options();
      options0.hasLongOption("arg");
      helpFormatter0.printHelp("<", "", options0, "<", true);
      helpFormatter0.printHelp("usage: ", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("C");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "-");
      helpFormatter1.printOptions(printWriter0, 1202, options0, 11, 81);
      helpFormatter0.printHelp("J)gGKU^EL.:gB#", "-", options0, " ", false);
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.rtrim(" ");
      helpFormatter1.getWidth();
      helpFormatter1.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " | ";
      String string1 = "&H[CNba=H {g";
      MockPrintStream mockPrintStream0 = new MockPrintStream("&H[CNba=H {g");
      Locale locale0 = Locale.GERMAN;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Options options0 = new Options();
      options0.getMatchingOptions("&H[CNba=H {g");
      Options options1 = options0.addOption("", "arg", true, "<");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-818), options1, 29, 1097);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      OptionGroup optionGroup1 = new OptionGroup();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      Locale locale0 = Locale.JAPANESE;
      String string0 = "<";
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockPrintStream0;
      mockPrintStream0.printf(locale0, "<", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1), "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1079;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1079, "]", (String) null, (Options) null, "]", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "-", true, (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1015), "qMNh,dP!6+^,l", "XB/k8hQ", options1, "4viqg", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("<");
      Options options0 = new Options();
      options0.hasLongOption("arg");
      helpFormatter0.printHelp("<", "", options0, "<", true);
      helpFormatter0.printHelp("usage: ", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("C");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "-");
      helpFormatter0.setArgName("");
      helpFormatter1.printOptions(printWriter0, 1202, options0, 11, 81);
      helpFormatter0.printHelp("J)gGKU^EL.:gB#", "-", options0, " ", false);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 11, "\n", " ] [ long ", options1, 1, 11, "arg");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("usage: ");
      mockFile0.getCanonicalFile();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      boolean boolean0 = false;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\n");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter1, false);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "P", "arg", options1, 417, 0, "P", true);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("usage: ");
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.print(' ');
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("usage: ");
      Options options0 = new Options();
      String string0 = "SG5";
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "usage: ");
      Options options2 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Zho");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "org.apache.commons.cli.ParseException", "--", options0, 91, 2490, " ", false);
      String string1 = "<";
      // Undeclared exception!
      try { 
        options2.addOption("dlatQ'Dkpt", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'dlatQ'Dkpt' contains an illegal character : '''
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("&H[CNba=H {g");
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) " | ";
      objectArray0[3] = (Object) "&H[CNba=H {g";
      objectArray0[5] = (Object) " | ";
      objectArray0[6] = (Object) helpFormatter0;
      mockPrintStream0.printf(locale0, "usage: ", objectArray0);
      Option option0 = new Option("", "--");
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{Q$Hx9Fo0i//j.5");
      helpFormatter0.printHelp("\"1KrLm9i^l", "4p64xH\"[u'UcS", options1, "", true);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[ARG...]";
      helpFormatter0.setArgName("[ARG...]");
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "[ARG...]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      PrintWriter printWriter0 = mockPrintWriter0.append('1');
      Options options0 = new Options();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 34, " ] [ long ", "SG5", options1, 108, (-3602), " ] [ long ", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("<");
      MockFile mockFile0 = new MockFile("p;efHM> 7IH`1'");
      MockFile mockFile1 = new MockFile(mockFile0, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('1');
      Options options0 = new Options();
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      String string0 = "V:\\>'v>\\N{#C]";
      String string1 = "org.apache.commons.cli.AlreadySelectedException";
      String string2 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "!(", "org.apache.commons.cli.AlreadySelectedException", options0, (-339), (-339), "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("&H[CNba=H {g");
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) " | ";
      objectArray0[3] = (Object) "&H[CNba=H {g";
      objectArray0[5] = (Object) " | ";
      objectArray0[6] = (Object) helpFormatter0;
      mockPrintStream0.printf(locale0, "usage: ", objectArray0);
      Option option0 = new Option("", "--");
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{Q$Hx9Fo0i//j.5");
      Options options2 = options1.addOption("J5ZW", "line.separator", true, "line.separator");
      helpFormatter0.printHelp(1966, "Q>K}ib1F1G", "{Q$Hx9Fo0i//j.5", options2, (String) null);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("usage: ");
      Options options0 = new Options();
      String string0 = "";
      String string1 = "SG5";
      Options options1 = new Options();
      boolean boolean0 = false;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "V:>'v>N{#C]", "", options0, 18, (-339), "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.setOptPrefix("<");
      MockFile mockFile0 = new MockFile("p;efHM> 7IH`1'");
      MockFile mockFile1 = new MockFile(mockFile0, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append('1');
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp("p;efHM> 7IH`1'", options1);
      helpFormatter0.printHelp("\"1KrLm9i^l", ")jkBAWspgc", options1, "", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(346, "", "SG5", options0, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(308);
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("arg");
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      option0.setLongOpt("-");
      options0.addOption(option0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">]: y");
      Options options1 = options0.addOption((String) null, false, "org.apache.commons.cli.HelpFormatter$1");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(308, "cmdLineSyntax not provided", "", options1, "   ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("<");
      Options options0 = new Options();
      options0.hasLongOption("arg");
      helpFormatter0.printHelp("<", "", options0, "<", true);
      helpFormatter0.printHelp("usage: ", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("C");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "-");
      helpFormatter1.printOptions(printWriter0, 1202, options0, 11, 81);
      helpFormatter0.printHelp("J)gGKU^EL.:gB#", "-", options0, " ", false);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 11, "\n", " ] [ long ", options1, 1, 11, "arg");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("<");
      MockFile mockFile0 = new MockFile("p;efHM> 7IH`1'");
      MockFile mockFile1 = new MockFile(mockFile0, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('1');
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp(printWriter0, 74, "p;efHM> 7IH`1'", "SG5", options1, 34, 34, ")jkBAWspgc", false);
      helpFormatter0.printHelp("p;efHM> 7IH`1'", options1);
      helpFormatter0.printHelp("\"1KrLm9i^l", ")jkBAWspgc", options1, "", false);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("<");
      Options options0 = new Options();
      options0.hasLongOption("arg");
      helpFormatter0.printHelp("<", "", options0, "<", true);
      helpFormatter0.printHelp("usage: ", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(2332, "<(lCHI+[@qn", "cmdLineSyntax not provided", options0, "");
      helpFormatter1.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("[ARG...]");
      MockFile mockFile0 = new MockFile("");
      Options options0 = new Options();
      options0.hasLongOption("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.getMatchingOptions("--");
      helpFormatter1.printHelp("c0jUP|F#KA", "usage: ", options0, "[ARG...]", false);
      helpFormatter0.printHelp("cmdLineSyntax not provided", options0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, "usage: ", "-", options0, "[ARG...]", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      helpFormatter0.renderWrappedText(stringBuffer0, 2332, 2332, "CH*x2d");
      File file0 = MockFile.createTempFile("^l!fX@R(lt))[>", "arg");
      try { 
        MockFile.createTempFile("arg", "l", file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("usage: ");
      mockFile0.getCanonicalFile();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.setWritable(false, true);
      mockPrintWriter0.print('>');
      String string0 = "";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("wQ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 1, "arg", "arg", (Options) null, 3805, 7, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("usage: ");
      mockFile0.getCanonicalFile();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.setWritable(false, true);
      mockPrintWriter0.print('>');
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 822, "' was specified but an option from this group ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(32, "32M&[", "[ Options: [ short ", (Options) null, "32M&[");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      MockFile mockFile0 = new MockFile("usage: ");
      Options options0 = new Options();
      options0.hasLongOption("usage: ");
      helpFormatter0.printHelp("--", "", options0, "' was specified but an option from this group ", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("\n", options0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " | ";
      String string1 = "&H[CNba=H {g";
      MockPrintStream mockPrintStream0 = new MockPrintStream("&H[CNba=H {g");
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) " | ";
      objectArray0[3] = (Object) "&H[CNba=H {g";
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) " | ";
      objectArray0[6] = (Object) helpFormatter0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "usage: ", objectArray0);
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      int int0 = 1;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, " | ");
      helpFormatter0.setOptPrefix(" | ");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string2 = "?Wfp]I";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "?Wfp]I");
      MockPrintWriter mockPrintWriter1 = null;
      try {
        mockPrintWriter1 = new MockPrintWriter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(" | ");
      Options options0 = new Options();
      options0.hasLongOption("arg");
      helpFormatter0.printHelp("--", "", options0, "--", true);
      MockFile mockFile0 = new MockFile("6", "6");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.println(true);
      mockPrintWriter0.printf(" | ", (Object[]) null);
      mockPrintWriter0.print(true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 53, (-4899), "arg");
      Options options1 = options0.addOption("", "", false, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 32, options1, 32, (-4899));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.createPadding(178);
      helpFormatter0.setOptionComparator((Comparator) null);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", "usage: ", options0, "usage: ", false);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setOptPrefix("usage: ");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(63);
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("arg");
      mockFile0.getCanonicalFile();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.setWritable(false, false);
      mockPrintWriter0.print('>');
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 63, " | ");
      helpFormatter0.setArgName("");
      String string0 = ", ";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 4, " | ", "", (Options) null, 10, 657, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      int int0 = (-1);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "Cannot add value, list full.", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", options0, true);
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getNewLine();
      helpFormatter0.setOptPrefix("org.apache.commons.cli.HelpFormatter$OptionComparator");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("7VuygWAhN0");
      StringBuffer stringBuffer0 = new StringBuffer("");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1966, 13, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile(" ", "arg");
      mockFile0.getCanonicalFile();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.setWritable(false, true);
      mockPrintWriter0.print('>');
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 822, "'");
      helpFormatter0.setArgName("");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 61, (-1405), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("usage: ");
      mockFile0.getCanonicalFile();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.setWritable(false, true);
      mockPrintWriter0.print('>');
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "");
      helpFormatter0.setArgName("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "", ", ", (Options) null, 0, 657, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(",(5gZ3&`H/j()");
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.defaultDescPad = (-2786);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getNewLine();
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptSeparator();
      int int0 = 4466;
      StringBuffer stringBuffer0 = new StringBuffer(4466);
      StringBuffer stringBuffer1 = new StringBuffer("arg");
      StringBuffer stringBuffer2 = new StringBuffer(117);
      stringBuffer2.append(74);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      stringBuffer2.appendCodePoint(117);
      StringBuffer stringBuffer3 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer3, 1, options0, 15, (-1282));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("wQ");
      Options options0 = new Options();
      Option option0 = new Option("do", "[ARG...]");
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "", "", options0, "[ARG...]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("usage: ");
      Options options0 = new Options();
      Option option0 = new Option("", "");
      options0.addOption(option0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      helpFormatter0.printHelp(1966, "`5j7jz`VL^W'", "cmdLineSyntax not provided", options0, "");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", options0, true);
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getNewLine();
      helpFormatter0.setOptPrefix("org.apache.commons.cli.HelpFormatter$OptionComparator");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("7VuygWAhN0");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " | ";
      helpFormatter0.setOptPrefix("--");
      Options options0 = new Options();
      options0.hasLongOption("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "z@UKJSdA'y+<l", options0, "z@UKJSdA'y+<l", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(" |z ");
      Options options0 = new Options();
      options0.hasLongOption("arg");
      helpFormatter0.printHelp(31, "@KnD", "%", options0, " ");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", "usage: ", options0, "usage: ", false);
      helpFormatter0.printHelp("[", options0);
      helpFormatter0.printHelp("-", "-", options0, "[", false);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "xy+n";
      helpFormatter0.setArgName("xy+n");
      int int0 = 74;
      helpFormatter0.setWidth(74);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-3477));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.findWrapPos("", 74, 74);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-2123));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("[ Options: [ short ");
      int int0 = 688;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-1802), 688, ".Le*.vG1");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.optionComparator = comparator0;
      String string0 = "?Wfp]I";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      int int0 = 0;
      char[] charArray0 = new char[3];
      charArray0[0] = '+';
      charArray0[1] = '$';
      charArray0[2] = 'U';
      // Undeclared exception!
      try { 
        stringBuffer0.insert((-1303), charArray0, (-1), 3289);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1303
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      String string0 = helpFormatter0.defaultArgName;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append('h');
      helpFormatter0.printWrapped(printWriter0, 31, 1251, "?Wfp]I");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("F01/Tt2n", "usage: ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, (-1405), "");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.getArgName();
      helpFormatter0.setNewLine("arg");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "NO_ARGS_ALLOWED", "", options1, "cmdLineSyntax not provided");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      helpFormatter0.getSyntaxPrefix();
      int int0 = 1623;
      int int1 = 2853;
      // Undeclared exception!
      try { 
        mockPrintWriter1.append((CharSequence) "usage: ", 1623, 2853);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "f";
      Options options0 = null;
      helpFormatter0.setLongOptPrefix("f");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("f", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("[ARG...]");
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "[ARG...]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      PrintWriter printWriter0 = mockPrintWriter0.append('1');
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 0, "", "Xa7I", options0, 0, 0, "[ARG...]", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("wQ");
      PrintWriter printWriter0 = mockPrintWriter0.append('h');
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 1, 1506, "wQ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.getOptPrefix();
      PrintWriter printWriter0 = null;
      int int1 = (-3925);
      int int2 = (-3843);
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-3843), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[";
      helpFormatter0.setOptPrefix("   ");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      int int0 = 1718;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1718, "[");
      Options options0 = new Options();
      String string1 = "";
      helpFormatter0.defaultNewLine = "";
      Option option0 = null;
      try {
        option0 = new Option(" ", true, "]Ap0Xt#Xc$j1AaT&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "M.<xeP?~Ek[";
      helpFormatter0.setLongOptSeparator("M.<xeP?~Ek[");
      helpFormatter0.defaultArgName = "M.<xeP?~Ek[";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "M.<xeP?~Ek[");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // M.<xeP?~Ek[
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1047);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1047));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("usage: ");
      mockFile0.getCanonicalFile();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.setWritable(false, true);
      mockPrintWriter0.print('>');
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 822, "'");
      helpFormatter0.setArgName("");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "7KGR\"ahjg@tQ", "32M&[", (Options) null, (-596), 0, "7KGR\"ahjg@tQ");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "<";
      helpFormatter0.setOptPrefix(" | ");
      String string1 = "";
      Options options0 = new Options();
      options0.hasLongOption("arg");
      boolean boolean0 = true;
      helpFormatter0.printHelp("<", "", options0, "<", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ",(5gZ3&`H/j()";
      helpFormatter0.rtrim(",(5gZ3&`H/j()");
      helpFormatter0.defaultDescPad = (-2786);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getNewLine();
      helpFormatter0.getNewLine();
      int int0 = 74;
      String string1 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("\n", true, ",(5gZ3&`H/j()");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("BZ9%XlT%Fll.'FXnkbp");
      Options options0 = new Options();
      helpFormatter0.printHelp("[O%IG# BEO+'wA@\"3^", "E^ls$^XLkR@b", options0, "BZ9%XlT%Fll.'FXnkbp");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptSeparator();
      Option option0 = new Option("", "arg");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1682), "[O%IG# BEO+'wA@\"3^", "--", options1, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.HelpFormatter";
      StringBuffer stringBuffer0 = new StringBuffer("org.apache.commons.cli.HelpFormatter");
      int int0 = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1), 0, "org.apache.commons.cli.HelpFormatter");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", " ", false, "usage: ");
      options1.helpOptions();
      options0.getMatchingOptions("");
      Options options2 = options1.addOption("", false, "-");
      options0.helpOptions();
      options1.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("arg", "arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // arg
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }
}
