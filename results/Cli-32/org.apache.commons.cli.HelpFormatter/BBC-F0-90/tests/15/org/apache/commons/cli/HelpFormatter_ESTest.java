/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:23:53 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptPrefix();
      MockFile mockFile0 = new MockFile("");
      String string0 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      options0.getOptionGroups();
      Option option0 = new Option("", "arg");
      Options options1 = options0.addOption(option0);
      helpFormatter0.defaultWidth = (-2);
      option0.clone();
      options1.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" S", " S", options1, " S");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      String string0 = helpFormatter0.defaultNewLine;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 2, "\n");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 2, "");
      String string1 = HelpFormatter.DEFAULT_ARG_NAME;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, (-1497), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultWidth = (-86);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("X&7", "X&7", options0, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "-";
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      int int0 = (-3089);
      Options options1 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, (-3089), options1, 1955, 1955);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 853, 13, "46rQML#Vg@rw2$|;EK");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.getAbsolutePath();
      helpFormatter0.setNewLine("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("NO_ARGS_ALLOWED", "", (Options) null, " ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      MockFile mockFile0 = new MockFile(" ");
      String string0 = helpFormatter0.defaultNewLine;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2, "]");
      PrintWriter printWriter0 = mockPrintWriter0.append('v');
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 970, "");
      String string1 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      stringWriter0.write("--");
      // Undeclared exception!
      helpFormatter1.printWrapped(printWriter0, 0, 3, " ");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-2614);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("X&7", "-", options0, "p_itL^s+raF=(T", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[1] = (Object) "usage: ";
      Options options0 = new Options();
      options0.addOption((String) null, "\n", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp(44, "\n", (String) null, options0, "IP2EoH_Z)FS|=,!f2_y");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1906), options0, 32, 44);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", "g30s\u00048:9Y&", false, "arg");
      Options options3 = options2.addOption("", false, "a)");
      Option option0 = new Option("arg", "-", false, " | ");
      Options options4 = options3.addOption(option0);
      Options options5 = options4.addOption("arg", false, "hf");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "--", "g30s\u00048:9Y&", options5, "");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      options0.hasShortOption("");
      Option option0 = new Option("", "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      helpFormatter0.defaultWidth = (-1);
      optionGroup1.setRequired(true);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.setLongOptSeparator(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", options0, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      MockFile mockFile0 = new MockFile("\n");
      String string0 = helpFormatter0.defaultNewLine;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 2, "\n");
      mockPrintWriter0.append((CharSequence) "--");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 2, "");
      helpFormatter0.rtrim("\n");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2901, "");
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", "", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultArgName;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object[] objectArray0 = new Object[13];
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      MockFile mockFile0 = new MockFile("\n");
      mockFile0.getAbsolutePath();
      File file0 = MockFile.createTempFile("{Yj.3jLw9wBxD]wgW", "arg");
      mockFile0.renameTo(file0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 2, "/experiment/\n");
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
      helpFormatter0.printUsage(printWriter0, 2, "");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "{Yj.3jLw9wBxD]wgW", "arg", options1, 0, (-2145), "VJo3D.>v$8k/1.rEB", true);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "\n";
      Object object0 = new Object();
      objectArray0[1] = (Object) "\n";
      objectArray0[1] = (Object) "\n";
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "", true, "-");
      String string0 = "Ud0 :mU.z>ZDEF";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      options1.addOption("arg", false, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "", options2);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp(2203, " ", "", options1, " ");
      helpFormatter0.setLongOptSeparator(" ");
      helpFormatter0.printHelp("arg", options1, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 32, "Illegal option name '", "-", options0, 1, 1, "@?sN_s\";&2W5)QT", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "\n";
      Object object0 = new Object();
      objectArray0[1] = (Object) "\n";
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "\n", true, "-");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptSeparator();
      int int0 = 3;
      helpFormatter0.findWrapPos("\n", 3, (-1979));
      StringBuffer stringBuffer0 = new StringBuffer("--");
      int int1 = (-5656);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-5656), options1, 2940, 3609);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "2vwxfH";
      helpFormatter0.setArgName("2vwxfH");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Object object0 = new Object();
      helpFormatter0.findWrapPos("\n", 1, 0);
      StringBuffer stringBuffer0 = new StringBuffer("I!E/{nWa<(F`YZ\"");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, (-1806), "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.HelpFormatter";
      Options options0 = new Options();
      boolean boolean0 = true;
      String string1 = " ";
      Options options1 = options0.addOption("arg", "-", true, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "\n");
      helpFormatter0.defaultDescPad = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2203, " ", "", options1, " ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "\n";
      Object object0 = new Object();
      objectArray0[1] = (Object) "\n";
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "\n", true, "-");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options2 = options1.addOption((String) null, true, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("#%k##'a[G}B<", options2, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "\n";
      Object object0 = new Object();
      objectArray0[1] = (Object) "\n";
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "\n", true, "-");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options2 = options0.addOption("", false, "");
      helpFormatter0.printHelp("Cdh5I", options1, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 841, "\n", "IP2EoH_Z)FS|=,!f2_y", options1, 119, 0, "", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2785), "OM k:I7B", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "\n";
      Object object0 = new Object();
      objectArray0[1] = (Object) "\n";
      helpFormatter0.defaultOptPrefix = "\n";
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "\n", true, "-");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options2 = options1.addOption("arg", false, "arg");
      helpFormatter0.printHelp("\n", options2, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 858, "ni'46WP3n", (String) null, options2, 1, 1, "8%>Z*qGT>VE.+Nx", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "Rg@";
      helpFormatter0.setArgName("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      helpFormatter0.createPadding(0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 48, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 102, options0, 31, (-271));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Object object0 = new Object();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      String string0 = "org.apache.commons.cli.ParseException";
      Options options2 = options1.addOption("KQiD", "--", false, "org.apache.commons.cli.ParseException");
      Option option0 = new Option((String) null, false, "org.apache.commons.cli.ParseException");
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(985, "-0*,JdGY", (String) null, options3, "org.apache.commons.cli.ParseException");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(byteArrayOutputStream0);
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("--");
      MockPrintWriter mockPrintWriter3 = new MockPrintWriter(mockPrintWriter2);
      mockPrintWriter2.print(true);
      MockFile mockFile0 = new MockFile("arg");
      helpFormatter0.getNewLine();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 2, "\n");
      mockPrintWriter2.printf("usage: ", (Object[]) null);
      MockPrintWriter mockPrintWriter4 = new MockPrintWriter("--");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter4, 9, "\n");
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2479, 4584, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, 143, (Options) null, 99, 4584);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[12];
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      MockFile mockFile0 = new MockFile("\n");
      helpFormatter0.getNewLine();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 7, "\n");
      mockPrintWriter1.printf("arg", objectArray0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("\n");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 7, "\n");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.rtrim((String) null);
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.setWidth(99);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptSeparator();
      int int0 = 3;
      int int1 = 108;
      int int2 = (-2);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 108, "\n", "` D($s&3sQb17`[g", options0, 108, (-2), " ", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.write(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) helpFormatter0;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator comparator0 = helpFormatter1.getOptionComparator();
      helpFormatter1.rtrim("--");
      helpFormatter1.setOptionComparator(comparator0);
      helpFormatter1.setNewLine("` D($s&3sQb17`[g");
      helpFormatter1.setWidth(74);
      helpFormatter1.getLongOptSeparator();
      helpFormatter0.getLongOptSeparator();
      int int0 = 3;
      Options options0 = new Options();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "usage: ", "", options0, 3, 3, " ", false);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("4}BGFe6", 3, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.write(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) helpFormatter0;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator comparator0 = helpFormatter1.getOptionComparator();
      helpFormatter1.rtrim("--");
      helpFormatter1.setOptionComparator(comparator0);
      Object object1 = new Object();
      mockPrintWriter0.print(object1);
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter1.setNewLine("` D($s&3sQb17`[g");
      helpFormatter1.setWidth(74);
      helpFormatter1.getLongOptSeparator();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printOptions(mockPrintWriter0, 560, options0, 1232, 1232);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "--", "arg", options0, 74, 3, (String) null, false);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("9||`q!db_Ul!O", 3, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      helpFormatter0.setSyntaxPrefix((String) null);
      byteArrayOutputStream0.write(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      Object object1 = new Object();
      mockPrintWriter0.format("-", objectArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 48, "Juc%Kuv2a");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "-!nW<E.3", false, "Juc%Kuv2a");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, (String) null, options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[13];
      objectArray0[4] = (Object) "\n";
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      MockFile mockFile0 = new MockFile("\n");
      helpFormatter0.getNewLine();
      mockPrintWriter0.println();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 2, "\n");
      PrintWriter printWriter0 = mockPrintWriter1.printf("arg", objectArray0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("\n");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 2, "\n", "A CloneNotSupportedException was thrown: ", (Options) null, 2, (-3563), "\n", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.write(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) helpFormatter0;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator comparator0 = helpFormatter1.getOptionComparator();
      helpFormatter1.rtrim("--");
      helpFormatter1.setOptionComparator(comparator0);
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter1.setNewLine("` D($s&3sQb17`[g");
      helpFormatter1.setWidth(74);
      helpFormatter1.getLongOptSeparator();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "--", "arg", options0, 74, 3, (String) null, false);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("9||`q!db_Ul!O", 3, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getNewLine();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.defaultNewLine = "\n";
      Object object0 = new Object();
      MockFile mockFile0 = new MockFile("\n");
      mockFile0.getAbsolutePath();
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "/experiment/\n");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", "-", true, " ");
      StringBuffer stringBuffer0 = new StringBuffer("");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, " ");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      int int0 = 34;
      int int1 = 3251;
      helpFormatter0.renderOptions(stringBuffer0, (-513), options1, 34, 3251);
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 1, "usage: ");
      Object[] objectArray0 = new Object[1];
      mockPrintWriter1.printf("arg", objectArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 18, 16, "");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 946, "", "", options0, 627, 946, "P7CE#bkK", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      int int0 = 1;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 858, (String) null, "cmdLineSyntax not provided", options0, 1, 1, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 105, 105, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "\n";
      Object object0 = new Object();
      objectArray0[1] = (Object) "\n";
      objectArray0[1] = (Object) "\n";
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "", true, "-");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options2 = options1.addOption("arg", false, "arg");
      helpFormatter0.printHelp("Ud0 :mU.z>ZDEF", options2, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 858, "ni'46WP3n", "Ud0 :mU.z>ZDEF", options2, 1, 1, "8%>Z*qGT>VE.+Nx", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[13];
      objectArray0[4] = (Object) "\n";
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      MockFile mockFile0 = new MockFile("\n");
      mockFile0.getAbsolutePath();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 2, "/experiment/\n");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("\n");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 63, "b9KWE=hK0*\"");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "\n";
      Object object0 = new Object();
      objectArray0[1] = (Object) "\n";
      objectArray0[2] = (Object) "\n";
      Options options0 = new Options();
      options0.addOption((String) null, "", true, "-");
      options0.addOption("", "xF~tl{L 9Z6", true, (String) null);
      helpFormatter0.printHelp("3l8l`XU", options0, true);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("a_0j4 R[");
      Options options0 = new Options();
      options0.addOption("N", true, "\n");
      helpFormatter0.printHelp("N", options0, true);
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-1111);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2201), (-1111), "N");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "\n";
      Object object0 = new Object();
      objectArray0[1] = (Object) "\n";
      objectArray0[2] = (Object) "\n";
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "", true, "-");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options2 = options1.addOption("arg", false, "arg");
      helpFormatter0.printHelp("Ud0 :mU.z>ZDEF", options2, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 858, "ni'46WP3n", "Ud0 :mU.z>ZDEF", options2, 1, 1, "8%>Z*qGT>VE.+Nx", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 3791, "|Um/qo");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockFile0.getAbsolutePath();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 1, "usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(2884, "/experiment/--", "--", (Options) null, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "\n");
      helpFormatter0.printHelp(2203, " ", "", options1, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.setLongOptSeparator(" ");
      helpFormatter0.printHelp(64, "org.apache.commons.cli.HelpFormatter", "JpG|/U+Cp3}{q*w%9", options2, "JpG|/U+Cp3}{q*w%9", true);
      helpFormatter0.getOptPrefix();
      helpFormatter0.createPadding(6121);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ", ";
      Options options0 = new Options();
      helpFormatter0.printHelp(", ", options0);
      String string1 = "";
      int int0 = (-636);
      int int1 = 74;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) byteArrayOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.format("-", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-1872), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setOptPrefix("rh;prjys/|.h6");
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      int int0 = 22;
      // Undeclared exception!
      try { 
        stringBuffer0.insert(1, (float) 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = helpFormatter1.defaultArgName;
      helpFormatter0.setLongOptSeparator(" ");
      helpFormatter1.setNewLine("");
      StringBuffer stringBuffer0 = new StringBuffer("-");
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 1, " ");
      helpFormatter0.rtrim(";s)");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator0);
      Options options0 = new Options();
      Options options1 = new Options();
      options1.getOptions();
      helpFormatter0.setNewLine("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 37, options1, (-874), (-407));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, "N6$");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "\n");
      helpFormatter0.printHelp(2203, "N6$", "", options1, "N6$");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.setLongOptSeparator("N6$");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) optionGroup0;
      objectArray0[1] = (Object) "arg";
      Object object0 = new Object();
      objectArray0[2] = objectArray0[1];
      objectArray0[3] = (Object) "N6$";
      objectArray0[5] = (Object) options0;
      objectArray0[6] = (Object) options2;
      objectArray0[7] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf(locale0, "arg", objectArray0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1536, "", options1);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      File file0 = MockFile.createTempFile("usage: ", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      MockFile mockFile0 = new MockFile("-", "arg");
      mockFile0.getAbsolutePath();
      int int0 = 1;
      String string0 = "Cannot add value, list full.";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 1, "Cannot add value, list full.");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 2464;
      String string0 = helpFormatter0.defaultSyntaxPrefix;
      helpFormatter0.defaultWidth = 9;
      MockFile mockFile0 = new MockFile("'", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "-", (Object[]) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage(printWriter0, 2464, "arg");
      helpFormatter0.printUsage(printWriter0, 1, "");
      Options options0 = new Options();
      helpFormatter0.setWidth(1958);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "\n");
      helpFormatter0.printHelp(2203, " ", "", options1, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      options1.addOptionGroup(optionGroup1);
      helpFormatter0.setLongOptSeparator(" ");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", options1, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "Co7.xu C:~>{>n?'", "", options1, (String) null, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "\n");
      helpFormatter0.printHelp(2203, " ", "", options1, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      helpFormatter0.setLongOptSeparator(" ");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", options1, false);
      Options options2 = new Options();
      helpFormatter0.setWidth(698);
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      helpFormatter0.findWrapPos("", 3, 3);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultArgName;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("n\"");
      helpFormatter0.setNewLine("--");
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 25, 74, "-");
      helpFormatter1.rtrim("");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter1.setNewLine("");
      helpFormatter1.renderOptions(stringBuffer1, 74, options0, 44, 0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("Q", "\n");
      helpFormatter0.printHelp(2203, " ", "Q", options1, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      helpFormatter0.setLongOptSeparator(" ");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", options1, true);
      helpFormatter0.printHelp(698, "Co7.xu C:~>{>n?'", "", options1, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 2464;
      String string0 = "";
      String string1 = helpFormatter0.defaultArgName;
      helpFormatter0.defaultWidth = 9;
      helpFormatter0.setLongOptSeparator("arg");
      helpFormatter0.setNewLine(", ");
      String string2 = "MKqC5;/&`:q^#:F";
      String string3 = "gYdYAu";
      StringBuffer stringBuffer0 = new StringBuffer("gYdYAu");
      int int0 = (-2);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-2), "MKqC5;/&`:q^#:F");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "\n");
      helpFormatter0.printHelp(2203, " ", "", options1, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      helpFormatter0.setLongOptSeparator(" ");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", options1, true);
      helpFormatter0.printHelp(698, "Co7.xu C:~>{>n?'", "", options1, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      mockPrintWriter0.format("", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 48, "");
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("'11n^men@%ZBCFWK8", (String) null, options0, "arg");
      helpFormatter1.getWidth();
      Locale locale0 = Locale.CANADA_FRENCH;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter1;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) ">[";
      objectArray0[4] = (Object) null;
      mockPrintWriter0.printf(locale0, " ", objectArray0);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "'`S|G,?.", options0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("arg", "80>RMxw+rzu|", false, "\n");
      helpFormatter0.printHelp("~@6v[z[9 ", "\n", options1, "is");
      Options options2 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp("", "\n", options0, "usage: ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption((String) null, "usage: ", true, "LaEAPN0[?dm]iYob7");
      helpFormatter0.printHelp("--", options0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, (String) null, " ", options0, " ", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, " ");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", options1, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter1.renderOptions(stringBuffer0, 32, options0, 3, 738);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, "-", "arg", options1, (String) null, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockFile0.getAbsolutePath();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 1, "usage: ");
      Object[] objectArray0 = new Object[1];
      PrintWriter printWriter0 = mockPrintWriter1.printf("arg", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 1, "O.C(");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", " ", options0, " ");
      helpFormatter1.printHelp(" :: ", ">[", options0, " :: ", false);
      helpFormatter1.getWidth();
      Locale locale0 = Locale.CANADA_FRENCH;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) options0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      objectArray0[1] = (Object) helpFormatter1;
      PrintWriter printWriter0 = mockPrintWriter1.printf(locale0, " ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 1, "org.apache.commons.cli.OptionValidator", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      Options options0 = new Options();
      String string0 = ")$2 +Rz<`NoN";
      String string1 = "";
      helpFormatter0.printHelp(23, ")$2 +Rz<`NoN", "", options0, "Illegal option name '");
      MockFile mockFile1 = new MockFile(":sux$^w2kDz!W", "-");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile1, "arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // arg
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      PrintWriter printWriter0 = mockPrintWriter0.format("-", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 31, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, (-4981), (Options) null, (-1213), (-1979));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(byteArrayOutputStream0);
      Object object0 = new Object();
      PrintWriter printWriter0 = mockPrintWriter0.format("U<", (Object[]) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage(printWriter0, (-2368), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, " ");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", options1, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, "-", "arg", options1, (String) null, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("'A");
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", "usage: ", options0, "\"{J@_&=<S2G9eUW");
      List list0 = new LinkedList<String>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "<", (String) null, options0, "\n", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockFile0.getAbsolutePath();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 1, "usage: ");
      helpFormatter0.setSyntaxPrefix("cmdLineSyntax not provided");
      Options options0 = new Options();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) mockPrintWriter1;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) helpFormatter0;
      mockPrintWriter0.format("", objectArray0);
      int int0 = (-2);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-2), "<", "cmdLineSyntax not provided", options0, 1, (-2650), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) "D2Vn_4C#32nQb;pQ9|";
      objectArray0[2] = (Object) "D2Vn_4C#32nQb;pQ9|";
      mockPrintWriter0.printf("D2Vn_4C#32nQb;pQ9|", objectArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 831, 831, "arg");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.HelpFormatter";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 83, options0, 83, 1267);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(",I?9WX|<5");
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "lvy;0W", (Object[]) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage(printWriter0, 1449, "}RfZ4]?}K9X3Sb6UvE");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1950, "usage: ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption("Ddq", "]", false, "");
      helpFormatter1.getDescPadding();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 32, "arg", "lvy;0W", options2, 1449, 2233, "[ Options: [ short ");
      Option option0 = null;
      try {
        option0 = new Option("--", "XxS3AUS9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", "", options0, "");
      Options options1 = new Options();
      helpFormatter0.printHelp(" ] [ long ", " ", options0, ">[", false);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 2464;
      String string0 = helpFormatter0.defaultArgName;
      helpFormatter0.defaultWidth = 9;
      helpFormatter0.setLongOptSeparator("arg");
      helpFormatter0.setNewLine(", ");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile("arg", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 4105;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultWidth = 4105;
      helpFormatter0.defaultOptPrefix = "~~-f3#";
      helpFormatter0.getNewLine();
      String string0 = helpFormatter0.defaultLongOptPrefix;
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setNewLine("U.:+GBV^$<oT[");
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = new Object();
      stringBuffer0.append(object0);
      Options options0 = new Options();
      helpFormatter0.getWidth();
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-210), options0, (-544), (-1211));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("'A");
      String string0 = "";
      Options options0 = new Options();
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        options0.addOption("org.apache.commons.cli.HelpFormatter$OptionComparator", "", false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.HelpFormatter$OptionComparator' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, " ");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", options1, true);
      helpFormatter0.printHelp(698, "Co7.xu C:~>{>n?'", "", options1, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "\n";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "\n";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "\n";
      objectArray0[5] = (Object) "\n";
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray0);
      printWriter0.println("?T\"#uLMDQQy");
      helpFormatter0.printWrapped(printWriter0, 31, "\n");
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter$1");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.getLongOptPrefix();
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", string0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "arg", "", options0, "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 4105;
      helpFormatter0.defaultWidth = 4105;
      helpFormatter0.defaultNewLine = "~~-f3#";
      helpFormatter0.getNewLine();
      int int1 = (-2);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 4105;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultWidth = 4105;
      helpFormatter0.defaultNewLine = "~~-f3#";
      helpFormatter0.getNewLine();
      int int1 = (-2);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ")`oo$@iMbfXuU3?2'Q^";
      helpFormatter0.setArgName(")`oo$@iMbfXuU3?2'Q^");
      String string1 = "\"\"h=mNomv";
      Options options0 = new Options();
      String string2 = "org.apache.commons.cli.OptionGroup";
      boolean boolean0 = true;
      options0.getMatchingOptions("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 646, 0, ")`oo$@iMbfXuU3?2'Q^");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "q*q(5F$";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 32, options0, 32, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(2432);
      String string0 = "`XU{85]O^giJ";
      String string1 = "";
      Options options0 = new Options();
      String string2 = "OMUm[9y):kAqI";
      // Undeclared exception!
      try { 
        options0.addOption(" ", "OMUm[9y):kAqI", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setWidth(44);
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockFile0.getAbsolutePath();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 1, "R|W%|e0}");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "90M,b8zy_jM=Z:+<q";
      Options options0 = new Options();
      Option option0 = new Option((String) null, "--", true, "--");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption((String) null, true, " ");
      Options options4 = options3.addOption((String) null, "--", false, "kFse{4");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options4, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      String string1 = "PN&oH'";
      helpFormatter0.setLongOptPrefix("PN&oH'");
      Options options0 = null;
      int int0 = 1107;
      String string2 = " w:la3QP'ecl=";
      String string3 = "";
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      Option option0 = null;
      try {
        option0 = new Option("-", false, " w:la3QP'ecl=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockFile0.getAbsolutePath();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 1, "usage: ");
      helpFormatter0.setSyntaxPrefix("cmdLineSyntax not provided");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      String string1 = "";
      Options options0 = new Options();
      String string2 = "";
      helpFormatter0.setSyntaxPrefix("");
      Option option0 = new Option("arg", "", false, "");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-197), "", "", options1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 2464;
      Options options0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "\n";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "\n";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "\n";
      objectArray0[5] = (Object) "\n";
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 31, "\n");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      Options options0 = new Options();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) helpFormatter0;
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1119, "", "--", options0, "bL4OMUQ", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("'A");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "\"{J@_&=<S2G9eUW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setArgName("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      String string1 = "cmdLineSyntax not provided";
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "cmdLineSyntax not provided", (Object[]) null);
      helpFormatter0.printUsage(printWriter0, 1950, ">91@J>q%a-C_N7");
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-4047);
      helpFormatter0.setDescPadding((-4047));
      helpFormatter0.getWidth();
      int int1 = (-1247);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-1247));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) helpFormatter0;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator comparator0 = helpFormatter1.getOptionComparator();
      helpFormatter1.rtrim("--");
      helpFormatter1.setOptionComparator(comparator0);
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter1.setNewLine("` D($s&3sQb17`[g");
      helpFormatter1.setWidth(74);
      helpFormatter1.getLongOptSeparator();
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("9||`q!db_Ul!O", 3, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getWidth();
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setOptPrefix("--");
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter0.renderWrappedText(stringBuffer0, 31, (-1313), "");
      assertEquals("--", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) "D2Vn_4C#32nQb;pQ9|";
      objectArray0[2] = (Object) "D2Vn_4C#32nQb;pQ9|";
      PrintWriter printWriter0 = mockPrintWriter0.printf("D2Vn_4C#32nQb;pQ9|", objectArray0);
      helpFormatter0.printUsage(printWriter0, 831, "J&CQ5+IYD)d?|*MoyX");
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      int int0 = (-210);
      Object object0 = new Object();
      stringBuffer0.append(object0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-210), options0, (-544), (-1211));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      int int0 = 989;
      Options options0 = new Options();
      String string0 = null;
      boolean boolean0 = true;
      options0.addOption((String) null, "'", true, " ");
      Option option0 = null;
      try {
        option0 = new Option("--", true, "EO a");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
