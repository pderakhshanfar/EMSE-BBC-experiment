/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:24:49 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, " ");
      options1.addOption("iJ", true, "usage: ");
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.printHelp(" ", "", options1, "%B3(", true);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      int int0 = 0;
      String string0 = "}yrk_-+:9cZ sS";
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      options0.hasLongOption("--");
      Options options1 = options0.addOption("", true, "lXn1DaVslZg`lWbZ");
      options1.toString();
      options1.getOptions();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "}yrk_-+:9cZ sS", "usage: ", options1, "", false);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(74);
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      Options options2 = options0.addOption("arg", true, " ");
      options2.addOption("", true, "usage: ");
      helpFormatter0.printHelp(" ", ", ", options2, "%B3(", true);
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getDescPadding();
      helpFormatter0.rtrim("usage: ");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("arg", "--");
      helpFormatter0.defaultNewLine = " ";
      helpFormatter0.getNewLine();
      helpFormatter0.findWrapPos(" ", 1, (-1));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptSeparator();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(8, "!Wqm;)Y=;jW+P^w4", "", options0, "{y31ipEL}M9`jet`X");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("arg", "--");
      helpFormatter0.getNewLine();
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      helpFormatter0.findWrapPos("\n", 1, (-1));
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1521, (-2), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, "-");
      helpFormatter0.setSyntaxPrefix("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      Options options0 = new Options();
      options0.addOption("", "", false, "org.apache.commons.cli.HelpFormatter$1");
      options0.addOption("arg", " | ", true, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "org.apache.commons.cli.HelpFormatter$1", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "XNI-JU[m8n");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "j3,BPF{T2@B]f&", "", options0, 10, 10, (String) null, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-1), 47, "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine((String) null);
      Option option0 = new Option((String) null, "usage: ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-1), (-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2291);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", ");
      helpFormatter0.defaultWidth = (-2291);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2291), (-2291), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "*w{f9<eM8Nv/s7";
      helpFormatter1.printHelp(74, "arg", "*w{f9<eM8Nv/s7", options0, "--");
      PipedInputStream pipedInputStream0 = new PipedInputStream(74);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "iM3T^be:k1HkHP Uj", (String) null, options0, 74, 1948, "hTOGY-q!\"MVyUFpwp]", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1886);
      helpFormatter0.getLongOptSeparator();
      PrintWriter printWriter0 = null;
      String string0 = ", ";
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = options0.addOption("arg", "-", true, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1262, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-2);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = new Option("", "", false, "41wUVw@Fx6,~c");
      Options options1 = options0.addOption(option0);
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", options1, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      stringWriter1.close();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "k|wW^X";
      objectArray0[1] = (Object) stringWriter1;
      PrintWriter printWriter0 = mockPrintWriter0.format("k|wW^X", objectArray0);
      stringWriter0.append('~');
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, (-345), (Options) null, 34, 95);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, (-1141), options0, 0, 2);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1886);
      helpFormatter0.getLongOptSeparator();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      options0.addOption("arg", "-", true, (String) null);
      Options options1 = options0.addOption("arg", true, " ");
      options1.addOption("", true, "usage: ");
      Option option0 = new Option((String) null, false, " ");
      options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", "", options1, "%B3(", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(3);
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      options0.helpOptions();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("XeM;Dgi", "arg", options0, " ] [ long ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer(172);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 10, options0, 1886, 963);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 2, 172, "has already been selected: '");
      helpFormatter0.renderOptions(stringBuffer2, 963, options0, 10, 2);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1886);
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      Options options2 = options0.addOption("arg", true, " ");
      options2.addOption("", true, "usage: ");
      helpFormatter0.printHelp(" ", ", ", options2, "%B3(", true);
      helpFormatter0.setLongOptPrefix("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getDescPadding();
      helpFormatter1.rtrim("usage: ");
      helpFormatter1.findWrapPos("' contains an illegal character : '", 0, 0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "usage: ";
      Option option0 = new Option((String) null, "\n");
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      MockFile mockFile0 = new MockFile("-", " ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("", "usage: ", true, "]");
      Options options4 = options3.addOption("S3B5N4xT", true, "[ option: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", options4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      Options options0 = new Options();
      String string0 = ", ";
      Options options1 = options0.addOption("3tWn", false, ", ");
      Option option0 = new Option("", ", ");
      option0.setLongOpt(",+MX\"{@_zUKZ");
      options0.addOption(option0);
      String string1 = "M8xS!rVR";
      helpFormatter0.printHelp("M8xS!rVR", "", options1, "M8xS!rVR");
      MockFile mockFile0 = new MockFile("--", "a14ofur");
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, ", ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // , 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "usage: ";
      Option option0 = new Option((String) null, "\n");
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      MockFile mockFile0 = new MockFile(",", "usage: ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      helpFormatter0.rtrim("");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 9, (-422));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, " ] [ long ");
      helpFormatter0.setSyntaxPrefix(" ] [ long ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      mockFileOutputStream0.release();
      Options options0 = new Options();
      Options options1 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter1.renderWrappedText(stringBuffer0, 1745, 9, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "org.apache.commons.cli.HelpFormatter$1", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "J>:g");
      Options options2 = options1.addOption((String) null, "usage: ", false, "Xigz|'.}J7M}8|<L");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(565, "%5C", " ] [ long ", options2, "Xigz|'.}J7M}8|<L");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText((StringBuffer) null, 793, 793, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, " ] [ long ");
      helpFormatter0.setSyntaxPrefix(" ] [ long ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      Options options0 = new Options();
      options0.addOption("arg", " | ", true, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "org.apache.commons.cli.HelpFormatter$1", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "usage: ";
      Option option0 = new Option((String) null, "\n");
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      MockFile mockFile0 = new MockFile("", " ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      helpFormatter0.rtrim(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("\n", (-1), (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, " ] [ long ", " ] [ long ", options0, 9, 9, " ] [ long ", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) options0;
      Options options1 = options0.addOption((String) null, true, "-");
      options1.getOptionGroups();
      helpFormatter0.printHelp("[", options1, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getOptionComparator();
      options1.addOption("", "arg", false, "XPrU&x~ek*0`7KxUeA");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "CCcq7VK1v9tj1\"@R", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      Options options0 = new Options();
      Options options1 = options0.addOption("3tWn", false, ", ");
      Option option0 = new Option("", ", ");
      options0.addOption(option0);
      helpFormatter0.printHelp("M8xS!rVR", "", options1, "M8xS!rVR");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", ", ", options0, ", ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 54;
      helpFormatter0.renderWrappedText(stringBuffer0, 54, 55, "");
      String string1 = "<eguit_aU";
      MockFile mockFile0 = new MockFile("usage: ");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "<eguit_aU", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 391, "-", "GZvHy.8goc3y1X", options0, 391, 391, " ");
      helpFormatter0.setArgName((String) null);
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.getWidth();
      helpFormatter0.getOptPrefix();
      helpFormatter0.printHelp(74, "k7-y3y($72E", "", options0, "", false);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1886);
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      Options options2 = options0.addOption("arg", true, " ");
      options2.addOption("", true, "usage: ");
      helpFormatter0.printHelp(" ", ", ", options2, "%B3(", true);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, " ", " ", (Options) null, 0, (-572), " ", false);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(74);
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append('`');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 1, options0, 2000, 1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, 2000, options1, 41, (-603));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(74);
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.toString();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("arg", false, "T");
      helpFormatter0.printHelp("usage: ", "usage: ", options3, (String) null, false);
      MockFile mockFile0 = new MockFile(" ] [ long ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3038, "-", "Gs5B'HJ&!>mSipknB", options3, (-2), 3, " ", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1886);
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      String string0 = null;
      options0.addOption("arg", "-", true, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      String string1 = null;
      helpFormatter0.printHelp(1915, " ", "Q+", options0, (String) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream(921);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = null;
      try {
        mockPrintWriter1 = new MockPrintWriter(" ", "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(74);
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.toString();
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, "[ Options: [ short java.util.HashMap@0000000007 ] [ long {} ]", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) options0;
      Options options1 = options0.addOption((String) null, true, "-");
      options1.getOptionGroups();
      helpFormatter0.printHelp("[", options1, true);
      options0.getMatchingOptions("usage: ");
      helpFormatter0.getWidth();
      helpFormatter0.setDescPadding(74);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      helpFormatter1.rtrim("rbC(NE<MR~th");
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "org.apache.commons.cli.OptionGroup", options0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) options0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 153, "3aDk0{tA", "", options0, 153, 2265, "3aDk0{tA", true);
      helpFormatter0.printWrapped(printWriter0, 44, "");
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.getNewLine();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getDescPadding();
      helpFormatter0.printUsage(printWriter0, 2265, "org.apache.commons.cli.HelpFormatter$1");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.rtrim("amj&J");
      Options options0 = new Options();
      options0.hasShortOption("\n");
      options0.toString();
      Options options1 = options0.addOption("", false, "[ option: ");
      options1.getOptionGroups();
      Options options2 = options1.addOption("", false, "arg");
      helpFormatter0.printHelp("amj&J", options1, false);
      options1.getMatchingOptions("--");
      helpFormatter0.getWidth();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getOptionComparator();
      StringBuffer stringBuffer0 = new StringBuffer(1848);
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options2, 8, 1848);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.defaultLeftPad = 1745;
      Options options0 = new Options();
      helpFormatter0.getDescPadding();
      helpFormatter0.getArgName();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.getMatchingOptions("-");
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setDescPadding(923);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) options0;
      Options options1 = options0.addOption((String) null, true, "-");
      options1.getOptionGroups();
      helpFormatter0.printHelp("[", options1, true);
      options1.getMatchingOptions("IUAMav");
      helpFormatter0.getWidth();
      helpFormatter0.setDescPadding(15);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) options0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 153, "3aDk0{tA", "", options0, 153, 2265, "3aDk0{tA", true);
      helpFormatter0.printWrapped(printWriter0, 44, "");
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.HelpFormatter$1");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "", options0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      int int0 = 865;
      String string0 = ">9 a]4GkeW";
      Options options0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(865, ">9 a]4GkeW", ">9 a]4GkeW", (Options) null, ">9 a]4GkeW", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(74);
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.toString();
      helpFormatter0.printHelp(923, "arg", "line.separator", options0, "Q+");
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "arg", ", ", options1, 74, 39, "--", false);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer("bR):]Ic>0M'S+v");
      Options options0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      HelpFormatter helpFormatter2 = new HelpFormatter();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) null, 0, (String) null, "", (Options) null, 31, 49, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getLeftPadding();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter();
      stringWriter1.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) options0;
      mockPrintWriter0.format("!<:c(>UY", objectArray0);
      Options options1 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2509, "org.apache.commons.cli.HelpFormatter$1", "", options0, 82, 2509, "[ARG...]", true);
      helpFormatter0.setOptPrefix("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option((String) null, "usage: ");
      helpFormatter0.getNewLine();
      option0.clone();
      helpFormatter0.findWrapPos("--", 57, (-2));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(dataOutputStream0, 41);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 31, (-169), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.rtrim("amj&J");
      Options options0 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      options0.toString();
      String string0 = "";
      Options options1 = options0.addOption("", false, "[ option: ");
      options1.getOptionGroups();
      helpFormatter0.printHelp("amj&J", options1, false);
      options1.getMatchingOptions("--");
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      helpFormatter0.setDescPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.append('9');
      int int1 = 0;
      // Undeclared exception!
      helpFormatter0.printOptions(printWriter0, 0, options1, 1, 81);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1886);
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer("m&.&8p!yo1F({7$");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 7, "-", "-", (Options) null, 53, 1, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) options0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      Options options1 = new Options();
      helpFormatter0.printHelp(printWriter0, 74, "3aDk0{tA", "", options1, 74, 74, "", true);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getWidth();
      helpFormatter0.printHelp(863, "XE55b>pL&Fn<*", "3aDk0{tA", options0, "", true);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getArgName();
      String string0 = "bR):]Ic>0M'S+v";
      StringBuffer stringBuffer0 = new StringBuffer("   ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[ARG...]");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "[ARG...]";
      objectArray0[1] = (Object) "arg";
      objectArray0[2] = (Object) stringBuffer0;
      objectArray0[3] = (Object) "   ";
      mockPrintWriter0.printf(" ", objectArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1, "");
      int int0 = 38;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, (Options) null, 557, 38);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "usage: ";
      Options options0 = new Options();
      String string0 = ", ";
      Options options1 = options0.addOption((String) null, false, ", ");
      Option option0 = new Option((String) null, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(false);
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.toString();
      String string1 = "";
      options2.addOption("", true, "arg");
      options1.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[ option: ", options2, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.rtrim("");
      int int0 = 2637;
      helpFormatter0.defaultDescPad = 2637;
      Options options0 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("\n", "-", false, "s");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)5;
      helpFormatter0.setArgName("");
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte)13;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getArgName();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      StringBuffer stringBuffer0 = new StringBuffer("bR):]Ic>0M'S+v");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 3, "'LD)1+4g-", "", (Options) null, 0, 20, "'LD)1+4g-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "");
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) options0;
      Object object0 = new Object();
      helpFormatter0.printHelp("'", options1, true);
      options1.getMatchingOptions("usage: ");
      helpFormatter0.getWidth();
      helpFormatter0.setDescPadding(1667);
      helpFormatter0.setNewLine((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("]");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("arg").when(comparator0).toString();
      helpFormatter1.setOptionComparator(comparator0);
      helpFormatter1.setLeftPadding(1886);
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "arg";
      mockPrintWriter0.print('}');
      objectArray0[2] = (Object) "arg";
      objectArray0[3] = (Object) "bR):]Ic>0M'S+v";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) "bR):]Ic>0M'S+v";
      PrintWriter printWriter0 = mockPrintWriter0.printf("<", objectArray0);
      printWriter0.print(false);
      mockPrintWriter0.println((float) 44);
      helpFormatter1.printWrapped(printWriter0, 44, 279, "\n");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter1.setSyntaxPrefix("");
      helpFormatter1.getOptionComparator();
      helpFormatter1.getSyntaxPrefix();
      helpFormatter1.getWidth();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "");
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) options0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      MockPrintWriter mockPrintWriter1 = (MockPrintWriter)mockPrintWriter0.format("", objectArray0);
      mockPrintWriter1.append('{');
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter1, 9, options1, 9, (-272));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      Options options0 = new Options();
      Options options1 = options0.addOption("3tWn", false, ", ");
      Option option0 = new Option("", ", ");
      options0.addOption(option0);
      helpFormatter0.printHelp("M8xS!rVR", "", options1, "M8xS!rVR");
      helpFormatter0.rtrim("M8xS!rVR");
      MockFile mockFile0 = new MockFile(", ", "y{^c(nQM%[r");
      MockFile mockFile1 = new MockFile(mockFile0, "BPy6>#%Omi:G^");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("B2", "2>", (File) mockFile1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setWidth((-555));
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      Options options0 = new Options();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("\n");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "arg");
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getArgName();
      Comparator<Option> comparator1 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator1;
      StringBuffer stringBuffer0 = new StringBuffer("bR):]Ic>0M'S+v");
      int int0 = (-2174);
      Options options0 = null;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "arg";
      objectArray0[2] = (Object) comparator1;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "arg";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) helpFormatter0.optionComparator;
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      helpFormatter0.createPadding(0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 1, 557, "bR):]Ic>0M'S+v");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption((String) null, false, "");
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) options0;
      mockPrintWriter0.printf("--", objectArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 557, 557, "");
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 557, options0, (-1), 557);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption((String) null, false, "");
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) options0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      mockPrintWriter0.format("", objectArray0);
      Options options1 = new Options();
      helpFormatter0.setDescPadding(18);
      helpFormatter0.setNewLine("`GE&}2:>T");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter1.setOptionComparator(comparator0);
      helpFormatter1.setLeftPadding(1886);
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "arg";
      mockPrintWriter0.print('}');
      objectArray0[2] = (Object) "arg";
      objectArray0[3] = (Object) "bR):]Ic>0M'S+v";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) "bR):]Ic>0M'S+v";
      PrintWriter printWriter0 = mockPrintWriter0.printf("<", objectArray0);
      mockPrintWriter0.println((float) 44);
      helpFormatter1.printWrapped(printWriter0, 44, 279, "\n");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter1.setSyntaxPrefix("");
      helpFormatter1.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "3aDk0{tA";
      Options options0 = new Options();
      options0.addOption((String) null, false, "");
      String string1 = "";
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.append((CharSequence) " ");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "", "", (Options) null, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      Options options0 = new Options();
      Options options1 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp("l:jy16", options0, false);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 74, "f)wtgm4rEw[tIhtpak-", "usage: ", options1, 74, 1, "-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator0);
      helpFormatter1.setLeftPadding(1886);
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "arg";
      objectArray0[1] = (Object) comparator0;
      mockPrintWriter0.print('}');
      objectArray0[2] = (Object) "arg";
      objectArray0[3] = (Object) "bR):]Ic>0M'S+v";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) "bR):]Ic>0M'S+v";
      objectArray0[7] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter0.printf("<", objectArray0);
      helpFormatter1.printWrapped(printWriter0, 44, 279, "\n");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setWidth(74);
      helpFormatter0.rtrim("<");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "usage: ";
      Options options0 = new Options();
      String string0 = null;
      Option option0 = new Option((String) null, "\n");
      Options options1 = options0.addOption(option0);
      String string1 = "zY0,Fw";
      helpFormatter0.printHelp("K~\u0003%hvg#(%W Nh", "K~\u0003%hvg#(%W Nh", options1, "zY0,Fw");
      helpFormatter0.rtrim(" ");
      MockFile mockFile0 = new MockFile("", " ");
      mockFile0.mkdir();
      MockFile.createTempFile("mw", "\n", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.rtrim("amj&J");
      helpFormatter0.defaultDescPad = 2637;
      Options options0 = new Options();
      options0.toString();
      String string0 = "[ option: ";
      Options options1 = options0.addOption("", false, "[ option: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 0, "6nugjf,h .Z[asK3(", "amj&J", options1, 44, 0, "amj&J");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.append((CharSequence) " ");
      StringBuffer stringBuffer0 = new StringBuffer("");
      Options options1 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 74, "", "", (Options) null, 32, 118, "_b 7k$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1886);
      helpFormatter0.getLongOptSeparator();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      Options options2 = options0.addOption("arg", true, " ");
      helpFormatter0.printHelp(" ", ", ", options2, "%B3(", true);
      int int0 = 0;
      Options options3 = null;
      int int1 = 0;
      int int2 = (-572);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setWidth((-1815));
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-1815), "'H;;!%K7DrR#CjWu`", (String) null, options0, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1886);
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      Options options2 = options0.addOption("arg", true, " ");
      helpFormatter0.printHelp(" ", ", ", options2, "%B3(", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 74, " ", " ", (Options) null, 0, (-572), " ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(923, "arg", "line.separator", options0, "");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1886);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "usage: ");
      helpFormatter0.getLongOptSeparator();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      Options options2 = options0.addOption("arg", true, " ");
      helpFormatter0.printHelp(" ", ", ", options2, "%B3(", true);
      int int0 = 0;
      Options options3 = null;
      int int1 = 0;
      int int2 = (-572);
      // Undeclared exception!
      helpFormatter0.printHelp(0, ", ", "Et $0zCD%S=Kq`y#[M", options0, "Et $0zCD%S=Kq`y#[M");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-35);
      byte byte0 = (byte)47;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte) (-102);
      helpFormatter0.setDescPadding((-426));
      byteArray0[4] = (byte)13;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.findWrapPos("", 132, (-2));
      String string1 = "arg";
      Options options0 = new Options();
      String string2 = "*q:`cAh}(9RE<;";
      Option option0 = null;
      try {
        option0 = new Option("*q:`cAh}(9RE<;", "arg", false, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '*q:`cAh}(9RE<;' contains an illegal character : '*'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.rtrim("amj&J");
      helpFormatter0.defaultDescPad = 2637;
      Options options0 = new Options();
      options0.toString();
      Options options1 = options0.addOption("", false, "[ option: ");
      options1.getOptionGroups();
      helpFormatter0.printHelp("amj&J", options1, false);
      options1.getMatchingOptions("--");
      helpFormatter0.getWidth();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setNewLine("[ option: ");
      helpFormatter0.setSyntaxPrefix("E9Zao");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      String string0 = "[u`";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 391, "z+Gm<.", "-", options0, 58, (-334), "[u`");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-2937);
      helpFormatter0.setWidth(0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-2937), "", " ", options1, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-2937);
      helpFormatter0.setWidth((-18));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write(0);
      stringWriter0.getBuffer();
      Options options0 = new Options();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("8bMB?F!+[KpyEW)", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "^^'#v'l|;";
      MockFile mockFile0 = new MockFile("^^'#v'l|;");
      File file0 = MockFile.createTempFile("arg", "--", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      int int0 = 391;
      Options options0 = new Options();
      String string1 = "";
      Options options1 = options0.addOption("", true, "arg");
      int int1 = 56;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 391, options1, 56, 64);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1886);
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", false, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      Options options2 = new Options();
      helpFormatter0.printHelp(" ", ", ", options2, "%B3F(", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-28), " ", " ", (Options) null, 0, (-572), " ", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption((String) null, false, "");
      StringWriter stringWriter0 = new StringWriter(1212);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) options0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      Options options1 = new Options();
      helpFormatter0.printHelp(printWriter0, 1212, "3aDk0{tA", "", options1, 1212, 1212, "", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1212, "]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-2937);
      helpFormatter0.setWidth(0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      int int0 = (-81);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp("/):>`_m_wdH0/i", "/):>`_m_wdH0/i", options0, ">");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("^^'#v'l|;");
      File file0 = MockFile.createTempFile("arg", "--", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 391, "[", "", options0, 1, 1, " ");
      helpFormatter0.setArgName((String) null);
      helpFormatter0.setOptPrefix("-");
      helpFormatter0.getWidth();
      helpFormatter0.getOptPrefix();
      int int0 = (-2722);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "", (String) null, options0, (-2722), 1, "arg", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1630), "8^?];jX Cw'", " ", options0, 391, 391, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-2937);
      helpFormatter0.setWidth(0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      Options options0 = new Options();
      Options options1 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp("8bMB?F!+[KpyEW)", options0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1886);
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      Options options2 = new Options();
      helpFormatter0.printHelp(" ", ", ", options2, "%B3(", true);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, " ", " ", (Options) null, 0, (-572), " ", false);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.createPadding(35);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(" ] [ long ", options0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("   ");
      helpFormatter0.defaultOptPrefix = " ] [ long ";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("9uDqkM>s-QW");
      Options options0 = new Options();
      helpFormatter0.printOptions(mockPrintWriter0, 0, options0, 0, 2184);
      helpFormatter0.setLongOptPrefix("RJI3q$bMj`");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setArgName((String) null);
      helpFormatter0.getSyntaxPrefix();
      String string1 = "'";
      helpFormatter0.setSyntaxPrefix("'");
      String string2 = "9y(VOIvOIkY$GH8";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("`\"=Tyj%/ahtJI5gJ1d-", "`rolB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '`\"=Tyj%/ahtJI5gJ1d-' contains an illegal character : '`'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-946));
      StringBuffer stringBuffer0 = new StringBuffer("--");
      int int0 = (-1);
      Options options0 = new Options();
      boolean boolean0 = true;
      int int1 = (-282);
      String string0 = "   ";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-282), (-282), "   ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultNewLine = "";
      PrintWriter printWriter0 = null;
      int int0 = 1436;
      String string1 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      String string2 = "";
      Options options0 = new Options();
      String string3 = "xi>^7'J#>_^ctz]";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 3559, 1436, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "");
      Options options2 = options1.addOption((String) null, "", true, "-");
      Option option0 = new Option("arg", "--", true, "");
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("3aDk0{tA", "3aDk0{tA", options3, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "<}44";
      int int0 = (-2416);
      helpFormatter0.defaultDescPad = (-2416);
      helpFormatter0.setArgName("<}44");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      // Undeclared exception!
      try { 
        stringBuffer0.deleteCharAt(3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 3
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
      helpFormatter0.setWidth(1082);
      helpFormatter0.rtrim((String) null);
      helpFormatter0.setLongOptPrefix("j[@%-_~UO");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      String string0 = "Z#A=HW}sg#DYqa5";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1098), "Z#A=HW}sg#DYqa5");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      Options options0 = new Options();
      String string0 = null;
      Options options1 = options0.addOption((String) null, false, ", ");
      Option option0 = new Option((String) null, "\n");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp("K~\u0003%hvg#(%W Nh", "K~\u0003%hvg#(%W Nh", options2, "zY0,Fw");
      helpFormatter0.rtrim(", ");
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Cannot add value, list full.");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-963), ", ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("has already been selected: '", (-323), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      Locale locale0 = Locale.FRENCH;
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) locale1;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) locale1;
      mockPrintStream0.format(locale1, "arg", objectArray0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "-");
      mockPrintStream0.println('[');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 444, "AX&T-}j/EU<");
      helpFormatter0.getArgName();
      helpFormatter0.setLongOptSeparator("arg");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setNewLine(" ");
      helpFormatter0.getOptPrefix();
      int int0 = 0;
      String string0 = null;
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("--", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1100), ">", ">", options1, "org.apache.commons.cli.HelpFormatter", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1352);
      helpFormatter0.defaultWidth = (-1352);
      String string0 = "x ,<|$dpg{0.*_zsl";
      helpFormatter0.setNewLine(" [ARG]");
      helpFormatter0.defaultOptPrefix = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1352), (-1352), "x ,<|$dpg{0.*_zsl");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("--", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1886);
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("arg", false, ", ");
      helpFormatter0.printHelp(" ", ", ", options3, "%B3(", true);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, " ", " ", (Options) null, 0, (-572), " ", false);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.setOptionComparator((Comparator) null);
      int int0 = 42;
      helpFormatter0.setLeftPadding(42);
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("usage: ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 931, 787, "bR):]Ic>0M'S+v");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 42, (Options) null, 787, 787);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getArgName();
      Comparator<Option> comparator1 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator1;
      StringBuffer stringBuffer0 = new StringBuffer("bR):]Ic>0M'S+v");
      int int0 = (-2174);
      Options options0 = null;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "arg";
      objectArray0[2] = (Object) comparator1;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "arg";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) helpFormatter0.optionComparator;
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 1, 557, "bR):]Ic>0M'S+v");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "a";
      int int0 = 0;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "a";
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 0, "a");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2937);
      helpFormatter0.defaultWidth = (-2937);
      int int1 = 0;
      helpFormatter0.setWidth(0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Options options0 = new Options();
      String string0 = "";
      boolean boolean0 = true;
      String string1 = "/)\\:>`_m_wdH0/i";
      Options options1 = options0.addOption("", true, "/):>`_m_wdH0/i");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-81), options1, 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("BW");
      helpFormatter0.getWidth();
      String string0 = "U1hk3yB:oa&xnxUn";
      MockFile mockFile0 = new MockFile("-", "U1hk3yB:oa&xnxUn");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, " :: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  :: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, " ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }
}
