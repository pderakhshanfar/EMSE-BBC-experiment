/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:15:51 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(2);
      options0.helpOptions();
      helpFormatter0.renderOptions(stringBuffer0, 31, options0, 31, 2);
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2, (-1), "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      StringBuffer stringBuffer1 = new StringBuffer(74);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "]", "", (Options) null, 0, 31, "");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[ARG...]";
      int int0 = (-1070);
      helpFormatter0.defaultWidth = (-1070);
      helpFormatter0.defaultSyntaxPrefix = "[ARG...]";
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1070));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2340);
      helpFormatter0.setLeftPadding((-2340));
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      helpFormatter0.getLeftPadding();
      helpFormatter0.defaultOptPrefix = "org.apache.commons.cli.AlreadySelectedException";
      String string1 = "^BY+q}~n.FCg";
      helpFormatter0.rtrim("^BY+q}~n.FCg");
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-2299));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.defaultLeftPad = 54;
      helpFormatter0.defaultWidth = 54;
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setNewLine("");
      helpFormatter0.getNewLine();
      MockFile mockFile0 = new MockFile(" ] [ long ");
      MockFile mockFile1 = new MockFile(mockFile0, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "LW1NosGxq:gekVjHW";
      objectArray0[1] = (Object) "LW1NosGxq:gekVjHW";
      objectArray0[2] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "LW1NosGxq:gekVjHW", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 54, 0, "-");
      helpFormatter0.getDescPadding();
      helpFormatter0.defaultOptPrefix = "?`U 2]f-|)3%n+#";
      helpFormatter0.getNewLine();
      helpFormatter0.findWrapPos("", 3, 1513);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 54, 54, "");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = null;
      helpFormatter0.defaultArgName = null;
      helpFormatter0.setWidth(44);
      helpFormatter0.defaultDescPad = (-2);
      helpFormatter0.findWrapPos("", 103, 103);
      helpFormatter0.getArgName();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, (String) null);
      // Undeclared exception!
      try { 
        options1.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter1.format((Locale) null, "arg", objectArray0);
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options1 = options0.addOption("arg", "", true, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, (-1), options1, 9, 9);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setNewLine("<");
      helpFormatter0.setArgName("");
      options0.hasShortOption("-");
      options0.hasOption((String) null);
      helpFormatter0.printHelp(74, " ", " ", options0, (String) null);
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 12, "U^I;3t$[ic\"kO\r.kZM", options0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("arg", true, "arg");
      options1.addOption((String) null, "\n", true, "--");
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1, "--", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth(0);
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("--", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      helpFormatter1.renderWrappedText(stringBuffer0, 48, 959, "-");
      options0.addOption("arg", true, "arg");
      StringBuffer stringBuffer1 = new StringBuffer();
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer1, 0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "usage: ");
      Option option1 = new Option("", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      OptionGroup optionGroup2 = optionGroup1.addOption(option1);
      OptionGroup optionGroup3 = optionGroup2.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2966, "arg", options1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 4416, options1, 4416, 4416);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = "' contains an illegal character : '";
      String string1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("xkUt", (String) null, (Options) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "-", true, (String) null);
      Options options1 = options0.addOption(option0);
      options1.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("-", "usage: ", options0, "NO_ARGS_ALLOWED");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 4115;
      String string0 = "p$wGimp?\\.h\\";
      String string1 = "9>9ZS]\":kFj";
      Options options0 = new Options();
      options0.getMatchingOptions("-");
      options0.getOption("");
      String string2 = null;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.append('7');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter1, (-2), options0, 4115, (-141));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("l", "usage: ");
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "*<vC>^@6y&LO!RxW'", options0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1032, "]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1, 696, " ");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer1, 0, 38, " ");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("B", "");
      optionGroup0.addOption(option0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 10, "", options2);
      helpFormatter0.printHelp("vKHJ5 _s58", "Zic:7:*O[Ltt>Yh", options2, "pT~_},1Vm]3x");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      String string0 = "hI";
      String string1 = "{w4~";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "");
      options0.addOption(option0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup0.setRequired(true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2), "hI", "{w4~", options1, (-1), (-1), "hI", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(7, "-", "-", (Options) null, "org.apache.commons.cli.Option");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("' contains an illegal character : '");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 138, "3H3N,3n", (String) null, options0, 4, 35, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printHelp(0, ">", ">", options1, ">", false);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 2624, options0, 1, 1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-1447), 14, " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = new Option("arg", "-", true, " ");
      options0.addOption(option0);
      Options options1 = new Options();
      helpFormatter0.printHelp("-", "arg", options0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(1146, "-", ">", options0, "\n", false);
      Option option0 = new Option("", "-", true, ";");
      option0.setArgName("");
      option0.setOptionalArg(true);
      options0.addOption(option0);
      helpFormatter1.printHelp("usage: ", "arg", options0, "--");
      helpFormatter1.printHelp("s", "<", options0, "-", false);
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      helpFormatter1.getLongOptSeparator();
      helpFormatter0.rtrim((String) null);
      helpFormatter1.getSyntaxPrefix();
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 44, " ");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      helpFormatter0.getLeftPadding();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("B", "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 2, "{Z#eQ5mp*fb/@", "E'1Lzo2H~@_w", options1, (-4135), 0, "B", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getLeftPadding();
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer("");
      int int0 = 349;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, (Options) null, 349, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-28);
      byte byte0 = (byte) (-55);
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte)13;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "Ba02Fu1,;oD4";
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((byte)19);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("-", " ", true, "s!;N#J8Z;1uUq");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1718, (String) null, "Z=/T", options1, 37, 37, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, "", "usage: ", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      boolean boolean1 = true;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('x');
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) null;
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) "Tg]]}z7GIWff[~k";
      objectArray0[8] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf(locale0, "Tg]]}z7GIWff[~k", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 74, "%a", "", (Options) null, 74, 74, "p#QX");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      Options options0 = new Options();
      options0.addOption("arg", false, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-3549), options0, 31, 768);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "Pyv{4P[d";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Pyv{4P[d");
      Options options1 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "", options1);
      int int0 = 2773;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2773, "8~; OQFn2YD@I=Ms", "", options0, 1508, 3, "", false);
      String string1 = " :: ";
      String string2 = "";
      // Undeclared exception!
      try { 
        options1.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLeftPadding();
      String string0 = "O5^.-opGz";
      helpFormatter0.printHelp("usage: ", options0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("} wjoC C()");
      StringWriter stringWriter0 = new StringWriter(696);
      String string1 = HelpFormatter.DEFAULT_OPT_PREFIX;
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, (-239), "cmdLineSyntax not provided");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf(locale0, "arg", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-370), "org.apache.commons.cli.HelpFormatter");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "^sX_N1oO\\ss^-+";
      String string1 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, "DT3#-{]}l~+jZ}V");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("", false, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2121), "", options3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, (-3549), options0, 74, 351);
      helpFormatter0.renderWrappedText(stringBuffer1, 1, 1, "\n");
      helpFormatter0.createPadding(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1835), 1068, " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp("63\"djYo[Rx", options1);
      Object[] objectArray0 = new Object[16];
      objectArray0[1] = (Object) "63\"djYo[Rx";
      objectArray0[2] = (Object) stringBuffer0;
      objectArray0[3] = (Object) "!U#_+0";
      objectArray0[4] = (Object) options0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      MockFile mockFile0 = new MockFile("nzpdyuW11=}_$JH", "-");
      File file0 = MockFile.createTempFile("SOKM", "63\"djYo[Rx", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter0.printOptions(mockPrintWriter0, 96, options0, 34, 1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLeftPadding();
      helpFormatter0.printHelp("-", "arg", options0, "O5^.-opGz");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 74, "\n", ", ", options0, 32, 97, ">", false);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) mockPrintWriter1;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "\u0006@*~0|,*@~)yN?A!", objectArray0);
      Options options1 = new Options();
      Options options2 = new Options();
      helpFormatter2.printHelp(printWriter0, 74, ".6P=D#2{d", "\n", options1, 3, 13, " ");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Uj CC.]R2iUD");
      Locale locale0 = Locale.CHINA;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, " ", (Object[]) null);
      Options options0 = new Options();
      Options options1 = new Options();
      PrintWriter printWriter1 = printWriter0.append((CharSequence) "arg");
      Options options2 = new Options();
      Options options3 = options0.addOption("arg", " ", false, "^sX_N1oOss^-+");
      helpFormatter0.printHelp(printWriter1, 4829, "^sX_N1oOss^-+", "Uj CC.]R2iUD", options3, 4829, 4829, "=O}+Zk/kU (~?qDSLk", false);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(363, "mxR\"", "--", options0, " ", true);
      Option option0 = new Option((String) null, "arg", true, "~j)?=");
      option0.setArgName("\"m^u)ZwD0~cKLM:l6");
      option0.setOptionalArg(false);
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("<oV5", "", options1, "-");
      helpFormatter1.printHelp("e96}n'gMC", "ZgL0g|_f2s`\"(2", options0, "");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", " ");
      optionGroup0.addOption(option0);
      Option option1 = new Option("arg", "usage: ");
      optionGroup0.addOption(option1);
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2), "arg", "usage: ", options0, (-2), (-1), "usage: ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Pyv{4P[d");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("gk\"@2");
      helpFormatter0.getLeftPadding();
      Options options1 = options0.addOption((String) null, "arg", true, "usage: ");
      helpFormatter0.printHelp("J8g7C", "NGdNqLj}cT(*LM(\u0005", options1, "~");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.createPadding(0);
      Option option0 = new Option((String) null, "", true, (String) null);
      Options options2 = options1.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 31, "~", options2);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "dXm~)k`<.Z+Cg", true, "dXm~)k`<.Z+Cg");
      helpFormatter0.printHelp("--", options1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringWriter stringWriter0 = new StringWriter(31);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      StringWriter stringWriter2 = stringWriter1.append('e');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, true);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", false, "-");
      options1.addOption("Q", false, "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1, "", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 10, (String) null, options0);
      Options options1 = new Options();
      mockPrintWriter0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("usage: ");
      options0.addOption((String) null, false, "usage: ");
      int int0 = 74;
      int int1 = (-2);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 74, "org.apache.cHmmons.cli.AlreadySelectedException", (String) null, options0, 303, (-2), "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Options options0 = new Options();
      String string0 = "";
      Options options1 = options0.addOption("", "-", true, "<");
      String string1 = null;
      Option option0 = new Option((String) null, "]", true, "<");
      Options options2 = options1.addOption(option0);
      options2.addOption("arg", true, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter1, 2, "\n", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      Options options1 = new Options();
      String string0 = ">?EMc_q,3'znD";
      MockFile mockFile0 = new MockFile(">?EMc_q,3'znD");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Options options2 = options0.addOption("", true, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 3, "s5zk;Ph~o'vB#", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1);
      helpFormatter0.defaultDescPad = 1014;
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      options0.getMatchingOptions("SB8>TTJ%/|r2");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 682, ">", "\n", options0, 97, 34, "Xi6po)", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(1146, "-", ">", options0, "\n", false);
      Option option0 = new Option("", "-", true, ";");
      option0.setOptionalArg(true);
      options0.addOption(option0);
      helpFormatter1.printHelp("usage: ", "arg", options0, "--");
      helpFormatter1.printHelp("s", "<", options0, "-", false);
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      helpFormatter1.getLongOptSeparator();
      helpFormatter0.rtrim((String) null);
      helpFormatter1.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("yv{4P[d");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "gk\"@2";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) "yv{4P[d";
      objectArray0[4] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("arg", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(printWriter0, 58, "#C?&T4cvo`Tmd", "", options0, 1, 34, "{(", false);
      helpFormatter1.printHelp("FQ9*3ydK", "Illegal option name '", options0, "Illegal option name '");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Pyv{4P[d");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("gk\"@2");
      Options options1 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "", options1);
      StringBuffer stringBuffer0 = new StringBuffer(63);
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, options0, "A CloneNotSupportedException was thrown: ", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.getDescPadding();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(2);
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(2, "--", "usage: ", options0, "arg", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 10, (String) null, options0);
      Options options1 = new Options();
      mockPrintWriter0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("usage: ");
      int int0 = 74;
      int int1 = (-2);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 74, "org.apache.commons.cli.AlreadySelectedException", (String) null, options0, 303, (-2), "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "^sX_N1oO\\ss^-+";
      int int0 = (-10);
      String string1 = "Uj CC.]R2iUD";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Uj CC.]R2iUD");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Uj CC.]R2iUD");
      Locale locale0 = Locale.CHINA;
      mockPrintWriter0.printf(locale0, " ", (Object[]) null);
      Options options0 = new Options();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 10, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      helpFormatter0.getLeftPadding();
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", "org.apache.commons.cli.HelpFormatter", options0, "org.apache.commons.cli.HelpFormatter");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.createPadding(2097);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 3673, 3673, "f4S,c_9[8CXc:T.S");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
      helpFormatter1.createPadding(3);
      helpFormatter1.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "usage: ";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 3734, 1303, "usage: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-943));
      helpFormatter0.defaultDescPad = 1014;
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = new Option("arg", "-", true, " ");
      Options options1 = options0.addOption(option0);
      helpFormatter1.getLeftPadding();
      helpFormatter1.printHelp(" ", ".J/-42f1z'n&V]-u", options0, ",/$J)");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", "org.apache.commons.cli.HelpFormatter$1", options1, "S96_h8,JF;4(8#Iw", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "Uj CC.]R2iUD";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Uj CC.]R2iUD");
      Locale locale0 = Locale.CHINA;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, " ", (Object[]) null);
      Options options0 = new Options();
      Options options1 = new Options();
      PrintWriter printWriter1 = printWriter0.format("\n", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter1, (-673), "^sX_N1oOss^-+");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Pyv{4P[d");
      String string0 = "U.";
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("U.");
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "f/];", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Uj CC.]R2iUD");
      Locale locale0 = Locale.CHINA;
      mockPrintWriter0.printf(locale0, " ", (Object[]) null);
      Options options0 = new Options();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "Uj CC.]R2iUD", "", options1, 3, 74, "^sX_N1oOss^-+");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "usage: ";
      mockPrintWriter0.printf("6nv)#x{4Q{-t9OSFwz ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2), ", ", "$%K12(XlIZZ~", options0, 23, 91, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "\"", options0, "V3~pm'MrHdkVv");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Uj CC.]R2iUD");
      Locale locale0 = Locale.CHINA;
      mockPrintWriter0.printf(locale0, " ", (Object[]) null);
      Options options0 = new Options();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 34, "Uj CC.]R2iUD", "", options1, 34, (-10), "^sX_N1oOss^-+");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("yv{4P[d");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) "gk\"@2";
      objectArray0[4] = (Object) "gk\"@2";
      objectArray0[5] = (Object) "gk\"@2";
      PrintWriter printWriter0 = mockPrintWriter0.printf("2ebg8;/ vB 1", objectArray0);
      helpFormatter0.printHelp(printWriter0, 58, "yv{4P[d", "gk\"@2", options0, 58, 19, "?f]n6WD", false);
      helpFormatter0.printHelp("gk\"@2", "gk\"@2", options0, "3Bvd,T)EPGA>N_EBk|");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Pyv{4P[d");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) "gk\"@2";
      objectArray0[4] = (Object) "gk\"@2";
      objectArray0[5] = (Object) "gk\"@2";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("2ebg8;/ vB 1", objectArray0);
      helpFormatter0.setLongOptSeparator("2ebg8;/ vB 1");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1597), (String) null, "Pyv{4P[d", options0, (-496), (-1597), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("UGEk\"oH++Do ");
      helpFormatter1.getLeftPadding();
      options0.hasOption("--");
      helpFormatter0.setNewLine("hp`[dIF+/~");
      helpFormatter0.setOptPrefix("-");
      helpFormatter0.rtrim(" d");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("arg", "", false, " ");
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", "--", false, "usage: ");
      options2.addOption(option0);
      Options options3 = options1.addOption("", true, "org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.printHelp("j&O#", "61uR{h9Dj", options3, "61uR{h9Dj", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = helpFormatter1.defaultLeftPad;
      helpFormatter0.getLongOptSeparator();
      helpFormatter1.printHelp("--", options1);
      helpFormatter0.rtrim("arg");
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      StringBuffer stringBuffer0 = new StringBuffer(" [ARG]");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2), 5, "D9*XZ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = new Option("arg", true, "\n");
      options0.addOption(option0);
      helpFormatter1.printHelp("-", options0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "63\"djYo[Rx");
      // Undeclared exception!
      try { 
        helpFormatter2.renderWrappedText(stringBuffer0, (-2389), (-2389), "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = (-1203);
      helpFormatter0.defaultDescPad = 1749;
      Options options1 = options0.addOption("arg", (String) null, true, "2/*h.u4U!')ri^2h");
      helpFormatter0.printHelp(";(cRw>RC3v'/bZ+8V", ";(cRw>RC3v'/bZ+8V", options1, (String) null);
      helpFormatter0.printHelp("2/*h.u4U!')ri^2h", "", options1, ";(cRw>RC3v'/bZ+8V", false);
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptSeparator();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-891);
      helpFormatter0.setLeftPadding((-891));
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("N<hCgg<.p-", "", options0, "N<hCgg<.p-");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-943));
      helpFormatter0.defaultDescPad = 1014;
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = new Option("arg", "-", true, " ");
      options0.addOption(option0);
      helpFormatter1.getLeftPadding();
      helpFormatter1.printHelp(" ", ".J/-42f1z'n&V]-u", options0, ",/$J)");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "(zAG!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.append('(');
      helpFormatter0.printWrapped(printWriter0, 1871, 0, " [ARG]");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2168, "", options0);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2168, 1287, "");
      // Undeclared exception!
      try { 
        stringBuffer1.appendCodePoint((-260));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("'");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append('>');
      mockPrintWriter0.print(0.0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      mockPrintWriter1.printf(locale0, "--", objectArray0);
      Options options0 = new Options();
      PrintWriter printWriter0 = mockPrintWriter1.printf("-", objectArray0);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1), "", "'", options0, 0, (-1), "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      helpFormatter1.printHelp(74, "D1nokeirl", "", options0, "(<fE+~OxY!Aw");
      helpFormatter0.setOptPrefix("usage: ");
      helpFormatter0.rtrim("usage: ");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 3, options0, 1372, 1);
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer1, (-1041), (-1041), "usage:");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      helpFormatter0.getLeftPadding();
      helpFormatter0.printHelp("7-648rHJ9CO<04u", "usage: ", options0, "\"");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(942, "", "jwzz", options0, "WXL.[^\"~@BZyNo&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      helpFormatter0.getLeftPadding();
      helpFormatter0.printHelp("usage: ", "J8g7C", options0, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "s66A";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-1243), "s66A", "arg", options0, " [ARG]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Pyv{4P[d");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("gk\"@2");
      Options options1 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "", options1);
      StringBuffer stringBuffer0 = new StringBuffer(63);
      Options options2 = new Options();
      String string0 = "";
      // Undeclared exception!
      helpFormatter0.printHelp(0, "NO_ARGS_ALLOWED", "+4*FC1U./s", options0, "");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Uj CC.]R2iUD");
      Locale locale0 = Locale.CHINA;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, " ", (Object[]) null);
      Options options0 = new Options();
      Options options1 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "org.apache.commons.cli.HelpFormatter", "w*l{I=g@8^W0'", options1, (-10), (-10), "org.apache.commons.cli.HelpFormatter", true);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.setArgName("6He");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      int int0 = (-1);
      Options options0 = null;
      String string0 = "]";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Illegal option name '", "]", (Options) null, "9(Biq=['=>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 3673, 3673, "f4S,c_9[8CXc:T.S");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.rtrim(" ");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "LQ<|v-S";
      helpFormatter0.setOptPrefix("LQ<|v-S");
      helpFormatter0.setDescPadding(634);
      helpFormatter0.defaultLeftPad = 43;
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptSeparator();
      int int0 = 32;
      StringBuffer stringBuffer0 = new StringBuffer(32);
      helpFormatter0.renderWrappedText(stringBuffer0, 2661, 103, " ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(" ", options1, true);
      // Undeclared exception!
      try { 
        stringBuffer0.insert(44, 0.0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 44
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "usage: ";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      helpFormatter0.getLeftPadding();
      helpFormatter0.printHelp("usage: ", "7-648rHJ9CO<04u", options0, "\"");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "usage: ", ".h%8V5_", options0, "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp("63\"djYo[Rx", options1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Object[] objectArray0 = new Object[16];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "63\"djYo[Rx";
      objectArray0[2] = (Object) stringBuffer0;
      objectArray0[3] = (Object) "!U#_+0";
      objectArray0[4] = (Object) options0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      PrintWriter printWriter0 = mockPrintWriter0.format("63\"djYo[Rx", objectArray0);
      helpFormatter0.printUsage(printWriter0, 9, "!U#_+0");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("'");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('P');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) printWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockFile0;
      mockPrintWriter1.print((float) 1);
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) locale0;
      mockPrintWriter1.printf(locale0, "", objectArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 3, "");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-952), 3, "\"AaG");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("'");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('P');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) printWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) locale0;
      mockPrintWriter1.printf(locale0, "", objectArray0);
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append('Y');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 63, "");
      helpFormatter0.rtrim("'");
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Options options0 = new Options();
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(16);
      Object object1 = new Object();
      objectArray0[0] = object1;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Pyv{4P[d");
      int int0 = 1287;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("gk\"@2");
      Options options1 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "", options1);
      int int1 = 63;
      StringBuffer stringBuffer0 = new StringBuffer(63);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, (-1259), options0, 63, 2002);
      int int2 = 1133;
      helpFormatter0.renderWrappedText(stringBuffer1, 1133, 3, "ny5@z<");
      stringBuffer1.appendCodePoint(74);
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 2002, "Pyv{4P[d");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("R'1D)I-?");
      helpFormatter0.getNewLine();
      int int0 = (-1);
      String string0 = "gHE2j>(0se4";
      String string1 = "[";
      Options options0 = new Options();
      options0.hasLongOption(" ");
      helpFormatter0.defaultLongOptPrefix = "[";
      options0.helpOptions();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("[", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      int int0 = (-758);
      Options options0 = new Options();
      Option option0 = new Option("arg", " ");
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, "has already been selected: '");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLeftPadding();
      helpFormatter1.setLeftPadding((-2));
      helpFormatter0.printHelp("-", "arg", options0, "O5^.-opGz");
      options0.hasLongOption("usage: ");
      helpFormatter0.printHelp("arg", "arg", options0, "usage: ");
      helpFormatter0.rtrim("20/}C%,W!B,");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("=yy%k`N3x", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      
      helpFormatter1.setSyntaxPrefix("");
      assertEquals("", helpFormatter1.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setLeftPadding((-1));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setDescPadding(3015);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", (Options) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      int int0 = 2405;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 2209, options2, 2405, (-365));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-943);
      helpFormatter0.setWidth((-943));
      int int1 = 1014;
      helpFormatter0.defaultDescPad = 1014;
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-943);
      helpFormatter0.setWidth((-943));
      int int1 = 1014;
      helpFormatter0.defaultDescPad = 1014;
      helpFormatter0.getSyntaxPrefix();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("usage: ", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1868);
      int int1 = (-1304);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1304), "Cu[.?s1Ng;mp-)|~", "", (Options) null, "~~Om8H#", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setNewLine("");
      helpFormatter0.getLongOptSeparator();
      StringWriter stringWriter0 = new StringWriter(1140);
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      String string1 = null;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) " ";
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) helpFormatter0;
      // Undeclared exception!
      try { 
        mockPrintWriter0.printf((String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption(" ", " ", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      String string0 = "--";
      String string1 = "d1D\"/D=E";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", "usage: ", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "usage: ";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "usage: ", ".h%8V5_", options0, "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", (-261), (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getArgName();
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      helpFormatter1.printHelp(74, "D1nokeirl", "", options0, "(<fE+~OxY!Aw");
      helpFormatter0.setOptPrefix("usage: ");
      String string0 = helpFormatter0.rtrim("usage: ");
      assertEquals("usage: ", helpFormatter0.getOptPrefix());
      
      String string1 = helpFormatter1.getSyntaxPrefix();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals("", helpFormatter0.getNewLine());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setSyntaxPrefix(" ");
      helpFormatter0.defaultDescPad = 1;
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setOptPrefix("B?(saQaBZ.{0F&%<e]");
      helpFormatter0.findWrapPos(" ", 1, 3638);
      PrintWriter printWriter0 = null;
      int int0 = (-2692);
      Options options0 = new Options();
      String string0 = " ]";
      // Undeclared exception!
      try { 
        options0.addOption("B?(saQaBZ.{0F&%<e]", false, " ]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'B?(saQaBZ.{0F&%<e]' contains an illegal character : '?'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-3536));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "gk\"@2";
      Options options0 = new Options();
      String string1 = "Pyv{4P[d";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Pyv{4P[d");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "Pyv{4P[d";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) "gk\"@2";
      objectArray0[4] = (Object) "gk\"@2";
      objectArray0[5] = (Object) "gk\"@2";
      PrintWriter printWriter0 = mockPrintWriter0.printf("2ebg8;/ vB 1", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1597), (String) null, "Pyv{4P[d", options0, (-496), (-1597), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("^sX_N1oOss^-+");
      assertEquals("^sX_N1oOss^-+", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      MockFile mockFile0 = new MockFile("RK`Rl'&v8z", " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('!');
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 97, 97, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 3673, 3673, "f4S,c_9[8CXc:T.S");
      assertEquals("f4S,c_9[8CXc:T.S", stringBuffer0.toString());
      
      helpFormatter0.rtrim((String) null);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1);
      helpFormatter0.defaultDescPad = 1014;
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", options0);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.createPadding(0);
      helpFormatter0.defaultWidth = 1;
      helpFormatter0.findWrapPos("\n", 1014, (-876));
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-876));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding(44);
      helpFormatter1.setDescPadding((-1122));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(3602);
      helpFormatter0.getDescPadding();
      PrintWriter printWriter0 = null;
      int int0 = 31;
      String string0 = "A)8&t@Rj";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 3602, 31, "A)8&t@Rj");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      int int0 = 1287;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2168, "", options0);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2168, 1287, "");
      // Undeclared exception!
      try { 
        stringBuffer1.appendCodePoint((-260));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Pyv{4P[d");
      int int0 = 1287;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("gk\"@2");
      Options options1 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "", options1);
      int int1 = 63;
      StringBuffer stringBuffer0 = new StringBuffer(63);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, (-1259), options0, 63, 2002);
      int int2 = 1133;
      helpFormatter0.renderWrappedText(stringBuffer1, 1133, 3, "ny5@z<");
      stringBuffer1.appendCodePoint(74);
      helpFormatter0.getArgName();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 2002, "Pyv{4P[d");
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "--", (-394), 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2340);
      helpFormatter0.setLeftPadding((-2340));
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2340));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("'");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('P');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) printWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) locale0;
      PrintWriter printWriter1 = mockPrintWriter1.printf(locale0, "", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter1, (-916), "'", "[", options0, (-916), 0, "[", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-2));
      String string0 = "`!^fS+3]_P";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("`!^fS+3]_P", "W", (Options) null, "]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      String string1 = null;
      Option option0 = null;
      try {
        option0 = new Option("--", true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
