/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:29:38 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.util.Comparator;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(".\"+b]t^p~g", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "usage: ");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultDescPad = (-2);
      helpFormatter1.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 3, "-", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-1858);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(81, "org.apache.commons.cli.Options", "org.apache.commons.cli.Options", options0, "5FDj[`");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 59, (Options) null, 1685, 1685);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "X%", "X%", options0, "org.apache.commons.cli.Option", true);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "2DlEwL.hq4:xqr", "", options0, (-1), (-1844), (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(":gZ`KT\" wU(P|", "has already been selected: '", options0, "has already been selected: '", false);
      helpFormatter0.findWrapPos("The option '", 0, 0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      StringBuffer stringBuffer0 = new StringBuffer(28);
      Options options0 = new Options();
      Option option0 = new Option((String) null, "--", true, "usage: ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-1), "arg", "org.apache.commons.cli.HelpFormatter", options1, "-", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "/v99%=r1QZP*X%* z=");
      helpFormatter0.printHelp("|X/uOgrhMmD", "|X/uOgrhMmD", options1, "/v99%=r1QZP*X%* z=", true);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", "50nIfA`.-X", (Options) null, "--", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      Option option0 = new Option((String) null, "usage: ", false, (String) null);
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      int int0 = 2773;
      helpFormatter0.printHelp(2773, "org.apache.commons.cli.AlreadySelectedException", "-", options1, "", true);
      int int1 = 26;
      helpFormatter0.setLeftPadding(26);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "-", options2, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "usage: ", options1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.getNewLine();
      MockFile mockFile0 = new MockFile("--");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 29, "\n");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "usage: ", (String) null, options2, (-1), 2001, "-", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "--";
      helpFormatter0.setNewLine(" | ");
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "arg");
      Options options2 = options1.addOption("N1uATyeLU3t", "-", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = options1.getOption("");
      Option option1 = new Option("rXs3Ju", true, " | ");
      options0.getMatchingOptions(" | ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      option1.addValueForProcessing("");
      OptionGroup optionGroup2 = optionGroup1.addOption(option1);
      optionGroup2.setRequired(false);
      options0.addOptionGroup(optionGroup0);
      options0.getOptionGroups();
      helpFormatter0.printHelp(34, "N1uATyeLU3t", "Pvaky;kyy", options0, "", true);
      helpFormatter0.setLeftPadding((-1));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("S30n>9wSFE*8+1xW*|", "", options2, "Pvaky;kyy", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(19);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "usage: ");
      optionGroup0.addOption(option0);
      Options options1 = new Options();
      options1.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer1 = new StringBuffer();
      PrintWriter printWriter0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printWrapped((PrintWriter) null, 3704, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "--";
      helpFormatter0.setNewLine(" | ");
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "arg");
      options1.addOption("N1uATyeLU3t", "-", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.getOption("");
      helpFormatter0.setLeftPadding(379);
      Option option0 = new Option("rXs3Ju", true, "p7AIoU1Q!Fkm8-t");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options0.addOptionGroup(optionGroup1);
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 471, "D{5%+t9S'^h", options2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "2OqVg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, (-2), "", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      Options options0 = new Options();
      Option option0 = new Option((String) null, ",(u1MFQ5", false, "\n");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      OptionGroup optionGroup1 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(64, "N<r", "T8z", options2, "-g6q>HplP", true);
      helpFormatter0.setLeftPadding(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.renderWrappedText(stringBuffer0, 64, 74, "");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "";
      String string1 = "org.apache.commons.cli.ParseException";
      MockFile mockFile0 = new MockFile("usage: ", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) helpFormatter1;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions(mockPrintWriter1, 3, options0, 14, (-558));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      StringBuffer stringBuffer0 = new StringBuffer(28);
      Options options0 = new Options();
      Option option0 = new Option("", "9\"I,;lM%rqC4U5l}@D", true, "#.;_");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer1 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 13, "-", options2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 56, 31, " ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      mockPrintWriter0.append('9');
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getDescPadding();
      helpFormatter1.getOptionComparator();
      helpFormatter2.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("-('9[`>~J e4", "usage: ", options0, "", true);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 64, "", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      helpFormatter0.getNewLine();
      MockFile mockFile0 = new MockFile("\n");
      options0.getMatchingOptions((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLongOptSeparator();
      helpFormatter2.printWrapped((PrintWriter) mockPrintWriter0, 3, "");
      helpFormatter2.printWrapped((PrintWriter) mockPrintWriter0, 3, " ");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "usage: ";
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", options0);
      helpFormatter0.printHelp("usage: ", options0);
      String string1 = null;
      int int0 = 1084;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 1084, 1084);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 56, 31, " ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = mockPrintWriter0.append('9');
      helpFormatter0.printUsage(printWriter0, 74, " ", options0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = null;
      String string0 = " | ";
      helpFormatter0.setNewLine(" | ");
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "arg");
      options1.getMatchingOptions((String) null);
      options1.addOption("arg", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      String string1 = "rXs3Ju";
      options1.getOption("");
      Option option0 = new Option("rXs3Ju", true, "p7AIoU1Q!Fkm8-t");
      options0.getMatchingOptions(" | ");
      StringBuffer stringBuffer0 = new StringBuffer("rXs3Ju");
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("-");
      helpFormatter0.defaultSyntaxPrefix = "org.apache.commons.cli.ParseException";
      helpFormatter0.defaultArgName = "uaV*h{)\"FHPYHo>";
      helpFormatter0.defaultLeftPad = 117;
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.ParseException");
      helpFormatter0.getArgName();
      helpFormatter0.getOptPrefix();
      helpFormatter0.rtrim("\"");
      helpFormatter0.getDescPadding();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption((String) null, "usage: ", true, "usage: ");
      Options options3 = options2.addOption((String) null, false, "uaV*h{)\"FHPYHo>");
      Option option0 = new Option("", false, (String) null);
      Options options4 = options3.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.ParseException", "uaV*h{)\"FHPYHo>", options4, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 20, 31, "`EsK;Y+%<%Dn$5)");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = mockPrintWriter0.append('k');
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage(printWriter0, 3, "46,*^qV,+}p~0dNv", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.rtrim("--");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding(1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter2.optionComparator = comparator0;
      HelpFormatter helpFormatter3 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('9');
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage(printWriter0, (-1), "", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      helpFormatter0.getNewLine();
      MockFile mockFile0 = new MockFile("#<$qIF489I");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 27, 27, "#<$qIF489I");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1220, 1220, "\n");
      helpFormatter0.renderWrappedText(stringBuffer1, 1220, 27, "\n");
      StringBuffer stringBuffer2 = new StringBuffer("-");
      helpFormatter0.setLeftPadding(2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      StringBuffer stringBuffer0 = new StringBuffer(28);
      Options options0 = new Options();
      Option option0 = new Option("", "9\"I,;lM%rqC4U5l}@D", true, "#.;_");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(28, "/SlV\"63nt", "", options2, "", true);
      helpFormatter0.setLeftPadding(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(74, "\n", "BT'LF;hr", options2, "", true);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      StringBuffer stringBuffer0 = new StringBuffer(28);
      Options options0 = new Options();
      Option option0 = new Option("", "9\"I,;lM%rqC4U5l}@D", true, "#.;_");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.printf("\n", (Object[]) null);
      helpFormatter0.printHelp(printWriter0, 1401, "aS%M}AF:~f", "", options2, 115, 12, (String) null, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-940), "9\"I,;lM%rqC4U5l}@D", "aS%M}AF:~f", options1, 33, 115, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "--";
      helpFormatter0.setNewLine(" | ");
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "arg");
      Options options2 = options1.addOption("N1uATyeLU3t", "-", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = options1.getOption("");
      helpFormatter0.setLeftPadding(379);
      Option option1 = new Option("rXs3Ju", true, "p7AIoU1Q!Fkm8-t");
      options0.getMatchingOptions(" | ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      option1.addValueForProcessing("9]pE@>");
      OptionGroup optionGroup2 = optionGroup1.addOption(option1);
      optionGroup2.setRequired(false);
      options0.addOptionGroup(optionGroup0);
      options0.getOptionGroups();
      helpFormatter0.printHelp(34, "N1uATyeLU3t", "Pvaky;kyy", options0, "", true);
      helpFormatter0.setLeftPadding((-1));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1), "", "5xJHl3J=U@.S[ko,Kl", options2, 31, 31, "S30n>9wSFE*8+1xW*|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-2730), ", ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Options options1 = new Options();
      helpFormatter0.rtrim("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "org.apache.commons.cli.AlreadySelectedException", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      mockPrintWriter0.flush();
      mockPrintWriter0.append((CharSequence) "-");
      helpFormatter0.printOptions(mockPrintWriter0, (-1535), options0, 20, 1043);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1043, "' was specified but an option from this group ", "By7>dcx$}6<L~M7!V", options0, (-4903), (-1), "' was specified but an option from this group ", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      helpFormatter0.getNewLine();
      MockFile mockFile0 = new MockFile("#<$qIF489I");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte)52;
      byteArray0[6] = (byte) (-74);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)22;
      bufferedOutputStream0.write(byteArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "\n", "' was specified but an option from this group ", options0, 2636, 58, "T=evLn0h+", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.setNewLine(" | ");
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "arg");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      options1.getMatchingOptions((String) null);
      options1.addOption("N1uATyeLU3t", "-", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = options1.getOption("");
      Option option1 = new Option("rXs3Ju", true, "p7AIoU1Q!Fkm8-t");
      options0.getMatchingOptions(" | ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      OptionGroup optionGroup2 = optionGroup1.addOption(option1);
      optionGroup2.setRequired(false);
      options0.addOptionGroup(optionGroup0);
      options0.getOptionGroups();
      helpFormatter0.printHelp(34, "N1uATyeLU3t", "", options0, "", true);
      helpFormatter0.setLeftPadding((-1));
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "SabPAo8d~g_+J");
      helpFormatter0.getNewLine();
      MockFile mockFile0 = new MockFile("arg");
      MockFile mockFile1 = new MockFile(mockFile0, "SabPAo8d~g_+J");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "--", "G", options1, 1, 118, "-", false);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      helpFormatter0.getNewLine();
      MockFile mockFile0 = new MockFile("#<$qIF489I");
      MockFile mockFile1 = new MockFile(mockFile0, "usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile1);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, "3", "   ", options1, 64, 118, "   ", false);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", "3y78Oyw3'6e", options0, "arg", true);
      helpFormatter0.getNewLine();
      MockFile mockFile0 = new MockFile("`!X*'YD*`r8");
      MockFile mockFile1 = new MockFile(mockFile0, " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1043, "' was specified but an option from this group ", "3", options0, (-4903), (-4903), "/8J0m]0c}yFt", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.setNewLine(" | ");
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "SabPAo8d~g_+J");
      options1.getMatchingOptions((String) null);
      options1.addOption("N1uATyeLU3t", "-", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = options1.getOption("");
      Option option1 = new Option("rZs3Ju", true, "p7AIoU1Q!Fkm8-t");
      options0.getMatchingOptions(" | ");
      option1.setOptionalArg(false);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option1);
      helpFormatter0.printHelp("3?", " | ", options1, "", true);
      StringBuffer stringBuffer0 = new StringBuffer();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.setNewLine(" | ");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "SabPAo8d~g_+J");
      options1.getMatchingOptions((String) null);
      options1.addOption("N1uATyeLU3t", "-", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = options1.getOption("");
      Option option1 = new Option((String) null, true, "p7AIoU1Q!Fkm8-t");
      options0.getMatchingOptions(" | ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option1);
      Options options2 = options0.addOptionGroup(optionGroup0);
      options0.getOptionGroups();
      options2.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(34, "N1uATyeLU3t", "", options0, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      Options options1 = new Options();
      int int0 = 1;
      String string0 = "anT-vNLx";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3136, "P", ".GNq=N69J2;xrKN", options1, 3136, 1, "anT-vNLx");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("ZptKr+6ZS*1eQQgZ");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)61;
      byteArray0[8] = (byte)33;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(25);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 25, " ");
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          HelpFormatter helpFormatter0 = new HelpFormatter();
          Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
          helpFormatter0.setOptionComparator(comparator0);
          MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
          MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
          Options options0 = new Options();
          int int0 = 44;
          String string0 = " ";
          StringBuffer stringBuffer0 = new StringBuffer(1);
          // Undeclared exception!
          helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, " ");
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      mockPrintWriter0.println((float) 1);
      int int0 = 0;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.setNewLine(" | ");
      Options options0 = new Options();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 44, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.defaultOptPrefix = null;
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "SabPAo8d~g_+J");
      options1.getMatchingOptions((String) null);
      options1.addOption("N1uATyeLU3t", "-", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", options1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.findWrapPos("usage: ", 74, 55);
      // Undeclared exception!
      try { 
        MockFile.createTempFile("-", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "nh!uC>5M<(d]");
      String string0 = "|*x%tW6FNG ]{M";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 10, "-", "", options1, 10, 10, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      String string0 = "<HZ&Yn)J9e?)&=/";
      Options options0 = new Options();
      helpFormatter0.printHelp("<HZ&Yn)J9e?)&=/", options0, false);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      int int0 = 0;
      String string1 = helpFormatter0.defaultArgName;
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "arg");
      stringBuffer1.codePoints();
      String string2 = "arg";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, (-3085), 0, "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "org.apache.commons.cli.HelpFormatter$1";
      helpFormatter0.setLongOptSeparator("usage: ");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.setNewLine(" | ");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "SabPAo8d~g_+J");
      options1.getMatchingOptions((String) null);
      options1.addOption("N1uATyeLU3t", "-", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = options1.getOption("");
      Option option1 = new Option("rXs3Ju", true, "p7AIoU1Q!Fkm8-t");
      options0.getMatchingOptions(" | ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      OptionGroup optionGroup2 = optionGroup1.addOption(option1);
      optionGroup2.setRequired(false);
      Options options2 = options0.addOptionGroup(optionGroup0);
      options0.getOptionGroups();
      options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(34, "N1uATyeLU3t", "", options0, "", true);
      helpFormatter0.setLeftPadding((-1));
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "Ibp~GvP>@");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.setNewLine(" | ");
      MockFile mockFile0 = new MockFile("usage: ");
      File file0 = MockFile.createTempFile("0JM{T2?{", " ", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.println(0.0F);
      Options options0 = new Options();
      String string0 = "";
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3136, "0JM{T2?{", "", options0, 1, 2636, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string1 = "The option '";
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "The option '", "[I:BC<[w>77;W&8D+", options1, 1, (-575), (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = helpFormatter0.defaultWidth;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "|*x%tW6FNG ]{M", "lI0xZX$", options0, "");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.getNewLine();
      Options options1 = new Options();
      helpFormatter0.printHelp("LQDDnWU%2c$cnlkwZ", "-", options1, "lI0xZX$");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Options options0 = new Options();
      options0.getOption(" ] [ long ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("}O");
      mockPrintWriter0.flush();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "6GJtEFJXC<", " :: ", options0, 5, (-2), "__%H&<t");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", "3y78Oyw3'6e", options0, "arg", true);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 2, 2, "");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.setNewLine(" | ");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "SabPAo8d~g_+J");
      options1.getMatchingOptions((String) null);
      Options options2 = options1.addOption("N1uATyeLU3t", "-", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.getOption("");
      Option option0 = new Option("rXs3Ju", true, "p7AIoU1Q!Fkm8-t");
      options2.getOptionGroups();
      options0.getMatchingOptions(" | ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      Options options3 = options2.addOptionGroup(optionGroup1);
      options2.getOptionGroups();
      options3.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(2636, "SabPAo8d~g_+J", "", options3, " | ", true);
      helpFormatter0.setLeftPadding((-2));
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-1), (-1), "dMO");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", "g^ED:", options0, "arg", true);
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = "!S8rA4~Q2hk";
      int int0 = 63;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("!S8rA4~Q2hk", (-1066), 63);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      mockPrintWriter0.println((float) 3);
      String string0 = "\"";
      Options options0 = new Options();
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 0, (String) null, "", options0, 0, 11, "\"", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.setNewLine(" | ");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "SabPAo8d~g_+J");
      options1.getMatchingOptions((String) null);
      Options options2 = options1.addOption("N1uATyeLU3t", "-", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.getOption("");
      Option option0 = new Option("rXs3Ju", true, "p7AIoU1Q!Fkm8-t");
      options2.getOptionGroups();
      options0.getMatchingOptions(" | ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      Options options3 = options2.addOptionGroup(optionGroup1);
      options2.getOptionGroups();
      options3.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(2636, "SabPAo8d~g_+J", "", options3, "org.apache.commons.cli.Options", false);
      helpFormatter0.setLeftPadding((-2));
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      mockPrintWriter0.println((float) 1);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3136, "\"", "", options0, 1, 0, "");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3136, "[I:BC<[w>77;W&8D+", "", options0, 2235, 3136, "[ Options: [ short ");
      helpFormatter0.getNewLine();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "\"", options1, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.setNewLine(" | ");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "SabPAo8d~g_+J");
      Options options2 = options1.addOption("N1uATyeLU3t", "-", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("rXs3Ju", false, "p7AIoU1Q!Fkm8-t");
      options2.getOptionGroups();
      options0.getMatchingOptions(" | ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      Options options3 = options2.addOptionGroup(optionGroup1);
      options2.getOptionGroups();
      options3.addOptionGroup(optionGroup1);
      int int0 = helpFormatter0.defaultWidth;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "-", "q", options0, " | ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      mockPrintWriter0.println((float) 1);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3136, "\"", "", options0, 1, 0, "P");
      StringBuffer stringBuffer0 = new StringBuffer("-");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3449, 44, " ");
      helpFormatter0.renderOptions(stringBuffer1, 10, options0, 3022, 0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.printf("<HZ&Yn)J9e?)&=/", (Object[]) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      int int0 = 17;
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      int int1 = 1;
      Options options0 = null;
      int int2 = 975;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, (Options) null, 975, 17);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("F,9Gl8`OT7KE(");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "F,9Gl8`OT7KE(");
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-35), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 2786, "-");
      helpFormatter0.createPadding(2786);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, " ", false, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, (String) null, (String) null, options1, "-", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      String string0 = "<HZ&Yn)J9e?)&=/";
      PrintWriter printWriter0 = mockPrintWriter0.printf("<HZ&Yn)J9e?)&=/", (Object[]) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      mockPrintWriter0.print("M>\"vIsI");
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("M>\"vIsI", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      mockPrintWriter0.println((float) 1);
      int int0 = 0;
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3136, "\"", "", options0, 1, 0, "P");
      helpFormatter0.renderOptions((StringBuffer) null, 3136, options0, 3449, 3136);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 3449, 44, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      mockPrintWriter0.println((float) 3);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, "\"", "arg", options0, 74, 0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.setNewLine("\n");
      int int0 = 2624;
      Options options0 = new Options();
      helpFormatter0.printHelp(2624, " ]", " ]", options0, "D-F'ch2^`");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "onK9&Ml).");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // onK9&Ml).
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      mockPrintWriter0.println((float) 1);
      Options options0 = new Options();
      mockPrintWriter0.flush();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3136, "\"", "", options0, 5, 0, "P");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.setNewLine(" | ");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "SabPAo8d~g_+J");
      options1.getMatchingOptions((String) null);
      Options options2 = options1.addOption("N1uATyeLU3t", "-", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "rXs3Ju";
      options1.getOption("");
      Option option0 = new Option("rXs3Ju", false, "p7AIoU1Q!Fkm8-t");
      options2.getOptionGroups();
      options0.getMatchingOptions(" | ");
      optionGroup0.setRequired(true);
      Options options3 = options2.addOptionGroup(optionGroup0);
      options3.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "SabPAo8d~g_+J", "", options3, "g?JA}#I7p.xoW6", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      stringWriter0.append('\"');
      mockPrintWriter1.close();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 3, 3, "Bq");
      helpFormatter0.setLeftPadding(3);
      helpFormatter0.createPadding(0);
      helpFormatter0.setDescPadding(3);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      Options options0 = new Options();
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 3, options0, 0, (-3076));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("lI0xZX$", "3y78Oyw3'6e", options0, "lI0xZX$", true);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 27, 17, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("org.apache.commons.cli.HelpFormatter$1");
      String string0 = null;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = " ] [ long ";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(103, "", "", options0, " ] [ long ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setDescPadding(0);
      String string0 = helpFormatter0.defaultArgName;
      helpFormatter0.createPadding(0);
      Options options0 = new Options();
      Options options1 = options0.addOption("qwm", "--", false, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-967), "", "-", options1, "-", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      mockPrintWriter0.println((float) 1);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3136, "\"", "", options0, 1, 0, "P");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(")QLh(^M8xl`t^");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) ")QLh(^M8xl`t^");
      helpFormatter0.setDescPadding(0);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      int int0 = 3;
      mockPrintWriter0.close();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, 3, "<q");
      helpFormatter0.setLeftPadding(3);
      helpFormatter0.createPadding(0);
      helpFormatter0.createPadding(3);
      Options options0 = new Options();
      String string0 = "|*x%tW6FNG ]{M";
      String string1 = "]";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "]", (String) null, options0, 0, 3, (String) null, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter0.renderOptions(stringBuffer0, 74, options0, 3, 1397);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.setNewLine(" | ");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "SabPAo8d~g_+J");
      options1.getMatchingOptions((String) null);
      Options options2 = options1.addOption("N1uATyeLU3t", "-", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.getOption("");
      Option option0 = new Option("rXs3Ju", false, "p7AIoU1Q!Fkm8-t");
      options2.getOptionGroups();
      options0.getMatchingOptions(" | ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      Options options3 = options2.addOptionGroup(optionGroup1);
      options2.getOptionGroups();
      options3.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(2636, "SabPAo8d~g_+J", "", options3, "g?JA}#I7p.xoW6", false);
      helpFormatter0.setLeftPadding((-2));
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("rXs3Ju", options1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("OP>j!@mv|nUX4?E*u.", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, "^?L", true);
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-2672);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2672), "^?L", (String) null, options0, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.setNewLine(" | ");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "SabPAo8d~g_+J");
      options1.getMatchingOptions((String) null);
      Options options2 = options1.addOption("N1uATyeLU3t", "-", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.getOption("");
      Option option0 = new Option("rXs3Ju", false, "p7AIoU1Q!Fkm8-t");
      options2.getOptionGroups();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      Options options3 = options2.addOptionGroup(optionGroup1);
      options2.getOptionGroups();
      options3.addOptionGroup(optionGroup1);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " | ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1), options0, 0, 44);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "-";
      Options options1 = options0.addOption("lI0xZX$", false, "-");
      int int0 = 0;
      String string1 = "|*x%tW6FNG ]{M";
      String string2 = "";
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "-", "|*x%tW6FNG ]{M", options1, 74, (-1), "", false);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 3, (String) null, (String) null, options0, 3, 1195, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1244);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "9FgMo{JP<R5;5eI7?^");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, options1, 1244, (-785));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("OP>j!@mv|nUX4?E*u.", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, "^?L", true);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 3577, options0, 2608, 18);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      int int0 = 0;
      // Undeclared exception!
      try { 
        stringBuffer0.deleteCharAt(0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 0
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      int int0 = 3069;
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "arg", 3069, 952);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 0, "", "lI0xZX$", options1, 0, (-1), "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      String string0 = "W/@L:8";
      helpFormatter0.defaultSyntaxPrefix = "W/@L:8";
      helpFormatter0.defaultNewLine = "W/@L:8";
      String string1 = "";
      helpFormatter0.setLongOptPrefix("");
      Options options0 = new Options();
      String string2 = "d]K";
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("x/", "d]K", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'x/' contains an illegal character : '/'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(3);
      int int0 = (-6142);
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.defaultDescPad = (-6142);
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.setArgName("Q_4R!mwh6<CY2M-wm");
      helpFormatter0.findWrapPos("Q_4R!mwh6<CY2M-wm", 1858, (-1053));
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setSyntaxPrefix("?aZ=a2Wbl6]T");
      int int1 = (-1575);
      String string0 = "-(DAm5('O5";
      String string1 = "arg";
      Options options0 = new Options();
      String string2 = "";
      boolean boolean0 = false;
      Option option0 = new Option((String) null, "", false, "");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        options1.addOption("--", false, "=Y}fYCI'x:`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      int int0 = 3;
      mockPrintWriter1.close();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 3, 3, "<q");
      helpFormatter0.setLeftPadding(3);
      helpFormatter0.createPadding(0);
      helpFormatter0.setDescPadding(3);
      int int1 = 0;
      StringBuffer stringBuffer0 = new StringBuffer(0);
      int int2 = (-3076);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("-", "--", true, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "#>7n[<8}%5d4O!V-%";
      helpFormatter0.setSyntaxPrefix("#>7n[<8}%5d4O!V-%");
      int int0 = (-435);
      helpFormatter0.defaultLeftPad = (-435);
      String string1 = "FzC<Z4Ge]g$I5{|x";
      helpFormatter0.defaultLongOptPrefix = "FzC<Z4Ge]g$I5{|x";
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getDescPadding();
      PrintWriter printWriter0 = null;
      int int1 = (-2);
      String string2 = "a";
      String string3 = "4i%";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("-", "\n", false, "FzC<Z4Ge]g$I5{|x");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1100);
      helpFormatter0.setLeftPadding((-1100));
      String string0 = "h4S:`OI\"mvJwy\\";
      helpFormatter0.setArgName("{_st`+L#");
      String string1 = "d/ocVzb1Q>w-xi2i%t";
      helpFormatter0.setOptPrefix("d/ocVzb1Q>w-xi2i%t");
      String string2 = "-lEawM.z";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("-lEawM.z", "usage: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // usage: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(36);
      int int0 = 1205;
      helpFormatter0.setDescPadding(1205);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-642));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("A`j\"s|:<,5T=fES");
      helpFormatter0.createPadding(3436);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("_`[{U?/TS;qhoa>#<;", "arg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      mockFileOutputStream0.release();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2216), "_`[{U?/TS;qhoa>#<;");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      mockPrintWriter0.println((float) 1);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "\"", "\"", options0, 0, 1, "\"");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("j`IT]");
      helpFormatter0.setWidth((-1917));
      helpFormatter0.findWrapPos("j`IT]", 0, 74);
      helpFormatter0.findWrapPos("[", (-1), 1425);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) comparator0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter1.printf((Locale) null, "usage: ", objectArray0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0, false);
      mockPrintWriter2.printf("\n", objectArray0);
      int int0 = 509;
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("{26fXqri;S`LWH!t)", "ONhhcIBxf|o)S!X0i{", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '{26fXqri;S`LWH!t)' contains an illegal character : '{'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(62);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.printf("<HZ&Yn)J9e?)&=/", (Object[]) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 0, 0, "<HZ&Yn)J9e?)&=/");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "]", options0, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(")QLh(^M8xl`t^");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) ")QLh(^M8xl`t^");
      String string0 = "";
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.setArgName("<].U*4$r#f<v~R)m&S");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }
}
