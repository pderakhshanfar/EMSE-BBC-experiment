/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:22:39 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URL;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("@9`W$;+.jS$,GgANVe");
      Options options0 = new Options();
      options0.getOption("W8QGD");
      helpFormatter0.printHelp(1, "\n", "usage: ", options0, "\n", true);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding((-2314));
      String string0 = "";
      String string1 = "[ Options: [ short ";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(946, "org.apache.commons.cli.OptionGroup", "", options0, "@t(Yr.Q-h7+1c");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setArgName("");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = null;
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.createPadding(40);
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 351, options0, 351, 31);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptSeparator();
      String string0 = "";
      helpFormatter0.rtrim("");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('b');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 351, "", "", options0, 4955, (-1130), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix((String) null);
      Options options0 = new Options();
      options0.hasShortOption("--");
      options0.addOption("", "jDmj-U'p&9", true, " ");
      helpFormatter0.printHelp(1341, "I", "", options0, "I", true);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "PaNui";
      helpFormatter0.defaultDescPad = (-3267);
      Options options1 = options0.addOption("PaNui", false, "");
      int int0 = 198;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(198, "RPijcicV*jJ)FuWNYA", "w0K+Xsb'(il/", options1, "RPijcicV*jJ)FuWNYA", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)74;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[1] = (byte)2;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.createPadding((byte)74);
      helpFormatter0.rtrim("");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLongOptSeparator("v]-a$Y^Y&'=");
      helpFormatter0.findWrapPos(" ", (byte)2, (byte)74);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "--", true, "usage: ");
      Options options3 = options2.addOption(option0);
      Options options4 = options3.addOption("", " ", false, (String) null);
      helpFormatter0.printHelp((int) (byte)74, "[^TK[B>%lZ!<sN= ", "2d'we_B", options4, "?$r");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-2451));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", " ", (Options) null, " ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      optionGroup1.setRequired(true);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2), "--", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      String string0 = "tPWxeXS<h!o F|6%";
      PrintWriter printWriter0 = null;
      String string1 = "";
      helpFormatter0.findWrapPos("tPWxeXS<h!o F|6%", 1, 1);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("jMk", "\n");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        options2.addOption("usage: ", false, "tPWxeXS<h!o F|6%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      helpFormatter0.defaultWidth = (-1);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("=XnsoF,?z7V", "=XnsoF,?z7V", options1, "=XnsoF,?z7V");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getOptPrefix();
      Option option0 = new Option("", "|:q5`c]=`h5jaZGQil", true, "");
      optionGroup0.addOption(option0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'");
      Option option1 = new Option("arg", " ", false, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2), "--", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(2016);
      String string0 = "k}zJn";
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "vr,,jfQ*K4+N");
      Options options2 = options1.addOption("", (String) null, false, ";QEqW_+.OPEVo");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("NZJKL>[BqD p4mDF", options2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      options0.hasLongOption("");
      int int0 = 72;
      int int1 = 57;
      String string0 = "+PT!-k6bM;";
      Options options2 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(57, "+PT!-k6bM;", "+PT!-k6bM;", (Options) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.append('h');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "usage: ");
      Options options2 = options1.addOption("", "   ", true, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "");
      helpFormatter1.printHelp("[ARG...]", "", options3, "[ARG...]", true);
      helpFormatter0.printUsage(printWriter0, 458, (String) null, options2);
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      helpFormatter0.renderWrappedText(stringBuffer0, 35, 1827, "[\b4`^#|wv\"lH_>=");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 0, (-732), "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 1, options0, 1, 74);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 34, "arg", (String) null, options0, (-972), 1, "arg", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 3, options0, 3, 74);
      helpFormatter1.renderWrappedText(stringBuffer1, 1, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      int int0 = 1;
      mockPrintWriter0.print('W');
      mockPrintWriter0.write(14);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "0iJeC)d", (Options) null, "H%A<:[=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      int int0 = 33;
      mockPrintWriter0.println((Object) "$)(yr");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 33, "--", "--", options0, 1, 33, (String) null, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, (String) null, (String) null, options0, ")3-i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim(" ");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer0, 0, 3, "\n");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      boolean boolean0 = false;
      helpFormatter0.createPadding(0);
      String string0 = "G8P5Xfk";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      File file0 = null;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null, "3=S%");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (int) (byte)13, "7B\\!\fZNI6L", options0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (int) (byte)0, "..6v;Gy34l?C23(!ucJ", "..6v;Gy34l?C23(!ucJ", options0, (int) (byte)13, (int) (byte)0, "..6v;Gy34l?C23(!ucJ", false);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)99;
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      char[] charArray0 = new char[8];
      charArray0[0] = 'b';
      charArray0[1] = 'd';
      charArray0[2] = 'c';
      charArray0[3] = '_';
      charArray0[4] = 'C';
      charArray0[5] = ']';
      charArray0[6] = '(';
      charArray0[7] = 'J';
      stringWriter0.write(charArray0);
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (int) (byte)13, "7B\\!\fZNI6L", options0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1004, ";%+E'sOx;dY=xM!", "s0B", options0, (int) (byte)99, 2, "", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1004, "", "7B\\!\fZNI6L", options0, 1109, (int) (byte)13, "@Kp", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim(" ");
      MockFile mockFile0 = new MockFile("arg", "SwV6]v");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "KU7", options1);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 3, "");
      helpFormatter1.getOptPrefix();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.append((CharSequence) "-");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Options options0 = new Options();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 32, (String) null, (String) null, options1, 22, 1292, " [ARG]", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim(" ");
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "--", true, "");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("f~=z6{gIm*?", "]", options2, "Lg", false);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Options options0 = new Options();
      String string0 = "";
      Options options1 = options0.addOption("arg", "", false, "8c8J4bxjo 9SS");
      String string1 = "";
      Options options2 = options1.addOption("", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, options2, 1, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringBuffer stringBuffer0 = new StringBuffer(1328);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1328, 735, "=>es");
      helpFormatter0.renderOptions(stringBuffer1, 1712, options0, 1712, 1328);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1712, "", "=>es", options0, 735, (-2424), "=>es");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Option option0 = new Option((String) null, true, (String) null);
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "rB)ty]/X;]", "[ T5Y9\".", options0, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Options options1 = new Options();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "-", options0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("3tkWg>1&_AT 3");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("^/VXI?Lj3.puT4R![?");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "*MCqXhu_C", "^/VXI?Lj3.puT4R![?", options0, 0, 368, "");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[11];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) locale0;
      Object object0 = new Object();
      PrintStream printStream0 = mockPrintStream0.format(locale0, "", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-494), "usage: ", "r_J-_vC`_SpAF+S+Oz", (Options) null, "--", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)99;
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "-", false, " ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 57, "", options0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (int) (byte)99, "Mf!fH;\"TUnet).h", "--", options0, (int) (byte)99, 735, "Mf!fH;\"TUnet).h", false);
      String string0 = "Cannot add value, list full.";
      helpFormatter0.printHelp(185, "Lwy[H+[774", (String) null, options0, "Cannot add value, list full.", true);
      StringBuffer stringBuffer0 = new StringBuffer(0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (byte)99, options1, (-1080), 84);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.append('h');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "usage: ");
      Options options2 = options1.addOption("", "   ", true, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "");
      Options options4 = options3.addOption(option0);
      helpFormatter1.printHelp("[ARG...]", "", options4, "[ARG...]", true);
      helpFormatter0.printUsage(printWriter0, 458, (String) null, options2);
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      helpFormatter0.renderWrappedText(stringBuffer0, 35, 1827, "[\b4`^#|wv\"lH_>=");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)99;
      Object object0 = new Object();
      MockPrintStream mockPrintStream0 = new MockPrintStream("=<3|0");
      PrintStream printStream0 = mockPrintStream0.append('k');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      mockPrintStream1.format((Locale) null, "", (Object[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1856, "", "", (Options) null, 2263, (-925), "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) locale0;
      objectArray0[3] = (Object) helpFormatter0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, " ", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 4140, "'~1v6jlmnC", "", (Options) null, (-1), 1856, "b-0@`{!(D}*V?>PP1J,", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.append('y');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", false, "usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      Options options1 = new Options();
      helpFormatter2.printUsage(printWriter0, 74, "--", options0);
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 3, " ", "--", options0, (-536), 74, "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", true, "");
      Options options1 = options0.addOption(option0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.format(locale0, "-", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-1682), "@SbWjnr", "org.apache.commons.cli.OptionValidator", options1, (-1396), (-2), "\n", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "");
      options0.addOption(option0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "b-0@`{!(D}*V?>PP1J,", "b-0@`{!(D}*V?>PP1J,", (Options) null, (-2), 3022, "L8}b#~l+!/tn0OE&L", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.hasShortOption("-");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "/pIp=", "", options0, "NE/\"Ic\"wwjf", false);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) helpFormatter0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, " ", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 4140, ")", "'#E", (Options) null, 1856, 3022, "b-0@`{!(D}*V?>PP1J,", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      PrintWriter printWriter0 = null;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)99;
      byte byte0 = (byte)13;
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("||Cmj/O^'", (String) null, (Options) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(7, "1n,G9O#u", " 6kz9e8T]", options0, "~:bFe{'!s=J", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getMatchingOptions("");
      Option option0 = new Option("", true, "[ T5Y9\".");
      Options options1 = options0.addOption(option0);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "\n", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.defaultWidth = 192;
      helpFormatter0.rtrim("{d");
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 74, 74, "@=");
      helpFormatter0.renderWrappedText(stringBuffer2, 32, (-117), "{d");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)99;
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp((int) (byte)13, "cmdLineSyntax not provided", "--", options0, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)101;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, (-539), "usage: ", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "W7gT";
      helpFormatter0.setDescPadding((-591));
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.createPadding(97);
      helpFormatter0.rtrim("");
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      Object[] objectArray0 = new Object[1];
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 98, options0, 10, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 117;
      String string0 = "";
      String string1 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      StringBuffer stringBuffer0 = new StringBuffer("--");
      helpFormatter0.setOptPrefix((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 3, (Options) null, 3, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(74);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setOptPrefix("--");
      helpFormatter2.rtrim(" ");
      Options options0 = new Options();
      options0.getMatchingOptions("");
      helpFormatter0.createPadding(19);
      helpFormatter1.printHelp(32, "arg", "", options0, "cmdLineSyntax not provided");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 32, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(74);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setOptPrefix("--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      MockFile mockFile0 = new MockFile(" ", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3950, "Wfy:7Xk", ";5uk4F", options0, 3, 1, (String) null);
      helpFormatter0.getWidth();
      helpFormatter2.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "usage: ", "<", options1, 10, 3, "(Jb#T");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte) (-39);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(74);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", false, "@<");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp(1, "-", "\"l}OL_FfMKJ<]Ib", options1, " ", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-2));
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("arg");
      Options options0 = new Options();
      options0.getMatchingOptions("6=HcB;");
      options0.getOption("org.apache.commons.cli.OptionGroup");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.optionComparator = null;
      helpFormatter2.printHelp("6=HcB;", "arg", options0, "\n", true);
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText((StringBuffer) null, 1, 74, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('I');
      int int0 = 0;
      stringWriter1.append((CharSequence) null, 0, 0);
      String string0 = ", ";
      helpFormatter0.defaultLeftPad = 0;
      // Undeclared exception!
      helpFormatter0.printHelp(0, ", ", ", ", (Options) null, "org.apache.commons.cli.OptionValidator");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = (-2622);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "";
      String string1 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      int int1 = 1686;
      int int2 = 5950;
      helpFormatter0.createPadding(5950);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2622), "", "", options0, "tV7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('I');
      helpFormatter0.getLongOptPrefix();
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('I');
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 0, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockFile mockFile0 = new MockFile("", "org.apache.commons.cli.HelpFormatter$OptionComparator");
      mockFile0.toURL();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("\n");
      helpFormatter0.rtrim((String) null);
      Options options0 = new Options();
      options0.helpOptions();
      options0.getMatchingOptions("");
      options0.getOption("S#_b:J39");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockFile mockFile0 = new MockFile("", "org.apache.commons.cli.HelpFormatter$OptionComparator");
      URL uRL0 = mockFile0.toURL();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append('c');
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) uRL0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "-", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Locale locale1 = Locale.CHINESE;
      locale0.getDisplayName(locale1);
      helpFormatter0.printUsage(printWriter0, 116, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
      helpFormatter0.setOptPrefix("");
      helpFormatter1.rtrim("--");
      Options options0 = new Options();
      options0.getMatchingOptions("arg");
      options0.getOption("");
      helpFormatter0.printHelp(", ", ", ", options0, "-", true);
      helpFormatter0.printHelp(43, ">", "DK|f_^{Zl/4C", options0, "\n", true);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('I');
      stringWriter1.append((CharSequence) null, 0, 0);
      String string0 = ", ";
      helpFormatter0.defaultLeftPad = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), ", ", ", ", (Options) null, "org.apache.commons.cli.OptionValidator");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Object object0 = new Object();
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.HelpFormatter$OptionComparator", "',n6.odxXHI");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockFile0.mkdirs();
      Object[] objectArray0 = new Object[0];
      mockPrintStream0.printf(" | ", objectArray0);
      PrintStream printStream0 = mockPrintStream0.append('L');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 31, "',n6.odxXHI", "org.apache.commons.cli.HelpFormatter$OptionComparator", options1, 63, 1686, " | ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setDescPadding(2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setOptPrefix("--");
      helpFormatter1.rtrim("usage: ");
      Options options1 = new Options();
      options0.getMatchingOptions(" ");
      options1.getOption("");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.printHelp("arg", "", options1, "", false);
      StringBuffer stringBuffer0 = new StringBuffer(74);
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, (-29), 2, " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 1734;
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("has already been selected: '");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "*", "*", options0, (-557), 5950, "has already been selected: '");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('I');
      stringWriter1.write((-50));
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) null, 0, 0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2);
      helpFormatter0.getOptPrefix();
      String string0 = ", ";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, ", ");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/org.apache.commons.cli.HelpFormatter$OptionComparator");
      FileSystemHandling.createFolder(evoSuiteFile0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(74);
      MockFile mockFile0 = new MockFile("-");
      mockFile0.toURL();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('r');
      int int0 = 31;
      String string0 = "org.apache.commons.cli.Option";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 31, "org.apache.commons.cli.HelpFormatter$OptionComparator", "org.apache.commons.cli.Option", (Options) null, (-1), 31, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-2));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("#R)Dm/YU~b#SZP=");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1360), "}u=^$5H>JorK6$6V>Z");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("has already been selected: '");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[2] = (Object) "has already been selected: '";
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) helpFormatter0;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 628, 4048, "/");
      helpFormatter0.setLongOptSeparator("d;]IOR9YNZR%EJ-G<");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLeftPadding();
      String string0 = "org.apache.commons.cli.Option";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.Option");
      mockPrintWriter0.append((CharSequence) "--");
      int int0 = 10;
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("\n", "arg", true, "[ Options: [ short ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-2));
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("q?c?", "' was specified but an option from this group ", options0, "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("has already been selected: '");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[2] = (Object) "has already been selected: '";
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) helpFormatter0;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", (String) null, false, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      Option option0 = new Option("arg", false, "");
      Options options2 = options1.addOption(option0);
      options2.getMatchingOptions("[ARG...]");
      options2.getOption("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", "", options1, "pl,*[", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockFile mockFile0 = new MockFile("", "org.apache.commons.cli.HelpFormatter$OptionComparator");
      File file0 = MockFile.createTempFile("org.apache.commons.cli.HelpFormatter$OptionComparator", "--", (File) mockFile0);
      mockFile0.toURL();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append('c');
      String string0 = "org.apache.commons.cli.Option";
      Options options0 = null;
      int int0 = (-1);
      int int1 = (-3326);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-3326), "Rbxap");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.setDescPadding(1069);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 0, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("usage: ", "\n", (String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", " V|!a|{K8_[vME5", options0, " V|!a|{K8_[vME5");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "usage: ";
      objectArray0[1] = (Object) " ";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "usage: ";
      objectArray0[4] = (Object) " ";
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) " ";
      objectArray0[7] = (Object) "fu~Y56y+\"h$MVq6$R";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "fu~Y56y+\"h$MVq6$R", objectArray0);
      helpFormatter0.printOptions(printWriter0, 0, options0, 0, 2549);
      helpFormatter0.printHelp("%k(kT/w3>", options0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-2));
      helpFormatter0.findWrapPos("q?c?", 25, 25);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 573;
      String string0 = "";
      String string1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 573, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      mockPrintWriter0.close();
      int int0 = (-300);
      String string1 = "&]~9MGtd'#,#}Jr];H";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-300), "&]~9MGtd'#,#}Jr];H", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setSyntaxPrefix("");
      String string1 = "+d$P2HMI$>0]nx5";
      MockFile mockFile0 = new MockFile("--", "+d$P2HMI$>0]nx5");
      String string2 = "2 zC`+XBqB";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "2 zC`+XBqB");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 2 zC`+XBqB
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setNewLine("");
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.append('h');
      helpFormatter0.printWrapped(printWriter0, 0, "");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      String string0 = "',n6.odxXHI";
      MockFile mockFile0 = new MockFile((String) null, "-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockFile0.mkdirs();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockFile0;
      objectArray0[5] = (Object) " | ";
      objectArray0[6] = (Object) helpFormatter0;
      mockPrintStream0.printf("usage: ", objectArray0);
      mockPrintStream0.append('7');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 22, 21, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 480;
      String string0 = "$d!#26}";
      helpFormatter0.defaultWidth = 480;
      helpFormatter0.setArgName("$d!#26}");
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("&}:,", " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '&}:,' contains an illegal character : '&'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "]J;16+A3* b#;ibM+";
      String string1 = "";
      MockFile mockFile0 = new MockFile("", "[!G?rpX~oo[");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 0, options0, (-934), (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "k+q&B";
      File file0 = MockFile.createTempFile("k+q&B", "GQt*");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print((Object) helpFormatter0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 44, "GQt*");
      String string1 = "org.apache.commons.cli.ParseException";
      String string2 = "Bx";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option(" ", "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("has already been selected: '");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "has already been selected: '";
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) helpFormatter0;
      PrintStream printStream0 = mockPrintStream0.printf("has already been selected: '", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 628, 4048, "/");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      int int0 = (-781);
      String string0 = "-02p>NqT,KrV-";
      Options options0 = new Options();
      String string1 = "";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption(" ", "", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("-");
      helpFormatter1.setNewLine("usage: ");
      helpFormatter1.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "%+%Yjc9u,(C$";
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      StringWriter stringWriter0 = new StringWriter(74);
      int int0 = 1546;
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "usage: ", 74, 1546);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-2));
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("q?c?", 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      String string1 = "'qspNDj";
      helpFormatter0.setLongOptPrefix("'qspNDj");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("[ Options: [ short ", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '[ Options: [ short ' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-2622), "", "", options1, 1686, 5950, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockFile mockFile0 = new MockFile("", "org.apache.commons.cli.HelpFormatter$OptionComparator");
      mockFile0.toURL();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append('c');
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      PrintWriter printWriter0 = mockPrintWriter0.append('d');
      helpFormatter0.printHelp(printWriter0, 4250, "k", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, 31, 5950, "org.apache.commons.cli.HelpFormatter$OptionComparator");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-2));
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("arg");
      helpFormatter1.rtrim("");
      Options options0 = new Options();
      options0.getMatchingOptions("6=HcB;");
      options0.getOption("org.apache.commons.cli.OptionGroup");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("6=HcB;", "arg", options0, "\n", true);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      char char0 = 'I';
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      helpFormatter0.rtrim("\n");
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "", 1, 10);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getMatchingOptions("");
      Option option0 = new Option("", true, "[ T5Y9\".");
      Options options2 = options0.addOption(option0);
      options2.getOption("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("-", "", options2, "<", true);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.append('h');
      int int0 = 986;
      helpFormatter0.printWrapped(printWriter0, 12, 986, "-");
      helpFormatter0.setWidth(986);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      boolean boolean0 = true;
      String string0 = "\\vt^['%&cxs]mUI";
      String string1 = "fwQ0jGwP'qk";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(false);
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getOption("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("K", "org.apache.commons.cli.Util", options0, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1312), "-", "", options0, "mbFOgs", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "The option '";
      Options options0 = new Options();
      helpFormatter0.printHelp("The option '", options0, false);
      helpFormatter0.printHelp("The option '", options0, false);
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      char char0 = 's';
      StringWriter stringWriter2 = stringWriter1.append('s');
      int int0 = 247;
      helpFormatter0.defaultDescPad = (-259);
      // Undeclared exception!
      try { 
        stringWriter2.append((CharSequence) "usage: ", 247, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('I');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) null, 0, 0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2);
      String string0 = ", ";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, ", ");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
      Options options0 = new Options();
      helpFormatter0.printUsage(printWriter0, 13, (String) null, options0);
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(13, (String) null, "k$JvG $4`A]p_p?", options0, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3, "\n", "", options1, 5950, 1686, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "usage: ", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", true, "=W0r=c1");
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(24, "", "", options3, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      Option option0 = new Option((String) null, false, "[");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", " ", true, "Ee^t=^GCuXi]v");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("=?Y${=", "meC0L%;sRV~Ko7", options3, "#}QUDGt)E", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "V=:0m$j.EH{\"W";
      helpFormatter0.setArgName("V=:0m$j.EH{\"W");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      helpFormatter0.setNewLine("V=:0m$j.EH{\"W");
      int int0 = 22;
      helpFormatter0.setDescPadding(22);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      helpFormatter0.getOptionComparator();
      String string1 = "";
      String string2 = "";
      Options options0 = new Options();
      helpFormatter0.setLeftPadding(46);
      Option option0 = new Option("arg", "x87PNl", false, "");
      Options options1 = options0.addOption(option0);
      option0.setArgName("W5i]?2G^XG)Y0");
      // Undeclared exception!
      try { 
        options1.addOption("W5i]?2G^XG)Y0", "--", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'W5i]?2G^XG)Y0' contains an illegal character : ']'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(2333);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringBuffer0.append((Object) stringWriter0);
      helpFormatter0.renderWrappedText(stringBuffer0, 2333, 2333, "");
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setOptPrefix("i0Jj}T");
      assertEquals(0, helpFormatter0.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockFile mockFile0 = new MockFile("", "org.apache.commons.cli.HelpFormatter$OptionComparator");
      File file0 = MockFile.createTempFile("org.apache.commons.cli.HelpFormatter$OptionComparator", "--", (File) mockFile0);
      mockFile0.toURL();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append('c');
      int int0 = 31;
      String string0 = "org.apache.commons.cli.Option";
      Options options0 = null;
      int int1 = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 31, "org.apache.commons.cli.HelpFormatter$OptionComparator", "org.apache.commons.cli.Option", (Options) null, (-1), 31, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setLeftPadding(0);
      assertEquals(0, helpFormatter0.defaultLeftPad);
      
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", " V|!a|{K8_[vME5", options0, " V|!a|{K8_[vME5");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "usage: ";
      objectArray0[1] = (Object) " ";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "usage: ";
      objectArray0[4] = (Object) " ";
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) " ";
      objectArray0[7] = (Object) "fu~Y56y+\"h$MVq6$R";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "fu~Y56y+\"h$MVq6$R", objectArray0);
      helpFormatter0.printOptions(printWriter0, 0, options0, 0, 2549);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-651);
      helpFormatter0.setWidth((-651));
      MockFile mockFile0 = new MockFile("-", "usage: ");
      String string0 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("org.apache.commons.cli.HelpFormatter", "!L o-s9GA,~2{2wi");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1263), (-2), "cmdLineSyntax not provided");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setNewLine(";e2/k<pm#;_");
      String string0 = "";
      helpFormatter0.setNewLine("");
      helpFormatter0.setDescPadding(0);
      StringBuffer stringBuffer0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "", false, "/ $wruz,5mEOd]~");
      String string1 = "zCA";
      boolean boolean0 = false;
      options2.getOption((String) null);
      Options options3 = options2.addOption("zCA", false, "");
      int int0 = (-3168);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (-849), options3, (-1), (-3168));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-421));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }
}
