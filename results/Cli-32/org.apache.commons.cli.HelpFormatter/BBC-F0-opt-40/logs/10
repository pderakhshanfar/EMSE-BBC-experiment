* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-40
* Going to generate test cases for class: org.apache.commons.cli.HelpFormatter
* Starting Client-0
* Connecting to master process on port 15791
* Analyzing classpath: 
  - subjects/buggy-versions/Cli-32/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.cli.HelpFormatter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1151
* Using seed 2272585150
* Starting evolution
bbc usage percentage is: 40%
* Initial Number of Goals in DynaMOSA = 400 / 1151
[MASTER] 18:02:46.868 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 18:02:55.807 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch org.apache.commons.cli.HelpFormatter.appendOption(Ljava/lang/StringBuffer;Lorg/apache/commons/cli/Option;Z)V: I3 Branch 18 IFNE L639 - false in context: 
[MASTER] 18:02:55.824 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch org.apache.commons.cli.HelpFormatter.appendOption(Ljava/lang/StringBuffer;Lorg/apache/commons/cli/Option;Z)V: I82 Branch 25 IFNE L661 - false in context: 
[MASTER] 18:02:55.825 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch org.apache.commons.cli.HelpFormatter.appendOption(Ljava/lang/StringBuffer;Lorg/apache/commons/cli/Option;Z)V: I38 Branch 20 IFEQ L654 - false in context: 
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
* Search finished after 601s and 332 generations, 124221 statements, best individual has fitness: 130.0
* Minimizing test suite
[MASTER] 18:14:05.400 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 100%
* Total number of goals: 203
* Number of covered goals: 202
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 92%
* Total number of goals: 157
* Number of covered goals: 144
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 56
* Number of covered goals: 56
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 93%
* Total number of goals: 508
* Number of covered goals: 470
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 70%
* Total number of goals: 46
* Number of covered goals: 32
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 98%
* Total number of goals: 40
* Number of covered goals: 39
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 98%
* Total number of goals: 40
* Number of covered goals: 39
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 92%
* Total number of goals: 157
* Number of covered goals: 144
* Generated 130 tests with total length 1574
* Resulting test suite's coverage: 87% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 18:14:48.159 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.66775% of time used, but only 16/130 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 6%
* Compiling and checking tests
[MASTER] 18:15:32.041 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:15:32.134 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:15:39.276 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_197_tmp__ESTest.test0(HelpFormatter_197_tmp__ESTest.java:95)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 18:15:39.277 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Options options0 = new Options();
assertNotNull(options0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter("?/Z@n>D~8uWV");
assertNotNull(mockPrintWriter0);

HelpFormatter helpFormatter0 = new HelpFormatter();
assertNotNull(helpFormatter0);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(3, helpFormatter0.getDescPadding());

helpFormatter0.setOptionComparator((Comparator) null);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(3, helpFormatter0.getDescPadding());

HelpFormatter helpFormatter1 = new HelpFormatter();
assertFalse(helpFormatter1.equals((Object)helpFormatter0));
assertNotNull(helpFormatter1);
assertEquals(74, helpFormatter1.defaultWidth);
assertEquals(1, helpFormatter1.defaultLeftPad);
assertEquals(3, helpFormatter1.defaultDescPad);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals("-", helpFormatter1.getOptPrefix());
assertEquals(1, helpFormatter1.getLeftPadding());
assertEquals(" ", helpFormatter1.getLongOptSeparator());
assertEquals("\n", helpFormatter1.getNewLine());
assertEquals(3, helpFormatter1.getDescPadding());
assertEquals("arg", helpFormatter1.getArgName());
assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
assertEquals("--", helpFormatter1.getLongOptPrefix());
assertEquals(74, helpFormatter1.getWidth());

StringBuffer stringBuffer0 = new StringBuffer();
assertNotNull(stringBuffer0);
assertEquals("", stringBuffer0.toString());
assertEquals(0, stringBuffer0.length());

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertNotNull(fileDescriptor0);
assertFalse(fileDescriptor0.valid());

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0);
assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
assertNotNull(mockPrintWriter1);

Options options1 = new Options();
assertFalse(options1.equals((Object)options0));
assertNotNull(options1);

helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 74, "qZ]hojK83+UWJj+E?R:", "", options1, 6, 1, "org.apache.commons.cli.AlreadySelectedException");
assertNotSame(helpFormatter1, helpFormatter0);
assertNotSame(mockPrintWriter1, mockPrintWriter0);
assertNotSame(options1, options0);
assertFalse(helpFormatter1.equals((Object)helpFormatter0));
assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
assertFalse(options1.equals((Object)options0));
assertEquals(74, helpFormatter1.defaultWidth);
assertEquals(1, helpFormatter1.defaultLeftPad);
assertEquals(3, helpFormatter1.defaultDescPad);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals("-", helpFormatter1.getOptPrefix());
assertEquals(1, helpFormatter1.getLeftPadding());
assertEquals(" ", helpFormatter1.getLongOptSeparator());
assertEquals("\n", helpFormatter1.getNewLine());
assertEquals(3, helpFormatter1.getDescPadding());
assertEquals("arg", helpFormatter1.getArgName());
assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
assertEquals("--", helpFormatter1.getLongOptPrefix());
assertEquals(74, helpFormatter1.getWidth());
assertFalse(fileDescriptor0.valid());


[MASTER] 18:15:47.462 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_215_tmp__ESTest.test0(HelpFormatter_215_tmp__ESTest.java:64)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 18:15:47.463 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
assertNotNull(helpFormatter0);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(1, helpFormatter0.getLeftPadding());

helpFormatter0.setArgName((String) null);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(1, helpFormatter0.getLeftPadding());
assertNull(helpFormatter0.getArgName());

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertNotNull(fileDescriptor0);
assertFalse(fileDescriptor0.valid());

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
assertNotNull(mockPrintWriter0);

Options options0 = new Options();
assertNotNull(options0);

Options options1 = options0.addOption("", false, "-");
assertSame(options0, options1);
assertSame(options1, options0);
assertNotNull(options1);

helpFormatter0.printOptions(mockPrintWriter0, (-2960), options1, 740, (-2));

[MASTER] 18:15:56.422 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_242_tmp__ESTest.test0(HelpFormatter_242_tmp__ESTest.java:53)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 18:15:56.423 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
assertNotNull(helpFormatter0);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals(3, helpFormatter0.getDescPadding());

StringBuffer stringBuffer0 = new StringBuffer();
assertNotNull(stringBuffer0);
assertEquals("", stringBuffer0.toString());
assertEquals(0, stringBuffer0.length());

int int0 = 2;
FileDescriptor fileDescriptor0 = new FileDescriptor();
assertNotNull(fileDescriptor0);
assertFalse(fileDescriptor0.valid());

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
assertNotNull(mockPrintWriter0);

PrintWriter printWriter0 = mockPrintWriter0.printf("w* YpoqiERc", (Object[]) null);
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);
assertNotNull(printWriter0);
assertFalse(fileDescriptor0.valid());

MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
assertFalse(mockPrintWriter1.equals((Object)printWriter0));
assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
assertNotNull(mockPrintWriter1);

helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 2, (-2609), "w* YpoqiERc");

[MASTER] 18:16:01.596 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.util.concurrent.ExecutionException: org.evosuite.runtime.TooManyResourcesException: Loop has been executed more times than the allowed 10000
[MASTER] 18:16:01.597 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
assertNotNull(helpFormatter0);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals(74, helpFormatter0.getWidth());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("-", helpFormatter0.getOptPrefix());

HelpFormatter helpFormatter1 = new HelpFormatter();
assertFalse(helpFormatter1.equals((Object)helpFormatter0));
assertNotNull(helpFormatter1);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, helpFormatter1.defaultLeftPad);
assertEquals(3, helpFormatter1.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, helpFormatter1.defaultWidth);
assertEquals(1, helpFormatter1.getLeftPadding());
assertEquals("-", helpFormatter1.getOptPrefix());
assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
assertEquals(3, helpFormatter1.getDescPadding());
assertEquals("arg", helpFormatter1.getArgName());
assertEquals("\n", helpFormatter1.getNewLine());
assertEquals(74, helpFormatter1.getWidth());
assertEquals("--", helpFormatter1.getLongOptPrefix());
assertEquals(" ", helpFormatter1.getLongOptSeparator());

StringWriter stringWriter0 = new StringWriter(310);
assertNotNull(stringWriter0);
assertEquals("", stringWriter0.toString());

StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertNotNull(stringWriter1);
assertEquals("usage: ", stringWriter0.toString());
assertEquals("usage: ", stringWriter1.toString());

StringBuffer stringBuffer0 = stringWriter1.getBuffer();
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertNotNull(stringBuffer0);
assertEquals("usage: ", stringWriter0.toString());
assertEquals("usage: ", stringWriter1.toString());
assertEquals("usage: ", stringBuffer0.toString());
assertEquals(7, stringBuffer0.length());

StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 63, 1, "fnum");
assertNotSame(helpFormatter1, helpFormatter0);
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertSame(stringBuffer0, stringBuffer1);
assertSame(stringBuffer1, stringBuffer0);
assertFalse(helpFormatter1.equals((Object)helpFormatter0));
assertNotNull(stringBuffer1);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, helpFormatter1.defaultLeftPad);
assertEquals(3, helpFormatter1.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, helpFormatter1.defaultWidth);
assertEquals(1, helpFormatter1.getLeftPadding());
assertEquals("-", helpFormatter1.getOptPrefix());
assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
assertEquals(3, helpFormatter1.getDescPadding());
assertEquals("arg", helpFormatter1.getArgName());
assertEquals("\n", helpFormatter1.getNewLine());
assertEquals(74, helpFormatter1.getWidth());
assertEquals("--", helpFormatter1.getLongOptPrefix());
assertEquals(" ", helpFormatter1.getLongOptSeparator());
assertEquals("usage: fnum", stringWriter0.toString());
assertEquals("usage: fnum", stringWriter1.toString());
assertEquals("usage: fnum", stringBuffer0.toString());
assertEquals(11, stringBuffer0.length());
assertEquals("usage: fnum", stringBuffer1.toString());
assertEquals(11, stringBuffer1.length());

stringWriter1.flush();
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertEquals("usage: fnum", stringWriter0.toString());
assertEquals("usage: fnum", stringWriter1.toString());

helpFormatter0.renderWrappedText(stringBuffer1, 0, 3972, "\n");

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 3
* Writing tests to file
* Writing JUnit test case 'HelpFormatter_ESTest' to results/Cli-32/org.apache.commons.cli.HelpFormatter/BBC-F0-opt-40/tests/10
* Done!

* Computation finished
