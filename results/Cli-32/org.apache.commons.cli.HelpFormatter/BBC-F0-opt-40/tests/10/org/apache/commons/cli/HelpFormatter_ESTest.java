/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 15:02:52 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-984);
      helpFormatter0.defaultDescPad = (-984);
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      int int1 = 552;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = ":NwwM]Z38]C>";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(":NwwM]Z38]C>", ":NwwM]Z38]C>", options1, (String) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        MockFile.createTempFile("--", "The option '");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("   ", 0, 0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("{Ff`|79<!{D@Wq&CM{7m");
      helpFormatter0.setDescPadding(0);
      Options options0 = new Options();
      options0.hasLongOption(" ");
      helpFormatter0.printHelp("b31.", "#/P=-,y`Fy,)h!V", options0, "#/P=-,y`Fy,)h!V");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.defaultSyntaxPrefix = "--";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "\n", options0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "usage: ", "usage: ", options0, 0, 0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-3616);
      helpFormatter0.defaultDescPad = (-3616);
      int int1 = 0;
      helpFormatter0.setLeftPadding(0);
      PrintWriter printWriter0 = null;
      String string0 = "The option '";
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, 0, "The option '");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(" ", " ", options0, " ");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.createPadding(44);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-338));
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.defaultWidth = (-323);
      helpFormatter0.setOptPrefix("hvz t#[ SF'eN");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = (-1744);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("U-AS#+?ufmDG", options0, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getSyntaxPrefix();
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "1qiI!tu/QL; C,<");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 1qiI!tu/QL; C,<
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.defaultSyntaxPrefix = "];h>jXdHM,-l3ao#FH";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Option option0 = new Option("arg", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      mockPrintWriter0.println(74);
      optionGroup0.addOption(option0);
      option0.setArgName("");
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "\n", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-3815));
      helpFormatter0.setArgName("B1elIE.{Uj/P4eO?1");
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-3815));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.optionComparator = null;
      helpFormatter0.rtrim("");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-323));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", (Options) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultSyntaxPrefix = "";
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getSyntaxPrefix();
      options0.addOptionGroup(optionGroup0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, " [Tvl7;d*nc7?*");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Option option0 = new Option("arg", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.defaultOptPrefix = "";
      options0.hasOption(" ");
      optionGroup0.addOption(option0);
      option0.setArgName("");
      helpFormatter0.getSyntaxPrefix();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 58, "", options0);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Option option0 = new Option("arg", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasOption(" ");
      optionGroup0.addOption(option0);
      option0.setArgName("");
      helpFormatter0.getSyntaxPrefix();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("usage: ", "", options1, "3|yyuQ[{dGzVm$N#$_,");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Option option0 = new Option("arg", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasOption(" ");
      optionGroup0.addOption(option0);
      option0.setArgName("");
      helpFormatter0.getSyntaxPrefix();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 58, "", options0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Option option0 = new Option("arg", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasOption(" ");
      optionGroup0.addOption(option0);
      option0.setArgName("line.separator");
      helpFormatter0.getSyntaxPrefix();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("arg", "ptmTs_']5~i?7>=U0Z", options0, "");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Option option0 = new Option("arg", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasOption(" ");
      optionGroup0.addOption(option0);
      option0.setArgName("line.separator");
      helpFormatter0.getSyntaxPrefix();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "-", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('6');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 41, "Kur!'9b(.");
      helpFormatter0.setOptPrefix("hrQ8/MN");
      helpFormatter0.defaultLeftPad = (-292);
      helpFormatter0.findWrapPos("hrQ8/MN", (-292), 1189);
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(41, "hrQ8/MN", "hrQ8/MN", options0, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      Options options0 = new Options();
      helpFormatter0.defaultWidth = (-1317);
      options0.addOption("arg", "--", true, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("usage: ", "arg", options0, "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", "\n", options0, "\n");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      int int0 = 597;
      int int1 = (-534);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 597, (-534), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("' contains an illegal character : '", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", "\n", true, "usage: ");
      helpFormatter0.printHelp("`Ef_:+J>~nMKL", "`Ef_:+J>~nMKL", options0, "`Ef_:+J>~nMKL");
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "`Ef_:+J>~nMKL";
      objectArray0[1] = (Object) "bB=";
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) "bB=";
      objectArray0[5] = (Object) "`Ef_:+J>~nMKL";
      objectArray0[6] = (Object) "bB=";
      objectArray0[7] = (Object) stringWriter0;
      objectArray0[8] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "bB=", objectArray0);
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "bB=", "`Ef_:+J>~nMKL", options0, 0, 0, "`Ef_:+J>~nMKL", true);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-839));
      int int0 = 1;
      helpFormatter0.defaultDescPad = 1;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      int int1 = (-381);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      options0.getOptionGroups();
      options0.hasOption("[-Y{B,XP.s|Ndw3");
      options0.getOptions();
      Option option0 = null;
      try {
        option0 = new Option("org.apache.commons.cli.HelpFormatter", "Mb@#gl~obrC9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.HelpFormatter' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("NO_ARGS_ALLOWED");
      helpFormatter0.defaultNewLine = null;
      helpFormatter0.getNewLine();
      helpFormatter0.getOptionComparator();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 64, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 7;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(7, "\n", (String) null, options1, "");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", " zte$2JJvbs\u0006", (File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-1428);
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", " ", options0, " ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasOption("");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, " | ", options0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-2));
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("t!LY", options0, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      Option option0 = new Option("", "usage: ");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(true);
      options2.hasOption("--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options2.addOptionGroup(optionGroup1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) optionGroup1;
      objectArray0[1] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-1), "OqE:j", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("dT'HL=4U2A");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.findWrapPos("' contains an illegal character : '", 21, 5);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      helpFormatter0.createPadding(63);
      helpFormatter0.getSyntaxPrefix();
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1624));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(43);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("85f#sQsU(e3cas");
      Locale locale0 = new Locale("", "");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) locale0;
      Object object1 = new Object();
      objectArray0[7] = object1;
      objectArray0[8] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      helpFormatter0.printHelp(printWriter0, 32, "org.apache.commons.cli.Option", (String) null, options0, 32, 32, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2354, "", "", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "\"6X{Rv@=~65", "\"6X{Rv@=~65", options1, "WuEmw[O>", false);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", false, "_");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption((String) null, false, "]");
      Options options3 = options2.addOption("", "Nz#", false, "[");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options4 = options3.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[ option: ", "[ option: ", options4, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("neY", false, (String) null);
      Options options2 = options1.addOption("", "", false, "arg");
      helpFormatter0.printHelp(37, "iVr'", "", options2, "iVr'");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, options2, 1, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-1651), options0, 1996, 1996);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName((String) null);
      helpFormatter1.getLongOptPrefix();
      helpFormatter1.getArgName();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printWrapped((PrintWriter) null, 1, (-1525), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) helpFormatter1;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) helpFormatter1;
      PrintStream printStream0 = mockPrintStream0.format("-", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('b');
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions(printWriter0, 74, options0, (-1222), 31);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, "usage: ", true, "--");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2379), "kjy#-m 9@BZ", "-", options2, "#D%$mzL\"FtR", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("kt{=9}yA:X");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2934, "");
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1428, " ");
      String string0 = "9s9eIru>[+R$|K5";
      helpFormatter0.defaultArgName = "9s9eIru>[+R$|K5";
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", options0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1353, " ", "-!", options0, 6, 26, "-!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.addOption((String) null, true, "usage: ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printUsage((PrintWriter) null, 74, "' contains an illegal character : '", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("&", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(981);
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) mockPrintStream0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "-", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 981, "", options1);
      helpFormatter0.setArgName("");
      Options options2 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("=");
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "-");
      helpFormatter0.printHelp(printWriter0, 74, "#", "q*p;B:2afB~FbG-*", options2, 107, 3, " ", true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 10, (String) null, "=|N`V@_=K`3V^ml.;*", options0, 1, (-1590), "arg", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      helpFormatter0.printHelp(9, "/t[6t$M3I#i}ydd", "arg", options0, " ");
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printHelp(2650, "-z`i5xi", "-z`i5xi", options0, "'fa p'[G8tRpULmSH #");
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-234));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(18);
      helpFormatter0.setArgName("");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = new Option("", "usage: ", true, "s6nmI");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption((String) null, "--", true, "");
      helpFormatter0.printHelp(272, " ", "F7D`/Ti5Vg`#1KY |o", options2, "--");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1801);
      helpFormatter0.setArgName("");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption((String) null, true, "|g.0^UhkJ^hku.4p}\"");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", options1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      Option option1 = new Option("xZZvs", "xZZvs", false, "D");
      option1.setArgName("-");
      helpFormatter0.getSyntaxPrefix();
      OptionGroup optionGroup2 = optionGroup1.addOption(option1);
      Options options1 = options0.addOptionGroup(optionGroup2);
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append('g');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, false);
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "usage: ", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Option option0 = new Option("arg", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasOption(" ");
      optionGroup0.addOption(option0);
      option0.setArgName("line.separator");
      helpFormatter0.getSyntaxPrefix();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "%>hLaXd", false, "-");
      options2.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "line.separator", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      Locale locale0 = Locale.CHINA;
      Object object0 = new Object();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      Options options2 = new Options();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter1.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "'c6V/%/Zqt", "usage: ", (Options) null, "1|HF[pVz!n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(1613, ",K`P7rfq!FL`w", "", options1, "[");
      StringWriter stringWriter0 = new StringWriter(250);
      options0.hasShortOption(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1613, "x>Uf)aFtFq", "xh9'jpL", options0, 24, 1136, "ThM6H[.IqLW", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1801);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("arg", "--", true, "\n");
      helpFormatter1.printHelp(1509, "usage: ", " ", options1, " ");
      helpFormatter0.printHelp(3624, "--", "usage: ", options1, "arg");
      helpFormatter1.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.printf("usage: ", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 971, "usage: ", "usage: ", options0, 971, (-937), "/`1g=(^PZP(zr7J!");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter1.setOptionComparator((Comparator) null);
      helpFormatter0.getOptPrefix();
      String string0 = "TrN";
      // Undeclared exception!
      helpFormatter0.printHelp(0, "usage: ", "g(dkc9=Q\"SAKs?Et0J", options0, "TrN");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte) (-14);
      byteArray0[6] = (byte)89;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1864), "NK|@!n", "n7sUVtOei:Y`uE*~w", (Options) null, "n7sUVtOei:Y`uE*~w", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      helpFormatter0.printHelp(74, "/t[6t$M3I#i}ydd", "arg", options0, " ");
      StringWriter stringWriter0 = new StringWriter(3);
      options0.hasShortOption("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 32, "xh9'jpL", "xh9'jpL", options0, 3, 3, "", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("WD", "--", false, "7^");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-2852), "[ option: ", "arg", options1, "Z0)#p*MEzg;m^']%");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) helpFormatter1;
      PrintWriter printWriter0 = mockPrintWriter1.printf("oNwO\"v}eez", objectArray0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0);
      Locale locale0 = Locale.CHINESE;
      PrintWriter printWriter1 = mockPrintWriter2.format(locale0, "", objectArray0);
      helpFormatter0.printHelp(printWriter1, 3, "--", "", options0, 74, 3, "--");
      helpFormatter1.printHelp(74, "oNwO\"v}eez", "' was specified but an option from this group ", options0, " ", false);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      helpFormatter0.printHelp(9, "/t[6t$M3I#i}ydd", "arg", options0, " ");
      helpFormatter0.setOptionComparator((Comparator) null);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "/t[6t$M3I#i}ydd");
      stringWriter1.getBuffer();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, 0, "s(4hO2+<L_:LdS~gzCw");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write("\n");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "usage: ", 3, 3);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, false);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 33, "arg", "!KiA; L8C46*CMr", options0, 3, 39, "!KiA; L8C46*CMr");
      helpFormatter0.setNewLine("");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write("\n");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "usage: ", 3, 3);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      stringWriter1.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, false);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 39, " :: ", "arg", options0, 3, 39, "");
      helpFormatter0.setNewLine("arg");
      helpFormatter0.getNewLine();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3407, "U}7P Win", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_WIDTH;
      Options options0 = new Options();
      helpFormatter0.printHelp(9, "/t[6t$M3I#i}ydd", "arg", options0, " ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte) (-2);
      byteArray0[5] = (byte) (-41);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte)89;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "--", "", options0, 3, (-2663), "--", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      helpFormatter0.printHelp(9, "/t[6t$M3I#i}ydd", "arg", options0, " ");
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "--", "", options0, 3, (-2663), "--", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      String string0 = "[";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      StringWriter stringWriter2 = stringWriter1.append('&');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, false);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1817), "", "", options0, (-1817), 868, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1416;
      String string0 = "0\\F;";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1416, "0F;");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("T6Tw");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
      mockPrintStream0.println(0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.printWrapped(printWriter0, 2889, "");
      helpFormatter0.getOptPrefix();
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      mockPrintStream0.printf(locale0, " ]", objectArray0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 0, "-", (String) null, (Options) null, 36, 36, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "P%$Sx}H (E";
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      int int0 = 11;
      String string1 = "--";
      int int1 = 1;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "P%$Sx}H (E");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write("\n");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "usage: ", 3, 3);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, false);
      Options options0 = new Options();
      String string0 = "`_0=`7++B{&q]-wb-b";
      Option option0 = new Option("", "[", false, "`_0=`7++B{&q]-wb-b");
      options0.addOption(option0);
      int int0 = 74;
      String string1 = "LlW)X7x";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "arg", "", options0, (-1817), 39, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", true, "j1H'QTN~]&Ny!");
      options0.toString();
      String string0 = "";
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) null, 1, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      helpFormatter0.setLongOptPrefix("\n");
      helpFormatter0.setDescPadding(44);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, (-1964), options0, 1301, 1301);
      MockFile mockFile0 = new MockFile(" ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 9, "org.apache.commons.cli.HelpFormatter$OptionComparator", options0);
      helpFormatter0.printHelp(44, "org.apache.commons.cli.HelpFormatter$OptionComparator", "", options0, "");
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printOptions(mockPrintWriter0, 3777, options0, 9, 1301);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) stringWriter0;
      mockPrintWriter0.close();
      objectArray0[1] = (Object) stringWriter0;
      mockPrintWriter0.format("-", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1135), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1 x+M=rt?\"");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "M^&'d4eyQDY+Cb");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1743);
      helpFormatter0.renderWrappedText(stringBuffer0, 1029, (-4533), "j+AjdW&J");
      int int0 = 34;
      String string0 = "(.l";
      String string1 = "-";
      Options options0 = null;
      String string2 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", "-", (Options) null, "1 x+M=rt?\"", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "L6b\"pf?'#G%0>(Bpf5!");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      String string0 = null;
      String string1 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // org.apache.commons.cli.HelpFormatter$OptionComparator
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "j1H'QTN~]&Ny!");
      options0.toString();
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      options0.getOptions();
      helpFormatter0.printHelp("P%$Sx}H (E", "P%$Sx}H (E", options1, "", true);
      helpFormatter0.printHelp("EK&'P", "tN", options0, "?0do|_j");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "cmdLineSyntax not provided", "]", options1, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Options options1 = options0.addOption("", true, "\n");
      options0.toString();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("P%$Sx}H (E", "P%$Sx}H (E", options1, "", false);
      helpFormatter0.setLongOptPrefix("0mFRclVp4n");
      helpFormatter0.setDescPadding(1301);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 1301, options1, 415, 415);
      Option option0 = new Option("G", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options2.addOptionGroup(optionGroup1);
      Options options3 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      helpFormatter0.printHelp(1301, "ce&bsDAZ(@Wy|%g", "", options2, "NO_ARGS_ALLOWED");
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write("\n");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "usage: ", 3, 3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, true);
      Options options0 = new Options();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2938, (-1449), "[3ri$#EK^'lw9~9%BNC");
      Options options1 = new Options();
      Option option0 = new Option((String) null, "\n");
      options1.addOption(option0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options1.addOption("--", "v'ctx+ZkXJw", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "j1H'QTN~]&Ny!");
      options0.toString();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("P%$Sx}H (E", "P%$Sx}H (E", options1, "", false);
      helpFormatter0.setLongOptPrefix("0mFRclVp4n");
      helpFormatter0.setDescPadding(1301);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 1301, options1, 415, 415);
      options0.addOption("arg", "", true, "G");
      Option option0 = new Option("G", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options2.addOptionGroup(optionGroup1);
      Options options3 = new Options();
      helpFormatter0.printHelp(1301, "ce&bsDAZ(@Wy|%g", "", options2, "NO_ARGS_ALLOWED");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      String string0 = "0mFRclVp4n";
      helpFormatter0.setLongOptPrefix("\n");
      helpFormatter0.setDescPadding(44);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, (-1964), options0, 1301, 1301);
      MockFile mockFile0 = new MockFile(" ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 31, "org.apache.commons.cli.HelpFormatter$OptionComparator", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "", "0mFRclVp4n", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("'");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      mockPrintWriter0.print((-1.0F));
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 40, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 7, "'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "j1H'QTN~]&Ny!");
      options0.toString();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("P%$Sx}H (E", "P%$Sx}H (E", options1, "", false);
      helpFormatter0.setLongOptPrefix("0mFRclVp4n");
      helpFormatter0.setDescPadding(1301);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 1301, options1, 415, 415);
      Option option0 = new Option("G", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options2.addOptionGroup(optionGroup1);
      Options options3 = new Options();
      helpFormatter0.printHelp(1301, "ce&bsDAZ(@Wy|%g", "", options2, "NO_ARGS_ALLOWED");
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("}R\".gZO_UpM;");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "usage: ", 1, 3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, true);
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp("G;]mOsRDR8abQ$pA7P", options1, false);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 1, 35);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 1441, (Options) null, 69, 34);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "usage: ", 3, 3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, true);
      String string0 = "";
      Options options0 = new Options();
      String string1 = "";
      String string2 = "[";
      boolean boolean0 = false;
      String string3 = "";
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 3, "[", "c,|)QUKD%m-9", options0, 2567, 845, "l$/sQ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 285;
      helpFormatter0.setArgName("");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getNewLine();
      helpFormatter0.setLongOptSeparator("hWMU.QWp%");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Options options1 = options0.addOption("", true, "j1H'QTN~]&Ny!");
      options0.toString();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("P%$Sx}H (E", "P%$Sx}H (E", options1, "", false);
      helpFormatter0.setLongOptPrefix("0mFRclVp4n");
      helpFormatter0.setDescPadding(1301);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 1301, options1, 415, 415);
      Option option0 = new Option("G", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options2.addOptionGroup(optionGroup1);
      Options options3 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      helpFormatter0.printHelp(1301, "ce&bsDAZ(@Wy|%g", "", options2, "NO_ARGS_ALLOWED");
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator(" ");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 74, "cmdLineSyntax not provided");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "j1H'QTN~]&Ny!");
      options0.toString();
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("P%$Sx}H (E", "P%$Sx}H (E", options1, "", false);
      helpFormatter0.setLongOptPrefix("0mFRclVp4n");
      helpFormatter0.setDescPadding(1301);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 1301, options1, 415, 415);
      MockFile mockFile0 = new MockFile(" ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "0mFRclVp4n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2290), "b8CMqH*MnX.R&V0<0J", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-11));
      String string0 = "]";
      helpFormatter0.defaultWidth = 595;
      helpFormatter0.setLeftPadding((-862));
      helpFormatter0.createPadding(2185);
      helpFormatter0.getOptionComparator();
      String string1 = "[ Options: [ short ";
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.relativize(uRI0, uRI0);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1801);
      helpFormatter0.setArgName("");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("", "--", true, "\n");
      helpFormatter1.printHelp(1509, "usage: ", " ", options1, " ");
      helpFormatter0.getArgName();
      helpFormatter1.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", "\n", options0, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "\n", "WBM?B3]q?", options0, "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write("\n");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "usage: ", 3, 3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, true);
      Options options0 = new Options();
      String string0 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      Option option0 = new Option("", "[", false, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "-", "-", options1, 3, 74, "LlW)X7x", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 941, "");
      helpFormatter0.rtrim((String) null);
      String string0 = "3XO";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = null;
      try {
        option0 = new Option("usage: ", true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", "\n", options0, "");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.getDescPadding();
      String string0 = " :: ";
      Options options0 = new Options();
      options0.getMatchingOptions("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, " :: ", options0, " :: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "*_'L]7*DX<Cuc ?v";
      int int0 = 0;
      String string0 = "m)X";
      MockFile mockFile0 = new MockFile("*_'L]7*DX<Cuc ?v", "m)X");
      String string1 = "sxRm't";
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append('.');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "*_'L]7*DX<Cuc ?v");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      mockPrintWriter0.print(0.0F);
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "--");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "usage: ", 3, 3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, true);
      Options options0 = new Options();
      String string0 = "";
      Option option0 = new Option("", "[", false, "");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "", "", options1, 3, 74, "LlW)X7x", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "j1H'QTN~]&Ny!");
      options0.toString();
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("P%$Sx}H (E", "P%$Sx}H (E", options1, "", false);
      helpFormatter0.setLongOptPrefix("0mFRclVp4n");
      helpFormatter0.setDescPadding(1301);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 1301, options1, 415, 415);
      MockFile mockFile0 = new MockFile(" ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "0mFRclVp4n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2290), "b8CMqH*MnX.R&V0<0J", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 44;
      helpFormatter0.setLeftPadding(44);
      String string0 = ">[d}ant";
      helpFormatter0.setNewLine(">[d}ant");
      helpFormatter0.setDescPadding((-1));
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      String string1 = "line.separator";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("line.separator", true, "<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'line.separator' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(956);
      helpFormatter0.setLeftPadding(956);
      stringBuffer0.delete(0, 3);
      helpFormatter0.renderWrappedText(stringBuffer0, 1809, (-1), "");
      Options options0 = new Options();
      options0.helpOptions();
      options0.getMatchingOptions("]");
      options0.hasOption("\"+1KFp5}oSfR");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "M{]qDf0|g>";
      helpFormatter0.findWrapPos("M{]qDf0|g>", 1914, 1914);
      String string1 = "G";
      int int0 = (-2);
      Options options0 = new Options();
      boolean boolean0 = false;
      options0.addOption("arg", false, "S),x8f");
      String string2 = "[";
      Option option0 = null;
      try {
        option0 = new Option(" ", "[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 0, options0, 0, 0);
      int int1 = 92;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, 92, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      StringWriter stringWriter0 = new StringWriter(0);
      stringWriter0.append(']');
      StringBuffer stringBuffer1 = stringWriter0.getBuffer();
      stringBuffer0.append(stringBuffer1);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, (-4799));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix(" p*>}Y28Lx[>_");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null, "arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // arg
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      String string0 = "";
      Options options0 = new Options();
      String string1 = "]";
      helpFormatter0.printHelp("]", options0);
      options0.helpOptions();
      options0.getOption("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "", options0, "J&d1rb?KMm,J;?!{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      String string1 = "R<`[F32G^";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "R<`[F32G^", options0, "4eKriYj", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "--", false, "-");
      helpFormatter0.printHelp("5Nrou!lU6'", "5Nrou!lU6'", options1, (String) null);
      helpFormatter0.getOptionComparator();
      helpFormatter0.rtrim((String) null);
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.getSyntaxPrefix();
      MockFile mockFile0 = new MockFile("<5(*R;GR,IJ..", "2}ra5M#");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("<", (String) null, (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 941, "");
      assertEquals("\n", stringWriter0.toString());
      
      helpFormatter0.rtrim((String) null);
      Options options0 = new Options();
      helpFormatter0.setOptionComparator((Comparator) null);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      stringBuffer0.insert(0, (long) 74);
      int int0 = (-3122);
      int int1 = (-1);
      // Undeclared exception!
      try { 
        stringBuffer0.insert(3, '&');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-3616);
      helpFormatter0.defaultDescPad = (-3616);
      int int1 = 0;
      helpFormatter0.setLeftPadding(0);
      PrintWriter printWriter0 = null;
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 0, 0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.setArgName("");
      Options options0 = new Options();
      helpFormatter0.printHelp("G;]mOsRDR8abQ$pA7P", options0, false);
      helpFormatter0.defaultWidth = 44;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", (-2683), (-2683));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 877;
      String string0 = null;
      Options options0 = new Options();
      int int1 = 1;
      helpFormatter0.setWidth(1);
      options0.getOptionGroups();
      String string1 = null;
      Option option0 = null;
      try {
        option0 = new Option("~{vfdZ^F4Rx", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '~{vfdZ^F4Rx' contains an illegal character : '~'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.rtrim("");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setArgName("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.rtrim("");
      int int0 = 2096;
      helpFormatter0.setWidth(2096);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("--", "--", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      int int0 = 1764;
      String string0 = "TBj#h=E*P2G$n#";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("-", false, "N|Kl}Qr");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
