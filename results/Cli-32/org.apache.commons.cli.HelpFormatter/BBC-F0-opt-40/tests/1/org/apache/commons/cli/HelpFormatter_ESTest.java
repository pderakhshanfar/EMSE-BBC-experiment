/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 18:03:50 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.net.URI;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultNewLine = "";
      Options options1 = options0.addOption("arg", true, "usage: ");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", options1, false);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.setWidth(0);
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptPrefix();
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getWidth();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 74, (Options) null, 74, 74);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 0;
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp("PxfqY+gg2", "Cannot add value, list full.", options0, (String) null);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "arg", false, "]");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Option option1 = new Option("KtiTb", false, "KtiTb");
      OptionGroup optionGroup2 = optionGroup1.addOption(option1);
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("b", true, "Cannot add value, list full.");
      OptionGroup optionGroup3 = optionGroup2.addOption(option1);
      options2.addOptionGroup(optionGroup3);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2107), "TDh~w(0|zO", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.findWrapPos("usage: ", 1, 3);
      helpFormatter1.rtrim("");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      Object object2 = new Object();
      objectArray0[4] = object2;
      objectArray0[5] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "-", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", false, "--");
      Option option0 = new Option("", false, "'Lg\":!,");
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "EoBDU.|uFB[Js^8", "se7]m:B5K", options3, 3889, 0, "\"D}b/c9SWNzql}M\"P", false);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      mockPrintWriter1.flush();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-300), "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "]";
      Options options0 = new Options();
      String string1 = "u.h`.Jpz:{C<m3:]0";
      boolean boolean0 = false;
      String string2 = "";
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream(74);
      byteArrayOutputStream0.writeTo(byteArrayOutputStream1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "]");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.setWidth((-1523));
      helpFormatter0.createPadding(28);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) stringWriter0;
      stringWriter0.write("usage: ");
      objectArray0[5] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("-", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 2505, "p", "p", options0, 99, 2505, "a3*k0k >2_^'^u=v}", false);
      helpFormatter0.defaultLeftPad = (-557);
      helpFormatter0.getDescPadding();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "-");
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 0, (-2), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.renderWrappedText(stringBuffer0, 502, 99, "YR");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) stringWriter0;
      objectArray0[5] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("-", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 2505, "p", "p", options0, 99, 2505, "a3*k0k >2_^'^u=v}", false);
      options0.hasLongOption("--");
      helpFormatter0.defaultLeftPad = (-557);
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(99, "a3*k0k >2_^'^u=v}", "a3*k0k >2_^'^u=v}", options0, "p", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "", false, "--");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "@Y0|vpAzJ$IH'V'iX", "", options1, "%|)|f", false);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth(0);
      options0.addOption("arg", true, "usage: ");
      // Undeclared exception!
      helpFormatter0.printHelp("iiWL]! S%Ou:Fy", options0, true);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", true, "usage: ");
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 1219, 21);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultWidth = 2;
      options0.addOption("arg", true, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("iiWL]! S%Ou:Fy", options0, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Option option1 = new Option("arg", true, " ");
      OptionGroup optionGroup2 = optionGroup1.addOption(option1);
      Options options1 = options0.addOptionGroup(optionGroup2);
      helpFormatter0.printHelp("'+X?P.>z*xdD\"m1k", options1, true);
      helpFormatter0.getOptPrefix();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "'+X?P.>z*xdD\"m1k";
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) options1;
      objectArray0[3] = (Object) options1;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) optionGroup0;
      objectArray0[6] = (Object) options1;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      PrintWriter printWriter1 = mockPrintWriter1.printf("", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter1, (-2), "   ", "   ", options1, 26, 101, "(Xq7aC)NH?");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("@iqlAQ(buaT=Xo)");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "@iqlAQ(buaT=Xo)";
      objectArray0[3] = (Object) null;
      Object object0 = new Object();
      mockPrintWriter0.println(object0);
      Object object1 = new Object();
      objectArray0[4] = object1;
      PrintWriter printWriter0 = mockPrintWriter0.printf("usage: ", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 2704, "@iqlAQ(buaT=Xo)");
      helpFormatter0.createPadding(2704);
      helpFormatter0.getArgName();
      helpFormatter0.getDescPadding();
      helpFormatter0.createPadding(3);
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-681));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultArgName = "";
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 910;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-321), 910, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("|\"@rG\u0004s`0V", options0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("line.separator");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 22, (-2), "cmdLineSyntax not provided");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer1 = new StringBuffer(3);
      helpFormatter1.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "-");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", " | ", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3592, 3592, "\n");
      helpFormatter0.createPadding(1);
      MockFile mockFile0 = new MockFile("arg", "w");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) " ";
      objectArray0[2] = (Object) stringBuffer1;
      objectArray0[3] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) stringBuffer1;
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) stringBuffer0;
      PrintWriter printWriter0 = mockPrintWriter0.format("arg", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printUsage(printWriter0, 3592, "w", options0);
      helpFormatter0.rtrim(" ");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 3592, 3592, "\n");
      helpFormatter0.createPadding(1);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 74, (-2945), " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      String string0 = ", ";
      boolean boolean0 = false;
      helpFormatter0.defaultDescPad = (-21);
      int int0 = 9;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(", ", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup0.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter1.printHelp("mih6Uthi!Zsf~", options1, true);
      options1.addOption(option0);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = (-1);
      int int1 = 0;
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 74, " ");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption("u", false, "Ql.");
      helpFormatter0.printHelp("-", options0, true);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 1, ">", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      int int0 = (-1);
      String string0 = ")K_;S\"";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2623), ")K_;S\"", "", (Options) null, "-&>d#bD", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.trimToSize();
      stringBuffer0.setLength(32);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "YZDFmP<ITJ2K1B+A35}");
      helpFormatter0.renderWrappedText(stringBuffer0, 1193, 1193, "#8,p6}`DT&a3");
      stringBuffer0.append((long) 74);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Options options0 = new Options();
      String string0 = "6eB";
      Options options1 = options0.addOption("arg", "arg", false, "6eB");
      Options options2 = options1.addOption("H6", false, (String) null);
      options0.helpOptions();
      int int0 = 10;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-409), options2, 10, 103);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter1.printHelp("wwKQXe*^", options1, true);
      options1.addOption(option0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("-", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockFileOutputStream0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) mockFileOutputStream0;
      objectArray0[3] = (Object) mockFileOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "]", objectArray0);
      helpFormatter0.printHelp(printWriter0, 39, "uR2W|[/V+7%GH", "   ", options0, 39, 39, "", true);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, (-1156), options0, 1674, 3);
      int int0 = 13;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 13, (-1156), "' contains an illegal character : '");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockFile mockFile0 = new MockFile(" ", "&Ah");
      helpFormatter0.setDescPadding(34);
      MockFile mockFile1 = new MockFile(mockFile0, "k&\"-d<:9K-Rhsh>_IL");
      int int0 = 1459;
      helpFormatter0.renderOptions((StringBuffer) null, 1459, options0, 8, 814);
      int int1 = (-2);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-814), (-2), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.rtrim("D;A}e^!uc?rSi8");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-1), (-2), "D;A}e^!uc?rSi8");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("<jsCf");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockFileOutputStream0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) mockPrintWriter0;
      mockPrintWriter1.format("org.apache.commons.cli.Option", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 39, "org.apache.commons.cli.Option", (String) null, options0, 63, 13, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      Options options2 = options1.addOption("arg", true, "\n");
      helpFormatter0.printHelp("0~?1d[k{n.x{cg0%Z", "7W(?UZ", options2, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("arg", (-1504), (-1504));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Q|y@{0z[W0tvP");
      Object object0 = new Object();
      mockPrintWriter0.println(']');
      Object object1 = new Object();
      mockPrintWriter0.close();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1385, "2Z@=`Yt:SxCi.@Yy?", "T,.t/", options0, (-1), 80, "Q|y@{0z[W0tvP", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("byP", false, (String) null);
      options1.addOption("", true, (String) null);
      helpFormatter0.printHelp("\"", options0, true);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockFile mockFile0 = new MockFile(" ", "&Ah");
      MockFile mockFile1 = new MockFile(mockFile0, "k&\"-d<:9K-Rhsh>_IL");
      File file0 = MockFile.createTempFile(".:p8!N,7BBP", " ", (File) mockFile1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, 3, "&Ah");
      Options options1 = options0.addOption("arg", true, "\n");
      options1.helpOptions();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderWrappedText(stringBuffer0, 8, 74, " ");
      helpFormatter0.printHelp(8, "H-d<", "H-d<", options0, "lX", false);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) stringWriter0;
      objectArray0[5] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("-", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 2505, "p", "p", options0, 99, 2505, "a3*k0k >2_^'^u=v}", false);
      helpFormatter0.defaultLeftPad = (-557);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("arg", true, "\n");
      Options options2 = options0.addOption((String) null, " | ", false, "Dqg4#jZ[z]");
      helpFormatter0.printHelp("X", options2, false);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", true, "\n");
      options2.helpOptions();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderWrappedText(stringBuffer0, 8, 74, " ");
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, (String) null, "", options0, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      URI uRI0 = MockURI.aFileURI;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printOptions(mockPrintWriter0, 64, options1, 64, 13);
      // Undeclared exception!
      try { 
        options0.addOption("--", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "The option '";
      Options options0 = null;
      String string1 = "no<vsLf_z-t2";
      String string2 = "YAXXCY=`U";
      int int0 = 3;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) helpFormatter0;
      Object object0 = new Object();
      mockPrintWriter0.println('k');
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 3, (Options) null, 3, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 9, "$F=C<dD>jh+aitf:ida", (String) null, options0, 9, (-2799), ", ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      StringBuffer stringBuffer0 = null;
      int int0 = 44;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 44, (Options) null, 44, 44);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Object object0 = new Object();
      Object object1 = new Object();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object[] objectArray0 = new Object[1];
      PrintWriter printWriter0 = mockPrintWriter0.printf("arg", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      mockPrintWriter1.close();
      Options options1 = new Options();
      helpFormatter0.printHelp(printWriter0, 1290, "[ Options: [ short ", "[ Options: [ short ", options1, 1, 104, "usage: ");
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp("y_hNFkt%", "y_hNFkt%", options0, "RT$H-1z@4SiObh@6r<S", true);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", true, "\n");
      options2.helpOptions();
      String string0 = "";
      helpFormatter0.printHelp("0~?1d[k{n.x{cg0%Z", "7W(?UZ", options2, "");
      String string1 = null;
      int int0 = (-1203);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-1203), (-1203));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("byP", false, "j[_bs4eMF");
      Options options2 = options1.addOption("arg", true, "D;A}e^!uc?rSi8");
      helpFormatter0.printHelp(" ", options2, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 97, options1, (-2), 31);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter1.renderWrappedText(stringBuffer0, 10, 1, "usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 87, 74, "--");
      helpFormatter0.findWrapPos("", 1427, 9);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("byP", false, "j[_bs4eMF");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      helpFormatter1.renderWrappedText(stringBuffer0, 2958, 74, "T~C.]s[W");
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "usage: ");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(395);
      helpFormatter0.defaultWidth = 3;
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setLongOptPrefix("arg");
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      options0.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("g=l", "7W(?UZ", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(395);
      helpFormatter0.defaultWidth = 395;
      helpFormatter0.setLongOptPrefix("+5");
      helpFormatter0.setLongOptPrefix("arg");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3, (String) null, "", options0, (-1300), 58, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(395);
      helpFormatter0.setLongOptPrefix("+5");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("org.apache.commons.cli.HelpFormatter");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("\n");
      String string0 = "";
      Options options1 = options0.addOption("arg", true, "+5");
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 3, "arg", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1427, "La/WfX~t$-_v[[`", "Z7SuQuy&#m^Pf", options0, 1427, 258, ", ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-6633), "", ")/px@$;dA", options0, (-3628), 1, "Z7SuQuy&#m^Pf", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(1807, "cbGcrF", "Fx9T(dp", options0, "phdQ}");
      Options options1 = new Options();
      Options options2 = options0.addOption("", true, "\n");
      helpFormatter0.printHelp("`IlPAnJBA9!j;*aHa", options2, true);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(395);
      helpFormatter0.defaultWidth = 395;
      helpFormatter0.setLongOptPrefix("+5");
      helpFormatter0.setLongOptPrefix("arg");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      Object object0 = new Object();
      MockFile mockFile0 = new MockFile("\n");
      helpFormatter0.defaultArgName = "A){9-v9";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "+5";
      objectArray0[1] = (Object) "+5";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) mockFileOutputStream0;
      objectArray0[6] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf("org.apache.commons.cli.Option", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 44, "[ Options: [ short ", (String) null, (Options) null, 10, (-1055), "arg");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", true, "\n");
      options2.helpOptions();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 8, 2461, " ");
      helpFormatter0.renderWrappedText(stringBuffer1, 1198, (-3841), "usage: ");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("-");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("@2");
      String string0 = null;
      boolean boolean0 = true;
      options0.addOption((String) null, true, "@2");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, " ", options0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      mockPrintWriter0.println('k');
      Object object1 = new Object();
      String string0 = "!x~.w5{=:_\\c)3";
      mockPrintWriter0.printf("!x~.w5{=:_c)3", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 0, "org.apache.commons.cli.HelpFormatter$OptionComparator", "fRs?Lr6g>`l", (Options) null, 6, 32, "fk;vj<_)j^$v");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) helpFormatter0;
      Object object0 = new Object();
      mockPrintWriter0.println('k');
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "YAXXCY=`U";
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) "YAXXCY=`U";
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) "no<vsLf_z-t2";
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 3, "The option '", "<", (Options) null, 6, 0, "The option '");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(395);
      helpFormatter0.defaultWidth = 395;
      helpFormatter0.setLongOptPrefix("+5");
      helpFormatter0.setLongOptPrefix("arg");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("^84f0n.8I!eS:");
      helpFormatter0.defaultArgName = "";
      Options options1 = options0.addOption("arg", true, "usage: ");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "g=l", options1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(74);
      helpFormatter0.defaultWidth = 3;
      String string0 = "+5";
      helpFormatter0.setLongOptPrefix("+5");
      helpFormatter0.setLongOptPrefix("arg");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      options0.addOption("arg", "arg", false, "");
      helpFormatter0.defaultArgName = "";
      Options options1 = options0.addOption("", true, "usage: ");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "g=l", options1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(395);
      helpFormatter0.defaultWidth = 395;
      helpFormatter0.setLongOptPrefix("arg");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      helpFormatter0.defaultArgName = "";
      Options options1 = options0.addOption("", true, "usage: ");
      helpFormatter0.printHelp("+5", "Ws(}oE7fOnib$2**-", options1, "/?D[+");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "0~?1d[k{n.x{cg0%Z";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", true, "\n");
      options2.helpOptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "usage: ");
      Option option0 = new Option("", true, "--");
      helpFormatter0.printHelp("0~?1d[k{n.x{cg0%Z", "iqsfV", options2, "iqsfV");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "org.apache.commons.cli.AlreadySelectedException", "org.apache.commons.cli.ParseException", options1, "8)B9r,QL?Farmk_WvW");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(395);
      helpFormatter0.defaultWidth = 395;
      helpFormatter0.setLongOptPrefix("+5");
      helpFormatter0.setLongOptPrefix("arg");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.printHelp("arg", "vS+tIM~|doLOr", options0, "");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Options options1 = options0.addOption("byP", false, "j[_bs4eMF");
      Options options2 = options1.addOption("arg", true, "D;A}e^!uc?rSi8");
      helpFormatter0.printHelp("' contains an illegal character : '", options2, true);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      mockPrintWriter1.flush();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-300), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Fx9T(dp";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("h,bWdUNOX{UF", "--", (Options) null, "--", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("trSSBX~'8=$3", "", options0, "trSSBX~'8=$3");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) stringWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      helpFormatter0.printUsage(printWriter0, 1133, "", options0);
      Option option0 = new Option("", "arg", true, "-");
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("a*$(86", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-3864));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("rg", (String) null, (Options) null, "9*e\"r");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(330);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      helpFormatter0.defaultNewLine = "";
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      Options options0 = new Options();
      stringBuffer0.append(0.0F);
      stringBuffer0.insert(1, 0L);
      options0.helpOptions();
      stringWriter0.append((CharSequence) " ");
      int int0 = 0;
      int int1 = 14;
      helpFormatter0.renderOptions(stringBuffer0, 330, options0, 0, 14);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 14, "[");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "uH|aHTo$Yg%", "E)", options0, "n},|oON?$N=*=`NOE");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", "0pxEv[F");
      File file0 = MockFile.createTempFile("usage: ", "usage: ", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Locale locale0 = Locale.ENGLISH;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "usage: ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-316), "n!/F-xv!RMX+>88y", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.createPadding(28);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("no<vsLf_z-t2", "@G6P*E]uY#@GP7", options0, "xLRS");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "arg", true, "-");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("[", options1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      helpFormatter1.getNewLine();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      String string0 = "arg";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 3, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(395);
      helpFormatter0.defaultWidth = 395;
      helpFormatter0.setLongOptPrefix("+5");
      helpFormatter0.setLongOptPrefix("arg");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      options0.getOption("-");
      helpFormatter0.printHelp("+5", options0, true);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "YAXXCY=`U", "no<vsLf_z-t2", (Options) null, 9, 9, "The option '");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      String string0 = "<";
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1347), (Options) null, (-1347), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("The option '", "YAXXCY=`U", (Options) null, "no<vsLf_z-t2");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("<");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("<", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 1;
      String string0 = "@";
      helpFormatter0.renderWrappedText(stringBuffer0, 1, (-1), "@");
      helpFormatter0.createPadding(0);
      String string1 = "arg";
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1), "@");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", true, "\n");
      options2.helpOptions();
      options0.addOption("HAYY", true, "usage: ");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(395);
      helpFormatter0.setLongOptPrefix("\n");
      helpFormatter0.setLongOptPrefix("arg");
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter1.getNewLine();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "usage: ");
      helpFormatter0.printHelp("<", options1, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      int int0 = 116;
      String string0 = "Cannot add value, list full.";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(116, "n", "Cannot add value, list full.", (Options) null, "Fx9T(dp");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 822;
      helpFormatter0.createPadding(822);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("j]_Pln`'(C");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Locale locale0 = Locale.forLanguageTag("");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) helpFormatter0;
      mockPrintWriter0.format(locale0, "", objectArray0);
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options1.addOption("-", "!qQ1[AOc#UI9]~", true, "oAk7Uznt eXZ\"rSn|b");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      int int0 = 0;
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 0, "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", true, "\n");
      options2.helpOptions();
      Option option0 = new Option("", true, "--");
      options2.hasLongOption("6K(O |.P4mHr");
      Options options3 = options2.addOption(option0);
      helpFormatter0.printHelp("0~?1d[k{n.x{cg0%Z", options3);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      StringWriter stringWriter0 = new StringWriter();
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      int int0 = 2717;
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "arg", 2717, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "arg";
      String string1 = "The option '";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", "The option '", (Options) null, "no<vsLf_z-t2");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      int int0 = 116;
      String string0 = "Cannot add value, list full.";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(116, "", "Cannot add value, list full.", (Options) null, "Fx9T(dp");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptPrefix();
      int int0 = (-1);
      helpFormatter0.defaultOptPrefix = "--";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "--", "", (Options) null, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = " ]";
      helpFormatter0.setArgName((String) null);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte) (-80);
      byteArray0[6] = (byte)52;
      byteArray0[7] = (byte)1;
      mockFileOutputStream0.write(byteArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "");
      Options options2 = options1.addOption((String) null, "--", false, "arg");
      Option option0 = new Option("", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption(option0);
      OptionGroup optionGroup1 = new OptionGroup();
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      Options options4 = options3.addOptionGroup(optionGroup2);
      optionGroup2.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2021, "", "   ", options4, 2021, 0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("usage: ");
      Options options0 = new Options();
      options0.hasShortOption("-");
      options0.hasLongOption("   ");
      helpFormatter0.printHelp("O`in", options0, false);
      File file0 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.setLongOptSeparator("W]<Rs&` S+");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", true, "\n");
      options2.helpOptions();
      Option option0 = new Option("", true, "--");
      options2.hasLongOption("6K(O |.P4mHr");
      options0.hasOption("]3YeEh0cH[^AH#q@Rf");
      Options options3 = options2.addOption(option0);
      helpFormatter0.printHelp("0~?1d[k{n.x{cg0%Z", options3);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setOptPrefix((String) null);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1), (-2203), "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "--");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      mockFileOutputStream0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      mockPrintWriter0.append('E');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter1.append('/');
      helpFormatter0.setDescPadding(3);
      helpFormatter0.printWrapped(printWriter0, 1356, "ptTn0)aG$TdDh:~MS~");
      helpFormatter0.getNewLine();
      helpFormatter0.setDescPadding(1356);
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.insert(0, 'c');
      Options options0 = new Options();
      options0.hasShortOption("gZB(P,&<k|vi[-3");
      helpFormatter0.renderOptions(stringBuffer0, 1356, options0, 3, 1356);
      helpFormatter0.setLongOptPrefix("\n");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ">";
      helpFormatter0.setLongOptPrefix(">");
      helpFormatter0.setOptPrefix(">");
      helpFormatter0.setLeftPadding(1734);
      helpFormatter0.getOptionComparator();
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "\n", 3, (-1604));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 32;
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "o");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Gk";
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1), (-1), "Gk");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg", 1, 1);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-681), (-681), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      int int0 = 31;
      helpFormatter0.setWidth(31);
      String string0 = " | ";
      helpFormatter0.defaultNewLine = " | ";
      int int1 = 2822;
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-1);
      helpFormatter0.renderWrappedText(stringBuffer0, 1, (-1), "");
      int int1 = 0;
      helpFormatter0.createPadding(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "nkX_pa&y_?1";
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) "nkX_pa&y_?1";
      objectArray0[4] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "nkX_pa&y_?1", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      String string0 = "7TGKlL3";
      String string1 = null;
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("--", "-", false, "6D1D@ODFr");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(395);
      helpFormatter0.defaultWidth = 395;
      helpFormatter0.setLongOptPrefix("+5");
      helpFormatter0.setLongOptPrefix("arg");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "usage: ");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "g=l", options1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine(" ]");
      File file0 = MockFile.createTempFile("EpPT-Q", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "EpPT-Q";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "EpPT-Q";
      mockPrintWriter1.printf(locale0, " ", objectArray0);
      int int0 = (-3485);
      String string0 = "E@BJ)5l";
      Options options0 = new Options();
      Option option0 = new Option((String) null, "#?#_(MC9^sK");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        options2.addOption("#?#_(MC9^sK", "#?#_(MC9^sK", true, " ]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '#?#_(MC9^sK' contains an illegal character : '#'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
