/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 18:15:14 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          HelpFormatter helpFormatter0 = new HelpFormatter();
          helpFormatter0.getSyntaxPrefix();
          Options options0 = null;
          // Undeclared exception!
          try { 
            helpFormatter0.printHelp("-", " | ", (Options) null, "QLhazgt+$h7|uh%%U");
            fail("Expecting exception: NullPointerException");
          
          } catch(NullPointerException e) {
             //
             // no message in exception (getMessage() returned null)
             //
             verifyException("org.apache.commons.cli.HelpFormatter", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.setArgName("line.separator");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptSeparator();
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream("", false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("arg");
      helpFormatter1.printHelp(1, "\n", "", options0, "", false);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "\n", "usage: ", options0, "usage: ", true);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "-";
      StringBuffer stringBuffer0 = new StringBuffer("-");
      int int0 = (-1093);
      Options options0 = null;
      stringBuffer0.append(1);
      String string1 = ",K:\"++ltM$MexZ-8";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(",K:\"++ltM$MexZ-8", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "", true, "usage: ");
      option0.setArgName("usage: ");
      optionGroup0.addOption(option0);
      option0.clone();
      options0.addOptionGroup(optionGroup0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      helpFormatter0.printHelp(607, "VjXG/SXN'|U@S", "VjXG/SXN'|U@S", options0, "", true);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", true, " ");
      helpFormatter0.printHelp(80, "-", "-", options1, "-", true);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = true;
      Option option0 = new Option("arg", "usage: ", true, "usage: ");
      String string0 = "";
      option0.setArgName("");
      optionGroup0.addOption(option0);
      option0.clone();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string1 = "@xg";
      String string2 = "";
      helpFormatter0.printHelp(97, "@xg", "", options1, "", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "--", (-2), 1614);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 32, (-996), ";}QbcxQ|i");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 19, (-3009), "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "usage: ", true, "usage: ");
      String string0 = "";
      optionGroup0.setRequired(true);
      option0.setArgName("");
      optionGroup0.addOption(option0);
      option0.clone();
      Options options1 = options0.addOptionGroup(optionGroup0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "arg", "-", options1, "arg", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "--");
      option0.setArgName("usage: ");
      optionGroup0.addOption(option0);
      option0.clone();
      Options options1 = options0.addOptionGroup(optionGroup0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "org.apache.commons.cli.AlreadySelectedException", "org.apache.commons.cli.AlreadySelectedException", options1, "arg", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "--");
      option0.setArgName("");
      optionGroup0.addOption(option0);
      option0.clone();
      Options options1 = options0.addOptionGroup(optionGroup0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "arg", "-", options1, "arg", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", true, " ");
      helpFormatter0.printHelp(116, "-", "-", options1, "-", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-1522), options1, 32, 32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1800, "TNCYu0ToS l(wkj<;", (String) null, options0, (-2291), 1800, "The option '", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "5d";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5d");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2338);
      helpFormatter0.defaultDescPad = (-2338);
      helpFormatter0.getSyntaxPrefix();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      helpFormatter0.getNewLine();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "gDO}%K=hls`MCXn.");
      Options options0 = new Options();
      String string1 = "9>!!=7M6Y|i+=Ilwe[$";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1914, "\n", "`4d7Y3I@TH=T!MWj1", options0, "9>!!=7M6Y|i+=Ilwe[$", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 2, 2, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 1, options0, 1, 1);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "--");
      optionGroup0.addOption(option0);
      options0.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "arg", "-", options0, "arg", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultLongOptPrefix = "";
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2665, ":}viKv#)p/v7HMOJ");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("!r7voETMf%W<(,{_m");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "\n", "!r7voETMf%W<(,{_m", options0, "--", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 2035;
      helpFormatter0.printHelp(2035, ", ", ", ", options0, ", ", false);
      PrintWriter printWriter0 = null;
      int int1 = 622;
      String string0 = "R,;j^%]1P/9";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 622, "R,;j^%]1P/9", "R,;j^%]1P/9", options0, 622, (-3758), "R,;j^%]1P/9");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, " ");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption((String) null, "", true, "--");
      helpFormatter0.printHelp("has already been selected: '", "b*=i@l]Ac`_T]", options2, (String) null, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(")2Tcf");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 42, "", options0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, ")&");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("\n");
      Options options0 = new Options();
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      helpFormatter0.setOptPrefix("yHxM3yUwMm");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "ZRJ~_y,>LW\"", "yHxM3yUwMm", options0, "", false);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1479);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "--", "--", options0, 3, (-2), "arg", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("\n");
      Options options0 = new Options();
      int int0 = HelpFormatter.DEFAULT_WIDTH;
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setLeftPadding((-732));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("usage: ", "", options0, "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Option option0 = new Option("arg", "S,uQ `|Dy}Ec3VEWX");
      Options options0 = new Options();
      String string0 = "Y!xw]1@`q'$_d$4l";
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.addOption(option0);
      boolean boolean0 = true;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, ">f_thU_}AA{KHBl.", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "usage: ");
      Options options1 = options0.addOption("", ">", true, "org.apache.commons.cli.AlreadySelectedException");
      options1.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("\n", "z&9um#r\\M1h", options0, "usage: ", false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.rtrim("");
      Options options2 = new Options();
      options2.hasOption("arg");
      helpFormatter1.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      // Undeclared exception!
      try { 
        helpFormatter2.renderWrappedText(stringBuffer0, (-858), 1, "U)kO]=U");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "[qt0HaO!");
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("M@*!RC)wh", "arg", options0, "usage: ", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1, "arg", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("' contains an illegal character : '");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, (String) null, "arg", options0, 3, 10, "usage: ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("b*=i@lAc`_T]");
      Options options0 = new Options();
      Option option0 = new Option((String) null, "w&or:qRSDZ!N|", true, "w&or:qRSDZ!N|");
      Options options1 = options0.addOption(option0);
      options0.addOption((String) null, "w&or:qRSDZ!N|", false, "D2(,");
      Options options2 = options1.addOption("", "line.separator", true, "w&or:qRSDZ!N|");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1954), "b*=i@lAc`_T]", "D2(,", options3, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte) (-26);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (int) (byte) (-26), (-3481), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(3, "\n", "usage: ", options0, "--", false);
      helpFormatter0.getLongOptSeparator();
      Comparator comparator0 = helpFormatter1.getOptionComparator();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1445, "org.apache.commons.cli.HelpFormatter", " ", options0, 7, 3, "-", false);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.setWidth((-1175));
      helpFormatter0.setLeftPadding(33);
      helpFormatter0.getWidth();
      Options options0 = new Options();
      Option option0 = new Option("arg", " ", false, "line.separator");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", "", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (String) null, options3, "V=b4$tB! ,#7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.rtrim("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      mockFileOutputStream0.flush();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Object object0 = new Object();
      Object object1 = new Object();
      PrintWriter printWriter0 = mockPrintWriter0.format("--", (Object[]) null);
      Options options0 = new Options();
      Option option0 = new Option("", "Qiv~W");
      mockPrintWriter0.printf("-", (Object[]) null);
      helpFormatter0.printHelp(printWriter0, 2598, "T{I$|_", "Qiv~W", options0, 2598, 17, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2, "-", "-", (Options) null, "-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1319;
      helpFormatter0.setWidth(1319);
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 1, " ");
      Options options1 = options0.addOption("1h", "", true, "usage: ");
      options1.hasLongOption("arg");
      String string0 = "line.separator";
      options0.hasOption("line.separator");
      Options options2 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1319, (Options) null, 0, 736);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("\n");
      Options options0 = new Options();
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      boolean boolean0 = true;
      helpFormatter1.printHelp("<H&o&b<APE)8O'*", "", options0, "org.apache.commons.cli.AlreadySelectedException", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter2.printUsage((PrintWriter) null, 1, "", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[5] = (Object) helpFormatter0;
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg");
      helpFormatter0.rtrim(":}ao;-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.rtrim("gO8f");
      helpFormatter1.setLongOptSeparator("arg");
      File file0 = MockFile.createTempFile(":}ao;-", "y9(]~S[H<x`SFKSkKr");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append('H');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getNewLine();
      helpFormatter1.printOptions(printWriter0, 666, options0, 98, 98);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 98, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("b*=i@lAc`_T]");
      Options options0 = new Options();
      Option option0 = new Option("", "Bw#sBw@u]N.fM=l@.M");
      mockPrintWriter0.printf("b*=i@lAc`_T]", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 7, "b*=i@lAc`_T]", "*", options0, (-1023), 43, "b*=i@lAc`_T]", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1319);
      Options options0 = new Options();
      boolean boolean0 = true;
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderOptions(stringBuffer0, 8, options0, 8, 8);
      StringWriter stringWriter0 = new StringWriter(1477);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      PrintWriter printWriter0 = mockPrintWriter0.append('y');
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "usage: ", true, "!0H]6|7K3n#yz+");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 18, options1, (-1), 1477);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      char[] charArray0 = new char[8];
      charArray0[0] = '*';
      charArray0[1] = 'n';
      charArray0[3] = 'X';
      charArray0[4] = '<';
      charArray0[5] = '*';
      charArray0[6] = '*';
      charArray0[7] = '*';
      mockPrintWriter0.write(charArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-61), (String) null, options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1319);
      Options options0 = new Options();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.createFolder(evoSuiteFile0);
      options0.addOption("", true, "--");
      StringBuffer stringBuffer0 = new StringBuffer(3);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 8, options0, 8, 8);
      stringBuffer1.append(1222L);
      Options options1 = options0.addOption("1h", "", true, "usage: ");
      options1.hasLongOption("arg");
      helpFormatter0.printHelp("arg", "&7?J", options1, "]`C&nP5", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.rtrim("&7?J");
      helpFormatter1.setLongOptSeparator("\"cBMK");
      File file0 = MockFile.createTempFile("[ARG...]", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter1.getNewLine();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.rtrim("Uiv");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      mockFileOutputStream0.flush();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) fileDescriptor0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) "Uiv";
      objectArray0[4] = (Object) mockFileOutputStream0;
      objectArray0[5] = (Object) "Uiv";
      Object object1 = new Object();
      Object object2 = new Object();
      mockPrintWriter0.format("sZmq", objectArray0);
      Options options0 = new Options();
      Option option0 = new Option("arg", "org.apache.ommons.ci.HelpFormatter");
      PrintWriter printWriter0 = mockPrintWriter0.printf("&<>+fO", objectArray0);
      helpFormatter0.printHelp(printWriter0, 9, "xrlktPeE8nD&!NyE#\"9", "&<>+fO", options0, 7, 0, "", false);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      int int0 = 60;
      String string0 = null;
      char[] charArray0 = new char[4];
      charArray0[0] = 'B';
      charArray0[1] = '*';
      charArray0[2] = '*';
      charArray0[3] = 'X';
      mockPrintWriter0.write(charArray0);
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 60, (String) null, options0);
      helpFormatter0.createPadding(60);
      String string1 = "_x)dzU#g7l8lwga@";
      Option option0 = null;
      try {
        option0 = new Option("--", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("Uiv");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      mockFileOutputStream0.flush();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]p'eVqJ3G4aJF");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 973, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[5] = (Object) helpFormatter0;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", "arg");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp(" ", " ", options2, " ", true);
      helpFormatter0.rtrim(":}ao;-");
      helpFormatter0.printHelp("zAcu1$cK_jB`|a[|jG", (String) null, options0, "HB3A", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("\n");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-2), "\n", "usage: ", options0, "HB3A");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.getSyntaxPrefix();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2221, "-", " 8gm>sEwa%", (Options) null, "j:", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1319);
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 8, options0, 8, 8);
      stringBuffer1.append(1222L);
      Options options1 = options0.addOption("1h", "", true, "usage: ");
      options1.hasLongOption("arg");
      helpFormatter0.printHelp("arg", "&7?J", options1, "]`C&nP5", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.rtrim("&7?J");
      helpFormatter1.setLongOptSeparator("\"cBMK");
      File file0 = MockFile.createTempFile("[ARG...]", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.append('<');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter1.getNewLine();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer2 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 39, 39);
      stringBuffer1.append(66L);
      String string0 = "1h";
      Options options1 = options0.addOption("", "\n", false, "NO_ARGS_ALLOWED");
      options1.hasLongOption("\n");
      options1.hasOption("1h");
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer2, 74, options1, 70, (-2638));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.rtrim("Uiv");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      mockFileOutputStream0.flush();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      mockPrintWriter0.print(0.0);
      objectArray0[0] = object0;
      objectArray0[1] = (Object) fileDescriptor0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) "Uiv";
      objectArray0[4] = (Object) mockFileOutputStream0;
      objectArray0[5] = (Object) "Uiv";
      Object object1 = new Object();
      Object object2 = new Object();
      mockPrintWriter0.format("sZmq", objectArray0);
      Options options0 = new Options();
      Option option0 = new Option("arg", "org.apache.commons.cli.HelpFormatter");
      options0.addOption(option0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("&<>+fO", objectArray0);
      helpFormatter0.printHelp("&<>+fO", "sZmq", options0, ":lK}OOt88B] >?jdpA");
      helpFormatter0.printWrapped(printWriter0, 105, "Uiv");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[5] = (Object) helpFormatter0;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", "arg");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp(" ", " ", options2, " ", true);
      helpFormatter0.rtrim(":}ao;-");
      options2.hasOption((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getNewLine();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setNewLine((String) null);
      helpFormatter1.setOptionComparator(comparator0);
      Options options3 = options2.addOption(option0);
      helpFormatter0.printHelp("kiU}X?Jj@", "-", options3, "--");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[5] = (Object) helpFormatter0;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", "arg");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp(" ", " ", options2, " ", true);
      helpFormatter0.rtrim(":}ao;-");
      helpFormatter0.printHelp("Z", (String) null, options0, "HB3A", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("\n");
      helpFormatter0.setLongOptSeparator("<");
      File file0 = MockFile.createTempFile(",Ei9s)/4>#-]JFH@a", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.append('<');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter1.getNewLine();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[5] = (Object) helpFormatter0;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", "arg");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp(" ", " ", options2, " ", true);
      helpFormatter0.rtrim(":}ao;-");
      options2.hasOption((String) null);
      helpFormatter0.getNewLine();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("arg");
      helpFormatter1.setOptionComparator(comparator0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 74, 1, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer1, 1, 3, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "[qt0HaO!");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.setWidth((byte)0);
      Options options1 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp("Cannot add value, list full.", "]", (Options) null, "]", false);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getWidth();
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("\n", "usage: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // usage: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1319);
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 8, options0, 8, 8);
      stringBuffer1.append(1222L);
      Options options1 = options0.addOption("1h", "", true, "usage: ");
      options1.hasLongOption("arg");
      options1.hasOption("org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.renderOptions(stringBuffer0, 8, options0, 736, 736);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = helpFormatter1.defaultArgName;
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      Options options2 = new Options();
      helpFormatter1.printHelp(printWriter0, 283, "Wnf<h%j! V?", "fsPl.O]9#+s", options0, 8, 11, "org.apache.commons.cli.Option");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) helpFormatter0;
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", "c<nq", options0, "HK2", false);
      String string0 = helpFormatter0.defaultArgName;
      helpFormatter0.setLongOptSeparator("]");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string1 = helpFormatter1.defaultArgName;
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) null);
      Options options1 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp(printWriter0, 1, "--", "-", options1, 1, 386, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) helpFormatter0;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", "arg");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp(" ", " ", options2, " ", true);
      helpFormatter0.rtrim(":}ao;-");
      options2.hasOption((String) null);
      helpFormatter0.getNewLine();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("arg");
      helpFormatter1.setOptionComparator(comparator0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((String) null, "J1/V%3q~,1&", options2, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("t", options1, false);
      helpFormatter0.setWidth(1319);
      Options options2 = new Options();
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(";og!yiR=!iocR");
      mockPrintWriter0.append('u');
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1754), "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) helpFormatter0;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", "arg");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp(" ", " ", options2, " ", true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("'!8d+ehzov");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = helpFormatter0.defaultArgName;
      mockPrintWriter0.append((CharSequence) "--");
      Options options3 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 51, "H,cn+m{fElvHiDa", "V=vGI]0qx/", options2, 576, (-1), "arg");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.setWidth(3);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("]", "Cannot add value, list full.", (Options) null, "Cannot add value, list full.", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1319, "G* :77OK0%w");
      helpFormatter0.setWidth(1319);
      Options options0 = new Options();
      helpFormatter0.printHelp("]", "]", options0, "]", true);
      options0.addOption("", true, "");
      helpFormatter0.rtrim("");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.printHelp(96, "XXuFNCbw", "", options0, "1]}?R(Gh");
      helpFormatter0.getArgName();
      helpFormatter0.findWrapPos("(ha`:", 10, 10);
      helpFormatter0.setSyntaxPrefix("-");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[qt0HaO!";
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.printHelp("1Dpe!+=TC]:y4Ug@z^", "[qt0HaO!", options0, "", true);
      helpFormatter0.defaultSyntaxPrefix = "Iz*W;ErdC/lZNqx";
      helpFormatter0.getLeftPadding();
      helpFormatter0.getNewLine();
      String string1 = "]";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-748), "'", "]", options0, "'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.rtrim("Uiv");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      mockFileOutputStream0.flush();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      objectArray0[0] = object0;
      objectArray0[1] = (Object) fileDescriptor0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) "Uiv";
      objectArray0[4] = (Object) mockFileOutputStream0;
      objectArray0[5] = (Object) "Uiv";
      Object object1 = new Object();
      Object object2 = new Object();
      helpFormatter0.getNewLine();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.setNewLine("\n");
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.rtrim("BLb");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter1.findWrapPos("usage: ", 3, 3);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator0);
      helpFormatter1.setLeftPadding(3);
      helpFormatter1.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter1.findWrapPos(">", 1850, 3);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1319);
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "jAFNH}#A1c7T!5";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, "' contains an illegal character : '", ">", options0, "jAFNH}#A1c7T!5", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      String string0 = " ";
      helpFormatter0.setWidth(3);
      String string1 = "]";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("]", " ", options0, "M[Dh9@9(F", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(31);
      helpFormatter0.setDescPadding(31);
      Options options0 = new Options();
      helpFormatter0.printHelp("1>e6qm5j", "[qt0HaO!", options0, "$^(b/Tx*kV", true);
      helpFormatter0.rtrim("");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.printHelp(33, "A CloneNotSupportedExce=tion was thrown: ", "1]}?R(Gh", options0, (String) null);
      helpFormatter0.getArgName();
      helpFormatter0.findWrapPos("[", 31, 103);
      helpFormatter0.setSyntaxPrefix("");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 4004;
      helpFormatter0.setWidth(4004);
      String string0 = "]";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "us\"9~f-R9P", options0, "]", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.rtrim("Uiv");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      mockFileOutputStream0.flush();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) fileDescriptor0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) "Uiv";
      objectArray0[4] = (Object) mockFileOutputStream0;
      objectArray0[5] = (Object) "Uiv";
      Object object1 = new Object();
      Object object2 = new Object();
      mockPrintWriter0.format("sZmq", objectArray0);
      Options options0 = new Options();
      Option option0 = new Option("arg", "org.apache.commons.cli.HelpFormatter");
      Options options1 = options0.addOption(option0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("&<>+fO", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 9, "xrlktPeE8nD&!NyE#\"9", "&<>+fO", options1, 7, 0, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1319);
      String string0 = "]";
      Options options0 = new Options();
      String string1 = null;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 8, options0, 8, 8);
      stringBuffer1.append(1222L);
      Options options1 = options0.addOption("1h", "", true, "usage: ");
      options1.hasLongOption("arg");
      int int0 = 0;
      options1.hasOption("org.apache.commons.cli.HelpFormatter$OptionComparator");
      StringBuffer stringBuffer2 = helpFormatter0.renderOptions(stringBuffer0, 8, options0, 736, 736);
      int int1 = (-140);
      stringBuffer1.codePoints();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer2, (-140), 0, "x0{~vRV-M Y#`");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[1];
      mockPrintWriter0.print((long) 3);
      objectArray0[0] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("arg", objectArray0);
      mockPrintWriter0.println();
      int int0 = 642;
      helpFormatter0.printWrapped(printWriter0, 642, 642, "");
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options1.addOption(" ", "", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(3);
      Options options0 = new Options();
      int int0 = (-301);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-301), "", "", options0, "org.apache.commons.cli.HelpFormatter$OptionComparator", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("ou8^s");
      helpFormatter0.setSyntaxPrefix(" %=fbAJ");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " %=fbAJ");
      stringBuffer0.reverse();
      helpFormatter0.defaultLeftPad = 44;
      char[] charArray0 = new char[8];
      charArray0[0] = 't';
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp(74, "-", "f*gZKh8,-,Zy", options0, "", true);
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" %=fbAJ");
      String string0 = helpFormatter1.defaultArgName;
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      Options options1 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "NwA@i!O2?M_bQq`1$e", "nNA#&VjSLTfk+NcD", options0, 0, 74, (String) null);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.printHelp("1Dpe!+=TC]:y4Ug@z^", "[qt0HaO!", options0, "", true);
      helpFormatter0.defaultSyntaxPrefix = "Iz*W;ErdC/lZNqx";
      helpFormatter0.getLeftPadding();
      helpFormatter0.getNewLine();
      helpFormatter0.findWrapPos("9IT*w.M}", 131, 1850);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("c@w>P", "").when(comparator0).toString();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.printHelp("[qt0HaO!", options0);
      helpFormatter0.setLeftPadding(1850);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getNewLine();
      helpFormatter0.getOptionComparator();
      helpFormatter0.setNewLine("\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "", "c@w>P", options0, "Iz*W;ErdC/lZNqx", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[5] = (Object) "Uiv";
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setDescPadding(0);
      Options options0 = new Options();
      options0.getOptions();
      Option option0 = new Option("arg", "--", false, "L]Ne{{l ");
      Options options1 = options0.addOption(option0);
      options1.getOption("arg");
      options1.getOptions();
      options1.getMatchingOptions("usage: ");
      options1.addOption((String) null, true, "R57E60M\"]2");
      int int0 = 0;
      helpFormatter0.setWidth((-2));
      options0.getOptionGroups();
      helpFormatter0.createPadding(23);
      StringBuffer stringBuffer0 = new StringBuffer("--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1279), options0, 2687, 2988);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setDescPadding(0);
      Options options0 = new Options();
      options0.getOptions();
      Option option0 = new Option("arg", "--", false, "L]Ne{{l ");
      Options options1 = options0.addOption(option0);
      options1.getOption("arg");
      options1.getOptions();
      options1.getMatchingOptions("usage: ");
      Options options2 = options1.addOption((String) null, true, "R57E60M\"]2");
      options2.getOptions();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String string0 = null;
      option0.setArgName((String) null);
      helpFormatter0.optionComparator = comparator0;
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options2.addOptionGroup(optionGroup1);
      options2.helpOptions();
      String string1 = "pZ7t:L(8o!lh%1N,E=:";
      // Undeclared exception!
      helpFormatter0.printHelp(0, "Tv'EntG", "usage: ", options2, "pZ7t:L(8o!lh%1N,E=:");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("Uiv");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) fileDescriptor0;
      objectArray0[3] = (Object) "Uiv";
      objectArray0[5] = (Object) "Uiv";
      objectArray0[6] = (Object) fileDescriptor0;
      int int0 = 0;
      helpFormatter0.setLongOptSeparator("Uiv");
      helpFormatter0.setLongOptSeparator("Uiv");
      int int1 = 0;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "~>JH6l!ZMrD2k", "&<>+fO", (Options) null, "Uiv");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix(" %=fbAJ");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " %=fbAJ");
      stringBuffer0.reverse();
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 44, ")6U+Ve)<gs");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setSyntaxPrefix("*gL.t");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      StringBuffer stringBuffer1 = stringBuffer0.reverse();
      int int0 = 0;
      char[] charArray0 = new char[1];
      charArray0[0] = '0';
      StringBuffer stringBuffer2 = stringBuffer1.append(charArray0);
      helpFormatter0.renderWrappedText(stringBuffer2, 44, (-2158), "}fdS7y}D");
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      helpFormatter0.setOptPrefix("usage: ");
      helpFormatter0.getArgName();
      String string1 = "org.apache.commons.cli.AlreadySelectedException";
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("org.apache.commons.cli.AlreadySelectedException", 1, 44);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix(" %=fbAJ");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " %=fbAJ");
      stringBuffer0.reverse();
      helpFormatter0.defaultLeftPad = 44;
      char[] charArray0 = new char[8];
      charArray0[0] = 't';
      charArray0[1] = 'C';
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" %=fbAJ");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) " %=fbAJ";
      objectArray0[2] = (Object) " %=fbAJ";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) 't';
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) "-";
      objectArray0[8] = (Object) 't';
      PrintWriter printWriter0 = mockPrintWriter0.format("-", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-783), " %=fbAJ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Rp:G";
      helpFormatter0.setNewLine("Rp:G");
      PrintWriter printWriter0 = null;
      int int0 = (-604);
      String string1 = "usage: ";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      int int1 = 3140;
      String string2 = null;
      helpFormatter0.defaultLongOptPrefix = null;
      String string3 = "";
      boolean boolean0 = false;
      Option option0 = new Option("", "", false, "Rp:G");
      Options options1 = options0.addOption(option0);
      options1.getMatchingOptions("HJ}~^JA");
      int int2 = (-1);
      int int3 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1319);
      Options options0 = new Options();
      helpFormatter0.printHelp("]", "]", options0, "]", true);
      helpFormatter0.rtrim("");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.printHelp(96, "XXuFNCbw", "", options0, "1]}?R(Gh");
      helpFormatter0.getArgName();
      helpFormatter0.findWrapPos("(ha`:", 10, 10);
      helpFormatter0.setSyntaxPrefix("]");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setLongOptSeparator("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      int int0 = 943;
      String string1 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", false, "arg");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options2.addOption("hO,s\"", "--", true, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'hO,s\"' contains an illegal character : ','
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      helpFormatter0.defaultSyntaxPrefix = "7/(MWwZ`'h* [^jAjK";
      helpFormatter0.setWidth((-1));
      helpFormatter0.rtrim((String) null);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      int int0 = (-1);
      helpFormatter0.defaultSyntaxPrefix = "7/(MWwZ`'h* [^jAjK";
      helpFormatter0.setWidth((-1));
      String string0 = null;
      helpFormatter0.rtrim((String) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string1 = "";
      String string2 = "io6O4OS";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 1424, 1424);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "-";
      helpFormatter0.setSyntaxPrefix("-");
      helpFormatter0.defaultLeftPad = 0;
      String string1 = "arg";
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.setArgName("arg");
      helpFormatter0.getDescPadding();
      String string2 = "'";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("sAAHGIxhwi+$R5A(", " ", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'sAAHGIxhwi+$R5A(' contains an illegal character : '+'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-386);
      String string0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-386), "neh9O\"}aEJGG(#Nw", (String) null, options1, (String) null, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Rp:G";
      helpFormatter0.setNewLine("Rp:G");
      PrintWriter printWriter0 = null;
      int int0 = (-604);
      String string1 = "usage: ";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      int int1 = 3140;
      String string2 = null;
      boolean boolean0 = false;
      Option option0 = new Option("", "", false, "Rp:G");
      Options options1 = options0.addOption(option0);
      options1.getMatchingOptions("HJ}~^JA");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3140, (String) null, "usage: ", options1, (-1), 0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", options0, false);
      helpFormatter0.printHelp("Illegal option name '", (String) null, options0, "", false);
      helpFormatter0.rtrim("]");
      helpFormatter0.setLongOptSeparator("");
      int int0 = (-2223);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2223), "", "", options0, "1]}?R(Gh");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      String string0 = "";
      helpFormatter0.printHelp("1Dpe!+=TC]:y4Ug@z^", "[qt0HaO!", options0, "", true);
      helpFormatter0.defaultSyntaxPrefix = "Iz*W;ErdC/lZNqx";
      helpFormatter0.getLeftPadding();
      helpFormatter0.getNewLine();
      String string1 = "9IT*\\w.M}";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.printHelp("1Dpe!+=TC]:y4Ug@z^", "[qt0HaO!", options0, "", true);
      helpFormatter0.defaultSyntaxPrefix = "Iz*W;ErdC/lZNqx";
      helpFormatter0.getLeftPadding();
      helpFormatter0.getNewLine();
      helpFormatter0.findWrapPos("9IT*w.M}", 131, 1850);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.printHelp("[qt0HaO!", options0);
      helpFormatter0.setLeftPadding(1850);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.findWrapPos("", 1, (-1));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-1255);
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", options0, false);
      stringBuffer0.append((long) 74);
      Options options1 = options0.addOption((String) null, "arg", true, "");
      options0.hasLongOption("P");
      int int1 = 0;
      options1.hasOption("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1255), options1, 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 391;
      int int1 = (-425);
      helpFormatter0.setWidth((-425));
      helpFormatter0.setLeftPadding(391);
      int int2 = 2164;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      int int0 = 31;
      int int1 = 339;
      helpFormatter0.renderWrappedText(stringBuffer0, 31, 339, "");
      Options options0 = new Options();
      Option option0 = new Option((String) null, "", true, "\n");
      helpFormatter0.defaultArgName = "4Tm 9],t";
      Options options1 = options0.addOption(option0);
      option0.toString();
      options0.hasOption("");
      options1.addOption("9KDgIa", true, "");
      Options options2 = options1.addOption("", "cmdLineSyntax not provided", true, ">INB8QL{MJy1");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options2, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setLongOptPrefix("--");
      helpFormatter0.getLongOptPrefix();
      String string0 = null;
      helpFormatter0.setArgName((String) null);
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.getOptionComparator();
      int int0 = 0;
      String string1 = "f3qW9&f&I?;mB*AdC";
      Options options0 = new Options();
      String string2 = "]";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("]", " ", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ']'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(3);
      Options options0 = new Options();
      helpFormatter0.printHelp("]", "]", options0, "]", true);
      helpFormatter0.rtrim("");
      helpFormatter0.findWrapPos("", 10, 1850);
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setLeftPadding(1850);
      helpFormatter0.getLongOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      int int0 = HelpFormatter.DEFAULT_WIDTH;
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-3104));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("hSUU#4{");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-2388), "hSUU#4{");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "lk*X&&Jr";
      helpFormatter0.defaultArgName = "lk*X&&Jr";
      Options options0 = new Options();
      options0.getOptions();
      options0.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[ option: ";
      Options options0 = new Options();
      String string1 = "t\"4";
      helpFormatter0.printHelp("[ option: ", options0, true);
      Option option0 = null;
      try {
        option0 = new Option("[ option: ", (String) null, true, "t\"4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '[ option: ' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      String string0 = "usage: ";
      MockFile mockFile0 = new MockFile((File) null, "");
      File file0 = MockFile.createTempFile("usage: ", "usage: ", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(file0, "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      int int0 = (-223);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("arg", helpFormatter0.getArgName());
      
      helpFormatter0.setArgName("");
      assertEquals("", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix(" %=fbAJ");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " %=fbAJ");
      stringBuffer0.reverse();
      int int0 = 0;
      helpFormatter0.defaultLeftPad = 44;
      char[] charArray0 = new char[8];
      charArray0[0] = 't';
      charArray0[1] = 'C';
      charArray0[2] = 'X';
      charArray0[3] = '{';
      charArray0[4] = '*';
      charArray0[5] = '1';
      charArray0[6] = 'V';
      charArray0[7] = '0';
      stringBuffer0.append(charArray0);
      String string0 = "\"!h`Q";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 44, "\"!h`Q");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 13, 13, " ] [ long ");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "#lC|V-,HV@Oux");
      int int0 = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, 593, options1, 13, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1319);
      Options options0 = new Options();
      helpFormatter0.printHelp("]", "]", options0, "]", true);
      helpFormatter0.rtrim("");
      options0.hasOption("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 1319, options0, 1769, 1769);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }
}
