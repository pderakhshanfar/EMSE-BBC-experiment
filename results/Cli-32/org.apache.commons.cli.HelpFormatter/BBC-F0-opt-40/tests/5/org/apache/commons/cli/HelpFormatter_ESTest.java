/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 18:14:13 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.URI;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      Options options0 = new Options();
      Option option0 = new Option("", false, "");
      options0.addOption(option0);
      Options options1 = options0.addOption("", true, ">(zE;:*");
      Option option1 = new Option("", true, "usage: ");
      Options options2 = options1.addOption(option1);
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options2, 73, 0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.defaultSyntaxPrefix = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", "", (Options) null, "u(p3y=T(pI&O9b=", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.createPadding(0);
      helpFormatter0.getLongOptPrefix();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 0, 44, "");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("usage: ", 74, 74);
      helpFormatter0.defaultLeftPad = (-4845);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "Cannot add value, list full.";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "Cannot add value, list full.";
      objectArray0[3] = (Object) "Cannot add value, list full.";
      objectArray0[4] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("Cannot add value, list full.", objectArray0);
      int int0 = 0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, 3, "Cannot add value, list full.");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("' was specified but an option from this group ");
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.defaultArgName = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.rtrim((String) null);
      String string0 = "G^=";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("G^=", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) null, 74, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(7);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("\n", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(6);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("A,sg-z", "A,sg-z", (Options) null, "A,sg-z");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getLongOptPrefix();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2.*$`,\"F<$8D\"xNBC");
      helpFormatter0.setDescPadding((-286));
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      helpFormatter0.renderWrappedText(stringBuffer0, 8, 8, "--");
      helpFormatter0.getDescPadding();
      OutputStream outputStream0 = null;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer(125);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 2, (-26), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", " ");
      options0.addOptionGroup(optionGroup0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.createPadding(0);
      helpFormatter0.rtrim("p`?G*ED$y4");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/;}WXC");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.rtrim("");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2386;
      String string0 = "--";
      Options options0 = new Options();
      options0.hasOption("--");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.defaultLeftPad = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2386, "--", "--", options0, "--", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)16;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(2132);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "6$sGz|STM1p%~G/", false, "zN8|)\")Dq");
      Option option0 = new Option("arg", "\n");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (byte)3, options2, 64, 10);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(9);
      helpFormatter0.defaultOptPrefix = " {'s";
      helpFormatter0.defaultDescPad = (-1623);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", (Options) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = false;
      String string0 = null;
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "Up", "Up", options0, "?6%(evHcsLTyiEe4YN");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "' was specified but an option from this group ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("g$}Cz@", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 16, (-1391), "' was specified but an option from this group ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options0, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", false);
      helpFormatter0.printHelp("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "jQ<)^[A&R'z,m(", options0, "", false);
      helpFormatter0.renderOptions((StringBuffer) null, 12, options0, 12, 1572);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-3818));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("d/Xy{x1AZ&]SNhR_*", (Options) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-1863);
      helpFormatter0.setWidth(0);
      helpFormatter0.getWidth();
      // Undeclared exception!
      helpFormatter0.printHelp("usage: ", (Options) null);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.defaultSyntaxPrefix = "--";
      Options options1 = options0.addOption("arg", "usage: ", true, "\n");
      helpFormatter0.printHelp("--", "", options1, "usage: ", true);
      Options options2 = options0.addOption("", true, "-");
      helpFormatter1.printHelp(3, "-", " ", options2, "Uw");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("v#o");
      Options options1 = options0.addOption("arg", "usage: ", true, "\n");
      helpFormatter1.printHelp("--", "--", options1, "v}e", true);
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter1.renderWrappedText(stringBuffer0, 4252, 60, " ");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.getOptPrefix();
      helpFormatter0.setDescPadding(74);
      StringBuffer stringBuffer0 = null;
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 74, 74, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      String string0 = " ^9`DRw5U;*c!Rm)I_}";
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = (-1065);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("rp!vt?%d_RaH7i", options0, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-3400));
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, (-3400), options0, 1110, 0);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 2198, 2198, "nG< L96EM{]vC3n");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer2, 0, 0, "nG< L96EM{]vC3n");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-3400));
      helpFormatter0.findWrapPos("usage: ", 3, 1);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(604);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) stringWriter0;
      objectArray0[6] = (Object) stringWriter0;
      objectArray0[7] = (Object) stringWriter0;
      objectArray0[8] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 0, 45, "");
      helpFormatter0.findWrapPos(" ^9`DRw5U;*i!Rm)I_}", 0, 0);
      String string0 = helpFormatter0.defaultLongOptPrefix;
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "\n", true, "]/+rrN3");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("arg", true, "usage: ");
      helpFormatter0.printHelp(printWriter0, 2698, "n4w(K<XP?o*),lh<F|N", "n4w(K<XP?o*),lh<F|N", options3, 2698, 9, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append('X');
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 2228, "i", "", options0, 2708, 64, "", true);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.rtrim((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Pe:/MOI*zNE", "Pe:/MOI*zNE", (Options) null, "Pe:/MOI*zNE", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("P<G+I'3XW0<");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 13, "m2l2", (String) null, options0, 1, 103, "-", false);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "!V~-F[~";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 9;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, " ", "S+77Z;3", (Options) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      File file0 = MockFile.createTempFile("arg", "(\"S),!OsUFQ|");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) "arg";
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) file0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) locale0;
      objectArray0[7] = (Object) mockFileOutputStream0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('X');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(printWriter0, 98, "' was specified but an option from this group ", "^7ZqAGnqh", options0, 3, 1, "usage: ", false);
      helpFormatter1.printOptions(mockPrintWriter0, 1, options0, 3, 56);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\"q^u rP;u>", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "org.apache.commons.cli.AlreadySelectedException");
      options1.getOptions();
      options1.helpOptions();
      helpFormatter0.setWidth(3);
      options1.getOption("^Ky|SG:");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", "7Jw", options1, ":/N1H_g(G;pBK1iq", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      mockPrintWriter0.println(1);
      PrintWriter printWriter0 = mockPrintWriter0.append('|');
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.setLeftPadding((-2647));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 1701, "F!/P", "F!/P", options0, (-2647), (-135), "5]5OshJrVzB{>yq", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      // Undeclared exception!
      helpFormatter0.printHelp("usage: ", (Options) null);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "AxsZRn-5";
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      helpFormatter0.getLeftPadding();
      helpFormatter0.printHelp(" :: ", " :: ", options0, " :: ", false);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getDescPadding();
      helpFormatter0.setNewLine("");
      helpFormatter0.getNewLine();
      helpFormatter0.setSyntaxPrefix("v");
      Options options0 = new Options();
      Comparator<OptionGroup> comparator0 = (Comparator<OptionGroup>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      // Undeclared exception!
      try { 
        options0.addOption("Xiw^", "2vDx", false, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'Xiw^' contains an illegal character : '^'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("", 74, 130);
      helpFormatter0.getNewLine();
      helpFormatter0.setSyntaxPrefix((String) null);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(130, "\n", "jcuJ.", options0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getDescPadding();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      helpFormatter0.setLeftPadding((-2647));
      options0.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 6, "ali^P", "7UVj=O87L]\"Ax*.=(}k", options0, 1591, 35, "U89NI", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ",";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "`-#,", false, (String) null);
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.helpOptions();
      optionGroup0.addOption(option0);
      String string1 = "[";
      helpFormatter0.printHelp(1508, ",", " | ", options1, "[");
      helpFormatter0.getSyntaxPrefix();
      optionGroup0.addOption(option0);
      helpFormatter0.getNewLine();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptSeparator();
      optionGroup0.toString();
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile("org.apache.commons.cli.HelpFormatter$1", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      helpFormatter0.printHelp("F!/P", options0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      mockPrintWriter0.println(1);
      PrintWriter printWriter0 = mockPrintWriter0.append('|');
      helpFormatter0.setLeftPadding((-2647));
      helpFormatter0.printHelp(printWriter0, 1701, "usage: ", "ali^P", options0, 1701, 1701, "F!/P", false);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "-", true, " ");
      Options options2 = options1.addOption((String) null, false, "Op}HQY`=/EBh~R");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options2, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.setNewLine("t#4-=PjIt*zO(3V");
      Options options0 = new Options();
      Locale locale0 = Locale.JAPANESE;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", (Object[]) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(printWriter0, 112, "' was specified but an option from this group ", "", options1, 35, 112, "P&U!S8uogr(06/=G");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.findWrapPos("--", 114, 340);
      List list0 = new LinkedList<Object>();
      helpFormatter0.getNewLine();
      helpFormatter0.setSyntaxPrefix("alO");
      options0.toString();
      helpFormatter0.printHelp("s'YEgNG%SU\u0004Em", "kMd~^Lt?", options0, "", true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) comparator0;
      objectArray0[2] = (Object) "--";
      objectArray0[3] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.format("kMd~^Lt?", objectArray0);
      helpFormatter0.printHelp(printWriter0, 340, "kMd~^Lt?", "[ Options: [ short java.util.HashMap@0000000005 ] [ long {} ]", options0, 17, 106, "", true);
      helpFormatter0.getOptionComparator();
      helpFormatter0.printHelp("\n", "{", options0, "", true);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("*\"XH%DXL[!&!)C.", "$M4ViD@58iS1&1k[", options0, "o3;vD&UQTbpA}3X>=F\"", true);
      options0.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions((PrintWriter) null, 74, options0, 3, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.setSyntaxPrefix("");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 1322, options0, 1322, 1322);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "@Zf'eZjwsioV(SEWNV/", true, "Gm3{ZHx");
      optionGroup0.addOption(option0);
      Option option1 = new Option("", "alO");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options0.addOption((String) null, "{~>Ac`.Ch%~riFF-gx", true, " ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(" ", options1);
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 32, "--");
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      int int0 = HelpFormatter.DEFAULT_WIDTH;
      helpFormatter0.setNewLine("/i");
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      String string0 = " [ARG]";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 97, (String) null, options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      String string0 = "AM";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 107, "AM");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[ Options: [ short ");
      Options options0 = new Options();
      String string0 = "e\\u^#";
      helpFormatter0.printHelp("[ Options: [ short ", "", options0, string0, false);
      options0.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-2), options0, (-2), (-173));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(309);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      helpFormatter0.printHelp("-", options0);
      Locale locale0 = Locale.JAPANESE;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      Object[] objectArray0 = new Object[5];
      mockPrintWriter0.flush();
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 309, "");
      helpFormatter0.setNewLine("");
      helpFormatter0.getWidth();
      helpFormatter0.setDescPadding(74);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 309, 134, "Gkw+h|W=GgO%H1J;$jX");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      MockFile mockFile0 = new MockFile("--", "' contains an illegal character : '");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      helpFormatter0.findWrapPos("--", 3, 3);
      helpFormatter0.getNewLine();
      helpFormatter0.setSyntaxPrefix(" | ");
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", (Object[]) null);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 774, "Re=AKm", "uM$WX`\"pC2\"_/MT", options1, (-1), 1532, "X;m");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("o3");
      helpFormatter0.setLeftPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1397, "o3");
      Options options0 = new Options();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      options0.helpOptions();
      helpFormatter0.defaultArgName = "";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) "arg";
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("o3", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      Options options1 = new Options();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printUsage(printWriter0, 668, "", options2);
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-809), "4,:", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      helpFormatter0.defaultArgName = "{";
      helpFormatter0.getDescPadding();
      helpFormatter0.setNewLine("");
      PrintWriter printWriter0 = null;
      String string0 = "7UVj=O87L]\"Ax*.=(}k";
      String string1 = "";
      helpFormatter0.setSyntaxPrefix("");
      int int0 = (-3859);
      String string2 = "^k|*.YS;f)oXEnbw";
      String string3 = "org.apache.commons.cli.HelpFormatter";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 114, (-531), "{");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      helpFormatter0.getDescPadding();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "line.separator", (Options) null, "{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[ Options: [ short ";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[ Options: [ short ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 0, "[ Options: [ short ");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      MockFile mockFile0 = new MockFile("--", "' contains an illegal character : '");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "@Zf'eZjwsioV(SEWNV/", true, "Gm3{ZHx");
      optionGroup0.setRequired(true);
      optionGroup0.addOption(option0);
      Option option1 = new Option("", "alO");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "-", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-11));
      Options options0 = new Options();
      options0.getOptions();
      String string0 = "W5A3#!SJge/?D]j>_O";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("W5A3#!SJge/?D]j>_O", (String) null, options0, "=n8MyE~~of{a", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      options0.getOptions();
      helpFormatter0.printHelp("ga$w0LfC", "", options0, "", true);
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options1 = new Options();
      helpFormatter0.printHelp("   ", options1);
      helpFormatter0.setSyntaxPrefix("ga$w0LfC");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "ga$w0LfC", "ga$w0LfC", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer("");
      int int0 = 1;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, 0, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("o3");
      helpFormatter0.setLeftPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1397, "o3");
      helpFormatter0.setLongOptSeparator("o3");
      Options options0 = new Options();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      options0.helpOptions();
      helpFormatter0.defaultArgName = "";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) "cmdLineSyntax not provided";
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      printWriter0.println();
      options0.hasShortOption("=w");
      Options options1 = options0.addOption("", false, "cmdLineSyntax not provided");
      options1.toString();
      helpFormatter0.printHelp("M", "cmdLineSyntax not provided", options1, "m=4t?j0T{WTE");
      helpFormatter0.setLongOptPrefix("x%bkiuoxX;,* ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator0);
      helpFormatter0.getWidth();
      helpFormatter1.printWrapped(printWriter0, 1390, "cmdLineSyntax not provided");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 3, options1, 7, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.findWrapPos("usage: ", 1, 0);
      helpFormatter0.getNewLine();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("usage: ", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("0lrOfa',[5~ ");
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) helpFormatter1;
      objectArray0[3] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
      // Undeclared exception!
      helpFormatter1.printHelp(printWriter0, 0, "--", "]", options0, 1, 74, "\n");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      options0.getOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", "-", options0, "-", true);
      helpFormatter0.setLeftPadding(1);
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options1 = new Options();
      helpFormatter1.printHelp("ga$w0LfC", options1);
      int int0 = helpFormatter1.defaultDescPad;
      helpFormatter0.getNewLine();
      helpFormatter0.setSyntaxPrefix("\n");
      helpFormatter0.printHelp(3217, "ga$w0LfC", "' was specified but an option from this group ", options0, "");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "ga$w0LfC";
      FileSystemHandling.shouldAllThrowIOExceptions();
      options0.getOptions();
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "}DRozpp@P=\"AYf;r1_", options0, "org.apache.commons.cli.HelpFormatter$1", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("o3");
      helpFormatter0.setLeftPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1397, "o3");
      helpFormatter0.setLongOptSeparator("o3");
      Options options0 = new Options();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      options0.helpOptions();
      helpFormatter0.defaultArgName = "";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) "cmdLineSyntax not provided";
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      printWriter0.println();
      options0.hasShortOption("=w");
      Options options1 = options0.addOption("", true, "cmdLineSyntax not provided");
      options1.toString();
      helpFormatter0.printHelp("M", "cmdLineSyntax not provided", options1, "m=4t?j0T{WTE");
      helpFormatter0.setLongOptPrefix("x%bkiuoxX;,* ");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator1).toString();
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.getWidth();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1864, "", options1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("o3");
      helpFormatter0.setLeftPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1397, "o3");
      helpFormatter0.setLongOptSeparator("o3");
      Options options0 = new Options();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      LinkedList<Option> linkedList0 = new LinkedList<Option>();
      helpFormatter0.defaultArgName = "";
      objectArray0[2] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      printWriter0.println();
      Options options1 = options0.addOption("", true, "cmdLineSyntax not provided");
      options1.getMatchingOptions(" ");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte)27;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.printHelp("=w", "#|0n;A", options1, "NMrj", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "", "", options0, 1397, 1397, "Cannot add value, list full.", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 10;
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      mockPrintWriter0.write(3);
      int int1 = (-2);
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 10, (-4424), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "o3";
      helpFormatter0.setOptPrefix("o3");
      helpFormatter0.setLeftPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1397, "o3");
      helpFormatter0.setLongOptSeparator("o3");
      String string1 = "cmdLineSyntax not provided";
      Options options0 = new Options();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      options0.helpOptions();
      helpFormatter0.defaultArgName = "";
      objectArray0[2] = (Object) helpFormatter0;
      String string2 = "-";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-998), "0-Z", "cmdLineSyntax not provided", options0, "-", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.findWrapPos("usage: ", 1, 0);
      helpFormatter0.getNewLine();
      helpFormatter0.setSyntaxPrefix("y");
      helpFormatter0.setLongOptPrefix("y");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(136, "", "usage: ", options0, "'", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      FileSystemHandling.shouldAllThrowIOExceptions();
      options0.getOptions();
      helpFormatter0.createPadding(63);
      helpFormatter0.printHelp("ga$w0LfC", "", options0, "", true);
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 81, "[ Options: [ short ", (String) null, options1, 81, 72, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("&y$|xB&2");
      helpFormatter0.setLeftPadding(2097);
      Options options0 = new Options();
      helpFormatter0.optionComparator = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos((String) null, (-1), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(13);
      helpFormatter0.setOptPrefix(" ] [ long ");
      helpFormatter0.setSyntaxPrefix(" ] [ long ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("x");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "alO");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2267), "", "alO", options0, 447, 0, "--", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(13);
      helpFormatter0.setOptPrefix(" ] [ long ");
      helpFormatter0.setSyntaxPrefix(" ] [ long ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("x");
      Options options0 = new Options();
      helpFormatter0.printHelp(13, "DU8c;qmHQspU4s", "' contains an illegal character : '", options0, " ] [ long ", false);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) " ";
      objectArray0[1] = (Object) " ] [ long ";
      objectArray0[2] = (Object) "Z0PJ~bb%9Av=AV()";
      mockPrintWriter0.format((Locale) null, "--", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.getOption("line.separator");
      options0.hasLongOption("-");
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 0, "x", "arg", options0, 13, 74, "_B;p7A\u0001]zV}8", false);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      MockFile mockFile0 = new MockFile("--", "' contains an illegal character : '");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "@Zf'eZjwsioV(SEWNV/", true, "Gm3{ZHx");
      optionGroup0.addOption(option0);
      Option option1 = new Option("", "alO");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "-", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[ Options: [ short ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, ".!4G^FfuU");
      helpFormatter0.defaultDescPad = (-4424);
      mockPrintWriter0.write(10);
      int int0 = (-2);
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter0.renderWrappedText(stringBuffer0, 13, 10, "Mn'\"U8$|l");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2), "GQ6m&~i*N&");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("o3");
      helpFormatter0.setLeftPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1397, "o3");
      helpFormatter0.setLongOptSeparator("o3");
      Options options0 = new Options();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      options0.helpOptions();
      helpFormatter0.defaultArgName = "";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) "cmdLineSyntax not provided";
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      printWriter0.println();
      options0.hasShortOption("=w");
      Options options1 = options0.addOption("", true, "cmdLineSyntax not provided");
      options1.toString();
      helpFormatter0.printHelp("M", "cmdLineSyntax not provided", options1, "m=4t?j0T{WTE");
      helpFormatter0.setLongOptPrefix("x%bkiuoxX;,* ");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "", "[ARG...]", options0, (-3365), 0, "m=4t?j0T{WTE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      MockFile mockFile0 = new MockFile("--", "' contains an illegal character : '");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      helpFormatter0.findWrapPos("--", 3, 3);
      helpFormatter0.getNewLine();
      helpFormatter0.setSyntaxPrefix(" | ");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", true, "VZ9{");
      helpFormatter0.printHelp("' contains an illegal character : '", options1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("o3");
      helpFormatter0.setLeftPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1397, "o3");
      helpFormatter0.setLongOptSeparator("o3");
      Options options0 = new Options();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      List list0 = new LinkedList<Option>();
      helpFormatter0.defaultArgName = "";
      objectArray0[2] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      printWriter0.println();
      Options options1 = options0.addOption("", true, "cmdLineSyntax not provided");
      options1.toString();
      helpFormatter0.printHelp("M", "cmdLineSyntax not provided", options1, "m=4t?j0T{WTE");
      helpFormatter0.printHelp("=w", "=w", options0, "=w");
      helpFormatter0.setLongOptPrefix("=w");
      helpFormatter0.setOptionComparator((Comparator) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
      helpFormatter1.printWrapped(printWriter0, 1397, "");
      // Undeclared exception!
      helpFormatter1.printUsage(printWriter0, 0, " ");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("ga$w0LfC");
      options0.getOptions();
      helpFormatter0.printHelp("ga$w0LfC", "", options0, "", true);
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options1 = new Options();
      helpFormatter0.printHelp("   ", options1);
      Locale locale0 = Locale.JAPANESE;
      helpFormatter0.findWrapPos("", 44, 44);
      helpFormatter0.getNewLine();
      helpFormatter0.setSyntaxPrefix("ga$w0LfC");
      helpFormatter0.setLongOptPrefix("\n");
      helpFormatter0.printHelp(31, "ga$w0LfC", "ga$w0LfC", options0, "");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      int int0 = 6758;
      String string0 = null;
      Options options0 = new Options();
      String string1 = "";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 6758, options0, 3416, 37);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, 3416, options0, 2, (-816));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "&y$|xB&2";
      helpFormatter0.setSyntaxPrefix("&y$|xB&2");
      helpFormatter0.setLeftPadding(2097);
      Options options0 = new Options();
      helpFormatter0.optionComparator = null;
      String string1 = " ]";
      Option option0 = new Option("", false, " ]");
      option0.setLongOpt(" ]");
      options0.hasShortOption("arg");
      option0.toString();
      Options options1 = options0.addOption(option0);
      options1.getOptionGroups();
      String string2 = "<";
      option0.setLongOpt("<");
      helpFormatter0.printHelp("&y$|xB&2", "cmdLineSyntax not provided", options1, "JF.dWs<\",97])YpE");
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("JF.dWs<\",97])YpE", "cmdLineSyntax not provided");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("--");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(13);
      helpFormatter0.setOptPrefix(" ] [ long ");
      helpFormatter0.setSyntaxPrefix(" ] [ long ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("x");
      String string0 = "' contains an illegal character : '";
      Options options0 = new Options();
      helpFormatter0.printHelp(13, "DU8c;qmHQspU4s", "' contains an illegal character : '", options0, " ] [ long ", false);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) " ";
      objectArray0[1] = (Object) " ] [ long ";
      objectArray0[2] = (Object) "Z0PJ~bb%9Av=AV()";
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "--", objectArray0);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, " ", options0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("ga$w0LfC");
      options0.getOptions();
      helpFormatter0.printHelp("@,PvUJ#[6(UB^(", "", options0, " | ");
      helpFormatter0.defaultNewLine = "Z0PJ~bb%9Av=AV()";
      helpFormatter0.setLeftPadding(31);
      helpFormatter0.setOptPrefix("ga$w0LfC");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte) (-78);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      helpFormatter0.setSyntaxPrefix(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.getSyntaxPrefix();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "vZ'11d<#R(QX", objectArray0);
      helpFormatter0.printUsage(printWriter0, 1345, "[ option: ", options0);
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-1), (String) null, options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      MockFile mockFile0 = new MockFile("--", "' contains an illegal character : '");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "alO");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), " ] [ long ", "", options1, (-1), (-2), (String) null, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, "--");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[ Options: [ short ");
      helpFormatter0.getOptionComparator();
      MockFile mockFile0 = new MockFile(";[-5d=.", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0, false);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "alO");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-1), (String) null, "Cm'MS]ZU4:D'Iu|/T;", options1, (-1), 0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      String string0 = "YX;/\\,isl*[3Tie}A";
      Options options0 = null;
      String string1 = "org.apache.commons.cli.HelpFormatter";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("6l(PGvJq_", "YX;/,isl*[3Tie}A", (Options) null, "YX;/,isl*[3Tie}A");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "ga$w0LfC";
      options0.hasShortOption("ga$w0LfC");
      options0.getOptions();
      boolean boolean0 = true;
      helpFormatter0.printHelp("ga$w0LfC", " | ", options0, " | ", true);
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setOptionComparator((Comparator) null);
      String string1 = "!\"Yi$Sz";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(792, "", (String) null, options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Options options0 = new Options();
      options0.hasShortOption("ga$w0LfC");
      options0.getOptions();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) options0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(115);
      helpFormatter0.findWrapPos("[", 106, 1574);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Z0PJ~bb%9Av=AV()");
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "[", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-529), "line.separator");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 62;
      helpFormatter0.setNewLine("l5YRwrWt");
      helpFormatter0.setLeftPadding(62);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "{";
      helpFormatter0.getDescPadding();
      helpFormatter0.setNewLine("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3, "7UVj=O87L]\"Ax*.=(}k", "", (Options) null, (-3859), 453, "7UVj=O87L]\"Ax*.=(}k");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "{";
      helpFormatter0.getDescPadding();
      helpFormatter0.setNewLine("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3, "7UVj=O87L]\"Ax*.=(}k", "", (Options) null, (-3859), 3, "7UVj=O87L]\"Ax*.=(}k");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      MockFile mockFile0 = new MockFile("--", "' contains an illegal character : '");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "alO");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), " ] [ long ", "", options1, (-1), (-2), (String) null, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "c";
      helpFormatter0.setSyntaxPrefix("c");
      int int0 = (-2);
      helpFormatter0.setDescPadding((-2));
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("5X+;j1u  2&JI^r[");
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter(74);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2), (Options) null, (-2), (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("c");
      helpFormatter0.setDescPadding((-2));
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("5X+;j1u  2&JI^r[");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "c";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "5X+;j1u  2&JI^r[";
      objectArray0[3] = (Object) "--";
      objectArray0[4] = (Object) "c";
      objectArray0[5] = (Object) "";
      mockPrintWriter0.format("", objectArray0);
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("imLs|o[:;0[dIqr`n`");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Locale locale0 = new Locale("", "--", "bTQFUbS~K2cV&<%sL`^");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) pipedOutputStream0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", objectArray0);
      helpFormatter0.printUsage(printWriter0, 2386, "");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "usage: ";
      helpFormatter0.defaultLongOptPrefix = "usage: ";
      helpFormatter0.getWidth();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "Rk= ?m5IZ*C Op8hE3");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // Rk= ?m5IZ*C Op8hE3
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Ih_M!%Kw5";
      MockFile mockFile0 = new MockFile("Ih_M!%Kw5");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "Ih_M!%Kw5";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("-", objectArray0);
      int int0 = (-92);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-92), "line.separator");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "&y$|xB&2";
      helpFormatter0.setSyntaxPrefix("&y$|xB&2");
      Options options0 = new Options();
      helpFormatter0.optionComparator = null;
      String string1 = " ]";
      Option option0 = new Option("", false, " ]");
      option0.setLongOpt(" ]");
      options0.hasShortOption("arg");
      option0.toString();
      Options options1 = options0.addOption(option0);
      options1.getOptionGroups();
      String string2 = "<";
      option0.setLongOpt("<");
      helpFormatter0.printHelp("&y$|xB&2", "cmdLineSyntax not provided", options1, "JF.dWs<\",97])YpE");
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("JF.dWs<\",97])YpE", "cmdLineSyntax not provided");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.setLongOptPrefix(" ] [ long ");
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.setDescPadding(1044);
      String string0 = "4y\"]Lz E";
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "", 1, 10);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      int int0 = (-383);
      helpFormatter0.setDescPadding((-383));
      String string0 = "^:m`S";
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("^:m`S", (-383), (-383));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-3401));
      String string0 = "";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("--", "\n", true, "#xZxA4+F_jm:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getNewLine();
      String string0 = "|0-6]Y@";
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("|0-6]Y@", 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "c";
      helpFormatter0.setSyntaxPrefix("c");
      int int0 = (-2);
      helpFormatter0.setDescPadding((-2));
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("5X+;j1u  2&JI^r[");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "c";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "5X+;j1u  2&JI^r[";
      objectArray0[3] = (Object) "--";
      objectArray0[4] = (Object) "c";
      objectArray0[5] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-2), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('m');
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Locale locale0 = new Locale("", "arg", "usage: ");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-2178), ", ", "yKIQ\"=kg )FqqvLf!Cd", options0, (-2178), (-2178), "#Q@R");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("o3");
      helpFormatter0.setLeftPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      int int0 = 1397;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1397, "o3");
      helpFormatter0.setLongOptSeparator("o3");
      String string0 = "cmdLineSyntax not provided";
      Options options0 = new Options();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      options0.helpOptions();
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) "cmdLineSyntax not provided";
      mockPrintWriter0.printf("", objectArray0);
      options0.hasShortOption("=w");
      Options options1 = options0.addOption("arg", false, "cmdLineSyntax not provided");
      helpFormatter0.printHelp("M", "cmdLineSyntax not provided", options1, "m=4t?j0T{WTE");
      int int1 = (-948);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1397, "", "]", options1, (-948), (-33), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      options0.hasShortOption("ga$w0LfC");
      options0.getOptions();
      helpFormatter0.printHelp("@,PvUJ#[6(UB^(", "", options0, " | ");
      helpFormatter0.defaultNewLine = "Z0PJ~bb%9Av=AV()";
      helpFormatter0.setLeftPadding(31);
      helpFormatter0.setOptPrefix("ga$w0LfC");
      helpFormatter0.setSyntaxPrefix(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "Z0PJ~bb%9Av=AV()", "+~xxbAc~#?mkUyb7)R", options0, "line.separator", false);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "org.apache.commons.cli.AlreadySelectedException");
      options1.getOptions();
      options1.helpOptions();
      helpFormatter0.setWidth(74);
      options1.getOption("^Ky|SG:");
      helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", "7Jw", options1, ":/N1H_g(G;pBK1iq", true);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "<<.-GHgot1neQaG<CaL");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // <<.-GHgot1neQaG<CaL
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      String string0 = "`w-T.\"Qz";
      helpFormatter0.setOptPrefix("`w-T.\"Qz");
      helpFormatter0.setWidth(1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1, "p9MNqJ6F;S2oH{(Owv", "p9MNqJ6F;S2oH{(Owv", (Options) null, 1, 1, "' was specified but an option from this group ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 309;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(309);
      helpFormatter0.defaultSyntaxPrefix = "~;oKsu]";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      boolean boolean0 = false;
      helpFormatter0.printHelp("MBQ:0Cug';S[l", options0, false);
      int int0 = (-1);
      helpFormatter0.setDescPadding((-1));
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1442));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[ Options: [ short ");
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, ".!4G^FfuU");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = null;
      String string0 = "org.apache.commons.cli.HelpFormatter";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("YX;/,isl*[3Tie}A", "\n", (Options) null, "org.apache.commons.cli.HelpFormatter", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 453;
      String string0 = "";
      helpFormatter0.defaultArgName = "";
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 453, (Options) null, 453, 19);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      int int0 = 453;
      Options options0 = null;
      String string0 = "";
      helpFormatter0.defaultArgName = "";
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 453, (Options) null, 453, 19);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.findWrapPos("usage: ", 1, 0);
      helpFormatter0.getNewLine();
      helpFormatter0.setSyntaxPrefix("y");
      helpFormatter0.setLongOptPrefix(";jQ#Ts&Y8TT1");
      assertEquals(";jQ#Ts&Y8TT1", helpFormatter0.getLongOptPrefix());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(1);
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("PqM3yb`)MXcMpkL", true, "nTT'Gw!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'PqM3yb`)MXcMpkL' contains an illegal character : '`'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
