* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-60
* Going to generate test cases for class: org.apache.commons.cli.HelpFormatter
* Starting Client-0
* Connecting to master process on port 19158
* Analyzing classpath: 
  - subjects/buggy-versions/Cli-32/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.cli.HelpFormatter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1151
* Using seed 126066392
* Starting evolution
bbc usage percentage is: 60%
* Initial Number of Goals in DynaMOSA = 400 / 1151
[MASTER] 18:02:28.030 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 602s and 149 generations, 59925 statements, best individual has fitness: 140.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
[MASTER] 18:13:46.456 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Coverage of criterion LINE: 100%
* Total number of goals: 203
* Number of covered goals: 202
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 89%
* Total number of goals: 157
* Number of covered goals: 139
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 50
* Number of covered goals: 50
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 93%
* Total number of goals: 508
* Number of covered goals: 471
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 61%
* Total number of goals: 46
* Number of covered goals: 28
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 98%
* Total number of goals: 40
* Number of covered goals: 39
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 98%
* Total number of goals: 40
* Number of covered goals: 39
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 89%
* Total number of goals: 157
* Number of covered goals: 139
* Generated 124 tests with total length 1697
* Resulting test suite's coverage: 85% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 18:14:30.186 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.67515% of time used, but only 40/124 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 16%
* Compiling and checking tests
[MASTER] 18:15:09.046 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:15:09.135 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:15:09.203 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:15:26.601 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_232_tmp__ESTest.test0(HelpFormatter_232_tmp__ESTest.java:49)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 18:15:26.604 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(74, helpFormatter0.defaultWidth);
assertNotNull(helpFormatter0);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
assertNotNull(mockPrintWriter0);

Locale locale0 = Locale.ENGLISH;
assertEquals("", locale0.getVariant());
assertEquals("en", locale0.toString());
assertEquals("eng", locale0.getISO3Language());
assertEquals("", locale0.getISO3Country());
assertEquals("en", locale0.getLanguage());
assertEquals("", locale0.getCountry());
assertNotNull(locale0);

Object[] objectArray0 = new Object[1];
Object object0 = new Object();
assertNotNull(object0);

objectArray0[0] = object0;
PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "-", objectArray0);
assertFalse(fileDescriptor0.valid());
assertEquals("", locale0.getVariant());
assertEquals("en", locale0.toString());
assertEquals("eng", locale0.getISO3Language());
assertEquals("", locale0.getISO3Country());
assertEquals("en", locale0.getLanguage());
assertEquals("", locale0.getCountry());
assertNotNull(printWriter0);
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);
assertEquals(1, objectArray0.length);

MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
assertFalse(mockPrintWriter1.equals((Object)printWriter0));
assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
assertNotNull(mockPrintWriter1);
assertEquals(1, objectArray0.length);

PrintWriter printWriter1 = mockPrintWriter1.append('2');
assertFalse(fileDescriptor0.valid());
assertEquals("", locale0.getVariant());
assertEquals("en", locale0.toString());
assertEquals("eng", locale0.getISO3Language());
assertEquals("", locale0.getISO3Country());
assertEquals("en", locale0.getLanguage());
assertEquals("", locale0.getCountry());
assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
assertFalse(printWriter0.equals((Object)mockPrintWriter1));
assertFalse(mockPrintWriter1.equals((Object)printWriter0));
assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
assertFalse(printWriter1.equals((Object)printWriter0));
assertFalse(printWriter1.equals((Object)mockPrintWriter0));
assertNotNull(printWriter1);
assertNotSame(mockPrintWriter0, printWriter1);
assertSame(mockPrintWriter0, printWriter0);
assertNotSame(mockPrintWriter0, mockPrintWriter1);
assertNotSame(printWriter0, mockPrintWriter1);
assertSame(printWriter0, mockPrintWriter0);
assertNotSame(printWriter0, printWriter1);
assertSame(mockPrintWriter1, printWriter1);
assertNotSame(mockPrintWriter1, printWriter0);
assertNotSame(mockPrintWriter1, mockPrintWriter0);
assertSame(printWriter1, mockPrintWriter1);
assertNotSame(printWriter1, printWriter0);
assertNotSame(printWriter1, mockPrintWriter0);
assertEquals(1, objectArray0.length);

Options options0 = new Options();
assertNotNull(options0);

Options options1 = options0.addOption("", "\"zot3$Y|gL~py", false, " ]");
assertNotNull(options1);
assertSame(options0, options1);
assertSame(options1, options0);

helpFormatter0.printOptions(printWriter1, 1, options1, 1, 1);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 1
* Writing tests to file
* Writing JUnit test case 'HelpFormatter_ESTest' to results/Cli-32/org.apache.commons.cli.HelpFormatter/BBC-F0-opt-60/tests/9
* Done!

* Computation finished
