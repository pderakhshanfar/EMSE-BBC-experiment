/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 10:20:36 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      int int0 = 0;
      int int1 = 1;
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 1, "Illegal option name '");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.findWrapPos(" ", (-1), 1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1891), 3675, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      Option option0 = new Option("arg", true, "-");
      option0.setArgName("");
      options1.addOption(option0);
      helpFormatter0.printHelp(" | ", options1, true);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "-");
      option0.setArgName("\n");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, "-&#", "arg", options0, "o}", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<OptionGroup> comparator0 = (Comparator<OptionGroup>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setArgName("org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.defaultArgName = null;
      helpFormatter0.defaultNewLine = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      helpFormatter0.getArgName();
      helpFormatter0.findWrapPos("org.apache.commons.cli.HelpFormatter$OptionComparator", 466, 466);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "-");
      option0.setArgName("\n");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(17, "9M$sgi9K*%BRZ\r", "--", options1, "B", true);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = (-611);
      int int0 = 21;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("}Xzb", options0, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "NO_ARGS_ALLOWED";
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.setLeftPadding((-2276));
      boolean boolean0 = true;
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("rMurH~mnl@1ZV", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "-");
      option0.clone();
      option0.setArgName("--");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      optionGroup0.setRequired(false);
      Options options1 = options0.addOption("", true, "usage: ");
      options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-441), "Dy)", "Dy)", options1, "Dy)", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "-");
      option0.clone();
      option0.setArgName("--");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      optionGroup0.setRequired(true);
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(696, "Dy)", (String) null, options0, "", false);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "", true, "");
      helpFormatter0.setWidth(1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("wh", "wh", options1, "wh", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "=nP38";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "=nP38");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-2);
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      char[] charArray0 = new char[6];
      charArray0[0] = '2';
      charArray0[1] = '~';
      charArray0[2] = 'T';
      charArray0[3] = '$';
      charArray0[4] = 'w';
      charArray0[5] = '4';
      // Undeclared exception!
      try { 
        stringBuffer0.insert(2, charArray0, 611, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      Options options1 = options0.addOption("", "i|[wLAe*}7", true, "arg");
      Options options2 = options0.addOption("NO_ARGS_ALLOWED", true, "");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Options options3 = new Options();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 63, "/uNrB[5S{}zxoaaL9", "/uNrB[5S{}zxoaaL9", options1, 17, 219, "' was specified but an option from this group ", false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1177, "' was specified but an option from this group ");
      helpFormatter0.printUsage(printWriter0, 1027, "NO_ARGS_ALLOWED", options2);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-2652));
      Options options0 = new Options();
      helpFormatter0.printHelp(1, " ", "usage: ", options0, "\n", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("I/H'Lg|?]g`yW-h3^", options0, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = (-178);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options0, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1979);
      String string0 = "'6bPGwO{{XVY=punE";
      helpFormatter0.setSyntaxPrefix("'6bPGwO{{XVY=punE");
      String string1 = null;
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.getOptPrefix();
      int int0 = 0;
      helpFormatter0.createPadding(0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, (String) null);
      Option option0 = new Option((String) null, "J!Ni7SQ", false, "JvN?=");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        options2.addOption("'6bPGwO{{XVY=punE", " ", false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ''6bPGwO{{XVY=punE' contains an illegal character : '''
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "' contains an illegal character : '");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 0, "usage: ", options1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(74, "[ Options: [ short ", "15a]d", options0, "=bDo", false);
      helpFormatter0.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("\n");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "--", "^ha~mq.W3=", options0, "--", true);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", false, "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 45, "--", options1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(byteArrayOutputStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions(mockPrintWriter1, 1, options1, 11, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.optionComparator = null;
      helpFormatter0.getLongOptSeparator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "a");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      optionGroup0.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getOption("");
      helpFormatter0.printHelp("usage: ", options1, true);
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 444, " ", "", options0, 67, (-199), "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("'");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1963, "WVWv6N", (String) null, options0, 1396, 1963, "Th4 addVYlue methodWis not intended for client use. Subclasses should use the addValueForProcessing method instead. ", true);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = null;
      Options options0 = new Options();
      int int0 = 3;
      helpFormatter0.renderOptions((StringBuffer) null, 81, options0, 9, 3);
      Options options1 = new Options();
      helpFormatter0.getNewLine();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("arg", "arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // arg
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Locale locale0 = Locale.GERMANY;
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, " :: ", objectArray0);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "org.apache.commons.cli.HelpFormatter$1");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setArgName("'");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 34, " ]", "", options0, 14, 34, (String) null, false);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-657));
      helpFormatter0.defaultLeftPad = (-1527);
      helpFormatter0.getDescPadding();
      String string0 = ",N2$1pdmDp";
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("' contains an illegal character : '", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '' contains an illegal character : '' contains an illegal character : '''
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-2091));
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-109);
      helpFormatter0.defaultWidth = (-109);
      helpFormatter0.getWidth();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      String string0 = "";
      Options options0 = new Options();
      int int1 = 90;
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "\n", (-109), 90);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("i|[wLAe*}7");
      helpFormatter0.setSyntaxPrefix("i|[wLAe*}7");
      helpFormatter0.printHelp(16, "dfoXk~Z", "i|[wLAe*}7", options0, "a=Cof)X)I$5", true);
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 50, options0, 16, 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "--";
      helpFormatter0.defaultSyntaxPrefix = null;
      Options options0 = null;
      String string1 = "line.separator";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", "}(<&Hb3p<_&jP", (Options) null, "line.separator");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix((String) null);
      boolean boolean0 = true;
      int int0 = 18;
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("QEd!9Z(qi[;", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Options options1 = options0.addOption("", "usage: ", false, "usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 64, "usage: ", "", options1, (-377), 3, "6aNF_3>=6c`t", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("i|[wLAe*}7");
      MockFile mockFile0 = new MockFile((String) null, "i|[wLAe*}7");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "   ";
      objectArray0[1] = (Object) null;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) options0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) mockFile0;
      objectArray0[7] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("[/Sfb*EzS9J", objectArray0);
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, ":u'F<.+", ":u'F<.+", options0, 16, 4, "[/Sfb*EzS9J", true);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "", true, "");
      helpFormatter0.setWidth(0);
      // Undeclared exception!
      helpFormatter0.printHelp("wh", "wh", options1, "wh", true);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream("z>p*[toL3v");
      mockPrintStream0.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 44, "1vC\"k", "   ", options0, (-1561), 31, "   ", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Option option0 = new Option("arg", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      optionGroup0.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 34, "A!;5~Is~qXw/Lzz", "A!;5~Is~qXw/Lzz", options1, (-1), (-559), "#&y|G<-^CDGaP", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      optionGroup0.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = "usage: ";
      helpFormatter0.printHelp("usage: ", options1, true);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.setSyntaxPrefix("[ option: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.setLeftPadding(74);
      helpFormatter0.setSyntaxPrefix("\n");
      int int0 = 0;
      // Undeclared exception!
      helpFormatter2.printHelp(0, " ", "[ option: ", options0, "");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.setSyntaxPrefix("[ option: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption((String) null, false, "\n");
      helpFormatter1.printHelp(74, "usage: ", "{pvX", options1, "line.separator", false);
      StringWriter stringWriter0 = new StringWriter(2);
      helpFormatter1.setArgName("--");
      helpFormatter0.printHelp("AahT", options1, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 34, "org.apache.commons.cli.OptionGroup", " | ", options1, 74, 3, "--", false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "--");
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 0, "'c4a+THX6", "-", options0, (-2), 74, "[ option: ");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      options0.addOption("", "9cjkt(yClh*R]=E[Y", true, "arg");
      options0.addOption("NO_ARGS_ALLOWED", true, "");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      helpFormatter0.printHelp(17, "9cjkt(yClh*R]=E[Y", "", options0, "[", true);
      StringWriter stringWriter0 = new StringWriter(74);
      helpFormatter0.setArgName("");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.setSyntaxPrefix("[ option: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption((String) null, false, "\n");
      helpFormatter1.printHelp(74, "usage: ", "{pvX", options1, "line.separator", false);
      StringWriter stringWriter0 = new StringWriter(2);
      helpFormatter1.setArgName("--");
      helpFormatter0.printHelp("AahT", options1, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", "!", (Options) null, "arg", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setLeftPadding(74);
      helpFormatter1.setSyntaxPrefix("\n");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, "]G'R_Ze]Rw{S~", "", options0, "org.apache.commons.cli.Util", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      Options options1 = options0.addOption("", "i|WwLA(*}W", true, "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(1131, "<", (String) null, options0, "arg", false);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 27, "", options1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setLeftPadding(74);
      helpFormatter1.setSyntaxPrefix("[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "[ Options: [ short ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter1.printHelp("#f\"xlHyceB6y m", options1, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("<05");
      mockPrintStream0.append((CharSequence) "<05");
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) helpFormatter0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      mockPrintStream0.format(locale0, "C8", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-428), "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(13, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "usage: ", options0, "", true);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(byteArrayOutputStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 1957, (String) null, "", options0, 1, 13, "<", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.Options";
      helpFormatter0.defaultSyntaxPrefix = "'";
      Options options0 = new Options();
      helpFormatter0.printHelp("D}j]{G5YZgOq", options0, false);
      Options options1 = new Options();
      Options options2 = options1.addOption("", "'", true, "'");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "8{Rj3<TN ?");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("'", "wNQG/&/", options3, "org.apache.commons.cli.HelpFormatter$OptionComparator", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1912), "org.apache.commons.cli.Options");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      options0.addOption("", "i|[wLAe*}7", true, "arg");
      String string0 = "";
      options0.addOption("NO_ARGS_ALLOWED", true, "");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      helpFormatter0.setArgName((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.setLeftPadding((-2276));
      options0.addOption("", "i|[wLAe*}7", true, "arg");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      options0.addOption("NO_ARGS_ALLOWED", true, "");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(17, "i|[wLAe*}7", "", options0, "[", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("A+6Xx7");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 31, (-292), "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("$U'4YlO");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 1030, "\n", "^F]'{XwdA]ly", options0, 1030, 126, "\n", false);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      options0.addOption("", "i|[wLAe*}7", false, "arg");
      options0.addOption("NO_ARGS_ALLOWED", false, "");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      helpFormatter0.printHelp(17, "i|[wLAe*}7", "", options0, "[", false);
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.setArgName("");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 17, 2784, "i|[wLAe*}7");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("\n");
      helpFormatter0.setLongOptPrefix("(nuEVD:ary5_WMC7a");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 49, "(nuEVD:ary5_WMC7a", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLongOptSeparator("(nuEVD:ary5_WMC7a");
      helpFormatter0.setLongOptPrefix("(nuEVD:ary5_WMC7a");
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      Options options0 = new Options();
      stringBuffer0.ensureCapacity(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, ")", "usage: ", options0, "'", false);
      StringWriter stringWriter0 = new StringWriter(74);
      helpFormatter0.printHelp("arg", options0);
      helpFormatter1.findWrapPos("", 74, 1);
      helpFormatter1.setArgName("--");
      helpFormatter0.printHelp(74, "usage: ", "siv,2lI-RNS@8", options0, "7&sVWuUf");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) helpFormatter1;
      objectArray0[3] = (Object) "'";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 1, "PI\"!F/|=M<TT0ip");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      Options options1 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The option '");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1137, "\n", "(z%DML<:", options0, 3, 32, "");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 1586, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      Options options1 = options0.addOption("", "i|[wLAe*}7", false, "arg");
      options0.addOption("NO_ARGS_ALLOWED", false, "");
      File file0 = MockFile.createTempFile("arg", "+|:]/^r}L[nT\"Wz");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 60, "tIC", "", options1, 13, (-680), "g~:Xqpvx>");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      options0.toString();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
      helpFormatter1.setOptPrefix("");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter1.findWrapPos("' was specified but an option from this group ", 3, 3);
      helpFormatter3.setArgName("\n");
      helpFormatter1.getOptPrefix();
      helpFormatter3.printHelp("--", options0);
      // Undeclared exception!
      try { 
        helpFormatter3.printHelp((PrintWriter) null, 1, "H>[a/=VH3", "~ymZ#&L=iM`yZv", options0, 3, 3, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Options options1 = new Options();
      options1.hasShortOption((String) null);
      options0.toString();
      helpFormatter0.printHelp(74, "NO_ARGS_ALLOWED", "usage: ", options1, "RUe", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(11);
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, (-2041), options1, 74, 3);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 1, (-526), "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 44);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      String string0 = "~]S.b";
      String string1 = "";
      int int0 = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 44, "", "~'kW]O5;IgaL", options0, 28, (-1), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "i|[wLAe*}7";
      options0.toString();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.findWrapPos("-", 93, 1);
      helpFormatter0.setArgName("usage: ");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter3.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      options0.addOption("", "7g_X", true, (String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(22, "--", "(),4_Kj]}cKtwBKO^L", options0, ">", true);
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos("", (-2710), 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("--");
      helpFormatter0.getArgName();
      helpFormatter0.setOptPrefix("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.findWrapPos(" | ", 74, 20);
      helpFormatter1.setArgName("-");
      helpFormatter0.getOptPrefix();
      helpFormatter2.printHelp(" | ", options0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 74, "", "Cannot add value, list full.", options1, 1, 110, "arg", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("-");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLongOptSeparator("(nuEVD:ary5_WMC7a");
      helpFormatter0.setLongOptPrefix("(nuEVD:ary5_WMC7a");
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) stringBuffer0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) stringBuffer0;
      objectArray0[3] = (Object) comparator0;
      objectArray0[4] = (Object) "`N(Jzn{Xc.~";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) stringBuffer0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("`N(Jzn{Xc.~", objectArray0);
      helpFormatter0.printOptions(printWriter0, 1326, options0, 65, 65);
      stringBuffer0.ensureCapacity(3);
      StringWriter stringWriter0 = new StringWriter(108);
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("C2K2=b");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = false;
      Options options1 = new Options();
      String string0 = "-kiF/Y#}FP[hbb";
      boolean boolean1 = true;
      int int0 = (-3057);
      String string1 = "";
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-3057), "~]S.b", "~'kW]O5;IgaL", options1, (-1), (-3057), "~]S.b");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 32, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "-");
      option0.clone();
      option0.setArgName("--");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Option option1 = new Option("42p", true, "/w1^");
      optionGroup0.addOption(option1);
      optionGroup0.setRequired(true);
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, " ", "{np=l;UV~Cg", options0, " ", true);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("\n", (String) null).when(comparator0).toString();
      doReturn(82, 0).when(comparator0).compare(any() , any());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "(nuEVD:ary5_WMC7a";
      helpFormatter0.setLongOptSeparator("(nuEVD:ary5_WMC7a");
      helpFormatter0.setLongOptPrefix("(nuEVD:ary5_WMC7a");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "", false, "kfeaNYG[Q");
      Options options2 = options1.addOption((String) null, true, " ");
      Option option0 = new Option("", "mIVVB");
      Options options3 = options2.addOption(option0);
      helpFormatter0.printHelp(264, "(nuEVD:ary5_WMC7a", "@qb;k!IJP[", options3, ".R3|FBi,o9lqZ0lkW", true);
      Options options4 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2548), "", "", options4, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      options0.addOption("", "i|[wLAe*}7", false, "arg");
      options0.addOption("NO_ARGS_ALLOWED", false, "");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      helpFormatter0.printHelp(17, "i|[wLAe*}7", "", options0, "[", false);
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 17, "[", "k84MpPN{o*`", options0, 17, 4460, "-9qau%3", true);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.setSyntaxPrefix("[ option: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption((String) null, false, "\n");
      helpFormatter1.printHelp(74, "usage: ", "{pvX", options1, "line.separator", false);
      StringWriter stringWriter0 = new StringWriter(2);
      helpFormatter1.setArgName("--");
      helpFormatter0.printHelp("AahT", options1, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-706), "?\"`(FSQ[5L6m", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setLeftPadding(74);
      helpFormatter0.printHelp("usage: ", "\n", options0, "arg", false);
      options0.addOption((String) null, true, "--");
      helpFormatter1.setSyntaxPrefix("\n");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, "arg", "  ", options0, (String) null, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(71, "org.apache.commons.cli.HelpFormatter$OptionComparator", "*f]LYcc", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Options options1 = new Options();
      options1.hasShortOption((String) null);
      options0.toString();
      helpFormatter0.printHelp(74, "NO_ARGS_ALLOWED", "usage: ", options1, "RUe", true);
      Options options2 = options0.addOption("", "NO_ARGS_ALLOWED", false, "NO_ARGS_ALLOWED");
      helpFormatter0.printHelp(33, "qGx$[3w<(n3", "usage: ", options2, "qGx$[3w<(n3", false);
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.getArgName();
      helpFormatter0.setOptPrefix("RUe");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.findWrapPos("usage: ", 74, 33);
      helpFormatter1.setArgName("usage: ");
      helpFormatter0.getOptPrefix();
      helpFormatter0.printHelp("arg", options1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1183), "!Q)", "f*h0}R", options0, 1, 74, "'je5$", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "\n", "--", options0, "y#Ot<PEvj", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Options options1 = new Options();
      String string0 = null;
      helpFormatter0.setLongOptPrefix((String) null);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 79, (-34), "-");
      helpFormatter0.setLongOptSeparator("RUe");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 1, (-16));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Options options0 = new Options();
      helpFormatter1.findWrapPos("arg", 1, 287);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "&of9xKD[/jW2H1P1D", "org.apache.commons.cli.HelpFormatter$1", options0, "org.apache.commons.cli.HelpFormatter$1");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLongOptSeparator("(nuEVD:ary5_WMC7a");
      helpFormatter0.setLongOptPrefix("(nuEVD:ary5_WMC7a");
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      stringBuffer0.ensureCapacity(3);
      helpFormatter0.findWrapPos("(nuEVD:ary5_WMC7a", 1252, 101);
      helpFormatter0.printHelp(101, "]", "xvU.41PuCR22Zrv", options0, "xvU.41PuCR22Zrv");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLongOptSeparator("(nuEVD:ary5_WMC7a");
      helpFormatter0.setLongOptPrefix("(nuEVD:ary5_WMC7a");
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      Options options0 = new Options();
      stringBuffer0.ensureCapacity(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      boolean boolean0 = false;
      helpFormatter1.printHelp(3, ")", "usage: ", options0, "'", false);
      StringWriter stringWriter0 = new StringWriter(74);
      int int0 = 1;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2621), "", "cmdLineSyntax not provided", options0, "1Rg]W6Z*A|]-p-DCft$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "NO_ARGS_ALLOWED";
      Options options0 = new Options();
      options0.helpOptions();
      String string1 = "";
      options0.toString();
      int int0 = (-2369);
      String string2 = "=Z]\\l>((";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1, (-2667), "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      StringBuffer stringBuffer0 = new StringBuffer("");
      int int0 = 1203;
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 1, options0, 1203, 50);
      helpFormatter0.renderWrappedText(stringBuffer1, 1203, 1, "rH");
      Options options1 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("e-XQ6Fq=hS)", false, "NO_ARGS_ALLOWED");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'e-XQ6Fq=hS)' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[4];
      objectArray0[3] = (Object) mockFile0;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockFile0;
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.ensureCapacity(5);
      Options options0 = new Options();
      options0.hasShortOption(" ");
      Options options1 = options0.addOption((String) null, " ", false, "");
      helpFormatter0.renderOptions(stringBuffer0, 63, options1, 2845, 2845);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      String string0 = "";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(13, "\n", "", (Options) null, "arg", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-323));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "NO_ARGS_ALLOWED";
      Options options0 = new Options();
      options0.helpOptions();
      options0.addOption("", "i|[wLAe*}7", true, "arg");
      helpFormatter0.printHelp(17, "i|[wLAe*}7", "", options0, "[", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(17, "", " ", options0, "(]8Fo/k4Q6Z__bu#9UL", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      Options options1 = new Options();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringWriter stringWriter0 = new StringWriter(9);
      StringWriter stringWriter1 = stringWriter0.append('/');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 5072, 10, "=Z]l>((");
      stringBuffer1.ensureCapacity(56);
      options1.addOption("", "6\"4", false, "=Z]l>((");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.renderOptions(stringBuffer0, (-1), options1, 2822, 10);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLongOptSeparator("(nuEVD:ary5_WMC7a");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      Options options0 = new Options();
      Options options1 = options0.addOption("z", true, "!!f2]1JtY zYuq*");
      helpFormatter0.printHelp("%.V]", options1, true);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options2 = new Options();
      stringBuffer0.ensureCapacity(1);
      options2.addOption((String) null, "-", true, "z");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.renderOptions(stringBuffer0, 74, options1, 74, 2822);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) helpFormatter0;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("usage: ");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "usage: ");
      helpFormatter1.printHelp(74, "-", "[ Options: [ short ", options1, "--", true);
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter0, true);
      helpFormatter1.setOptPrefix("arg");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.findWrapPos("arg", 3976, 74);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.setArgName(" ");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.setLongOptPrefix("");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 1433, (-297), "   ");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("   ", (-3883), 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      int int0 = 1;
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 1, " ");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "arg");
      // Undeclared exception!
      try { 
        options1.addOption("--", "arg", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      Options options1 = options0.addOption("arg", "", false, "usage: ");
      helpFormatter0.printHelp(74, "NO_ARGS_ALLOWED", "usage: ", options1, "RUe", true);
      StringWriter stringWriter0 = new StringWriter(90);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options2 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = null;
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText((StringBuffer) null, 1, (-1946), "usage: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      options0.addOption("arg", "", true, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(13, "||i<g^JS@W\"", "NO_ARGS_ALLOWED", options0, "NO_ARGS_ALLOWED", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setLongOptPrefix("A CloneNotSupportedException was thrown: ");
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      Options options0 = new Options();
      stringBuffer0.ensureCapacity(74);
      int int0 = 104;
      helpFormatter0.printHelp(104, "0VJ", "", options0, "S^", false);
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "", 3, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options0, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", false);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getDescPadding();
      helpFormatter0.setDescPadding(1);
      StringWriter stringWriter0 = new StringWriter(3);
      helpFormatter0.setLeftPadding(3);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "usage: ", 252, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.setNewLine("mC");
      Options options0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("z", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "usage: ";
      Options options0 = new Options();
      options0.helpOptions();
      Options options1 = options0.addOption("arg", "", false, "usage: ");
      String string1 = "RUe";
      helpFormatter0.printHelp(74, "NO_ARGS_ALLOWED", "usage: ", options1, "RUe", true);
      int int0 = 33;
      Options options2 = options0.addOption("", "", false, "NO_ARGS_ALLOWED");
      helpFormatter0.printHelp(33, "qGx$[3w<(n3", "usage: ", options2, "qGx$[3w<(n3", false);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-2606));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      List list0 = options0.helpOptions();
      options0.addOption("arg", "", false, "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("/O6NA7*>|>aGk8%y'$");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "NO_ARGS_ALLOWED";
      objectArray0[1] = (Object) list0;
      objectArray0[2] = (Object) "/O6NA7*>|>aGk8%y'$";
      mockPrintWriter0.printf("arg", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 32, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "sA#i5T;ez";
      helpFormatter0.rtrim("sA#i5T;ez");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string1 = " Gh_b`:";
      helpFormatter0.setLongOptSeparator(" Gh_b`:");
      helpFormatter0.setLongOptPrefix(" Gh_b`:");
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 1;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-297), 1, " Gh_b`:");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("\n");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLongOptSeparator("(nuEVD:ary5_WMC7a");
      helpFormatter0.setLongOptPrefix("(nuEVD:ary5_WMC7a");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 1433, (-297), "");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getNewLine();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.findWrapPos("}I+4f=bjV=", 110, 880);
      helpFormatter0.setArgName("\n");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockFile0;
      mockPrintWriter0.printf("--", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-320), options0, (-1208), (-1208));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "NO_ARGS_ALLOWED";
      String string1 = "usage: ";
      Options options0 = new Options();
      options0.helpOptions();
      Options options1 = options0.addOption("arg", "", true, "usage: ");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "NO_ARGS_ALLOWED", "usage: ", options1, "RUe", true);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      int int0 = 13;
      String string0 = "i,";
      String string1 = ".cm\"QH=KnfliN*g\"'!";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      options0.getOptions();
      helpFormatter0.printHelp("B", "B", options0, "usage: ");
      int int0 = (-2804);
      StringWriter stringWriter0 = new StringWriter(1);
      StringBuffer stringBuffer1 = stringWriter0.getBuffer();
      stringBuffer0.append(stringBuffer1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2804), (-2804), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "NO_ARGS_ALLOWED";
      String string1 = "usage: ";
      Options options0 = new Options();
      options0.helpOptions();
      Options options1 = options0.addOption("arg", "", false, "usage: ");
      helpFormatter0.printHelp(74, "NO_ARGS_ALLOWED", "usage: ", options1, "-", true);
      helpFormatter0.setOptPrefix("");
      int int0 = (-2369);
      String string2 = ";.~+i o:ZO";
      StringBuffer stringBuffer0 = new StringBuffer(3);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2369), options1, (-2369), (-2369));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("\n");
      helpFormatter0.setLongOptSeparator("usage: ");
      helpFormatter0.setLongOptPrefix("\n");
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = "";
      helpFormatter0.renderWrappedText(stringBuffer0, 1433, (-297), "");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getNewLine();
      helpFormatter0.setOptPrefix("\n");
      int int0 = 74;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      optionGroup0.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("usage: ", options1, true);
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("\n");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "(nuEVD:ary5_WMC7a";
      helpFormatter0.setLongOptSeparator("(nuEVD:ary5_WMC7a");
      helpFormatter0.setLongOptPrefix("(nuEVD:ary5_WMC7a");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 1433, (-297), "");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getNewLine();
      helpFormatter0.setOptPrefix("\n");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("`>RbQ4@ZEkxC>AP1JlB", 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLongOptSeparator("(nuEVD:ary5_WMC7a");
      helpFormatter0.setLongOptPrefix("(nuEVD:ary5_WMC7a");
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      Options options0 = new Options();
      stringBuffer0.ensureCapacity(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, ";.~+i o:ZO", "usage: ", options0, "'", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setLongOptPrefix("A CloneNotSupportedException was thrown: ");
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      Options options0 = new Options();
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(6, (String) null, "", options0, "P{xNR", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      Options options1 = options0.addOption("arg", "", false, "usage: ");
      helpFormatter0.printHelp(74, "NO_ARGS_ALLOWED", "[ Options: [ short ", options1, "RUe", true);
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1097), "RUe", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("4]IlaG(\"", (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLongOptSeparator("(nuEVD:ary5_WMC7a");
      helpFormatter0.setLongOptPrefix("(nuEVD:ary5_WMC7a");
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-297);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)79;
      helpFormatter0.getOptionComparator();
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)4;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options0 = new Options();
      boolean boolean0 = false;
      stringBuffer0.ensureCapacity(3);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1097), "4]IlaG(\"", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLongOptSeparator("(nuEVD:ary5_WMC7a");
      helpFormatter0.setLongOptPrefix("(nuEVD:ary5_WMC7a");
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      Options options0 = new Options();
      stringBuffer0.ensureCapacity(3);
      helpFormatter0.printHelp(3, " ", " | ", options0, "", false);
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "usage: ", (-840), (-2765));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      String string0 = "arg";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      options0.addOptionGroup(optionGroup0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Option option0 = null;
      try {
        option0 = new Option(" ", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "-", 13, 44);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer(0);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, (Options) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLongOptSeparator("(nuEVD:ary5_WMC7a");
      helpFormatter0.setLongOptPrefix("(nuEVD:ary5_WMC7a");
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      Options options0 = new Options();
      stringBuffer0.ensureCapacity(3);
      Options options1 = new Options();
      options0.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "usage: ", options1, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLongOptSeparator("(nuEVD:ary5_WMC7a");
      helpFormatter0.setLongOptPrefix("(nuEVD:ary5_WMC7a");
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-297);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)79;
      helpFormatter0.getOptionComparator();
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)4;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options0 = new Options();
      stringBuffer0.ensureCapacity(3);
      // Undeclared exception!
      try { 
        options0.addOption(" ", "-", false, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockFile0;
      mockPrintWriter0.printf("--", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("org.apache.commons.cli.HelpFormatter$OptionComparator", 3, 32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      Options options1 = options0.addOption("arg", "", false, "usage: ");
      helpFormatter0.printHelp(74, "NO_ARGS_ALLOWED", "usage: ", options1, "RUe", true);
      helpFormatter0.setOptPrefix("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2369), "NO_ARGS_ALLOWED", "oZ~1wwe#r`", options0, ";.~+i o:ZO", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLongOptSeparator("(nuEVD:ary5_WMC7a");
      helpFormatter0.setLongOptPrefix("(nuEVD:ary5_WMC7a");
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      boolean boolean0 = false;
      stringBuffer0.ensureCapacity(3);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2618), " ", "4u0#<OJ #7dr7", options0, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "NO_ARGS_ALLOWED";
      Options options0 = new Options();
      options0.helpOptions();
      boolean boolean0 = false;
      String string1 = null;
      options0.addOption((String) null, "--", false, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "", "", options0, "e>&mV>J", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options1 = new Options();
      options1.getOptions();
      helpFormatter0.printHelp("B", "B", options1, "usage: ");
      int int0 = (-2804);
      StringWriter stringWriter0 = new StringWriter(1);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "usage: ", 647, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.setArgName((String) null);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer(0);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, (Options) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.Options";
      helpFormatter0.defaultSyntaxPrefix = "'";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1912), "org.apache.commons.cli.Options");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 32, "tey1A#ikL7KRBxwSWH");
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "NO_ARGS_ALLOWED";
      Options options0 = new Options();
      options0.helpOptions();
      Options options1 = options0.addOption("arg", "", false, "usage: ");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "NO_ARGS_ALLOWED", "usage: ", options1, "RUe", true);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = "]d!";
      Options options0 = new Options();
      String string1 = "Jt6K.Nx`";
      // Undeclared exception!
      try { 
        options0.addOption("-", false, "Jt6K.Nx`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      int int0 = 9;
      StringWriter stringWriter0 = new StringWriter(9);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      stringWriter1.getBuffer();
      int int1 = 2357;
      Options options0 = new Options();
      boolean boolean0 = false;
      String string0 = "_@H4";
      // Undeclared exception!
      try { 
        options0.addOption("Y1c O?1", "3q91l^bRl&C)FE:%M", false, "_@H4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'Y1c O?1' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "s8;", options1, "s8;", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      MockFile mockFile0 = new MockFile("", "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true, "arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // arg
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.createPadding(3);
      helpFormatter0.setWidth(0);
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", true, "A CloneNotSupportedException was thrown: ");
      // Undeclared exception!
      try { 
        options2.addOption("A CloneNotSupportedException was thrown: ", "--", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'A CloneNotSupportedException was thrown: ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("\n");
      helpFormatter0.setLongOptPrefix("(nuEVD:ary5_WMC7a");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 1433, (-297), "");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getNewLine();
      int int0 = helpFormatter0.defaultWidth;
      helpFormatter0.setArgName("");
      helpFormatter0.setOptionComparator((Comparator) null);
      int int1 = helpFormatter0.getDescPadding();
      assertEquals("(nuEVD:ary5_WMC7a", helpFormatter0.getLongOptPrefix());
      assertEquals(3, int1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("nW>-g2$");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptSeparator();
      int int0 = (-1866);
      String string0 = null;
      String string1 = null;
      String string2 = "-";
      Options options0 = new Options();
      helpFormatter0.setWidth(940);
      Option option0 = null;
      try {
        option0 = new Option("--", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setNewLine("org.apache.commons.cli.Option");
      helpFormatter0.setNewLine("");
      helpFormatter0.setLongOptPrefix("");
      String string0 = "A CloneNotSupportedException was thrown: ";
      helpFormatter0.setOptPrefix("A CloneNotSupportedException was thrown: ");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("z~k;f2?:=Z%DzIm", "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLongOptSeparator("(nuEVD:ary5_WMC7a");
      helpFormatter0.setLongOptPrefix("(nuEVD:ary5_WMC7a");
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-297);
      Options options0 = new Options();
      stringBuffer0.ensureCapacity(3);
      // Undeclared exception!
      try { 
        options0.addOption(" ", "-", false, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1187));
      helpFormatter0.defaultDescPad = 1468;
      helpFormatter0.defaultLeftPad = (-1);
      helpFormatter0.defaultLongOptPrefix = ".}FfTo37 XP";
      helpFormatter0.setWidth(31);
      assertEquals(31, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "T; ,slKjB*l0";
      Options options0 = new Options();
      boolean boolean0 = true;
      PrintWriter printWriter0 = null;
      int int0 = 671;
      String string1 = "";
      // Undeclared exception!
      try { 
        options0.addOption("org.apache.commons.cli.HelpFormatter", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.HelpFormatter' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
