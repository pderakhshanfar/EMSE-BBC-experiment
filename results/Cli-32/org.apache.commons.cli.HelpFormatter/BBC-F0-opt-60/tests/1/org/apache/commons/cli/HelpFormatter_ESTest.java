/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 14:57:54 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("{:Ym_/_V>'nO{.s[Wi");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "{:Ym_/_V>'nO{.s[Wi";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "{:Ym_/_V>'nO{.s[Wi";
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", (String) null, true, "");
      // Undeclared exception!
      helpFormatter0.printOptions(printWriter0, 0, options1, 0, 1381);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1563);
      helpFormatter0.defaultDescPad = (-1563);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<");
      helpFormatter0.rtrim("[");
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append((CharSequence) " ");
      String string0 = "";
      String string1 = "";
      Options options0 = new Options();
      boolean boolean0 = false;
      Options options1 = options0.addOption("", false, "\n");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        options1.addOption("-", "gp#", false, " | ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.printHelp("Sap)ViFC", "Sap)ViFC", options0, (String) null);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", "arg");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup0.setRequired(true);
      Options options0 = new Options();
      options0.addOptionGroup(optionGroup1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("0.GdS*j5+a ");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 3001, "}M(^`Xg4s:R");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      int int0 = 0;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", "", false, "$?:H$");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, options2, 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "]");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("--", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "-");
      optionGroup0.addOption(option0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup1.setSelected(option0);
      Options options2 = options1.addOption("arg", "org.apache.commons.cli.AlreadySelectedException", true, (String) null);
      options2.hasOption("");
      options2.addOption(option0);
      helpFormatter0.printHelp(304, " ", "   ", options2, "46nU(,=Ge:2P)FK");
      helpFormatter0.defaultArgName = "";
      helpFormatter0.getNewLine();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.rtrim((String) null);
      helpFormatter0.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("9X6!cP&pn&zp}w");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-3298);
      helpFormatter1.rtrim("\n");
      MockFile mockFile1 = new MockFile("--", "KYx'VK{scc4");
      Options options0 = new Options();
      Option option0 = new Option("arg", "--");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", "--", false, "d@h");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      helpFormatter1.printHelp("usage: ", options3, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",O4i");
      MockFile mockFile2 = new MockFile(" | ", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile2);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.ITALIAN;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter1.format(locale0, "", objectArray0);
      helpFormatter1.printUsage(printWriter0, 31, "`CMFsp``]5[_K}q@Pu");
      helpFormatter0.getDescPadding();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printHelp(0, "-", "-!)", options0, "");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-14);
      String string0 = "";
      Options options0 = null;
      boolean boolean0 = true;
      MockFile mockFile0 = new MockFile("9X6!cP&pn&zp}w");
      MockFile mockFile1 = new MockFile(mockFile0, "]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      mockPrintWriter0.print(false);
      String string1 = "Ucx8";
      String string2 = "J7?S`;899\\";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Ucx8", "Ucx8", (Options) null, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(117, "\"LzI'", "\"LzI'", (Options) null, "\"LzI'");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">6@qKciu@Qt~");
      int int0 = 13;
      Options options0 = null;
      int int1 = 63;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("ip", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 3, "\n");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      options0.addOption("", "-", true, "-w].");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte)64;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Option option0 = new Option("c", "-", true, "-");
      helpFormatter0.defaultDescPad = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-w].", (String) null, options0, "0f");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"^n?");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("8N~U]kp}K{QL5Ga &");
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.createPadding(45);
      helpFormatter0.defaultSyntaxPrefix = "                                             ";
      helpFormatter0.defaultDescPad = 10;
      helpFormatter0.getArgName();
      helpFormatter0.rtrim("                                             ");
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      helpFormatter0.findWrapPos(".^$X|qd:[1", (-1), 2089);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "m'\".$,td/^Lnv:To!4");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("arg");
      helpFormatter0.setSyntaxPrefix(" ");
      helpFormatter0.setSyntaxPrefix("VK#S3!_7|!>uex(Ju!");
      String string0 = helpFormatter0.defaultNewLine;
      MockFile mockFile0 = new MockFile("$g/'QJj\"1&kgu3");
      MockFile mockFile1 = new MockFile("mJ>S", " [ARG]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Option option0 = new Option((String) null, "", true, "z*B?YY.a");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      optionGroup1.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "nR41A0w=;1h:j_*", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("arg");
      MockFile mockFile0 = new MockFile("arg", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 34, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1, "\n", options0);
      helpFormatter0.renderOptions((StringBuffer) null, 1, options1, 21, 74);
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, 83, "-");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("arg");
      MockFile mockFile0 = new MockFile("arg", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, (-1909), "%t| ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", "", options0, "usage: ", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.hasOption(" ");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-1948), " ", "--", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "-");
      Option option0 = new Option("NO_ARGS_ALLOWED", (String) null, true, "`*+gcw5do>Kw8REw&@q");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setSelected(option0);
      options0.addOptionGroup(optionGroup1);
      option0.setArgName("]");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(":(|G9YLwrSlTI*", "", options0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.rtrim(" ");
      String string0 = helpFormatter1.defaultArgName;
      helpFormatter1.getLeftPadding();
      helpFormatter0.findWrapPos("\n", 3, (-1489));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "-");
      optionGroup0.addOption(option0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup1.setSelected(option0);
      options1.helpOptions();
      Options options2 = options1.addOption("arg", "org.apache.commons.cli.AlreadySelectedException", true, (String) null);
      options2.hasOption("");
      options2.addOption(option0);
      helpFormatter0.printHelp(304, " ", "   ", options2, "46nU(,=Ge:2P)FK");
      helpFormatter0.defaultArgName = "";
      helpFormatter0.getNewLine();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(" | ");
      helpFormatter0.defaultWidth = 421;
      helpFormatter0.setNewLine("&\"_9M)=@Tz6");
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      mockPrintWriter1.close();
      PrintWriter printWriter1 = mockPrintWriter1.append('d');
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("", "PL@JX");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockFile0);
      helpFormatter0.printUsage(printWriter1, 13, "' contains an illegal character : '");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      Options options1 = new Options();
      Options options2 = options0.addOption("", "-", true, "-w]M");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      Option option0 = new Option("c", ":tBgszl[wwS", true, "n^aBjz`Q*G,");
      Options options4 = options3.addOption(option0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setSelected(option0);
      options4.addOptionGroup(optionGroup1);
      option0.setArgName("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", "usage: ", options2, "c");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2228, "", "GF~h.Cb^]p", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("arg");
      helpFormatter0.rtrim("-");
      MockFile mockFile0 = new MockFile("arg", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 0, 820, "%t| ");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.rtrim(" ");
      Options options1 = options0.addOption("", "IZum", true, "y2=yV:-F].q2iwQ");
      OptionGroup optionGroup1 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup1);
      options1.getMatchingOptions("usage: ");
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) optionGroup1;
      objectArray0[3] = (Object) optionGroup1;
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray0);
      helpFormatter1.printUsage(printWriter0, 74, "' was specified but an option from this group ");
      helpFormatter0.printHelp(printWriter0, 74, "IX:G;TBA", "' was specified but an option from this group ", options2, 1, 632, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      Options options1 = new Options();
      helpFormatter0.defaultArgName = "dqy=n++/{'";
      Options options2 = options1.addOption("", "", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      options2.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.defaultWidth = 3;
      helpFormatter0.rtrim("-");
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("@6N$k'RB6", "", options1, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      Options options1 = new Options();
      Options options2 = options0.addOption("", "-", true, "-w]M");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      Option option0 = new Option("c", ":tBgszl[wwS", true, "n^aBjz`Q*G,");
      Options options4 = options3.addOption(option0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setSelected(option0);
      Options options5 = options4.addOptionGroup(optionGroup0);
      option0.setArgName("--");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      doReturn(0).when(comparator0).compare(any() , any());
      helpFormatter0.setOptionComparator(comparator0);
      MockFile mockFile0 = new MockFile((String) null, "aGVJ2");
      MockFile mockFile1 = new MockFile((String) null, "\"89Pvi#\"eG1^!5U");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "", options5);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      boolean boolean0 = true;
      Option option0 = new Option((String) null, "org.apache.commons.cli.Util", true, " ");
      options0.addOption(option0);
      option0.setArgName("arg");
      MockFile mockFile0 = new MockFile("", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), (String) null, options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("");
      Options options0 = new Options();
      int int0 = 37;
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 110, options0, 37, 2134);
      int int1 = (-1555);
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, (-1555), 2134, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      Options options1 = new Options();
      Options options2 = options0.addOption("", "-", true, "-w]M");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      Option option0 = new Option("c", ":tBgszl[wwS", true, "n^aBjz`Q*G,");
      Options options4 = options3.addOption(option0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setSelected(option0);
      options4.addOptionGroup(optionGroup1);
      option0.setArgName("");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      doReturn(0).when(comparator0).compare(any() , any());
      helpFormatter0.setOptionComparator(comparator0);
      MockFile mockFile0 = new MockFile("e),ytJaPwjPB!&631", "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), ":tBgszl[wwS", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-2015);
      helpFormatter0.defaultSyntaxPrefix = "fQ#Ai^+J; :q\"{k-";
      helpFormatter0.setSyntaxPrefix(">");
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("");
      assertEquals(">", helpFormatter0.getSyntaxPrefix());
      
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("", (String) null, false, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "/QceI5<,Q[I=^|bw", true, "6@iRS[,@V|d9Nsi7");
      Options options2 = options0.addOption(option0);
      OptionGroup optionGroup1 = new OptionGroup();
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      options2.addOptionGroup(optionGroup2);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.rtrim("Q-=c\"vo");
      helpFormatter0.getOptPrefix();
      helpFormatter1.printHelp("arg", "The option '", options1, "org.apache.commons.cli.OptionGroup");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(" | ");
      helpFormatter0.setNewLine("-");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "'", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.getMatchingOptions("\"6L");
      Options options3 = options2.addOption("", false, "");
      helpFormatter0.printHelp(13, "]oxa", "]oxa", options2, "", false);
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getSyntaxPrefix();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " | ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) optionGroup0;
      objectArray0[1] = (Object) "-";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) options3;
      objectArray0[4] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "--", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1), " | ", "#1T.c5.", options1, 1, (-1457), " | ", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("h@0-~tN@=");
      helpFormatter1.rtrim(" ");
      MockFile mockFile0 = new MockFile("-", "h@0-~tN@=");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 63, "/?4@:");
      helpFormatter0.printHelp("org.apache.commons.cli.Util", "-", options0, "org.apache.commons.cli.Util");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 2050, "-", (String) null, options0, 3, 63, "-", false);
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("arg");
      helpFormatter0.rtrim("-");
      MockFile mockFile0 = new MockFile("arg", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 63, "/?4@:");
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 0, " ", "", options0, 0, 3, "", true);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.rtrim(" ");
      MockFile mockFile0 = new MockFile((String) null, " :: ");
      helpFormatter1.getSyntaxPrefix();
      helpFormatter0.getDescPadding();
      helpFormatter1.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos((String) null, 74, (-1615));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.rtrim("--");
      MockFile mockFile0 = new MockFile(";O@h $JOGU&oo5&X", "c?.3[");
      MockFile mockFile1 = new MockFile("0!#:", " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 44, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.printUsage((PrintWriter) mockPrintWriter0, 79, "sD6");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 79, "");
      helpFormatter2.printWrapped((PrintWriter) mockPrintWriter0, 74, 22, " ]");
      // Undeclared exception!
      try { 
        helpFormatter3.printHelp((PrintWriter) mockPrintWriter0, 3, "", "", options0, 74, 44, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.setNewLine("");
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      Options options1 = new Options();
      Options options2 = options1.addOption("7CM", "arg", false, "]oxa");
      OptionGroup optionGroup0 = new OptionGroup();
      options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(421, "?Zos\u0006h/b i.f", "?=O", options2, "", false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 13, "");
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-875), "", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("arg");
      helpFormatter0.rtrim("-");
      MockFile mockFile0 = new MockFile("arg", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 919, "");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 35, " ");
      StringBuffer stringBuffer0 = new StringBuffer(30);
      StringBuffer stringBuffer1 = helpFormatter2.renderWrappedText(stringBuffer0, 74, 3, "--");
      // Undeclared exception!
      try { 
        helpFormatter2.renderOptions(stringBuffer1, 1, options0, 74, (-2836));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(" | ");
      helpFormatter0.defaultWidth = 421;
      helpFormatter0.setNewLine("&\"_9M)=@Tz6");
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("usage: ", "", (String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "'", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(13, "]oxa", "]oxa", options2, "", false);
      helpFormatter0.printUsage(printWriter0, 421, "org.apache.commons.cli.OptionGroup");
      helpFormatter0.getNewLine();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 421, "&\"_9M)=@Tz6", options2);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 13, " | ", "", options0, 4, 13, "", true);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("arg");
      helpFormatter0.rtrim("-");
      MockFile mockFile0 = new MockFile("-", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3280, "\n");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 61, "--", "42mk^@8&Z'}Zi", options0, (-1), (-1), "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2256;
      String string0 = ">";
      Options options0 = new Options();
      helpFormatter0.printHelp(2256, ">", ">", options0, ">");
      StringBuffer stringBuffer0 = new StringBuffer(1);
      int int1 = 9;
      options0.getOptionGroups();
      String string1 = "org.apache.commons.cli.OptionGroup";
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2256, 9, "org.apache.commons.cli.OptionGroup");
      // Undeclared exception!
      try { 
        stringBuffer1.delete(3, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 33;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 33, options0, 33, 33);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-17);
      byteArray0[6] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("arg");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.rtrim("");
      MockFile mockFile0 = new MockFile("arg", "u;k\"|q-usy]e]MR ");
      MockFile mockFile1 = new MockFile("\n", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      helpFormatter0.printHelp("-", "--", options0, "arg");
      helpFormatter2.getSyntaxPrefix();
      Options options1 = new Options();
      helpFormatter1.printOptions(mockPrintWriter0, (-3552), options1, 1, 11);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setNewLine("");
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("usage: ", "arg").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      MockFile mockFile0 = new MockFile("", "--");
      MockFile mockFile1 = new MockFile("Dr$Lp", "[");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 35, "c?3[");
      helpFormatter0.printHelp(printWriter0, 35, "6<T8.-", "[", options0, 84, 34, "[", true);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-5998), "org.apache.commons.cli.HelpFormatter", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("arg");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.rtrim("");
      MockFile mockFile0 = new MockFile("arg", "u;k\"|q-usy]e]MR ");
      MockFile mockFile1 = new MockFile(mockFile0, "usage: ");
      helpFormatter1.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 32, options0, 2751, 10);
      helpFormatter2.renderWrappedText(stringBuffer1, 1, 1, "-");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("arg");
      helpFormatter1.printHelp("\n", options0, true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.rtrim("--");
      MockFile mockFile0 = new MockFile(";O@h $JOGU&oo5&X", "c?3[");
      MockFile mockFile1 = new MockFile("0!#:E", " ");
      helpFormatter0.rtrim("");
      MockFile mockFile2 = new MockFile("usage: ", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 64, ";O@h $JOGU&oo5&X");
      helpFormatter0.createPadding(2);
      helpFormatter2.createPadding(3);
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 3, (String) null, "", options0, 74, 74, "*KsGBs", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">6@qKciu@Qt~");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 44, (Options) null, 13, 63);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("arg");
      helpFormatter0.rtrim("-");
      MockFile mockFile0 = new MockFile("arg", "usage: ");
      MockFile mockFile1 = new MockFile("c?3[", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 34, "");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 61, "arg", "--", options0, 1, 34, "", false);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.rtrim("--");
      helpFormatter0.getOptPrefix();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp("-", "arg", (Options) null, "-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("arg");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printWrapped((PrintWriter) null, 74, 74, ",@.1D0]3$?MJ%");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("arg");
      boolean boolean0 = true;
      helpFormatter1.printHelp("\n", options0, true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.rtrim("--");
      String string0 = "c?3[";
      MockFile mockFile0 = new MockFile(";O@h $JOGU&oo5&X", "c?3[");
      String string1 = "0!#:E";
      MockFile mockFile1 = new MockFile("0!#:E", " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(7, "c?3[", "--", options0, ";O@h $JOGU&oo5&X", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("arg");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.rtrim("");
      MockFile mockFile0 = new MockFile("arg", "u;k\"|q-usy]e]MR ");
      MockFile mockFile1 = new MockFile("\n", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      helpFormatter0.printHelp("-", "--", options0, "arg");
      helpFormatter2.getSyntaxPrefix();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions(mockPrintWriter0, (-3532), options1, 1, (-8));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(" | ");
      helpFormatter0.defaultWidth = 421;
      helpFormatter0.setNewLine("&\"_9M)=@Tz6");
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("", "arg").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("UzW").when(comparator1).toString();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      mockPrintWriter1.append('d');
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "8p:ygJ'N+", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(13, "]oxa", "]oxa", options2, "", true);
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 421, "", options1);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, (-454), options0, 435, (-402));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("9X6!cP&pn&zp}w");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-3298);
      helpFormatter1.rtrim("\n");
      MockFile mockFile1 = new MockFile("--", "KYx'VK{scc4");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",O4i");
      MockFile mockFile2 = new MockFile(" | ", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile2);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.ITALIAN;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter1.format(locale0, "", objectArray0);
      helpFormatter1.printUsage(printWriter0, 31, "`CMFsp``]5[_K}q@Pu");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("arg");
      helpFormatter0.rtrim("-");
      MockFile mockFile0 = new MockFile("arg", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 63, "/?4@:");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 28, "arg", options0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3239, "CU),");
      helpFormatter1.getNewLine();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "-";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) helpFormatter1;
      objectArray0[3] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.format("Cannot add value, list full.", objectArray0);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "arg", options0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter1;
      objectArray0[2] = (Object) mockPrintWriter1;
      objectArray0[3] = (Object) locale0;
      helpFormatter0.defaultOptPrefix = "";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter1.format(locale0, "", objectArray0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, (-216), " [ARG]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("arg");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("usage: ");
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter0.rtrim("arg");
      helpFormatter1.getOptPrefix();
      helpFormatter1.printHelp("!", "", options0, (String) null);
      helpFormatter1.findWrapPos("", 31, 3);
      helpFormatter4.rtrim("6fm");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(" | ");
      helpFormatter0.defaultWidth = 421;
      helpFormatter0.setNewLine("&\"_9M)=@Tz6");
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("", "arg").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator1).toString();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      mockPrintWriter1.append('d');
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "8p:ygJ'N+", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(13, "]oxa", "]oxa", options2, "", true);
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 421, "", options1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(" | ");
      helpFormatter0.defaultWidth = 421;
      helpFormatter0.setNewLine("&\"_9M)=@Tz6");
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("", "arg").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      PrintWriter printWriter1 = mockPrintWriter1.append('d');
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "8p:ygJ'N+", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(13, "]oxa", "]oxa", options2, "", true);
      helpFormatter0.printUsage(printWriter1, 421, "org.apache.commons.cli.OptionGroup");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter1.getLongOptPrefix();
      helpFormatter0.createPadding(1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("arg");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.rtrim("");
      MockFile mockFile0 = new MockFile("", "arg");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) options0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) helpFormatter2;
      objectArray0[3] = (Object) helpFormatter1;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) helpFormatter2;
      objectArray0[6] = (Object) "";
      mockPrintWriter0.format("-", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((String) null, "I6bwFFlOJMm", options0, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(" | ");
      helpFormatter0.defaultWidth = 421;
      helpFormatter0.setNewLine("&\"_9M)=@Tz6");
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      PrintWriter printWriter1 = mockPrintWriter1.append('d');
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("", "PL@JX");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockFile0);
      helpFormatter0.printUsage(printWriter1, 13, "' contains an illegal character : '");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(" | ");
      helpFormatter0.defaultWidth = 421;
      helpFormatter0.setNewLine("&\"_9M)=@Tz6");
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("", "arg").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      PrintWriter printWriter1 = mockPrintWriter1.append('d');
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "8p:ygJ'N+", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(13, "]oxa", "]oxa", options2, "", true);
      helpFormatter0.printUsage(printWriter1, 421, "org.apache.commons.cli.OptionGroup");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 63, "8p:ygJ'N+");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(" | ");
      helpFormatter0.defaultWidth = 421;
      helpFormatter0.setNewLine("&\"_9M)=@Tz6");
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, "h1tI").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      PrintWriter printWriter1 = mockPrintWriter1.append('d');
      Options options0 = new Options();
      Options options1 = options0.addOption("", "8p:ygJ'N+", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(13, "]oxa", "]oxa", options2, "", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter1, 3, "arg", (String) null, options1, 421, (-2375), "&\"_9M)=@Tz6", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      boolean boolean0 = true;
      String string0 = "L=}1B*c";
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 83, "");
      Options options1 = new Options();
      MockFile mockFile0 = new MockFile("<cXchD", "");
      MockFile mockFile1 = new MockFile("<cXchD");
      MockFile mockFile2 = new MockFile(mockFile1, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile2);
      mockPrintWriter0.print(true);
      int int0 = 1;
      String string1 = "--";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 83, "PS~Et0", (String) null, (Options) null, 3072, 63, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.renderWrappedText(stringBuffer0, 74, 1, "arg");
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile(" ", "org.apache.commons.cli.Option");
      MockFile mockFile1 = new MockFile(mockFile0, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      mockPrintWriter0.print(true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, ":(=h|3m.1L ", (String) null, options0, (-647), 1, "org.apache.commons.cli.Option");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      options0.helpOptions();
      helpFormatter0.printHelp("l", "org.apache.commons.cli.AlreadySelectedException", options1, "org.apache.commons.cli.AlreadySelectedException", false);
      options0.hasLongOption("org.apache.commons.cli.AlreadySelectedException");
      options1.getOptionGroups();
      String string0 = "nqbgrtzC\\u^X*XKhCF-";
      helpFormatter0.printHelp(string0, options0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("arg");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.rtrim("");
      MockFile mockFile0 = new MockFile("4%dGElb", "--");
      MockFile mockFile1 = new MockFile("", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      helpFormatter1.rtrim("arg");
      helpFormatter0.printHelp("-", options0, false);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("9X6!cP&pn&zp}w");
      MockFile mockFile1 = new MockFile(mockFile0, "]");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "Ucx8", (Options) null, "Ucx8", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setNewLine("org.apache.commons.cli.AlreadySelectedException");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 14, "--", "-", options0, 66, (-2418), "org.apache.commons.cli.AlreadySelectedException");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("9X6!cP&pn&zp}w");
      MockFile mockFile1 = new MockFile(mockFile0, "]");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-318), "]", "/u>Q>VCh3m$fEsgQa!k", (Options) null, "Bl@b(8/il", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(310);
      helpFormatter0.setSyntaxPrefix("--");
      helpFormatter0.getNewLine();
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("-");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.rtrim("");
      MockFile mockFile0 = new MockFile("--", "|FEu<;z,9Wx");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-2015);
      helpFormatter0.defaultSyntaxPrefix = "fQ#Ai^+J; :q\"{k-";
      helpFormatter0.setSyntaxPrefix(">");
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("usage: ");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("arg");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.rtrim("");
      MockFile mockFile0 = new MockFile("", "arg");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) options0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) helpFormatter2;
      objectArray0[3] = (Object) helpFormatter1;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) helpFormatter2;
      objectArray0[6] = (Object) "";
      mockPrintWriter0.format("-", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-188), "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-5798), ":K90SWlR5v}LLu", ":K90SWlR5v}LLu", (Options) null, (-512), (-5798), ":K90SWlR5v}LLu", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(13);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 54, "", "", (Options) null, 54, (-450), "1OqGx]M!|Dnv", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      options0.helpOptions();
      helpFormatter0.printHelp("l", "org.apache.commons.cli.AlreadySelectedException", options1, "org.apache.commons.cli.AlreadySelectedException", false);
      options0.hasLongOption("org.apache.commons.cli.AlreadySelectedException");
      options1.getOptionGroups();
      int int0 = HelpFormatter.DEFAULT_WIDTH;
      helpFormatter0.getWidth();
      helpFormatter0.getOptPrefix();
      helpFormatter0.printHelp(">", ">", options1, "KA|qN!K}]-PWa!S3GCi");
      helpFormatter0.setLongOptPrefix("SwM&Tu'IN");
      MockFile mockFile0 = new MockFile("", "irJ7U&w]Rc1P");
      MockFile mockFile1 = new MockFile(mockFile0, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, ")mD0uwy&0A,h@U&");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("arg");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      Options options1 = new Options();
      Options options2 = options0.addOption("", "GLp", true, "-w]M");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      Option option0 = new Option("c", ":tBgszl[wwS", true, "n^aBjz`Q*G,");
      Options options4 = options3.addOption(option0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options4.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp(3, "--", "p-", options4, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      Options options1 = new Options();
      Options options2 = options0.addOption("", "-", true, "-w]M");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      Option option0 = new Option("c", ":tBgszl[wwS", true, "n^aBjz`Q*G,");
      Options options4 = options3.addOption(option0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options4.addOptionGroup(optionGroup1);
      option0.setArgName("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "--", "p-", options4, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("arg");
      helpFormatter0.rtrim("-");
      MockFile mockFile0 = new MockFile("arg", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      options0.getMatchingOptions("arg");
      Options options1 = new Options();
      Options options2 = options0.addOption("arg", "--", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      options2.addOptionGroup(optionGroup0);
      helpFormatter1.printHelp(13, "--", "Tjp^BfFr 6[Q}'", options2, "-", false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 74, "-");
      helpFormatter2.getNewLine();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "org.apache.commons.cli.OptionGroup";
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) helpFormatter1;
      objectArray0[3] = (Object) helpFormatter1;
      objectArray0[4] = (Object) "\n";
      objectArray0[5] = (Object) "'";
      objectArray0[6] = (Object) "Tjp^BfFr 6[Q}'";
      PrintWriter printWriter0 = mockPrintWriter0.format("arg", objectArray0);
      helpFormatter2.printUsage(printWriter0, 1939, "", options2);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-170));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.rtrim(" ");
      Option option0 = new Option((String) null, "--", false, "");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      option0.setArgName("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(4, "<", "n^aBjz`Q*G,", options2, "SI|+Uwi%[[9", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("arg");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      Options options1 = new Options();
      Options options2 = options0.addOption("", "GLp", true, "Fw]M");
      OptionGroup optionGroup0 = new OptionGroup();
      options2.addOptionGroup(optionGroup0);
      MockFile mockFile0 = new MockFile("--", "Fw]M");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      mockPrintWriter0.print(false);
      mockPrintWriter0.checkError();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(" ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 74, "-", "IgVUh/VEH2]6aj'U", options2, 74, 23, "Fw]M", true);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockFile0);
      helpFormatter2.findWrapPos("STDC", 74, 2211);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("arg");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.rtrim("jmUM@");
      Options options1 = new Options();
      options0.addOption("", "GLp", true, "-w]M");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = new Options();
      Option option0 = new Option("c", ":tBgszl[wwS", true, "n^aBjz`Q*G,");
      Options options3 = options2.addOption(option0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options3.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp(3, "--", "p-", options3, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      boolean boolean0 = true;
      Options options1 = options0.addOption("arg", "e'}^>y+|", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      options1.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.rtrim("-");
      helpFormatter1.getNewLine();
      options0.addOption("K", "-", false, "e'}^>y+|");
      helpFormatter2.printHelp("-", "", options1, "");
      MockFile mockFile0 = new MockFile("\n", "9");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "usage: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // usage: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      helpFormatter1.renderWrappedText(stringBuffer0, 6087, 3, "rAi@umYBYx+k)P'<q");
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("`A>8", "--");
      MockFile mockFile1 = new MockFile(mockFile0, "r.{=m|/R#%:Ck");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      mockPrintWriter0.print(true);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "--", "arg", options0, 2349, 3, "");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, "8bb~=v7)1S}4rmN%", (String) null, options0, "usage: ", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.toString();
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("arg");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      Options options0 = new Options();
      helpFormatter1.printHelp(" ", "-", options0, "usage: ");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) helpFormatter2;
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) option0;
      PrintStream printStream0 = mockPrintStream0.format("org.apache.commons.cli.HelpFormatter", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1, "[5}4SvN1a1>OM,oQ,", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("arg");
      MockFile mockFile0 = new MockFile((File) null, "tjFqY");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.print(false);
      Options options1 = new Options();
      Options options2 = new Options();
      Options options3 = options2.addOption("", "--", false, "[");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      options2.hasOption("line.separator");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(7, " ", "[ARG...]", options3, "\n", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("\n", options0, true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.rtrim("--");
      MockFile mockFile0 = new MockFile(";O@h $JOGU&oo5&X", "c?.3[");
      MockFile mockFile1 = new MockFile("0!#:E", " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 44, "\n");
      options0.addOption("arg", "", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.printHelp(74, "c?.3[", "-", options1, "org.apache.commons.cli.OptionValidator", true);
      helpFormatter3.printUsage((PrintWriter) mockPrintWriter0, 79, "sD6");
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos("--", 1810, (-2150));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(" | ");
      helpFormatter0.defaultWidth = 421;
      helpFormatter0.setNewLine("&\"_9M)=@Tz6");
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      PrintWriter printWriter1 = mockPrintWriter1.append('d');
      Options options0 = new Options();
      Options options1 = options0.addOption("", "8p:ygJ'N+", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(13, "]oxa", "]oxa", options2, "", true);
      helpFormatter0.printUsage(printWriter1, 421, "org.apache.commons.cli.OptionGroup");
      helpFormatter0.getNewLine();
      helpFormatter0.findWrapPos("&\"_9M)=@Tz6", 775, 775);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">6@qKciu@Qt~");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "' contains an illegal character : '";
      objectArray0[1] = (Object) ">6@qKciu@Qt~";
      objectArray0[2] = (Object) ">6@qKciu@Qt~";
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("' contains an illegal character : '", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 13, "' contains an illegal character : '", "ip", (Options) null, 63, 63, "' contains an illegal character : '", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-14);
      String string0 = "";
      Options options0 = null;
      boolean boolean0 = true;
      MockFile mockFile0 = new MockFile("9X6!cP&pn&zp}w");
      MockFile mockFile1 = new MockFile(mockFile0, "]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      mockPrintWriter0.print(false);
      int int1 = 47;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-14), "Ucx8", "J7?S`;899", (Options) null, 774, 47, "G6Qcw eT;wu072^");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = null;
      boolean boolean0 = true;
      MockFile mockFile0 = new MockFile("arg");
      MockFile mockFile1 = new MockFile(mockFile0, "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 47, "G6Qcw eT;wu072^", "a#C~\"[P5", (Options) null, 47, (-441), "G6Qcw eT;wu072^");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("arg");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      String string0 = "";
      helpFormatter2.rtrim(" ");
      MockFile mockFile0 = new MockFile("arg", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      MockFile mockFile1 = new MockFile(mockFile0, "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Object object0 = new Object();
      String string1 = "";
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter2;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(13);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      MockFile mockFile0 = new MockFile("arg", "<t/2`)");
      MockFile mockFile1 = new MockFile(mockFile0, "--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 13, "");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(" | ");
      int int0 = 421;
      helpFormatter0.defaultWidth = 421;
      helpFormatter0.setNewLine("&\"_9M)=@Tz6");
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      PrintWriter printWriter1 = mockPrintWriter1.append('d');
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "X");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      int int1 = (-3462);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter1, 421, " | ", " | ", options2, (-3462), 32, ">");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("arg");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.rtrim("");
      helpFormatter1.getOptPrefix();
      helpFormatter2.printHelp("ZhQa|E_-5qM'j)>", "--", options0, "");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = null;
      int int0 = 2239;
      String string0 = "-";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options1.addOption("usage: ", "arg", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setNewLine("org.apache.commons.cli.AlreadySelectedException");
      Options options0 = new Options();
      helpFormatter2.renderWrappedText(stringBuffer0, 14, (-1929), "-");
      helpFormatter1.printHelp(1584, "BX68}7al", "org.apache.commons.cli.AlreadySelectedException", options0, (String) null, true);
      helpFormatter1.setWidth(74);
      helpFormatter2.getLongOptSeparator();
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1643);
      String string0 = "[ option: ";
      helpFormatter0.setOptPrefix("[ option: ");
      Options options0 = new Options();
      options0.getOption("--");
      String string1 = "";
      // Undeclared exception!
      try { 
        options0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(13);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, ":K90SWlR5v}LLu", ":K90SWlR5v}LLu", (Options) null, 28, (-1401), ":K90SWlR5v}LLu", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "";
      Options options0 = null;
      boolean boolean0 = true;
      MockFile mockFile0 = new MockFile("9X6!cP&pn&zp}w");
      MockFile mockFile1 = new MockFile(mockFile0, "]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      mockPrintWriter0.print(false);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "Ucx8", "J7?S`;899", (Options) null, 774, 47, "G6Qcw eT;wu072^");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("6H");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("arg");
      helpFormatter1.printHelp("\n", options0, true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.rtrim("--");
      MockFile mockFile0 = new MockFile(";O@h $JOGU&oo5&X", "c?3[");
      MockFile mockFile1 = new MockFile("0!#:E", " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 44, "\n");
      assertEquals("arg", helpFormatter1.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(" | ");
      helpFormatter0.defaultWidth = 421;
      helpFormatter0.setNewLine("&\"_9M)=@Tz6");
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      PrintWriter printWriter1 = mockPrintWriter1.append('d');
      helpFormatter0.printUsage(printWriter1, 421, "org.apache.commons.cli.OptionGroup");
      helpFormatter0.getNewLine();
      helpFormatter0.findWrapPos("&\"_9M)=@Tz6", 775, 775);
      assertEquals("&\"_9M)=@Tz6", helpFormatter0.getNewLine());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 3, (-647), "L=}1B*c");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "VR-Xm:2,DFT-RS,";
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2992), 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "--", (-1), 1328);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("U($M'g\"X$I(");
      assertEquals("U($M'g\"X$I(", helpFormatter0.getLongOptPrefix());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      String string0 = "";
      Options options0 = new Options();
      mockPrintWriter0.println(239.824685);
      String string1 = " | ";
      Options options1 = options0.addOption("arg", false, " | ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", "arg", true, "2-fB;S& D");
      optionGroup0.addOption(option0);
      options1.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 781, "", "", options2, 781, 2146, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-749);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-749));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("arg");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.rtrim("");
      MockFile mockFile0 = new MockFile("", "arg");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) options0;
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 3, " ", "--", options0, 46, 2739, (String) null);
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 110, "--", options0);
      assertEquals("arg", helpFormatter1.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "]]\"!%M1|]4-";
      MockFile mockFile0 = new MockFile("\n", "]]\"!%M1|]4-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      int int0 = 0;
      Options options0 = new Options();
      String string1 = "";
      boolean boolean1 = false;
      String string2 = "";
      // Undeclared exception!
      try { 
        MockFile.createTempFile((String) null, "\n", (File) mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      options0.helpOptions();
      helpFormatter0.printHelp("l", "org.apache.commons.cli.AlreadySelectedException", options1, "org.apache.commons.cli.AlreadySelectedException", false);
      String string0 = "KA|qN!K}]-PWa!S3GCi";
      options0.hasLongOption("org.apache.commons.cli.AlreadySelectedException");
      options1.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("KA|qN!K}]-PWa!S3GCi", (-2899), (-2899));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter0.setLongOptSeparator("14!X&k!%Y");
      int int0 = 2245;
      Options options0 = null;
      helpFormatter0.setLeftPadding(40);
      stringBuffer0.append(true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(40, "usage: ", "usage: ", (Options) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "Fzo1A[j,<5K5VG;w9";
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptSeparator();
      String string0 = "?oI/eI,n";
      helpFormatter0.setOptPrefix("?oI/eI,n");
      String string1 = "tZ@";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = null;
      try {
        option0 = new Option("?oI/eI,n", "Fzo1A[j,<5K5VG;w9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '?oI/eI,n' contains an illegal character : '?'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("bk:wR/`C2Th7K~>");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1439), 4504, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "";
      String string1 = "line.separator";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("\n", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
