/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 10:34:34 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URISyntaxException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "B>OgKWS/(]6-d~nRb~";
      helpFormatter0.setWidth((-828));
      Options options0 = new Options();
      helpFormatter0.setDescPadding((-828));
      options0.hasOption("--");
      options0.hasShortOption("0F<gq]L}'%t^Xdi2k9 ");
      helpFormatter0.defaultLongOptPrefix = "]<-TN>tc7g'F";
      options0.addOption("", false, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "`re";
      Options options0 = null;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "`re", "`re", (Options) null, "`re");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      helpFormatter0.findWrapPos("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", 114, 0);
      Options options0 = new Options();
      helpFormatter0.printHelp(106, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", (String) null, options0, "--", true);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      String string0 = "^(QhF^;[gc3hY";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 3056, 3056);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("OVd$mj~dC(", options0, true);
      Options options1 = new Options();
      options1.helpOptions();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 97, options1, 97, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "--", false, "-");
      optionGroup0.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", false, "--");
      Options options3 = options2.addOption("arg", "-", true, "J5$`,N%q");
      Options options4 = options3.addOption(option0);
      Options options5 = options4.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Options options6 = options5.addOption(option0);
      MockFile mockFile0 = new MockFile("J5$`,N%q");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "-", options6);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix((String) null);
      Options options0 = new Options();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 32, "org.apache.commons.cli.HelpFormatter$1", (String) null, options0, 2067, 32, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "--");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Options options2 = options1.addOption(option0);
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.createNewFile();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "usage: ", options2);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "usage: ", (String) null, options1, 121, (-1), "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", true, (String) null);
      StringBuffer stringBuffer0 = new StringBuffer("-");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3077, 3077, "");
      helpFormatter0.renderOptions(stringBuffer1, 3077, options0, 3077, 7);
      helpFormatter0.printHelp(63, "YmRQdlY", (String) null, options0, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (-171), (Options) null, (-171), (-171));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Option option0 = new Option("HS", "-");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 63, "HS", "P0R", options1, 27, 93, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "--");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      optionGroup1.setRequired(true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "--", " ", options1, "-", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      String string1 = "bi%v?*5B.'E,c";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", "bi%v?*5B.'E,c", (Options) null, "bi%v?*5B.'E,c", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "zU-[,TN=wrja5";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("zU-[,TN=wrja5", "sU@:95", (Options) null, "zU-[,TN=wrja5");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 13, options0, (-1103), (-1103));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "--");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Options options2 = options1.addOption(option0);
      MockFile mockFile0 = new MockFile("--", "\n");
      MockFile mockFile1 = new MockFile(mockFile0, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 83, "usage: ", options2);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      String string0 = "<:znZUC}??l Twbn";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-816), "<:znZUC}??l Twbn");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Options options0 = new Options();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 34, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "-");
      helpFormatter0.printHelp("--", "--", options1, (String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      helpFormatter0.defaultDescPad = 1;
      helpFormatter1.printUsage(printWriter0, 74, "LH~H<lR)1aZ9^Io", options0);
      options1.toString();
      helpFormatter0.printHelp(34, "]", " ", options1, "", false);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", "usage: ", options1, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options2 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp(112, "t", "_N>5y$", options0, "fh?1lD", true);
      helpFormatter0.renderOptions((StringBuffer) null, 112, options0, 112, 112);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('=');
      String string0 = "";
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "#[5", "", options0, 0, 0, "", false);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "--");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('f');
      helpFormatter1.printHelp(printWriter0, 74, "org.apache.commons.cli.OptionValidator", "", options0, 74, 3700, "", true);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      helpFormatter1.defaultLeftPad = 1;
      options0.toString();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('f');
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 74, "--", "-", options0, (-16), 3, "arg", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 341;
      helpFormatter0.setDescPadding(341);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("GU3bk", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "--");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      mockPrintWriter0.append('f');
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "Bc(=BNw2^`8jiKXRoI", " ", options1, 61, 74, "arg", false);
      helpFormatter1.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      Options options1 = new Options();
      options0.toString();
      options1.helpOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "\"");
      optionGroup0.addOption(option0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, (String) null, "$U", options2, 74, 74, "vPF70_J{i-\"y`OT?", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockFile0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter0.format("arg", objectArray0);
      String string0 = ")s=s}";
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, ")s=s}", options0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "Xfwx%rxdl]~R_m.#_r", true, "P;-}");
      options0.toString();
      options0.helpOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "07LArPug%c@$M");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 61, "Xfwx%rxdl]~R_m.#_r", "!^>^.rc%U,\"%-BIpMf", options1, 1, 3, "P;-}", true);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.write("]>{W%'", 3, 1);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 109, (-181), "?G8I5v\"c<,");
      int int0 = 2218;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2218, (-2974), "?G8I5v\"c<,");
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      Options options0 = new Options();
      String string0 = "!u?$kv[v";
      options0.addOption("zfSpCfLR7", "!u?$kv[v", false, "usage: ");
      Option option0 = null;
      try {
        option0 = new Option("   ", "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '   ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, 31, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(105);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "Xfwx%rxdl]~R_m&#_r", true, "P;-}");
      options0.toString();
      options0.helpOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 61, "Xfwx%rxdl]~R_m&#_r", "!^>^.rc%U,\"%-BIpMf", options1, 1, 3, "P;-}", true);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(105);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "Xfwx%rxdl]~R_m&#_r", true, "P;-}V");
      options0.toString();
      options0.helpOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, (-1), options1, 3, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 105;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(105);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "Xfwx%rxdl]~R_m&#_r", true, "P;-}V");
      options0.toString();
      options0.helpOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "--");
      helpFormatter2.renderOptions(stringBuffer1, 1548, options0, 9, 1);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(74, (String) null, "usage: ", options1, "O+un&Ola)N'", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.HelpFormatter");
      File file0 = MockFile.createTempFile("JuAFdj}bl2lA^l2V", "usage: ", (File) mockFile0);
      MockFile mockFile1 = new MockFile(file0, "eu7xc'i");
      mockFile1.setExecutable(false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("L}@@7~a}(U,T]tSCG");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
      Options options0 = new Options();
      helpFormatter0.printUsage(printWriter0, 9, "org.apache.commons.cli.HelpFormatter", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Locale locale0 = new Locale("arg", "usage: ", "org.apache.commons.cli.OptionGroup");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "JuAFdj}bl2lA^l2V";
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) printWriter0;
      objectArray0[3] = (Object) printWriter0;
      objectArray0[4] = (Object) options0;
      objectArray0[5] = (Object) file0;
      PrintWriter printWriter1 = mockPrintWriter0.printf(locale0, "7e(Dksp_JpA,#t<amFS", objectArray0);
      helpFormatter0.printUsage(printWriter1, 31, "\n");
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos("h^&FB!tV4d3K=U{*U7", 1, 10);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(537);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 537, options0, 537, 2);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 537, 2, "[ Options: [ short ");
      helpFormatter0.renderWrappedText(stringBuffer2, 2, (-2217), "]");
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options1 = new Options();
      Options options2 = new Options();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("(5ilHrp7xXV.", options0);
      options0.addOption("", true, "--");
      helpFormatter0.printHelp("Erz<aTj*", "Erz<aTj*", options0, "");
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("-");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(69, "I+m2gvb@3Ewq", " ", options0, (String) null, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("I+m2gvb@3Ewq");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 841, "", "-", options0, 1, 55, "<ozzo)(y]q-D.H", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options0 = new Options();
      Option option0 = new Option("@", "@");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", "mD:3$%{sXPL;", options0, "@");
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("@", options0, false);
      helpFormatter1.setSyntaxPrefix("arg");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter2.printHelp(0, "usage: ", "={>s6u[PC1!'t=", options0, "arg", false);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(105);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "Xfwx%rxdl]~R_m&#_r", true, "P;-}V");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "b+0aUiM>^'^3", "", options1, 105, 204, "!?Nr/2bvV2dTL}STP\"", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 116;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ", false);
      mockFileOutputStream0.release();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('t');
      helpFormatter0.printWrapped(printWriter0, 116, " | ");
      helpFormatter0.findWrapPos("BR851", 116, 2573);
      helpFormatter0.getOptPrefix();
      helpFormatter0.rtrim("-");
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 116, 116);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Options options0 = new Options();
      Locale locale0 = Locale.CANADA;
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 3194, (-8), "Ks");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "-");
      helpFormatter0.printHelp("--", "--", options1, (String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      helpFormatter0.defaultDescPad = 1;
      helpFormatter1.printUsage(printWriter0, 74, "LH~H<lR)1aZ9^Io", options0);
      options1.toString();
      helpFormatter0.defaultDescPad = (-1912);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(34, "]", " ", options1, "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Locale locale0 = Locale.CANADA;
      Option option0 = new Option("", "usage: ");
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      helpFormatter0.printHelp(109, "   ", "   ", options0, "   ", false);
      StringBuffer stringBuffer0 = new StringBuffer("ILLI6s");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 109, options0, 1838, 58);
      stringBuffer0.append(3);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, (-1), 109, "   ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "");
      optionGroup0.addOption(option0);
      optionGroup0.setSelected(option0);
      Option option1 = new Option("arg", "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "usage: ", "usage: ", options1, "usage: ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "k:4Xs1sA1";
      Options options0 = null;
      int int0 = 1;
      StringBuffer stringBuffer0 = new StringBuffer(1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 109, (Options) null, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("(ilHr7xXV.", options0);
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.CANADA;
      mockFile0.setExecutable(true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 9, "7e(Dksp_JpA,#t<amFS", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "-", (Object[]) null);
      helpFormatter1.printUsage(printWriter0, 116, "usage: ");
      helpFormatter1.findWrapPos("z}J\"iU", 3, 3203);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderWrappedText(stringBuffer0, 116, 46, "org.apache.commons.cli.OptionGroup");
      String string0 = "";
      StringBuffer stringBuffer1 = new StringBuffer("");
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer1, (-1667), 115, "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(105);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "Xfwx%rxdl]~R_m&#_r", true, "P;-}V");
      options0.toString();
      options0.helpOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      helpFormatter1.renderOptions(stringBuffer0, 9, options1, 1, 74);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "", "arg", options0, "\"", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", "75BjOD0}DQNL`yj,u6h");
      Options options0 = new Options();
      Option option1 = new Option("", "`^|ZwnsE$Z)ff<EmKF{", false, " | ");
      Options options1 = options0.addOption(option1);
      Options options2 = options1.addOption((String) null, "", false, "--");
      Options options3 = options2.addOption("arg", false, "");
      options3.addOption(option1);
      options0.toString();
      helpFormatter0.printHelp(74, "--", "", options1, "cmdLineSyntax not provided", true);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      Options options0 = new Options();
      Option option0 = new Option("arg", "usage: ", false, "-");
      String string0 = "<:\\uo\"n";
      helpFormatter0.printHelp(string0, "@", options0, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", false, "--");
      option0.setType("");
      helpFormatter0.printHelp(1703, "@", "@", options2, "", false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1), 1703, "@");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 900, 2, " ");
      helpFormatter0.renderWrappedText(stringBuffer1, 63, 64, "EL/24IgJ-@D%G");
      Options options0 = new Options();
      options0.helpOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 900, "rF?Dk&nRfn^/`-!o", " ", options0, 74, 74, "EL/24IgJ-@D%G");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(84, (String) null, "has already been selected: '", options0, "[[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 2419;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1704, ">;dV+81i=?ok:|", ">;dV+81i=?ok:|", options0, 1704, 2419, ">;dV+81i=?ok:|");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      File file0 = MockFile.createTempFile("arg", "niTbk)wDl-");
      MockFile mockFile0 = new MockFile(file0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printOptions(mockPrintWriter0, (-1), options0, 42, 1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getDescPadding();
      options0.getMatchingOptions("");
      helpFormatter0.printHelp("={BF *N%WKb", options0, false);
      helpFormatter0.getArgName();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = (-1354);
      options1.hasOption("={BF *N%WKb");
      String string0 = " :: ";
      String string1 = "dEK-";
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 3, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      String string1 = "";
      Options options0 = null;
      String string2 = "";
      int int0 = 22;
      String string3 = "[ option: ";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 22, "[ option: ", (String) null, (Options) null, 22, 22, "\u0007Y7.-_G1", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("(ilHr7xXV.", options0);
      Locale locale0 = Locale.CANADA;
      String string0 = "}Ks";
      String string1 = "0";
      Option option0 = new Option("0", "usage: ");
      Options options1 = options0.addOption(option0);
      String string2 = "7e(Dksp_JpA,#t<amFS";
      options0.toString();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      options0.getMatchingOptions("7e(Dksp_JpA,#t<amFS");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("(ilHr7xXV.", options0);
      Locale locale0 = Locale.CANADA;
      Option option0 = new Option("", "usage: ");
      options0.addOption(option0);
      options0.toString();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      options0.getMatchingOptions("7e(Dksp_JpA,#t<amFS");
      helpFormatter0.getArgName();
      Options options1 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter0.renderWrappedText(stringBuffer0, 63, 2, "}R2m:CD.");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 3, options0, (-2), 74);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      options0.addOption("", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = false;
      helpFormatter0.setWidth(1);
      optionGroup0.setRequired(false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("&2b*{s8B", "&2b*{s8B", options0, "&2b*{s8B", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      String string1 = "";
      Options options0 = null;
      String string2 = "";
      int int0 = 22;
      String string3 = "[ option: ";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 22, "[ option: ", (String) null, (Options) null, 22, 22, "\u0007Y7.-_G1", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("(ilJHrF7xXV.", options0);
      Locale locale0 = Locale.CANADA;
      Option option0 = new Option("", "usage: ");
      options0.addOption(option0);
      options0.toString();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      options0.getMatchingOptions("7e(Dksp_JpA,#t<amFS");
      helpFormatter0.printHelp("}R2m:CD.", options0, false);
      helpFormatter0.getArgName();
      String string0 = "\\i n7gIs?y_R";
      helpFormatter0.setOptPrefix("i n7gIs?y_R");
      helpFormatter0.setOptPrefix("}R2m:CD.");
      helpFormatter0.setSyntaxPrefix("(ilJHrF7xXV.");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printHelp("[", (String) null, options0, " :: ", false);
      helpFormatter0.getDescPadding();
      helpFormatter0.getNewLine();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "(ilJHrF7xXV.", 30, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("arg").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("e[");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printHelp(34, "j[ErEz:N", " ", options0, " ", false);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 900, 2, " ");
      helpFormatter0.renderWrappedText(stringBuffer1, 63, 64, "EL/24IgJ-@D%G");
      Options options0 = new Options();
      options0.helpOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("%Lc");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp(3, "eKkwFHbwmyJT$6H?4>", (String) null, options0, (String) null, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 900, 2, " ");
      helpFormatter0.renderWrappedText(stringBuffer1, 63, 64, "EL/24IgJ-@D%G");
      Options options0 = new Options();
      options0.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1), "", "-", options0, (-1), (-1971), "org.apache.commons.cli.HelpFormatter$1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("(ilHr7xXV.", options0);
      Locale locale0 = Locale.CANADA;
      Option option0 = new Option("", "usage: ");
      options0.addOption(option0);
      options0.toString();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      options0.getMatchingOptions("7e(Dksp_JpA,#t<amFS");
      helpFormatter0.printHelp("}R2m:CD.", options0, false);
      helpFormatter0.getArgName();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-1403), "\n", "7e(Dksp_JpA,#t<amFS", options0, "7e(Dksp_JpA,#t<amFS", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "(ilHr7xXV.";
      Options options0 = new Options();
      helpFormatter0.printHelp("(ilHr7xXV.", options0);
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.CANADA;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "}Ks", (Object[]) null);
      Option option0 = new Option("", "usage: ");
      options0.addOption(option0);
      mockFile0.setExecutable(false);
      String string1 = "7e(Dksp_JpA,#t<amFS";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 3, "7e(Dksp_JpA,#t<amFS", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("(5ilHrp7xXV.", options0);
      Locale locale0 = Locale.CANADA;
      Option option0 = new Option("", "usage: ");
      Options options1 = options0.addOption(option0);
      options0.toString();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printHelp(716, " ", "[ Options: [ short java.util.HashMap@0000000005 ] [ long {} ]", options1, " ", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("(5ilHrp7xXV.");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("(ilHr7xXV.", options0);
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.CANADA;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "}Ks", (Object[]) null);
      Option option0 = new Option("", "usage: ");
      options0.addOption(option0);
      mockFile0.setExecutable(false);
      helpFormatter0.printUsage(printWriter0, 9, "7e(Dksp_JpA,#t<amFS", options0);
      options0.toString();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      options0.getMatchingOptions("7e(Dksp_JpA,#t<amFS");
      helpFormatter0.printHelp("}R2m:CD.", options0, false);
      helpFormatter0.getArgName();
      helpFormatter0.setOptPrefix("i n7gIs?y_R");
      helpFormatter0.setOptPrefix("}R2m:CD.");
      MockFile mockFile1 = new MockFile("arg", "7e(Dksp_JpA,#t<amFS");
      mockFile0.renameTo(mockFile1);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-2), " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(".dEp< E0Pl[~Y%>");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setNewLine("5b");
      OptionGroup optionGroup1 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup1);
      Option option0 = new Option((String) null, true, (String) null);
      options1.addOption(option0);
      options0.getMatchingOptions((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "hxjX`si=e,Lmyv", options1, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("(ilJHrF7xXV.", options0);
      Locale locale0 = Locale.CANADA;
      Option option0 = new Option("", "usage: ");
      Options options1 = options0.addOption(option0);
      options0.toString();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      options0.getMatchingOptions("7e(Dksp_JpA,#t<amFS");
      Options options2 = new Options();
      int int0 = (-2794);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2794), "", "", options1, "M< ;<\"6o7%", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "-");
      helpFormatter0.printHelp("]", "]", options1, (String) null);
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", options0, true);
      helpFormatter1.setSyntaxPrefix("--");
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos("--", 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      int int0 = (-1116);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("cmdLineSyntax not provided", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "eq");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.getLongOptPrefix();
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("--", string0);
      
      helpFormatter0.setLongOptSeparator("--");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.createPadding(101);
      MockFile mockFile0 = new MockFile("<$qpYLq");
      MockFile.createTempFile("Dh*CY5J:x5pKi--{k*", "<$qpYLq", (File) mockFile0);
      File file0 = MockFile.createTempFile("-N^:;]sb~_", "[ZW");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-3295), (-2499), "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("org.apache.commons.cli.AlreadySelectedException", 473, 473);
      helpFormatter0.setLeftPadding(473);
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.printHelp("jH\"zCBTUaZd|X", "Bg#FsM4", options0, "");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printHelp(3260, "|Sf!@D`?3l", "nimsh+3bs-5JC7W", options0, "");
      helpFormatter0.findWrapPos("", 2341, 10);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "-");
      helpFormatter0.printHelp("]", "]", options1, (String) null);
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", options1, false);
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.findWrapPos("", 9, 1356);
      helpFormatter0.getOptPrefix();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-4524));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("(ilHr7xXV.", options0);
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.CANADA;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "}Ks", (Object[]) null);
      Option option0 = new Option("", "usage: ");
      options0.addOption(option0);
      mockFile0.setExecutable(false);
      helpFormatter0.printUsage(printWriter0, 9, "7e(Dksp_JpA,#t<amFS", options0);
      options0.toString();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      options0.getMatchingOptions("7e(Dksp_JpA,#t<amFS");
      helpFormatter0.printHelp("}R2m:CD.", options0, false);
      helpFormatter0.getArgName();
      helpFormatter0.setOptPrefix("i n7gIs?y_R");
      helpFormatter0.setOptPrefix("}R2m:CD.");
      helpFormatter0.setSyntaxPrefix("(ilHr7xXV.");
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "arg", "", options0, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      boolean boolean0 = true;
      mockPrintStream0.write(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      int int0 = 0;
      mockPrintWriter0.write("--");
      Object object0 = new Object();
      mockPrintStream0.print(object0);
      mockPrintWriter0.println();
      String string0 = "-f-q-E\\9_lc|";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "-f-q-E9_lc|");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("(ilJHrF7xXV.", options0);
      Locale locale0 = Locale.CANADA;
      Option option0 = new Option("", "usage: ");
      options0.addOption(option0);
      options0.toString();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      options0.getMatchingOptions("7e(Dksp_JpA,#t<amFS");
      helpFormatter0.printHelp("}R2m:CD.", options0, false);
      helpFormatter0.getArgName();
      helpFormatter0.setOptPrefix("i n7gIs?y_R");
      helpFormatter0.setOptPrefix("}R2m:CD.");
      helpFormatter0.setSyntaxPrefix("(ilJHrF7xXV.");
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "arg", "", options0, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.getWidth();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "GdZjdT2";
      String string1 = "0I\\ATm4=2M(Rabv";
      try { 
        MockURI.URI("usage: ", "GdZjdT2", "0IATm4=2M(Rabv", "\n", "usage: ");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: usage: ://GdZjdT20IATm4=2M(Rabv?%0A#usage:%20
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.getWidth();
      helpFormatter0.getOptionComparator();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-3008), 44, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", (-206), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      String string0 = null;
      stringWriter0.write((String) null);
      helpFormatter0.setNewLine((String) null);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "A CloneNotSupportedException was thrown: ");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 44;
      String string0 = "&2b*{s8B";
      Options options0 = new Options();
      options0.getOptions();
      options0.addOption("", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setWidth(0);
      optionGroup0.setRequired(false);
      // Undeclared exception!
      helpFormatter0.printHelp("&2b*{s8B", "&2b*{s8B", options0, "&2b*{s8B", false);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "-");
      helpFormatter0.printHelp("]", "]", options1, (String) null);
      String string0 = helpFormatter0.getLongOptSeparator();
      assertEquals(" ", string0);
      
      helpFormatter0.printHelp(1790, "0kT<Sq >815Lf=S3US", "]", options0, "]");
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "!w7ido..:6OG9j";
      int int0 = (-1);
      Options options0 = new Options();
      boolean boolean0 = true;
      String string1 = "-";
      options0.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1), "", "-", options0, (-1), (-1971), "!w7ido..:6OG9j");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("(ilHr7xXV.", options0);
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.CANADA;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "Ks", (Object[]) null);
      Option option0 = new Option("", "usage: ");
      options0.addOption(option0);
      mockFile0.setExecutable(false);
      helpFormatter0.printUsage(printWriter0, 9, "7e(Dksp_JpA,#t<amFS", options0);
      options0.toString();
      options0.hasOption("J");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-5176), (String) null, "", options0, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 44;
      String string0 = "&2b*{s8B";
      Options options0 = new Options();
      options0.getOptions();
      options0.addOption("", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setWidth(0);
      optionGroup0.setRequired(false);
      String string1 = "' was specified but an option from this group ";
      String string2 = "g'<CS";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(912, "", "g'<CS", options0, "' was specified but an option from this group ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      int int0 = (-1);
      Options options0 = new Options();
      boolean boolean0 = true;
      PrintWriter printWriter0 = null;
      options0.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1), "", "-", options0, (-1), (-1971), "org.apache.commons.cli.HelpFormatter$1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.createPadding(0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("", string0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      String string0 = "=!e%~H-8";
      helpFormatter0.setLongOptPrefix("=!e%~H-8");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-912), "hfm");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      helpFormatter0.setLongOptSeparator("");
      assertEquals("", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.setDescPadding(1);
      helpFormatter0.defaultLongOptPrefix = "has already been selected: '";
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setArgName("has already been selected: '");
      helpFormatter0.getArgName();
      assertEquals(1, helpFormatter0.getDescPadding());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setNewLine("EQ>t#N9");
      options0.addOptionGroup(optionGroup0);
      String string1 = "[";
      Option option0 = null;
      try {
        option0 = new Option("[", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      String string0 = "";
      String string1 = "T";
      MockFile mockFile0 = new MockFile("", "T");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "\n", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.findWrapPos("", 0, 0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", "\n");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "org.apache.commons.cli.Option", "The option '", (Options) null, "?)8lCg", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 1;
      Options options0 = new Options();
      options0.getOption("\n");
      helpFormatter0.printHelp(2341, "T&2k", "T&2k", options0, ",@|\"RH", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("7;#} =;$|Z&t");
      PrintWriter printWriter0 = mockPrintWriter0.append('\\');
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 3, "T&2k", "&d", options0, (-2), 44, "'q{_");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "The option '", "org.apache.commons.cli.Option", (Options) null, ",@|\"RH", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.setDescPadding((-768));
      helpFormatter0.getDescPadding();
      int int0 = 0;
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("usage: ", false, "@gdq:S");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "Ij%% >p*;N 6";
      helpFormatter0.rtrim("sV$<");
      String string0 = "LiCtwQO\"ihcGy7g^D";
      MockFile mockFile0 = new MockFile("LiCtwQO\"ihcGy7g^D");
      String string1 = "/p_\\ndI";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "/p_\ndI");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // /p_
         // dI
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "P^c=zo+te!:8GEDc?3";
      helpFormatter0.setWidth(32);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      helpFormatter0.setOptPrefix("usage: ");
      helpFormatter0.getDescPadding();
      helpFormatter0.getSyntaxPrefix();
      MockFile mockFile0 = new MockFile("-");
      MockFile mockFile1 = new MockFile(mockFile0, "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "P^c=zo+te!:8GEDc?3";
      mockPrintWriter0.format((Locale) null, "", objectArray0);
      Options options0 = new Options();
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      Option option0 = null;
      try {
        option0 = new Option("usage: ", "org.apache.commons.cli.HelpFormatter$1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "(ilJHrF7xXV.";
      Options options0 = new Options();
      helpFormatter0.printHelp("(ilJHrF7xXV.", options0);
      MockFile mockFile0 = new MockFile("\n");
      mockFile0.mkdirs();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.defaultLongOptPrefix = "A CloneNotSupportedException was thrown: ";
      helpFormatter0.getLeftPadding();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("hJ3o_xRlL4");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      mockPrintWriter0.append('+');
      int int0 = 142;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption(" ] [ long ", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ' ] [ long ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("org.apache.commons.cli.AlreadySelectedException", 473, 473);
      helpFormatter0.setLeftPadding(473);
      Options options0 = new Options();
      options0.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-448), "--", "", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
