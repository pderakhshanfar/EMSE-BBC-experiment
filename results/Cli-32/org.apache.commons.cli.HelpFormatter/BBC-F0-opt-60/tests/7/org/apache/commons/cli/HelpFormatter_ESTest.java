/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 18:15:09 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.URI;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setLeftPadding((-1568));
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      String string0 = "";
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.getNewLine();
      int int0 = 1563;
      helpFormatter0.createPadding(1563);
      helpFormatter0.getLongOptPrefix();
      String string1 = "D#!\\y7Oz5o;\"YaC0O-g";
      Options options0 = new Options();
      String string2 = "7ubo']2pP))U,";
      // Undeclared exception!
      try { 
        options0.addOption("7ubo']2pP))U,", " ", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '7ubo']2pP))U,' contains an illegal character : '''
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, "\n");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.createPadding(2492);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.flush();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, "\n");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, true, "   ");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "line.separator");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setWidth((-409));
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", " ", (Options) null, " ", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "usage: ");
      Options options2 = options1.addOption("", "--", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      options3.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(" ", (String) null, options2, (String) null, false);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "\n";
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.defaultDescPad = 74;
      Option option0 = new Option("", true, "--");
      option0.setArgName("");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("b!#FFISb/", (String) null, options1, ">", true);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("&tqE&\"SB?YO1Ht");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter2, 0, "cmdLineSyntax not provided", options0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2696, "arg", (String) null, options0, 9, 3, "-", false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 64, "--");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(63, "-", "", options0, "--", false);
      MockFile mockFile0 = new MockFile("-");
      MockFile mockFile1 = new MockFile(mockFile0, "rq_P_?");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3197, "?xg>NoB$#M]o4A", "rq_P_?", options0, 3197, 3197, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(63, "-", "", options0, "--", false);
      Options options1 = options0.addOption("", false, "--");
      options1.getOptionGroups();
      helpFormatter0.defaultOptPrefix = "";
      options1.hasOption("usage: ");
      helpFormatter0.printHelp(74, "|vl{I|MYN>pJHbOK_C", "line.separator", options0, "line.separator");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("");
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "", true, "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      options0.addOption("", "The option '", true, "");
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, "org.apache.commons.cli.HelpFormatter", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.defaultNewLine = " ";
      int int0 = 0;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("]", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      int int0 = (-3874);
      int int1 = 1425;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-3874), 1425);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "usage: ");
      option0.setArgName("-");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      optionGroup0.setRequired(true);
      helpFormatter2.printHelp("ER", "arg", options1, "3l,<o,c$(&", true);
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 13, "org.apache.commons.cli.Option", "Illegal 1ption name '", (Options) null, (-2), 3, "--", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      String string1 = "h<BiAz";
      helpFormatter0.setArgName("");
      Options options1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 3, options0, 0, 3);
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer1, 0, (-1430), "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.defaultNewLine = " ";
      helpFormatter0.createPadding(0);
      // Undeclared exception!
      helpFormatter0.printHelp(0, " ", " ", (Options) null, " ", false);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "usage: ");
      option0.setArgName("0l,j");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter2.printHelp("ER", "arg", options1, "3l,<o,c$(&", true);
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 13, "org.apache.commons.cli.Option", "Illegal option name '", (Options) null, (-2), 31, "--", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.printf("\n", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      int int0 = 1;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.defaultNewLine = " ";
      int int0 = 0;
      Options options0 = null;
      boolean boolean0 = true;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 1, " ");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("OZ\",uN1u_D6u'^rm");
      // Undeclared exception!
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 0, "Illegal option name '");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      helpFormatter0.createPadding(715);
      Options options0 = new Options();
      Option option0 = new Option("", " ", false, (String) null);
      Options options1 = options0.addOption(option0);
      helpFormatter0.defaultLongOptPrefix = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 715, "cmdLineSyntax not providedoptions1, 1, 715, "1_7");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "usage: ");
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      OptionGroup optionGroup1 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter2.renderOptions(stringBuffer0, 1, options0, 74, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.renderOptions((StringBuffer) null, 74, options0, 74, 7);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(13, ">", "Q-uUqx5}}!iN#i", options0, "arg", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, "y37 f", "org.apache.commons.cli.HelpFormatter$1", options0, "@}LX", true);
      helpFormatter1.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 97, "arg", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Nj3>Jin}Pu";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("mJukEJpd$Z`^I", "Nj3>Jin}Pu", (Options) null, "mJukEJpd$Z`^I");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "usage: ");
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      Options options1 = new Options();
      // Undeclared exception!
      helpFormatter3.printHelp(0, "usage: ", "\n", options1, "arg");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(50);
      helpFormatter0.rtrim("   ");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setOptPrefix("   ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(36, "   ", "Z", (Options) null, "   ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("S9Rf)L'|g^Zf6 &`", options0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      helpFormatter0.createPadding(10);
      helpFormatter0.findWrapPos("          ", 10, (-4));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("*~g|", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter0.setDescPadding(14);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("i$iz8ul");
      helpFormatter1.setOptPrefix("");
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      options0.hasOption("Am");
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 24, (String) null, "", options0, 1902, 1902, "[", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("*~g|", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "GJ:1z$L3ipaQ%");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("WHP", "arg", true, "--");
      Option option0 = new Option("", "usage: ");
      options3.addOption(option0);
      options2.getOption("'");
      helpFormatter0.printHelp(18, "org.apache.commons.cli.Option", "Dy@ap#`", options1, (String) null, false);
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("*~g|", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = options0.addOption("", true, "GJ:1z$L3ipaQ%");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      String string0 = "WHP";
      boolean boolean1 = true;
      Options options3 = options2.addOption("WHP", "arg", true, "--");
      Option option0 = new Option("", "usage: ");
      Options options4 = options3.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 16, "*~g|", options4);
      Options options5 = new Options();
      OptionGroup optionGroup1 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 2, (Options) null, 1, 44);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("*~g|", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "GJ:1z$L3ipaQ%");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("WHP", "arg", true, "--");
      Option option0 = new Option("", "usage: ");
      Options options4 = options3.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 16, "*~g|", options4);
      int int0 = 2;
      String string0 = "arg";
      Options options5 = new Options();
      OptionGroup optionGroup1 = new OptionGroup();
      Options options6 = options5.addOptionGroup(optionGroup1);
      boolean boolean0 = false;
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 1, options6, 1, 1);
      // Undeclared exception!
      try { 
        options6.addOption("-", " ", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("'");
      helpFormatter0.setOptPrefix("ezkfOZj");
      options0.hasOption("&(>j`>Yg^vHY[");
      helpFormatter0.setDescPadding(63);
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("y'XWpVd");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 63, "ezkfOZj");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 3, options0, (-2004), 32);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(34);
      helpFormatter0.rtrim("   ");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      Option option0 = new Option("arg", "   ", true, "]");
      optionGroup0.addOption(option0);
      helpFormatter0.setDescPadding(64);
      helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setDescPadding(64);
      helpFormatter0.getOptionComparator();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1), (-1), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(63, "8TmU*Cj?9L5", "", options0, "cmdLineSyntax not provided", false);
      Options options1 = options0.addOption("", false, "8TmU*Cj?9L5");
      options1.hasOption("--");
      helpFormatter0.printHelp("\n", "arg", options1, "usage: ", true);
      helpFormatter0.setDescPadding((-2));
      helpFormatter0.getOptionComparator();
      options1.hasOption("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(1);
      helpFormatter0.getOptionComparator();
      helpFormatter1.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer("Z");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 74, 1, "tDd7!0'_nc0WyjP");
      StringBuffer stringBuffer2 = helpFormatter1.renderOptions(stringBuffer1, 78, options1, 1537, 1537);
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer2, (-2), options2, (-2249), 63);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("_fp06");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintWriter0;
      mockPrintWriter0.println((float) 3);
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) "_fp06";
      Object object1 = new Object();
      objectArray0[4] = object1;
      Object object2 = new Object();
      objectArray0[5] = object2;
      objectArray0[6] = (Object) "_fp06";
      objectArray0[7] = (Object) mockPrintWriter0;
      objectArray0[8] = (Object) helpFormatter0;
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 64, "_fp06", options0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
      Options options1 = new Options();
      mockPrintWriter0.print(false);
      options1.getOption("");
      helpFormatter0.printHelp(printWriter0, 58, "_fp06", "rpCg)J}T", options1, 34, 58, "rpCg)J}T");
      helpFormatter0.getNewLine();
      helpFormatter0.findWrapPos("The option '", 876, 242);
      helpFormatter0.getArgName();
      helpFormatter0.printHelp("_fp06", "[-n{Ar!|ZS1IV~", options0, (String) null);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("*~g|", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "GJ:1z$L3ipaQ%");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("WHP", "arg", true, "--");
      Option option0 = new Option("", "usage: ");
      Options options4 = options3.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 16, "*~g|", options4);
      String string0 = "arg";
      Options options5 = new Options();
      OptionGroup optionGroup1 = new OptionGroup();
      boolean boolean0 = false;
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, options3, 1, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.setDescPadding(74);
      helpFormatter2.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("usage: ", "[ARG...]", (Options) null, "]9rQ12<4b,", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("arg");
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter1, 1, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "usage: ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.printHelp("usage: ", "-", options0, "mk,N^V)fwMX`h", true);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.printHelp((PrintWriter) mockPrintWriter1, 74, " ", "\n", options0, 32, 74, "", false);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "\n");
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.printf("-", objectArray0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, true);
      helpFormatter1.printHelp(24, "i~3yp>w", "--", options0, "", true);
      helpFormatter1.getLeftPadding();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options1 = new Options();
      helpFormatter0.printHelp(44, "-", (String) null, options0, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "-", "--", options1, (-763), (-2959), " ]");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.setOptPrefix((String) null);
      Options options1 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("o", "o", options1, "T|!wxSS ", true);
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 0, "MKoUmn`:2p!|Lxs", "ke.\"SW]Pe", options0, 490, 74, "T|!wxSS ", false);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      helpFormatter0.setOptPrefix((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("1 #r}f]Sq*[H");
      Options options1 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter3.printHelp((PrintWriter) mockPrintWriter0, (-1), "k$DI", "", options1, 3353, 1, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-224));
      helpFormatter0.rtrim("   ");
      Options options0 = new Options();
      Option option0 = new Option("L", "qs3G=6k", true, "org.apache.commons.cli.AlreadySelectedException");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("L", true, "tO6<K@");
      Options options3 = options2.addOption("arg", "", true, "s");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-224), "   ", "org.apache.commons.cli.AlreadySelectedException", options3, "L", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, " ");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "<";
      helpFormatter0.defaultDescPad = 1;
      Object object0 = new Object();
      objectArray0[1] = object0;
      mockPrintWriter0.printf(", ", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "org.apache.commons.cli.HelpFormatter", "arg", options0, 117, 13, "A CloneNotSupportedException was thrown: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("arg");
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter1, 1, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "usage: ");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(63, "usage: ", "\n", options1, "-", true);
      helpFormatter0.setLongOptSeparator("");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.setOptPrefix("o");
      Options options1 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("\n", "arg", options1, " ", true);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "cmdLineSyntax not provided", "at~APK}MxEnd", options1, 16, 923, "qm%|af=?q&08sbI<8j;", false);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter1.setOptPrefix("o");
      Options options1 = new Options();
      options1.hasOption("\n");
      helpFormatter1.setDescPadding(1);
      helpFormatter0.printHelp(2441, " ", "", options1, "");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) helpFormatter1;
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
      helpFormatter2.printOptions(printWriter0, 74, options1, 74, 74);
      helpFormatter1.getNewLine();
      helpFormatter1.printWrapped(printWriter0, 757, "'");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "\n");
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 307, "", "", options0, (-448), 63, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printHelp(63, "8TmU*Cj?9L5", "", options0, "", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("", true, "8TmU*Cj?9L5");
      options1.hasOption("--");
      helpFormatter0.printHelp("\n", "arg", options1, "usage: ", true);
      helpFormatter1.setDescPadding(34);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\n");
      helpFormatter1.getOptionComparator();
      helpFormatter1.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions(mockPrintWriter0, 1, options0, 13, (-823));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      helpFormatter0.printHelp(63, "&0tPSBq(.x*#_wVt", "", options0, "&0tPSBq(.x*#_wVt", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.addOption("", false, "[");
      options0.hasOption("");
      helpFormatter1.printHelp("pze5#uD", "--", options0, "^qtF)pFmM;'.wE#)$e", true);
      helpFormatter1.setDescPadding(1);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter1.renderWrappedText(stringBuffer0, 74, 74, "");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", " ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 34, options0, 2046, 7394);
      helpFormatter0.renderWrappedText(stringBuffer1, 2046, (-1), "arg");
      helpFormatter0.defaultDescPad = (-2);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getArgName();
      Options options1 = new Options();
      options1.getOption("");
      String string0 = "&JJK}/GRg3FD";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "&JJK}/GRg3FD", "&JJK}/GRg3FD", options1, "&JJK}/GRg3FD", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(63, "8TmU*Cj?9L5", "", options0, "", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("", false, "8TmU*Cj?9L5");
      options1.hasOption("--");
      helpFormatter0.printHelp("\n", "arg", options1, "usage: ", true);
      helpFormatter1.setDescPadding((-2));
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(2017, ">vhk'pucdrLg", ";p[", options0, "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[0];
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("arg");
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter1, 1, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "usage: ");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.hasOption("PR*5vJfl;ho");
      option0.setRequired(false);
      options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 74, "arg", "", options0, (-1), 32, "k,ADECRV^QcfjK8*/qu", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
      helpFormatter1.printWrapped(printWriter0, 1, "usage: ");
      helpFormatter1.setOptPrefix("");
      helpFormatter1.setOptPrefix("o");
      Options options1 = new Options();
      options1.hasOption("\n");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setDescPadding(1);
      int int0 = 4;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(4, "zek[z1y", "", options1, "I%");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)2;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      helpFormatter0.findWrapPos("", 3288, (-523));
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1769), "", "<", (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(63, "8TmU*Cj?9L5", "", options0, "", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("", false, "8TmU*Cj?9L5");
      options1.hasOption("--");
      helpFormatter0.printHelp("\n", "arg", options1, "usage: ", true);
      helpFormatter1.setDescPadding((-2));
      helpFormatter0.getOptionComparator();
      helpFormatter1.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      helpFormatter0.renderWrappedText(stringBuffer0, 34, 3, "-");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("arg", "usage: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // usage: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, (String) null);
      List list0 = new LinkedList<String>();
      options1.hasOption("arg");
      options1.getMatchingOptions("D7*S4+Q~Y2EE");
      String string0 = "";
      String string1 = "--";
      options0.getOption("--");
      helpFormatter0.printHelp(">", "", options1, (String) null, false);
      Options options2 = options0.addOption("", false, ">");
      String string2 = "";
      options2.addOption("arg", "", false, "arg");
      helpFormatter0.getOptionComparator();
      String string3 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1920, 30, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter0.append('b');
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 0, "");
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.setOptPrefix("mC?To&*");
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      options0.hasShortOption("arg");
      helpFormatter0.printHelp("arg", options0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3592, "", "", (Options) null, 3, 1190, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 10;
      helpFormatter0.defaultSyntaxPrefix = "3LK;S@^eiky_T12";
      helpFormatter0.defaultSyntaxPrefix = "3LK;S@^eiky_T12";
      helpFormatter0.defaultLeftPad = 10;
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Cz!Y+<T1$");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      String string0 = "A CloneNotSupportedException was thrown: ";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 10, "3LK;S@^eiky_T12");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-224));
      helpFormatter0.getLeftPadding();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) byteArrayOutputStream0;
      mockPrintWriter0.printf("usage: ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 19, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "usage: ");
      options1.helpOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, "--", "BX |fGH2 ", options1, "BX |fGH2 ", true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getArgName();
      Options options2 = new Options();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(5, "arg", "5&yKgXk{O:EY\fn", options0, "usage: ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "cmdLineSyntax not provided");
      options1.helpOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, ">", "BX |fGH2 ", options1, "BX |fGH2 ", true);
      options1.toString();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter1.setOptionComparator(comparator0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getArgName();
      Options options2 = new Options();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter2.printHelp(21, ";p[", "*q9Zn/;<'rNFJ(l ;", options0, ">", true);
      helpFormatter2.setLongOptSeparator("j");
      helpFormatter1.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      mockPrintWriter0.write("arg");
      Locale.lookup(linkedList0, (Collection<Locale>) null);
      String string0 = ", ";
      String string1 = " ";
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, " ", (Object[]) null);
      helpFormatter0.printWrapped(printWriter0, 72, (-1659), "arg");
      helpFormatter0.setArgName("Cz!Y+<T1$");
      helpFormatter0.findWrapPos("_VJy|yQ)K{yg", 18, 18);
      int int0 = 63;
      String string2 = ">DCr<j_.*";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("^mj;E'L8?", false, ">DCr<j_.*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '^mj;E'L8?' contains an illegal character : '^'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("sa", false, "org.apache.commons.cli.Options");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1609), "org.apache.commons.cli.Options", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options3, 44, (-2), "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 3, options0, 0, 3);
      StringBuffer stringBuffer2 = helpFormatter1.renderWrappedText(stringBuffer1, 0, (-1430), "");
      helpFormatter0.renderOptions(stringBuffer2, 3028, options0, 3028, 180);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      helpFormatter0.defaultNewLine = "arg";
      helpFormatter0.printHelp("arg", options0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      options0.hasOption("--");
      helpFormatter0.printHelp("ud", "H(6u;", options0, "", true);
      int int0 = HelpFormatter.DEFAULT_WIDTH;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(103, "", "ud", (Options) null, "*'C)%qCd4hlc{[o-", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
      helpFormatter1.printWrapped(printWriter0, 1, "usage: ");
      helpFormatter1.setOptPrefix("");
      helpFormatter1.setOptPrefix("o");
      Options options1 = new Options();
      options1.hasOption("\n");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp("", "", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      helpFormatter0.defaultNewLine = "arg";
      helpFormatter0.printHelp("arg", options0, false);
      options0.hasOption("-");
      options0.addOption("arg", false, "usage: ");
      helpFormatter0.printHelp("arg", "mkEfsYAmCc_!", options0, "", false);
      int int0 = 108;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(34);
      helpFormatter1.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "t(DIkfjs{mI*e`XlA*j");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // t(DIkfjs{mI*e`XlA*j
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      helpFormatter0.defaultNewLine = "arg";
      helpFormatter0.printHelp("arg", options0, false);
      options0.hasOption("=`NgfG%\"");
      String string0 = "";
      Options options1 = options0.addOption("", true, "");
      helpFormatter0.printHelp(">", "arg", options1, "arg", false);
      helpFormatter0.setDescPadding(108);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getOptionComparator();
      String string1 = "";
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) options1;
      objectArray0[1] = (Object) pipedOutputStream0;
      objectArray0[2] = (Object) "arg";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-2395), "arg", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      helpFormatter0.printHelp("cmdLineSyntax not provided", options0, true);
      String string0 = "=`NgfG%\"";
      options0.hasOption("arg");
      Options options1 = new Options();
      Options options2 = options1.addOption("arg", true, "--");
      String string1 = "1";
      helpFormatter0.printHelp("1", "hg8_k\",cX", options2, "", true);
      int int0 = 108;
      helpFormatter0.setDescPadding(108);
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("Re[8!Kq", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 0, "");
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.setOptPrefix("mC?To&*");
      Options options0 = new Options();
      options0.hasOption("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, options0, "-", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      mockPrintWriter0.write("arg");
      Locale.lookup(linkedList0, (Collection<Locale>) null);
      String string0 = ", ";
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, " ", (Object[]) null);
      helpFormatter0.printWrapped(printWriter0, 72, (-1659), "arg");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getArgName();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "Cz!Y+<T1$", "", options0, "-", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(649);
      helpFormatter0.setOptPrefix("The option '");
      String string0 = "";
      helpFormatter0.setOptPrefix("AAIl");
      Options options0 = new Options();
      helpFormatter0.setDescPadding((-1));
      helpFormatter0.setArgName("The option '");
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      options0.hasShortOption("arg");
      helpFormatter0.defaultNewLine = "arg";
      helpFormatter0.printHelp("arg", options0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3592, "arg", "", (Options) null, 3592, 3592, "arg", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      int int0 = 0;
      Options options0 = new Options();
      options0.hasOption("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "F|'];oi@SBzw3Ht", options0, "gcJ~gM", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2473;
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.printHelp(2473, "line.separator", "\n", options0, "line.separator", false);
      options0.toString();
      helpFormatter0.defaultOptPrefix = "3pv9VcwP| sRGfAfBQL";
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", (-715), (-715));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 10;
      helpFormatter0.defaultSyntaxPrefix = "3LK;S@^eiky_T12";
      helpFormatter0.defaultSyntaxPrefix = "3LK;S@^eiky_T12";
      helpFormatter0.defaultLeftPad = 10;
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Cz!Y+<T1$");
      Options options0 = new Options();
      helpFormatter0.printHelp("Cz!Y+<T1$", options0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(35, "Cz!Y+<T1$", "~Bw0*j+KE", (Options) null, "2$<Z?j", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("--");
      helpFormatter0.printHelp("F|'];oi@SBzw3Ht", "g|", options0, "", true);
      helpFormatter0.setDescPadding((-2));
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.setSyntaxPrefix((String) null);
      Options options0 = new Options();
      options0.hasLongOption(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", options0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1073));
      Options options0 = new Options();
      String string0 = "4ROtF";
      String string1 = "";
      Options options1 = options0.addOption("arg", true, "--");
      options1.hasShortOption("_");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("4ROtF", options1, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("S z7)y~A9^a74\bnTI");
      helpFormatter0.setArgName("S z7)y~A9^a74\bnTI");
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-129), options1, 2, (-300));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      options0.getOption("\n");
      helpFormatter0.defaultNewLine = "arg";
      options0.hasShortOption("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-2), (-1), "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      options0.helpOptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("F|'];oi@SBzw3Ht");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", "The option '", options0, "org.apache.commons.cli.HelpFormatter$OptionComparator", true);
      helpFormatter0.setDescPadding(0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("F|'];oi@SBzw3Ht", options0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(" [ARG]", " [ARG]", options0, (String) null);
      helpFormatter0.printHelp("R<$L:XnWaq)", options0);
      String string0 = "PO(iWyE<]>v8Q=d%";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "VzMcBWa(/", options0, "wm.s:(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1);
      helpFormatter0.setWidth((-1));
      String string0 = "BL<Z>q";
      int int1 = 378;
      helpFormatter0.setDescPadding(378);
      helpFormatter0.setOptPrefix("BL<Z>q");
      helpFormatter0.setSyntaxPrefix("BL<Z>q");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      helpFormatter0.getOptionComparator();
      helpFormatter0.defaultLongOptPrefix = "BL<Z>q";
      String string1 = "";
      helpFormatter0.getOptPrefix();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("BL<Z>q", "", (Options) null, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.setSyntaxPrefix("arg");
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, 74, options1, 74, (-982));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      int int0 = (-1543);
      String string0 = "'oC(9b/(8\"";
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "'oC(9b/(8\"";
      objectArray0[2] = (Object) "'oC(9b/(8\"";
      objectArray0[3] = (Object) " ";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) " ";
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) "'oC(9b/(8\"";
      objectArray0[8] = (Object) " ";
      mockPrintWriter0.printf(" ", objectArray0);
      helpFormatter0.defaultLongOptPrefix = "'oC(9b/(8\"";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1543), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(63, "8TmU*Cj?9L5", "", options0, "cmdLineSyntax not provided", false);
      Options options1 = options0.addOption("", false, "8TmU*Cj?9L5");
      options1.hasOption("--");
      helpFormatter0.printHelp("\n", "arg", options1, "usage: ", true);
      helpFormatter0.setDescPadding((-2));
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("cmdLineSyntax not provided", "8TmU*Cj?9L5", options1, "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1868);
      helpFormatter0.setDescPadding((-224));
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      helpFormatter0.rtrim("   ");
      helpFormatter0.setOptPrefix("TAyo[");
      helpFormatter0.setOptPrefix("ezkfj");
      Options options0 = new Options();
      options0.hasOption("--");
      helpFormatter0.setDescPadding((-224));
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("3[sWsi*$bAU`m1WhYh@", (-224), (-224));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      String string0 = "[I2wO<`yX|}8>ky";
      helpFormatter0.defaultNewLine = "[I2wO<`yX|}8>ky";
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.printHelp("[I2wO<`yX|}8>ky", ">qkWGu<B", options0, "cmdLineSyntax not provided", true);
      helpFormatter0.setLeftPadding((-2986));
      helpFormatter0.defaultNewLine = "X>5~S!wWF%";
      Comparator<Option> comparator1 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[I2wO<`yX|}8>ky", "org.apache.commons.cli.Option", options0, "=y4z)fyYE8pb", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1);
      helpFormatter0.setWidth((-1));
      String string0 = "BL<Z>q";
      int int1 = 378;
      helpFormatter0.setDescPadding(378);
      helpFormatter0.setOptPrefix("BL<Z>q");
      helpFormatter0.getOptionComparator();
      helpFormatter0.defaultLongOptPrefix = "BL<Z>q";
      String string1 = "";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("BL<Z>q", "", (Options) null, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      helpFormatter0.defaultNewLine = "arg";
      helpFormatter0.printHelp("arg", options0, false);
      options0.hasOption("=`NgfG%\"");
      String string0 = "";
      Options options1 = options0.addOption("", true, "");
      helpFormatter0.printHelp(">", "arg", options1, "arg", false);
      helpFormatter0.setDescPadding(108);
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "usage: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // usage: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "line.separator";
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "cmdLineSyntax not provided");
      options1.helpOptions();
      boolean boolean0 = false;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, ">", "BX |fGH2 ", options1, "/q+9t0WPf2$<J", true);
      options1.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("\"", 3, (-3094));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2473;
      String string0 = "line.separator";
      String string1 = null;
      Options options0 = new Options();
      String string2 = null;
      Options options1 = options0.addOption((String) null, true, (String) null);
      options0.helpOptions();
      helpFormatter0.printHelp(2473, "line.separator", (String) null, options1, "line.separator", false);
      String string3 = "";
      options0.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", (-715), (-715));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2473;
      String string0 = null;
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, (String) null);
      options0.helpOptions();
      helpFormatter0.printHelp(2473, "line.separator", (String) null, options1, "line.separator", false);
      options0.toString();
      helpFormatter0.defaultOptPrefix = "3pv9VcwP| sRGfAfBQL";
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", (-715), (-715));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      int int0 = 3007;
      helpFormatter0.createPadding(3007);
      MockFile mockFile0 = new MockFile("Z)H1`", "--");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      options0.hasLongOption("");
      // Undeclared exception!
      try { 
        options0.addOption("U;qXQrx", "--", false, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'U;qXQrx' contains an illegal character : ';'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      String string0 = ".2A{\"E^7YQ.HX";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption(" ", false, "M22M3PY`o{^)6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      helpFormatter0.defaultNewLine = "arg";
      helpFormatter0.printHelp("arg", options0, false);
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "\n");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      String string0 = ">";
      String string1 = null;
      Options options0 = new Options();
      String string2 = ".mb?X7i&dz5H|f";
      // Undeclared exception!
      try { 
        options0.addOption("eu5zzlO-ST1G3a{.D", true, ".mb?X7i&dz5H|f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'eu5zzlO-ST1G3a{.D' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("F|'];oi@SBzw3Ht");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", "The option '", options0, "org.apache.commons.cli.HelpFormatter$OptionComparator", true);
      int int0 = HelpFormatter.DEFAULT_WIDTH;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "org.apache.commons.cli.HelpFormatter$OptionComparator", "B{pU*+B=YC_!n;G ", options0, "The option '", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      String string0 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter$OptionComparator");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      mockPrintWriter0.write("3LK;S@^eiky_T12");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null, locale_FilteringMode0);
      Locale.lookup(linkedList0, list0);
      String string1 = "Illegal option name '";
      mockPrintWriter0.format((Locale) null, "Illegal option name '", (Object[]) null);
      int int0 = (-1659);
      int int1 = 31;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 31, (-1659), "3LK;S@^eiky_T12");
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getArgName();
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(31, "A CloneNotSupportedException was thrown: ", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, "9Ups5hS3", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(63, "k8TmU*Cj?9xL5", "", options0, "", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      options1.hasOption("--");
      helpFormatter0.printHelp("\n", "arg", options1, "usage: ", false);
      helpFormatter1.setDescPadding((-2));
      helpFormatter0.getOptionComparator();
      helpFormatter1.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(74, "--", "arg", options0, " ", true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.getArgName();
      Options options1 = new Options();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter3.printHelp(1, "\n", "--", options1, "org.apache.commons.cli.AlreadySelectedException", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "3LK;S@^eiky_T12";
      helpFormatter0.defaultDescPad = 10;
      helpFormatter0.defaultSyntaxPrefix = "3LK;S@^eiky_T12";
      helpFormatter0.defaultSyntaxPrefix = "3LK;S@^eiky_T12";
      helpFormatter0.defaultLeftPad = 10;
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Cz!Y+<T1$");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      mockPrintWriter0.write("A CloneNotSupportedException was thrown: ");
      Locale.lookup(linkedList0, (Collection<Locale>) null);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, ", ", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 10, (-1659), ", ");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getArgName();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "arg", "arg", options0, "Cz!Y+<T1$", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("F|'];oi@SBzw3Ht");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", "The option '", options0, "org.apache.commons.cli.HelpFormatter$OptionComparator", true);
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.rtrim((String) null);
      int int0 = 229;
      String string1 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("\n", true, "%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1039));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-224));
      helpFormatter0.getLeftPadding();
      helpFormatter0.rtrim("   ");
      String string0 = "TAyo[";
      helpFormatter0.setOptPrefix("TAyo[");
      helpFormatter0.setOptPrefix("ezkfj");
      Options options0 = new Options();
      options0.hasOption("--");
      // Undeclared exception!
      try { 
        options0.addOption("a:8@x2Nu43y?^((h^_", "usage: ", false, "ezkfj");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'a:8@x2Nu43y?^((h^_' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.setSyntaxPrefix("GQg=XNh");
      helpFormatter0.setOptPrefix("GQg=XNh");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("GQg=XNh", "myKKTlg#L3).wUJy*y");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // myKKTlg#L3).wUJy*y
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("wm.s:(");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-224));
      helpFormatter0.getLeftPadding();
      helpFormatter0.rtrim("   ");
      helpFormatter0.setOptPrefix("TAyo[");
      String string0 = "ezkfj";
      helpFormatter0.setOptPrefix("ezkfj");
      String string1 = "";
      Options options0 = new Options();
      String string2 = "a:8@x2Nu43y?^((h^_";
      options0.hasOption("--");
      // Undeclared exception!
      try { 
        options0.addOption("a:8@x2Nu43y?^((h^_", "usage: ", false, "ezkfj");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'a:8@x2Nu43y?^((h^_' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      String string0 = "";
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.setSyntaxPrefix("");
      Options options0 = new Options();
      options0.hasLongOption(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      options0.getOption("\n");
      helpFormatter0.defaultNewLine = "arg";
      options0.hasShortOption("arg");
      helpFormatter0.printHelp("arg", options0, false);
      int int0 = 0;
      String string0 = "=`NgfG%\"";
      // Undeclared exception!
      helpFormatter0.printHelp(0, "arg", "arg", (Options) null, "=`NgfG%\"", false);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("3i&AG$L'");
      File file0 = MockFile.createTempFile("arg", "JX&^eR( 't|", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      int int0 = 0;
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "IF,LT";
      objectArray0[3] = (Object) "IF,LT";
      objectArray0[4] = (Object) "IF,LT";
      mockPrintWriter0.printf("IF,LT", objectArray0);
      String string0 = ">";
      helpFormatter0.setLongOptPrefix(">");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "NO_ARGS_ALLOWED");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-224));
      helpFormatter0.getLeftPadding();
      helpFormatter0.rtrim("   ");
      helpFormatter0.setOptPrefix("TAyo[");
      helpFormatter0.setOptPrefix("ezkfj");
      Options options0 = new Options();
      options0.hasOption("--");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setNewLine("");
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setLongOptPrefix("Js.J@>@\"ei?J");
      assertEquals((-224), helpFormatter0.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "T\"f9_Yoo qyt#b0F|";
      helpFormatter0.getArgName();
      helpFormatter0.setLongOptSeparator("arg");
      helpFormatter0.setNewLine("T\"f9_Yoo qyt#b0F|");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLongOptPrefix("arg");
      assertEquals("arg", helpFormatter0.getLongOptPrefix());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "{Xzi\"a";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("{Xzi\"a", "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("java.io.PrintStream", e);
      }
  }
}
