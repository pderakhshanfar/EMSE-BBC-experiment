/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 18:16:40 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          HelpFormatter helpFormatter0 = new HelpFormatter();
          Options options0 = new Options();
          helpFormatter0.defaultDescPad = (-1235);
          // Undeclared exception!
          try { 
            helpFormatter0.printHelp("mOyl2Eo{Z,JEXANJK", "mOyl2Eo{Z,JEXANJK", options0, "", false);
            fail("Expecting exception: NegativeArraySizeException");
          
          } catch(NegativeArraySizeException e) {
             //
             // no message in exception (getMessage() returned null)
             //
             verifyException("org.apache.commons.cli.HelpFormatter", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("W B9D");
      helpFormatter0.defaultOptPrefix = "6w4+lo \f b";
      helpFormatter0.findWrapPos("6w4+lo \f b", 0, 0);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("3RIUi/lBGo5");
      int int0 = (-677);
      String string0 = " ";
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, " ");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator(" | ");
      helpFormatter0.getWidth();
      helpFormatter0.setDescPadding((-5087));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", (Options) null, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-1403));
      helpFormatter0.rtrim("#lwN~s*2Q");
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("#lwN~s*2Q", (Options) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "XCCL'!`");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      helpFormatter0.defaultOptPrefix = "XCCL'!`";
      Options options0 = new Options();
      helpFormatter0.printHelp("XCCL'!`", options0);
      options0.hasOption("-");
      helpFormatter0.printHelp("XCCL'!`", options0, false);
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.setWidth(74);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = null;
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      helpFormatter0.getSyntaxPrefix();
      int int0 = 1666;
      String string0 = "n-XFR|f{*&";
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("`\"$$?kdJwuM", "%", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '`\"$$?kdJwuM' contains an illegal character : '`'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      String string0 = "   ";
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "   ");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Option option1 = new Option("U", "--");
      OptionGroup optionGroup2 = optionGroup0.addOption(option1);
      options0.addOptionGroup(optionGroup2);
      option1.setArgName("jU31o)&");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 10, "org.apache.commons.cli.HelpFormatter$OptionComparator", options1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = null;
      helpFormatter0.rtrim("");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commos.cli.OptidnGrou!";
      Options options0 = new Options();
      Options options1 = options0.addOption("bY", false, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("arg", "-", false, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-4016), options3, 268, 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      OptionGroup optionGroup2 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup1);
      option0.setArgName("");
      MockFile mockFile0 = new MockFile("", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.getSyntaxPrefix();
      Option option1 = new Option("", "--", true, "--");
      OptionGroup optionGroup3 = optionGroup1.addOption(option1);
      mockPrintWriter0.print((Object) optionGroup3);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "4|u,!K7%yI:+");
      helpFormatter0.printHelp("org.apache.commons.cli.OptionGroup", (String) null, options1, (String) null, false);
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.OptionGroup");
      Options options2 = new Options();
      helpFormatter0.printHelp(3, "\n", " ", options2, "usage: ");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" | ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 0, 0, " | ");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("e9Rd;a/0J");
      options0.getOption("\"q>Zr^qO-k):o");
      helpFormatter0.printHelp(45, "<_waJF7aLDQYPD-3a=", "<_waJF7aLDQYPD-3a=", options0, "");
      StringWriter stringWriter0 = new StringWriter(43);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "\"q>Zr^qO-k):o";
      objectArray0[2] = (Object) "\"q>Zr^qO-k):o";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "<_waJF7aLDQYPD-3a=";
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter0.format("-", objectArray0);
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "<_waJF7aLDQYPD-3a=", "", options0, 452, 43, "&]NTOYG'Sx[)");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.setLongOptPrefix("");
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.setDescPadding((-1434));
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptPrefix();
      String string0 = "Ctmq";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = null;
      try {
        option0 = new Option("Bt'%d,", "sl~:t");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'Bt'%d,' contains an illegal character : '''
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "-", true, ">");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      option0.setArgName("");
      option0.clearValues();
      options0.hasShortOption("~E[<v3Kcpt~l");
      helpFormatter0.printHelp(13, ")_GFuljB +-FI%^%&.y3", "7", options1, "");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "-", true, ">");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      option0.setArgName("");
      options0.hasShortOption("~E[<v3Kcpt~l");
      MockFile mockFile0 = new MockFile(")_GFujB +-FI%^%&.y3", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = (-461);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-461), "QfcjfKl00E7@[5@fi", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "org.apache.commons.cli.Option", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup2);
      option0.setArgName("F[");
      options1.hasShortOption(")_GFujB +-FI%^%&.y3");
      MockFile mockFile0 = new MockFile(" ", "-");
      helpFormatter0.printHelp(44, "org.apache.commons.cli.Options", "org.apache.commons.cli.Option", options1, "[");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "org.apache.commons.cli.Option", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup2);
      String string0 = ")_GFujB +-FI%^%&.y3";
      option0.setArgName("F[");
      options1.hasShortOption(")_GFujB +-FI%^%&.y3");
      MockFile mockFile0 = new MockFile(" ", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = (-461);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-461), "", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      helpFormatter0.setLongOptPrefix((String) null);
      options0.getOption("aPlS^YF");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1265, (String) null, (String) null, options0, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(13, "/*!$%&Ll<", "/*!$%&Ll<", options0, "/*!$%&Ll<");
      Options options1 = new Options();
      helpFormatter0.printHelp("/*!$%&Ll<", "/*!$%&Ll<", options1, "/*!$%&Ll<", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 10, "t}E|}", "t}E|}", options0, 13, 10, "E*K]*y(v");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(34, "tyu", "tyu", options1, "tyu");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-383), " ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ]");
      options1.addOption("", true, "usage: ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 64, "jZyk2M*mtT(!+9tT", options0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("q5=tdsG(", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.getOption("org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.printHelp(13, "Illegal option name '", "\n", options0, "--");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3455, "org.apache.commons.cli.HelpFormatter$OptionComparator", "org.apache.commons.cli.HelpFormatter", options0, (-2), 56, "xVi~EfML^!mco");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("line.separator");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 37, ".", ".", options0, 37, 1, (String) null, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "line.separator", "", options0, (-1374), (-283), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      options0.addOption("arg", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup0.toString();
      optionGroup1.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup1);
      StringBuffer stringBuffer1 = new StringBuffer("-");
      MockFile mockFile0 = new MockFile("\n", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-592);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(13, "/*!$%&Ll<", "eL#", options0, "NO_ARGS_ALLOWED");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      options0.addOption("arg", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      StringBuffer stringBuffer1 = new StringBuffer("-");
      MockFile mockFile0 = new MockFile("\n", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options1 = options0.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer1 = new StringBuffer(">");
      MockFile mockFile0 = new MockFile("", "SBSWPo ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "", options1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption((String) null, false, (String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printHelp(13, "Illegal option name '", "", options0, (String) null);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.renderOptions(stringBuffer0, 3455, options2, 3455, 3455);
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 10, "arg", options0);
      mockPrintWriter0.println('E');
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 34, "&B[5a", "arg", options1, 10, 50, "", true);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) stringBuffer0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) options0;
      objectArray0[4] = (Object) "\n";
      objectArray0[5] = (Object) options1;
      objectArray0[6] = (Object) " | ";
      objectArray0[7] = (Object) " | ";
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 3301, (String) null, "org.apache.commons.cli.OptionGroup", options1, 1450, 2, "[R{O", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(7);
      Options options0 = new Options();
      helpFormatter0.getDescPadding();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      BufferedOutputStream bufferedOutputStream1 = new BufferedOutputStream((OutputStream) null, 3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockPrintWriter0.append((CharSequence) "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = new Option("", "-", false, "sHOW4#YpzR/");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "usage: ", "~E9,m Cu[wKK#", options0, 1450, 2561, " | ", false);
      helpFormatter1.printHelp(7, "\n", "--", options0, "");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp(42, " ", "arg", options0, " ");
      StringWriter stringWriter0 = new StringWriter(3063);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('l');
      helpFormatter1.printOptions(printWriter0, 550, options0, 550, 3);
      helpFormatter0.findWrapPos("QMp(.?}X", 550, 64);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(" ");
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 3, (Options) null, 3, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Options options0 = new Options();
      options0.getOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      MockFile mockFile0 = new MockFile("", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 108, "", options0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 108, "usage: ");
      helpFormatter0.printHelp(108, "usage: ", "", options0, "", true);
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter0.renderWrappedText(stringBuffer0, 108, 108, "");
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      String string0 = "WcQNo";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-1648), "hd`_-'", "", options0, 596, 108, "WcQNo");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(7);
      Options options0 = new Options();
      helpFormatter0.getDescPadding();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      BufferedOutputStream bufferedOutputStream1 = new BufferedOutputStream((OutputStream) null, 3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockPrintWriter0.append((CharSequence) "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.renderOptions((StringBuffer) null, (-2433), options0, 74, 3);
      String string0 = helpFormatter1.defaultLongOptPrefix;
      MockFile mockFile0 = new MockFile("[");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockFile0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "-", "|?x!OIpT%iV", options1, "org.apache.commons.cli.AlreadySelectedException");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 12, 3, "usage: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 841, "arg", "-", options0, 841, (-1362), "H3'u`txITW9^*&5Yt", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      Options options1 = options0.addOption("", true, "usage: ");
      Option option0 = new Option("arg", "usage: ");
      Options options2 = options1.addOption(option0);
      options1.getMatchingOptions("\n");
      options2.hasShortOption("");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.printHelp(74, "h~sb!D<FJB%(", "--", options0, ",9X7K55=8_5LsEd", true);
      helpFormatter0.rtrim("?J\"Q9");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(7);
      Options options0 = new Options();
      helpFormatter0.getDescPadding();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 7);
      BufferedOutputStream bufferedOutputStream1 = new BufferedOutputStream((OutputStream) null, 3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockPrintWriter0.append((CharSequence) "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = new Option("", "-", false, "sHOW4#Ypzd R/");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(852, "--", "", options0, "", false);
      helpFormatter1.rtrim("--");
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setLeftPadding(44);
      helpFormatter0.getSyntaxPrefix();
      MockFile mockFile0 = new MockFile("arg");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "--", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(7);
      Options options0 = new Options();
      helpFormatter0.getDescPadding();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      BufferedOutputStream bufferedOutputStream1 = new BufferedOutputStream((OutputStream) null, 3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = new Option("", "-", false, "sHOW4#Ypzd R/");
      Options options1 = options0.addOption(option0);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "usage: ", "~E9,m Cu[wKK#", options1, 1450, 2561, " | ", false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLongOptPrefix("The option '");
      helpFormatter1.printUsage(printWriter0, 7, "", options0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Options options0 = new Options();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.lookup(linkedList0, linkedList1);
      String string0 = "";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      options0.getOptionGroups();
      mockPrintWriter0.printf((Locale) null, "", (Object[]) null);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 117, "cmdLineSyntax not provided", "]bj{DLeK4]]T7Cd9", options0, 39, 39, "cmdLineSyntax not provided");
      int int0 = 3997;
      // Undeclared exception!
      try { 
        options0.addOption("t*p##g\"x[nliQpVaMZf", "|?x!OIpT%iV", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 't*p##g\"x[nliQpVaMZf' contains an illegal character : '*'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("'");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.lookup(linkedList0, linkedList1);
      String string0 = "";
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) optionGroup0;
      objectArray0[1] = (Object) linkedList1;
      objectArray0[2] = (Object) optionGroup0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) options0;
      objectArray0[8] = (Object) optionGroup0;
      mockPrintWriter0.printf((Locale) null, "", objectArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-891), "=-KHx!lvsBeC", "-", (Options) null, (-891), (-891), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 3;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("'");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.lookup(linkedList0, linkedList1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("'", "", (Options) null, "line.separator");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
      int int0 = 52;
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", false, "o7'pk22~!Hm N.a+Am");
      options1.getOptionGroups();
      Options options2 = options1.addOption("", false, "--");
      helpFormatter0.renderOptions(stringBuffer1, 52, options2, 52, 52);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "o7'pk22~!Hm N.a+Am", 52, 36);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("");
      options0.hasShortOption("-");
      options0.hasShortOption("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.rtrim("1rbdNT,RT&.GdPu,{M");
      helpFormatter1.setLongOptSeparator("hc-Il<SmP");
      helpFormatter2.setWidth(74);
      helpFormatter2.getDescPadding();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 1);
      BufferedOutputStream bufferedOutputStream1 = new BufferedOutputStream(bufferedOutputStream0, 1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockPrintWriter0.append((CharSequence) "--");
      helpFormatter2.printHelp(42, "usage: ", "XxdSnpx#4", options0, "bEiV|!=");
      helpFormatter2.getWidth();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1));
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = helpFormatter1.defaultLongOptPrefix;
      MockFile mockFile0 = new MockFile("j");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 3, "usage: ", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(74);
      helpFormatter0.setLongOptSeparator("hc-Il<SmP");
      helpFormatter0.setWidth(31);
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("");
      options0.hasShortOption("-");
      options0.hasShortOption("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.rtrim("1rbdNT,RT&.GdPu,{M");
      helpFormatter1.setLongOptSeparator("hc-Il<SmP");
      helpFormatter2.setWidth(74);
      helpFormatter2.getDescPadding();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 1);
      BufferedOutputStream bufferedOutputStream1 = new BufferedOutputStream(bufferedOutputStream0, 1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockPrintWriter1.append((CharSequence) "--");
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 74, "\n", "", options0, 1993, (-2), "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "--", true, "arg");
      helpFormatter0.printHelp("lg/)>YsAG", (String) null, options2, "--");
      helpFormatter1.rtrim("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 2486, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("");
      options0.hasShortOption("-");
      options0.hasShortOption("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.rtrim("usage: ");
      helpFormatter1.setLongOptSeparator("hc-Il<SmP");
      helpFormatter2.setWidth(74);
      helpFormatter1.rtrim("*");
      helpFormatter2.getOptPrefix();
      MockFile mockFile0 = new MockFile("mO2]Hby,", "arg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3708, 1, "--");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Y}w");
      int int0 = 2;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 52, "Y}w");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.renderOptions(stringBuffer0, 3455, options1, 3455, 3455);
      String string0 = helpFormatter0.defaultLongOptPrefix;
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 10, "--", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-1201), options0, 288, (-1201));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.getOptions();
      Options options2 = options0.addOption("Fq", true, "usage: ");
      Option option0 = new Option("arg", "usage: ");
      Options options3 = options2.addOption(option0);
      options2.getMatchingOptions("\n");
      options1.getMatchingOptions("-");
      options3.hasShortOption("usage: ");
      String string0 = "";
      options3.hasShortOption("");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 10);
      BufferedOutputStream bufferedOutputStream1 = new BufferedOutputStream((OutputStream) null, 3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "Fq");
      mockPrintWriter0.append((CharSequence) stringBuffer0);
      int int0 = 1993;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-975), "[", "(8fWbd-Gn[wBt0d", options0, 1993, (-1962), "Fq", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-3006));
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.rtrim("arg");
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.setWidth(1);
      helpFormatter0.getDescPadding();
      helpFormatter1.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("");
      options0.hasShortOption("-");
      options0.hasShortOption("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.rtrim("1rbdNT,RT&.GdPu,{M");
      helpFormatter1.setLongOptSeparator("hc-Il<SmP");
      helpFormatter2.setWidth(74);
      helpFormatter2.getDescPadding();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 1);
      BufferedOutputStream bufferedOutputStream1 = new BufferedOutputStream(bufferedOutputStream0, 1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockPrintWriter1.append((CharSequence) "--");
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 74, "\n", "[", options0, 1993, (-2), "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.cli.ParseException");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.renderOptions(stringBuffer0, 3455, options2, 3455, 3455);
      String string0 = helpFormatter0.defaultLongOptPrefix;
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 10, "--", options0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.getOptions();
      Options options2 = options0.addOption("Fq", true, "usage: ");
      Option option0 = new Option("arg", "usage: ");
      Options options3 = options2.addOption(option0);
      List list0 = new LinkedList<String>();
      options1.getMatchingOptions("-");
      options3.hasShortOption("usage: ");
      options3.hasShortOption("");
      Options options4 = options3.addOptionGroup(optionGroup0);
      options4.addOption("", false, "pp,.!W{)rk&8");
      options0.addOptionGroup(optionGroup0);
      options0.addOption((String) null, "TM-H5A$~*fNE}", true, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2, "h~sdb!D<FJB%(", "aR}^<", options0, ",987K55D=8_5LsEd", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-2), (-2), "z/&rC; ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setDescPadding((-742));
      helpFormatter0.setLeftPadding((-5275));
      helpFormatter0.getLeftPadding();
      helpFormatter0.rtrim("");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "]");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.rtrim("FK!2");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 10, "FK!2");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      options1.getMatchingOptions("{");
      String string0 = "zvW6MOH5S$0>ZE";
      options0.hasShortOption("zvW6MOH5S$0>ZE");
      options1.hasShortOption("Cannot add value, list full.");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.rtrim((String) null);
      helpFormatter2.setLongOptSeparator("");
      helpFormatter1.setWidth(1);
      helpFormatter1.getDescPadding();
      BufferedOutputStream bufferedOutputStream0 = null;
      try {
        bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, (-1199));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-289);
      boolean boolean0 = false;
      boolean boolean1 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getNewLine();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      String string0 = null;
      mockPrintWriter1.println((String) null);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 1708, "\n");
      helpFormatter0.getLongOptPrefix();
      int int0 = (-2249);
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("]", ">");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ']'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.getOptions();
      Options options2 = options0.addOption("Fq", true, "usage: ");
      Option option0 = new Option("arg", "usage: ");
      Options options3 = options2.addOption(option0);
      options2.getMatchingOptions((String) null);
      options1.getMatchingOptions("-");
      options3.hasShortOption("usage: ");
      options3.hasShortOption("");
      Options options4 = options3.addOptionGroup(optionGroup0);
      options4.addOption("", false, "pp,.!W{)rk&8");
      options0.addOptionGroup(optionGroup0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2, "h~sdb!D<FJB%(", "aR}^<", options0, ",987K55D=8_5LsEd", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 7;
      helpFormatter0.createPadding(1);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "Illegal option name '", options1, "T<o]zh<<4b");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      Options options0 = new Options();
      options0.getMatchingOptions("o=pZ2O+gb@jb)VcQII");
      options0.hasShortOption("aY]U9)4o:.Iv");
      options0.hasShortOption((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.rtrim("usage: ");
      helpFormatter2.setLongOptSeparator("org.apache.commons.cli.OptionValidator");
      helpFormatter1.setWidth(222);
      helpFormatter2.getDescPadding();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 3, "", "usage: ", options0, 3, 3, "--", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      char[] charArray0 = new char[7];
      charArray0[0] = ';';
      charArray0[1] = 'X';
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("hwl");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) ';';
      objectArray0[2] = (Object) "<";
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "hwl";
      PrintWriter printWriter0 = mockPrintWriter0.format("org.apache.commons.cli.HelpFormatter", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      helpFormatter0.printWrapped(printWriter0, 34, "<");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderWrappedText(stringBuffer0, 19, 19, "O+hTNRS4\"]bu|hg%");
      helpFormatter0.defaultWidth = 19;
      MockPrintStream mockPrintStream0 = new MockPrintStream("Bs;u@?o&e");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1334, "usage: ", "AU!0QsY`V", (Options) null, "Bs;u@?o&e");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      int int0 = 32;
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      char[] charArray0 = new char[7];
      charArray0[0] = ';';
      charArray0[1] = 'X';
      charArray0[2] = 'b';
      charArray0[3] = 'k';
      charArray0[4] = '(';
      charArray0[5] = 'C';
      charArray0[6] = ';';
      mockPrintStream0.println(charArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      mockPrintStream0.println((Object) helpFormatter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2, "", (String) null, (Options) null, 32, 2, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-3006));
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim(" ");
      helpFormatter1.setWidth(74);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 2202, "usage: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(7);
      Options options0 = new Options();
      helpFormatter0.printHelp("       ", "", options0, "       ");
      helpFormatter0.setSyntaxPrefix("arg");
      helpFormatter0.setLeftPadding((-823));
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-3006));
      Options options0 = new Options();
      String string0 = "Rp[s}-of@&!qvY~pp&";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Rp[s}-of@&!qvY~pp&", "", options0, "Rp[s}-of@&!qvY~pp&");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      char[] charArray0 = new char[7];
      charArray0[0] = ';';
      charArray0[1] = 'X';
      charArray0[2] = 'b';
      charArray0[3] = 'b';
      MockPrintStream mockPrintStream1 = new MockPrintStream("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-1), "Bs;u@?o&e", "-", (Options) null, "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = (-303);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-303), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.renderOptions(stringBuffer0, 3, options1, 3, 3);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getOptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp(") q*Y?E@UE'Z$\"TD]IL", options0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("Ax", false, "^[");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1), options2, 4658, 3745);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      options0.addOption("arg", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.renderOptions(stringBuffer0, 3455, options1, 996, 996);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getLeftPadding();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", false, "usage: ");
      Options options3 = options2.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer0 = new StringBuffer("}{UKn>KqncGK}~9,");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 4, 10, "");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer1, 0, options3, 1535, 974);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[ARG...]";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[ARG...]");
      int int0 = 2;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2, "[ARG...]", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getOptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      Option option0 = new Option("arg", "usage: ");
      helpFormatter0.setDescPadding(34);
      helpFormatter0.getDescPadding();
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-1), 1362);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.getOptions();
      Options options2 = options1.addOption("arg", "--", true, ")j%DE/(KL(Z*'Xu_CM");
      Option option0 = new Option("arg", "usage: ");
      Options options3 = options2.addOption(option0);
      options1.getMatchingOptions("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.getOption("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((String) null, " ", options3, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getLeftPadding();
      helpFormatter0.rtrim("");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "]");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 13, (-120), ":f;(jt`B(OR0m");
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.findWrapPos(":f;(jt`B(OR0m", 1986, (-1025));
      helpFormatter0.getArgName();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      String string0 = "' contains an illegal character : '";
      Option option0 = null;
      try {
        option0 = new Option("}k4}yK6f", "%>%-b[}ciS*MjI8KUD", false, "' contains an illegal character : '");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '}k4}yK6f' contains an illegal character : '}'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("T(");
      options0.addOption("", true, "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("org.apache.commons.cli.HelpFormatter$1");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1353, 3, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "usage: ");
      helpFormatter0.setDescPadding(34);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos("arg", (-1), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultWidth = 3745;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "arg", false, (String) null);
      optionGroup0.setSelected(option0);
      options0.addOptionGroup(optionGroup0);
      Option option1 = new Option((String) null, "--", false, ",");
      helpFormatter0.rtrim("YX!kTKrf{8kHYA;|6]");
      helpFormatter0.getNewLine();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.getOptions();
      Options options2 = options1.addOption("arg", "--", true, ")j%DE/(KL(Z*'Xu_CM");
      Option option0 = new Option("arg", "usage: ");
      Options options3 = options2.addOption(option0);
      options1.addOption("Fq", true, "usage: ");
      OptionGroup optionGroup1 = new OptionGroup();
      Options options4 = options3.addOptionGroup(optionGroup1);
      StringBuffer stringBuffer0 = new StringBuffer(0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-494), options4, 59, (-47));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.rtrim("");
      String string1 = "4B:TsRX";
      File file0 = MockFile.createTempFile("4B:TsRX", "usage: ", (File) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      int int0 = 425;
      String string2 = "--";
      Options options0 = null;
      int int1 = (-181);
      char[] charArray0 = new char[2];
      charArray0[0] = '';
      charArray0[1] = '[';
      // Undeclared exception!
      try { 
        mockPrintWriter0.write(charArray0, 1414, 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1108);
      Options options0 = new Options();
      helpFormatter0.defaultLongOptPrefix = "J:DE;a6&xXG&e5=#N]";
      helpFormatter0.printHelp("8kt`qQvx?7M", options0, false);
      helpFormatter0.setNewLine("8kt`qQvx?7M");
      helpFormatter0.createPadding(74);
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      Options options0 = new Options();
      helpFormatter0.printHelp(":6F?x4p9\"", "", options0, ":6F?x4p9\"");
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setLeftPadding((-823));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setOptionComparator((Comparator) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 3745;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultWidth = 3745;
      String string0 = "YX!kTKrf{8kHYA;|6]";
      String string1 = "~Z\"Yn2OJ@Voe$8Y5";
      String string2 = "jSd{:";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string3 = "'";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options1.addOption("'", true, "q)C@C8`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '''
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2544;
      helpFormatter0.createPadding(2544);
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      int int1 = (-514);
      String string0 = "V:8r!?,U";
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "arg", " [ARG]", (Options) null, " [ARG]");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setWidth((-352));
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options1.addOption("\n", true, "bTMcQ4OhO=+h8)/CpS");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "", "", (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setWidth((-352));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("w$y82'%m");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      int int0 = (-2);
      mockPrintWriter0.print((double) (-2));
      mockPrintWriter0.write("usage: ", 1, (-2063));
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "usage: ", "w$y82'%m", options0, "w$y82'%m");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "blt>F._`qw";
      helpFormatter0.setLongOptSeparator("blt>F._`qw");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, (Options) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      String string0 = "81FLEl1?D";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("\n", "--", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "aOZOjODM>", options0, "org.apache.commons.cli.HelpFormatter$OptionComparator", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("JE3wV<r7Ka3g14");
      helpFormatter0.defaultOptPrefix = "fc";
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("U_uQXSq7UeTOju*N");
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptSeparator();
      int int0 = (-271);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-271));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine(" ");
      helpFormatter0.setLeftPadding(32);
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "O#Dr7bS-=`5O";
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 13, (-1697), "O#Dr7bS-=`5O");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("O#Dr7bS-=`5O", (-1025), (-1025));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "-";
      helpFormatter0.setSyntaxPrefix("-");
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("usage: ", false, "M$:[,1yT1R>_,T");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      String string0 = "O+hTNRS4\"]bu|hg%";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "O+hTNRS4\"]bu|hg%");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-3006));
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim(" ");
      helpFormatter1.setWidth(74);
      helpFormatter1.getDescPadding();
      helpFormatter1.setArgName("");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      String string0 = "--";
      Options options0 = new Options();
      options0.hasLongOption("--");
      Option option0 = null;
      try {
        option0 = new Option("--", "arg", false, "XD/_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      helpFormatter0.defaultOptPrefix = " :: ";
      helpFormatter0.defaultSyntaxPrefix = " :: ";
      helpFormatter0.setDescPadding(1);
      String string0 = "2`sY(%K/LZp]f pr:y.";
      String string1 = "2>n|?yk[1C(";
      Options options0 = null;
      String string2 = "<";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" :: ", "2`sY(%K/LZp]f pr:y.", (Options) null, ",'!`me\"Xt0y&36s`)", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(7);
      Options options0 = new Options();
      helpFormatter0.getDescPadding();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 7);
      BufferedOutputStream bufferedOutputStream1 = new BufferedOutputStream((OutputStream) null, 3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockPrintWriter0.append((CharSequence) "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = new Option("", "-", false, "sHOW4#Ypzd R/");
      Options options1 = options0.addOption(option0);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "usage: ", "~E9,m Cu[wKK#", options1, 1450, 2561, " | ", false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLongOptPrefix("The option '");
      helpFormatter2.printHelp("-", options0);
      helpFormatter1.rtrim("       ");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.setLongOptPrefix("org.apache.commons.cli.HelpFormatter$1");
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.setDescPadding((-1434));
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptPrefix();
      String string0 = "Ctmq";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = null;
      try {
        option0 = new Option("Bt'%d,", "sl~:t");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'Bt'%d,' contains an illegal character : '''
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.renderOptions(stringBuffer0, 3455, options2, 3455, 3455);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 10;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ATy}w`");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      helpFormatter0.getArgName();
      helpFormatter0.getWidth();
      helpFormatter0.defaultLeftPad = 76;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(10, "arg", "arg", (Options) null, "arg", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg", false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) bufferedOutputStream0;
      objectArray0[6] = (Object) bufferedOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.format("-", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-1), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.getOptions();
      Options options2 = options1.addOption("arg", "--", true, ")j%DE/(KL(Z*'Xu_CM");
      Option option0 = new Option("arg", "usage: ");
      Options options3 = options2.addOption(option0);
      options1.getMatchingOptions("-");
      options3.hasShortOption("vj)ZU");
      options3.hasShortOption("");
      String string0 = null;
      Options options4 = options3.addOption("", true, (String) null);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "Fq", "Fq", options4, "aR}^<", true);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("\"ICV>El0|x;!b yu)>$");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 32;
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1491, 32, "\"ICV>El0|x;!b yu)>$");
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) stringBuffer1, (-1), 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("");
      Options options1 = options0.addOption("", false, "");
      helpFormatter0.printHelp("cH@UO*9;k9po~R,", "org.apache.commons.cli.AlreadySelectedException", options1, (String) null, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      try { 
        optionGroup0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.OptionGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OutputStream outputStream0 = null;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(212, "UWF)q~U4FrB", "UWF)q~U4FrB", (Options) null, "UWF)q~U4FrB", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1763;
      String string0 = " ";
      String string1 = null;
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("-", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
