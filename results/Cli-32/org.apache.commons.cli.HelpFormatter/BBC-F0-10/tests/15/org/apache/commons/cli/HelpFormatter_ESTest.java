/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 20:26:34 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.util.Comparator;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", true, " ");
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.renderWrappedText(stringBuffer0, 1540, 16, "_");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1);
      helpFormatter0.rtrim("LH:ZU ;@h(ocuHb");
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      options0.hasLongOption("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "LH:ZU ;@h(ocuHb", "org.apache.commons.cli.Option", options0, "LH:ZU ;@h(ocuHb", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setDescPadding(2123);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getNewLine();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", "-", options0, " ");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "NO_ARGS_ALLOWED");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "Uv93%})`", "Uv93%})`", options1, "[ARG...]", false);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.createPadding(13);
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)63);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (int) (byte)111, "\n", "\n", options0, 111, (-318), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = null;
      helpFormatter0.getArgName();
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      helpFormatter0.printHelp(0, " ", "--", (Options) null, " ");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1356, "[e-fI", (String) null, options0, 1356, 1356, "[e-fI", true);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", true, " ");
      options0.helpOptions();
      options0.addOption("arg", false, "arg");
      int int0 = 14;
      helpFormatter0.printHelp(14, "arg", "arg", options0, "arg");
      String string0 = " ] [ long ";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(" ", " ] [ long ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  ] [ long 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.defaultLongOptPrefix = "";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.renderOptions(stringBuffer0, 74, options1, 74, 63);
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      int int0 = 1;
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 34, 1, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", (String) null, false, (String) null);
      helpFormatter0.printHelp(109, "yGu}L4", "", options1, ">");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "F!T;VIWB#4ZqG";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("^,9j:eO$nJ%9p%<'Tp", "", (Options) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 32, "g'ZY+bOE", "-", options0, 3, 74, "H+-n,qJuG", true);
      helpFormatter1.findWrapPos("[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", 3, 3);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("RKya!R", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("C*L&\"c]p]QqJs.h\"{");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 62, "F-Mi2=]", "A3Pv", options0, 114, 44, (String) null, false);
      helpFormatter0.setWidth(62);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(63);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Oib{m1> /");
      Options options1 = options0.addOption((String) null, true, ",Vz_gBw=6I(1I$cYVc%");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 44, "-", ",Vz_gBw=6I(1I$cYVc%", options1, 94, 5546, "", true);
      helpFormatter0.setWidth(32);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" 6!OfI\")~ka20&/", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", false, " ");
      helpFormatter0.setLongOptSeparator(" ");
      String string0 = helpFormatter0.defaultSyntaxPrefix;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      StringBuffer stringBuffer0 = new StringBuffer();
      Option option0 = new Option("", false, "usage: ");
      Options options1 = options0.addOption(option0);
      helpFormatter0.renderOptions(stringBuffer0, 1328, options1, 8, 1480);
      helpFormatter0.printHelp(1050, "aIp;@MMD<w;lB.h.Y", "usage: ", options1, "");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "   ";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "   ");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 157, options0, 157, 157);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "arg";
      Options options0 = null;
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('>');
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "-", "e", (Options) null, 0, 21, "e", false);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      stringBuffer0.chars();
      helpFormatter1.renderWrappedText(stringBuffer0, 74, 74, "\n");
      StringBuffer stringBuffer1 = new StringBuffer(3);
      helpFormatter1.getArgName();
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "--", "rC", options0, 64, 726, "-", true);
      helpFormatter1.printHelp(119, "[ option: ", "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", options0, "-");
      helpFormatter0.getWidth();
      Options options1 = new Options();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "arg", "--", options1, 0, 74, "", true);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 3, options0, 18, 18);
      helpFormatter0.defaultSyntaxPrefix = "org.apache.commons.cli.OptionValidator";
      helpFormatter0.createPadding(9);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 9, 9, "IaZ{O<T\"dEhx%wR,+rM");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 74, "usage: ");
      StringBuffer stringBuffer1 = new StringBuffer();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter1.renderOptions(stringBuffer0, 64, options1, 1, 74);
      helpFormatter0.printHelp(37, "\n", "arg", options0, (String) null);
      Options options2 = options1.addOption("nnA", false, "\u0003%<H-");
      helpFormatter1.printHelp("xF,BvtLz>DKU2", "xF,BvtLz>DKU2", options2, "xF,BvtLz>DKU2");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, " ");
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 375, "org.apache.commons.cli.HelpFormatter$OptionComparator", "", options1, 375, 1356, "[", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(63, (String) null, " ] [ long ", options0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = helpFormatter1.defaultOptPrefix;
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer0, 0, 24, "   ");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("usage: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 36, "?TMYY+", "usage: ", options0, 2196, 3369, "line.separator", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2196, "8>GlBwvTbA", "8>GlBwvTbA", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, " ");
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      helpFormatter0.printHelp(375, "}o", "#JJxAG0grz5", options1, "usage: ");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setNewLine("");
      MockPrintStream mockPrintStream0 = new MockPrintStream("8>GlBwvTbA");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Options options0 = null;
      int int0 = 1328;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1328, "8>GlBwvTbA", "8>GlBwvTbA", (Options) null, 2407, 74, "u{0(b%$", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      MockPrintStream mockPrintStream0 = new MockPrintStream("8>GlBwvTbA");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1328, "&O?.f#]zic", "n6hB`", (Options) null, 2376, (-904), "y{H25-/", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      MockPrintStream mockPrintStream0 = new MockPrintStream("8>GlBwvTbA");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      helpFormatter0.setLeftPadding((-204));
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1328, "(|]", "", (Options) null, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      Options options0 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream("<");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      mockPrintWriter0.println();
      int int1 = 58;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 58, "<", "<", options0, 0, 461, "<");
      helpFormatter0.setLongOptSeparator("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream("|!e_CB");
      mockPrintStream0.print(10);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      helpFormatter0.printHelp(1328, "}o", "(|]", options0, "");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      MockPrintStream mockPrintStream0 = new MockPrintStream("&3$d''kI??*; 31b");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("usage: ");
      mockPrintWriter0.format("arg", (Object[]) null);
      mockPrintStream0.printf("--", (Object[]) null);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "@<<bur&6 ");
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 74, "-");
      mockPrintWriter0.println("--");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLongOptSeparator("\n");
      helpFormatter2.getDescPadding();
      helpFormatter1.renderWrappedText(stringBuffer0, 3, 3, "usage: ");
      String string0 = "W";
      String string1 = "F.,R|bgfmYnGs:=";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printOptions(mockPrintWriter0, 1, options0, 1, 74);
      Option option0 = null;
      try {
        option0 = new Option("-", "p/%Ky", true, "org.apache.commons.cli.Option");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 3, "   ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('.');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3407, (-1927), "org.apache.commons.cli.HelpFormatter");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      MockPrintStream mockPrintStream0 = new MockPrintStream("&3$d''kI??*; 31b");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.format("arg", (Object[]) null);
      mockPrintStream0.printf("--", (Object[]) null);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "nI`(Wl");
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 74, "-");
      mockPrintWriter0.println("--");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLongOptSeparator("\n");
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      helpFormatter1.renderWrappedText(stringBuffer0, 3, 3, "usage: ");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 1, "W", "F.,R|bgfmYnGs:=", options0, 74, 74, "9M2qj", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 74, "-");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLongOptSeparator("\n");
      helpFormatter2.defaultDescPad = 34;
      helpFormatter2.getDescPadding();
      helpFormatter1.renderWrappedText(stringBuffer0, 3, 3, "usage: ");
      Options options0 = new Options();
      helpFormatter0.getOptPrefix();
      helpFormatter1.printHelp("org.apache.commons.cli.HelpFormatter", "dn>!Z}gh@}p_r UUe", options0, "F.,R|bgfmYnGs:=", false);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer("?A0H/ ,ejUA0d'8%");
      helpFormatter0.renderWrappedText(stringBuffer0, 1328, 1328, "(|]");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      StringBuffer stringBuffer0 = new StringBuffer(272);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 971, (Options) null, 272, 272);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "),], ");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      int int0 = 17;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[");
      Options options0 = new Options();
      helpFormatter0.printHelp(17, "' contains an illegal character : '", "\n", options0, "),], ");
      helpFormatter0.printHelp("),], ", "\n", options0, "' contains an illegal character : '");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 1197, options0, (-1178), (-72));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 74, 1, "\n");
      StringBuffer stringBuffer2 = helpFormatter0.renderOptions(stringBuffer1, 157, options0, 74, 74);
      helpFormatter0.renderOptions(stringBuffer2, 1, options0, 34, 6);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setDescPadding(3);
      helpFormatter0.getWidth();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      MockPrintWriter mockPrintWriter1 = null;
      try {
        mockPrintWriter1 = new MockPrintWriter((Writer) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "]", true, "org.apache.commons.cli.OptionGroup");
      helpFormatter0.defaultSyntaxPrefix = "org.apache.commons.cli.OptionGroup";
      options0.toString();
      helpFormatter0.renderOptions(stringBuffer0, 1197, options1, 0, 157);
      helpFormatter0.setDescPadding(74);
      helpFormatter0.getWidth();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      helpFormatter0.createPadding(0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer1 = new StringBuffer(74);
      helpFormatter1.renderWrappedText(stringBuffer1, 74, 3, "-");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 34, (String) null, (String) null, options0, 74, 74, "80FQvb]VZR-@)", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      MockPrintStream mockPrintStream0 = new MockPrintStream("&3$d''kI??*; 31b");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.format("arg", (Object[]) null);
      mockPrintStream0.printf("--", (Object[]) null);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "nI`(Wl");
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 74, "-");
      mockPrintWriter0.println("--");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLongOptSeparator("\n");
      helpFormatter2.getDescPadding();
      helpFormatter1.renderWrappedText(stringBuffer0, 3, 3, "usage: ");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 3, "W", "F.,R|bgfmYnGs:=", options0, 74, 74, "9M2qj", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, (-1675), 104, "line.separator");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      MockPrintStream mockPrintStream0 = new MockPrintStream("&3$d''kI??*; 31b");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("o7qI[X6}VA?");
      PrintWriter printWriter0 = mockPrintWriter0.format("--", (Object[]) null);
      mockPrintStream0.printf("G7S", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage(printWriter0, 1, "G7S");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(370);
      helpFormatter0.setNewLine("                                                                                                                                                                                                                                                                                                                                                                                  ");
      MockPrintStream mockPrintStream0 = new MockPrintStream("                                                                                                                                                                                                                                                                                                                                                                                  ");
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 44, options0, 370, 58);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 44, 58, "                                                                                                                                                                                                                                                                                                                                                                                  ");
      stringBuffer2.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-929), "", "", options0, 370, 44, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, (String) null);
      options1.addOption((String) null, "", true, (String) null);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, (String) null, options0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 627, (String) null, options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ">";
      helpFormatter0.setWidth(627);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "line.separator", (Options) null, ">");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Options options0 = new Options();
      String string0 = null;
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getOptions();
      String string1 = "";
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 0, 881);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = (-6);
      Options options0 = new Options();
      options0.addOption("arg", true, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-6), (String) null, options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(370);
      helpFormatter0.setNewLine("                                                                                                                                                                                                                                                                                                                                                                                  ");
      MockPrintStream mockPrintStream0 = new MockPrintStream("                                                                                                                                                                                                                                                                                                                                                                                  ");
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 44, options0, 370, 58);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 44, 58, "                                                                                                                                                                                                                                                                                                                                                                                  ");
      stringBuffer2.append((CharSequence) "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer2, 64, (-258), "                                                                                                                                                                                                                                                                                                                                                                                  ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      options0.addOption("arg", "]", true, "org.apache.commons.cli.OptionGroup");
      Options options1 = new Options();
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 2725, 3687);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(370);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 1, options0, 7, 127);
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 372, "");
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "cXb[p@}xo";
      Option option0 = null;
      try {
        option0 = new Option("cXb[p@}xo", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'cXb[p@}xo' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 1, "NO_ARGS_ALLOWED", "%{&+Ub /i", options0, 3, 1274, "Wk`7g@C");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      int int0 = 32;
      helpFormatter0.setWidth(32);
      Options options0 = null;
      String string0 = "line.separator";
      int int1 = (-577);
      StringWriter stringWriter0 = new StringWriter(9);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "[ Options: [ short ");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setNewLine("");
      MockPrintStream mockPrintStream0 = new MockPrintStream("8>GlBwvbA");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      String string1 = "\\(|]";
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "(|]";
      objectArray0[1] = (Object) "(|]";
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      MockFile mockFile0 = new MockFile("arg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.checkError();
      mockPrintStream0.println('V');
      int int0 = 0;
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "usage: ", 0, 3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      mockPrintStream0.flush();
      String string1 = "4#a;l:Y`GdVC8*";
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "4#a;l:Y`GdVC8*");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(44);
      helpFormatter0.createPadding(370);
      helpFormatter0.setNewLine("                                                                                                                                                                                                                                                                                                                                                                                  ");
      MockPrintStream mockPrintStream0 = new MockPrintStream("                                                                                                                                                                                                                                                                                                                                                                                  ");
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderWrappedText(stringBuffer0, 44, 44, "                                                                                                                                                                                                                                                                                                                                                                                  ");
      helpFormatter0.printHelp(24, "--", "?4f0[", options0, "KBH");
      StringBuffer stringBuffer1 = new StringBuffer(1);
      helpFormatter1.renderOptions(stringBuffer1, 1, options0, 370, 653);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) optionGroup0;
      objectArray0[1] = (Object) "usage: ";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) "usage: ";
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "usage: ";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.format("usage: ", objectArray0);
      helpFormatter0.printUsage(printWriter0, 13, "7n8L*9'@^C", options0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getOptions();
      options0.hasShortOption(" | ");
      options1.hasLongOption((String) null);
      options0.getOptionGroups();
      helpFormatter0.printHelp(9, "5\"H\"tFFbcU+cmK>vjOp", "", options0, "D6d45yJ_v");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 32;
      helpFormatter0.defaultDescPad = 32;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", true, "--");
      Option option0 = new Option("", "\n");
      Options options3 = options2.addOption(option0);
      options3.addOption("arg", false, "arg");
      OptionGroup optionGroup1 = new OptionGroup();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("lc_rZZ7BpNl_");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 32, "arg", options0);
      Options options4 = options0.addOptionGroup(optionGroup0);
      options3.getOptions();
      options4.hasShortOption("");
      options0.hasLongOption(" ");
      options0.getOptionGroups();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      StringWriter stringWriter0 = new StringWriter(1);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "\n", (-2), 63);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      helpFormatter0.setArgName("W<$Hu0n/}l51yqCS=");
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setDescPadding(366);
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setArgName("?C1AV8D4");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "]", true, "org.apache.commons.cli.OptionGroup");
      options0.toString();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 1197, options1, 0, 157);
      helpFormatter0.setDescPadding(3687);
      helpFormatter0.getWidth();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter1;
      Object object0 = new Object();
      objectArray0[1] = object0;
      stringBuffer1.insert(3, (-5774));
      PrintWriter printWriter0 = mockPrintWriter1.printf(" ", objectArray0);
      printWriter0.checkError();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 31, "", "org.apache.commons.cli.OptionGroup", options0, 157, 40, "Qk\"", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("8(~H)eF 2Y`i");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("Tg<v", options0);
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator0);
      helpFormatter0.setLeftPadding(539);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 32;
      MockFile mockFile0 = new MockFile((File) null, "");
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      helpFormatter0.setDescPadding(1);
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.createPadding(34);
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("--", "Zw9");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // Zw9
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 627, "9B* :~R`3cJ[XXy*", (String) null, options0, 627, 2034, ">");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      MockPrintStream mockPrintStream0 = new MockPrintStream("8>GlBwvbA");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      helpFormatter0.createPadding(1328);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1328, "(|]", "", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      Options options0 = new Options();
      options0.addOption("arg", "]", true, "org.apache.commons.cli.OptionGroup");
      StringBuffer stringBuffer1 = new StringBuffer();
      Options options1 = new Options();
      helpFormatter0.renderOptions(stringBuffer1, 1197, options0, 3687, 1197);
      helpFormatter0.renderWrappedText(stringBuffer0, 3687, 3687, "");
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "";
      Option option0 = null;
      try {
        option0 = new Option("\n", false, "UC1;~o2)p6j!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(370);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 3, options0, 1, 74);
      helpFormatter0.renderWrappedText(stringBuffer1, 3, 372, "'");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = null;
      String string0 = ")UO";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-1296), ")UO", " ", (Options) null, "[");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.checkError();
      mockPrintStream0.println('V');
      mockPrintStream0.append((CharSequence) "usage: ", 0, 3);
      helpFormatter0.setWidth(123);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = " ";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("%rS\"htJ$.", "<", (Options) null, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      MockPrintStream mockPrintStream0 = new MockPrintStream("8>GlBwvbA");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) ".4OD5DI@fi";
      helpFormatter0.defaultDescPad = 878;
      objectArray0[1] = (Object) ".4OD5DI@fi";
      helpFormatter0.setSyntaxPrefix("nI`(Wl");
      PrintWriter printWriter0 = mockPrintWriter0.format(".4OD5DI@fi", (Object[]) null);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("8>GlBwvbA");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      mockPrintStream0.printf(" :: ", objectArray0);
      helpFormatter0.getLeftPadding();
      helpFormatter0.printWrapped(printWriter0, 31, "E[plc@Wgh!w>h &A2TF");
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "   ");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(74, "abb0", "--", (Options) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "", (Options) null, "e(j>_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ";
      helpFormatter0.createPadding(370);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 3, options0, 1, 74);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 3, 372, "'");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer2, 3, options0, 3, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, true);
      int int0 = 1880;
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      stringBuffer0.trimToSize();
      helpFormatter0.setLeftPadding(1880);
      int int1 = 1800;
      options0.getOption("*)tuBZ76XG`");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1880, options0, (-1582), 1800);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 480;
      helpFormatter0.createPadding(480);
      helpFormatter0.setLongOptSeparator("                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ");
      helpFormatter0.rtrim("");
      String string0 = "LKI{";
      MockFile mockFile0 = new MockFile("LKI{", "arg");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "DfhYPuK");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // DfhYPuK
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      int int0 = 0;
      helpFormatter0.setDescPadding((-671));
      String string0 = "eD|!K>VIfv5Z[GK";
      helpFormatter0.defaultArgName = "eD|!K>VIfv5Z[GK";
      int int1 = 2595;
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("\n", "N=9", true, ".BDp[&YE`(.,B:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      helpFormatter0.printHelp("|<To", options0, false);
      MockFile mockFile0 = new MockFile("arg", "");
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      int int0 = 970;
      String string0 = "4";
      String string1 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      Options options0 = new Options();
      boolean boolean0 = true;
      String string2 = "";
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "tcp32.$J]0l0M";
      String string1 = "o_:\"@u9K'sz$?qG ~7";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(992, "tcp32.$J]0l0M", "o_:\"@u9K'sz$?qG ~7", (Options) null, "tcp32.$J]0l0M", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "9fd";
      helpFormatter0.setNewLine("9fd");
      int int0 = (-2689);
      helpFormatter0.defaultArgName = "9fd";
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.defaultDescPad = (-2689);
      helpFormatter0.defaultOptPrefix = "aLN_zX`g#0";
      Options options0 = null;
      helpFormatter0.setArgName("");
      helpFormatter0.defaultDescPad = (-2689);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(44, "2_<0vOv/", " ", (Options) null, "2_<0vOv/", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "]", true, "org.apache.commons.cli.OptionGroup");
      options0.toString();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 1197, options1, 0, 157);
      helpFormatter0.setDescPadding(3687);
      helpFormatter0.getWidth();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter1;
      Object object0 = new Object();
      objectArray0[1] = object0;
      stringBuffer1.insert(3, (-5774));
      PrintWriter printWriter0 = mockPrintWriter1.printf(" ", objectArray0);
      printWriter0.println("-");
      printWriter0.checkError();
      helpFormatter0.printHelp(74, "!U-g[1,", "[ Options: [ short java.util.HashMap@0000000005 ] [ long {]=[ option: arg ]  [ARG] :: org.apache.commons.cli.OptionGroup ]} ]", options1, (String) null, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 31, "", "org.apache.commons.cli.OptionGroup", options0, 157, 40, "Qk\"", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.createPadding(0);
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.defaultNewLine = "";
      String string0 = "";
      helpFormatter0.defaultNewLine = "";
      stringBuffer0.ensureCapacity(0);
      stringBuffer0.append(575.3F);
      String string1 = "H@0<SU";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, "H@0<SU");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      MockPrintStream mockPrintStream0 = new MockPrintStream("&3$d''kI??*; 31b");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("usage: ");
      mockPrintWriter0.format("arg", (Object[]) null);
      mockPrintStream0.printf("--", (Object[]) null);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "nI`(Wl");
      mockPrintWriter0.println("--");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLongOptSeparator("\n");
      helpFormatter2.getDescPadding();
      helpFormatter1.renderWrappedText(stringBuffer0, 3, 3, "usage: ");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.defaultWidth = (-2);
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.rtrim("'");
      helpFormatter0.setDescPadding(1217);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "'", "'", options0, "]", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      MockFile mockFile0 = new MockFile("arg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.checkError();
      mockPrintStream0.println('V');
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "usage: ", 0, 3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      String string1 = "4#a;l:Y`GdVC8*";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "4#a;l:Y`GdVC8*");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 1, 0, "The option '");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = options0.addOption("arg", "]", true, "org.apache.commons.cli.OptionGroup");
      int int0 = 0;
      int int1 = 157;
      options0.toString();
      helpFormatter0.renderOptions(stringBuffer0, 1197, options1, 0, 157);
      helpFormatter0.setDescPadding(3687);
      helpFormatter0.getWidth();
      String string0 = "-";
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter1;
      Object object0 = new Object();
      objectArray0[1] = object0;
      PrintWriter printWriter0 = mockPrintWriter1.printf(" ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, (-11), options1, 0, 3687);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      int int0 = 3;
      helpFormatter0.setWidth(3);
      Options options0 = new Options();
      options0.toString();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
      helpFormatter0.createPadding(3);
      helpFormatter0.defaultOptPrefix = " ] [ long ";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.OptionGroup");
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getArgName();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setArgName("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      int int0 = 1050;
      helpFormatter0.findWrapPos("%][C0va$fBCJ", 1050, 1050);
      helpFormatter0.setArgName((String) null);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", "l[YY;24u'F`~P{W2Xr", true, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("h9:V>-<5gitHc?P~7", "=SJ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // =SJ
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printHelp(0, ">", (String) null, (Options) null, ">");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setLongOptSeparator(" :: ");
      helpFormatter0.createPadding(0);
      helpFormatter0.getWidth();
      String string0 = null;
      Options options0 = new Options();
      boolean boolean0 = true;
      String string1 = "(_o1%yNp";
      Options options1 = options0.addOption("arg", "]F>Z", true, "(_o1%yNp");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "regYWZkv;", (String) null, options1, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      int int0 = (-2813);
      StringBuffer stringBuffer0 = new StringBuffer(3007);
      int int1 = (-2);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options1.addOption("usage: ", "", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1394;
      helpFormatter0.setWidth(1394);
      helpFormatter0.getOptionComparator();
      String string0 = "";
      String string1 = "&)SDT-;&%mR";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1394, "", "&)SDT-;&%mR", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String string0 = "";
      Options options0 = new Options();
      options0.hasShortOption(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(370);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 3, options0, 1, 74);
      helpFormatter0.renderWrappedText(stringBuffer1, 3, 372, "'");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "usage: ");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((String) null, options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      String string0 = "jb?";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.hasOption("0nDpn'Oo)F]gBm");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options1.addOption("   ", true, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '   ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "AaP(LBTb|SU]";
      helpFormatter0.rtrim("AaP(LBTb|SU]");
      int int0 = 110;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      helpFormatter0.setWidth(110);
      helpFormatter0.getOptionComparator();
      helpFormatter0.defaultSyntaxPrefix = "AaP(LBTb|SU]";
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 355, "AaP(LBTb|SU]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) stringWriter1;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) stringWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("arg", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-1751), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      MockPrintStream mockPrintStream0 = new MockPrintStream("8>GlBwvbA");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      String string0 = "\\(|]";
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "(|]";
      objectArray0[1] = (Object) "(|]";
      helpFormatter0.setSyntaxPrefix("nI`(Wl");
      PrintWriter printWriter0 = mockPrintWriter0.format("(|]", objectArray0);
      mockPrintStream0.printf(" :: ", objectArray0);
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "   ");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, " ");
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      helpFormatter0.printHelp(1638, "w>9O", "w>9O", options1, "");
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 0;
      String string0 = "";
      Options options0 = new Options();
      options0.addOption("arg", true, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, (String) null, options0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      MockPrintStream mockPrintStream0 = new MockPrintStream("&3$d''kI??*; 31b");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("usage: ");
      mockPrintWriter0.format("arg", (Object[]) null);
      mockPrintStream0.printf("\n", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, (-3501), "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("--", "usage: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // usage: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.setLeftPadding(1653);
      String string0 = "k[b$}\"2>";
      helpFormatter0.setArgName("line.separator");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      mockPrintWriter0.append((CharSequence) "line.separator");
      String string1 = "u";
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format("u", objectArray0);
      mockPrintWriter0.print("Rfge }>");
      helpFormatter0.printUsage(printWriter0, 1653, "u");
      helpFormatter0.setNewLine("k[b$}\"2>");
      helpFormatter0.getNewLine();
      helpFormatter0.getArgName();
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("line.separator", 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix((String) null);
      String string0 = "MY.|U(sb5n=wCS0u";
      helpFormatter0.defaultLongOptPrefix = "MY.|U(sb5n=wCS0u";
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.setOptPrefix("-");
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " B3~p8gRY1x/J*=p";
      helpFormatter0.defaultDescPad = 32;
      int int0 = 13;
      helpFormatter0.setWidth(13);
      helpFormatter0.setWidth(13);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" B3~p8gRY1x/J*=p", " B3~p8gRY1x/J*=p", (Options) null, "line.separator");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 9;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 9, 9, "IaZ{O<T\"dEhx%wR,+rM");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      MockPrintStream mockPrintStream0 = new MockPrintStream("8>GlBwvbA");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "(|]";
      helpFormatter0.defaultDescPad = 878;
      objectArray0[1] = (Object) "(|]";
      helpFormatter0.setSyntaxPrefix("nI`(Wl");
      PrintWriter printWriter0 = mockPrintWriter0.format("(|]", objectArray0);
      mockPrintStream0.printf(" :: ", objectArray0);
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "   ");
  }
}
