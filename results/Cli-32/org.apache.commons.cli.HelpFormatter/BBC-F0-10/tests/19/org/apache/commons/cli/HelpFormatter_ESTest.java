/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 20:27:07 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.ObjectOutputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "usage: ", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.defaultNewLine = "";
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 97, options2, 97, 97);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 9, (-1123), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("5", "-");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option1 = new Option("", " ");
      optionGroup0.addOption(option1);
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("5", "g}o]!", options0, "g}o]!", true);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Option option0 = new Option("arg", "5");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setLeftPadding((-1));
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("5", "5", options0, "5", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix(";jyo=d62KUD<=H");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("s", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 895;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      String string0 = null;
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.defaultDescPad = 895;
      helpFormatter0.getLongOptPrefix();
      String string1 = null;
      String string2 = "nWh4E";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null, "nWh4E");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // nWh4E
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("5yAh=n[$C");
      helpFormatter0.findWrapPos("?Hj4pq0X^uAL\"?5gV", 110, 405);
      helpFormatter0.setLeftPadding((-1891));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.defaultDescPad = (-1891);
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter1.format(locale0, "aEvq'E/'dD^", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 405, "?Hj4pq0X^uAL\"?5gV", "aEvq'E/'dD^", options0, 10, (-1891), "5yAh=n[$C");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      String string0 = "usage: ";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 3, (-520), "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", true, "arg");
      StringBuffer stringBuffer0 = new StringBuffer(1);
      int int0 = 17;
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 17);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultWidth = (-2446);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("0@", "", options0, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1846), "", "", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("0d5Cy", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = (-2);
      String string0 = "usage: ";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-2), (-520), "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      Options options1 = options0.addOption("arg", true, "arg");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", "org.apache.commons.cli.HelpFormatter$1", options0, "org.apache.commons.cli.HelpFormatter$1");
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "$C,1Z*WObiqPh=+1`'4", "", options1, 0, 0, "PH");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(474);
      String string0 = "";
      helpFormatter0.renderWrappedText(stringBuffer0, 57, 57, "");
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      Option option0 = new Option("arg", "", true, "");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      String string1 = "7";
      String string2 = "d ^d2";
      Option option1 = new Option("7", "d ^d2");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      Options options2 = options1.addOptionGroup(optionGroup1);
      option1.setDescription("");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 474, "", options2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "--");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.printHelp("--", options0, false);
      options0.toString();
      helpFormatter1.printHelp("fSP4", " ", options1, "h{r2 f4m5", true);
      helpFormatter1.printHelp("^klD}Zg~}+:wY5;", "", options0, "");
      helpFormatter0.printHelp(64, "usage: ", "h{r2 f4m5", options1, "6#6Z(&X");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-836));
      helpFormatter0.setWidth((-836));
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 102, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Option option0 = new Option("", true, "usage: ");
      Options options1 = options0.addOption(option0);
      Option option1 = new Option("arg", "[Xnu.l|L.", true, " ");
      Options options2 = options1.addOption(option1);
      options2.addOption(option1);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "", options2);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1135);
      helpFormatter0.defaultDescPad = (-1135);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", "-", options0, " ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setSyntaxPrefix("");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)24;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("2z5Wd4z<U!q$SEH*0?");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 85, "2z5Wd4z<U!q$SEH*0?", "2z5Wd4z<U!q$SEH*0?", options0, 45, 45, "has already been selected: '", true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 85, "", options0);
      helpFormatter0.printHelp("has already been selected: '", "", options0, "has already been selected: '");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      String string0 = "@PZqFk";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-142), "--", "NO_ARGS_ALLOWED", (Options) null, "@PZqFk", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("2", "-");
      options0.getOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      helpFormatter0.getLongOptPrefix();
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 0, options0, 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", true, (String) null);
      helpFormatter0.printHelp("\n", " ", options0, "");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("2", "-");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup0.setRequired(true);
      helpFormatter0.getLongOptPrefix();
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(" ", " ", options1, (String) null, true);
      helpFormatter0.rtrim("2");
      MockFile mockFile0 = new MockFile("--", "[ option: ");
      File file0 = MockFile.createTempFile("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "arg", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(file0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("2", "-");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      options0.toString();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("--", (String) null, options0, "O<=t", true);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-2), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 561, "' was specified but an option from this group ", (String) null, options0, 32, 6, "", false);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options1 = options0.addOption("arg", true, "");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "`/*_", "`/*_", options1, 10, 2184, "", true);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Option option0 = new Option("", true, "usage: ");
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), (String) null, (String) null, options0, 517, 109, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 1, options0, 1, 216);
      helpFormatter0.defaultNewLine = "m3|Y/ 2iGbX:1jb:j<Q";
      helpFormatter0.defaultSyntaxPrefix = ":JF(p/&y2";
      helpFormatter0.createPadding(1);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "usage: ", true, "8bYCYFXK:a/");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1038), "8bYCYFXK:a/", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.setDescPadding(44);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 44, 1487, "has already been selected: '");
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 1487, (-2), "has already been selected: '");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      stringBuffer1.append(1.0F);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) stringBuffer2;
      objectArray0[1] = (Object) stringBuffer0;
      objectArray0[2] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printUsage(printWriter0, 37, "", options0);
      helpFormatter0.getWidth();
      helpFormatter0.printOptions(printWriter0, 37, options0, 74, 74);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      int int0 = 63;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 74, "M", "[ARG...]", options0, 3, 74, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 599, "--", "usage: ", options0, 74, 1465, "usage: ");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLongOptPrefix("\n");
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp(3, "\n", "\n", options0, "(j9M", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("^ovyg\"CVt");
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "+N8y.f?&^+j>", true, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("^ovyg\"CVt", "--", options1, "R,gSLQuwNXw");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 224, "\n");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("YMi.I]F`:.");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "\n", "m4Voa}D", options0, 3, 1, "-", false);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      mockPrintWriter0.format("[HDsg1_bv_R`?F#", (Object[]) null);
      Options options0 = new Options();
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, "kSb)g{:\"09,");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.setWidth(1);
      helpFormatter0.defaultNewLine = "9YQz8^1<HLJQRu-D";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("arg", "{", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("%cnj!XFfu;(:6}b.");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 2442, "usage: ", "\n", options0, 64, (-343), "--", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "usage: ", true, "arg");
      options1.toString();
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("O<=t", "t", options0, "O<=t", true);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.setDescPadding(44);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 44, 1487, "has already been selected: '");
      helpFormatter0.renderWrappedText(stringBuffer1, 1487, 74, "has already been selected: '");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      stringBuffer1.append(1.0F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "", false, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1255), "has already been selected: '", "has already been selected: '", options1, (-1), 3904, "has already been selected: '", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      stringBuffer0.append((CharSequence) "usage: ");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 74, 1, " ");
      helpFormatter0.setDescPadding(5);
      helpFormatter0.renderWrappedText(stringBuffer1, 1, 74, "\n");
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("Y0");
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, "5m0S&U+");
      helpFormatter0.printHelp("Y0", "_9P", options1, "_9P");
      helpFormatter0.getDescPadding();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      Locale locale0 = Locale.GERMAN;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "org.apache.commons.cli.AlreadySelectedException", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 11, "", "Y0", options0, 2, (-1661), "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("%cnj!XFfu;(:6}b.");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "H6]9", "arg", options0, 2442, 2442, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "2";
      Option option0 = new Option("2", "-");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setSelected(option0);
      StringBuffer stringBuffer0 = new StringBuffer(74);
      stringBuffer0.append((-1217.4F));
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) optionGroup1;
      objectArray0[1] = (Object) stringBuffer0;
      objectArray0[2] = (Object) stringBuffer0;
      objectArray0[3] = (Object) optionGroup0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) options0;
      objectArray0[6] = (Object) stringWriter0;
      objectArray0[7] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.format("usage: ", objectArray0);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-2393), "2", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-3605);
      String string0 = "S$CC%";
      helpFormatter0.findWrapPos("S$CC%", 838, 62);
      helpFormatter0.getLeftPadding();
      StringWriter stringWriter0 = new StringWriter();
      int int0 = 548;
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "-", 1598, 548);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "|", "|", options0, (-5032), 31, "rHX)k}*p)dx8Bv", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 74, "L=8LsMtD*QL{");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      String string0 = "   ";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, 34, "' was specified but an option from this group ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      Options options0 = new Options();
      helpFormatter0.setLeftPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      String string0 = "nU*w*`%,]QTRW\" E[";
      String string1 = null;
      int int0 = 74;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2566, "nU*w*`%,]QTRW\" E[", (String) null, options0, (-1), 74, (String) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 3605;
      helpFormatter0.defaultDescPad = 3605;
      helpFormatter0.createPadding(840);
      helpFormatter0.getNewLine();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = 11;
      helpFormatter0.findWrapPos("\n", 11, 347);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("6~4lrO*tR", 11, (-709));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      helpFormatter0.renderWrappedText(stringBuffer0, 900, 248, "   ");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "arg", true, "usage: ");
      helpFormatter0.printHelp("j\u0005TMzY*P", "", options1, "   ");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Options options0 = null;
      String string0 = "Y@Ao[7v2$q}(..%L8I";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(667, "NO_ARGS_ALLOWED", "NO_ARGS_ALLOWED", (Options) null, "Y@Ao[7v2$q}(..%L8I");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      helpFormatter0.renderWrappedText(stringBuffer0, 224, 63, "");
      Options options0 = new Options();
      helpFormatter0.printHelp(64, " b'-s;_vX6", " b'-s;_vX6", options0, "");
      helpFormatter0.setWidth(34);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, "aZ%ErqPD3k");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      String string0 = "";
      Option option0 = new Option("", "", false, "arg");
      Options options1 = options0.addOption((String) null, "", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      helpFormatter0.renderWrappedText(stringBuffer0, 224, 900, "   ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, (-24), ":O6&-a lW-Dv3uFN");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 224, 1, "   ");
      helpFormatter0.renderWrappedText(stringBuffer1, 224, 34, "' was specified but an option from this group ");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer1, 0, 0, "   ");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      String string0 = "   ";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 900, "   ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string1 = "a0X]COKq1";
      Options options0 = new Options();
      String string2 = "";
      Options options1 = options0.addOption("", true, "arg");
      helpFormatter1.printHelp("(OUeo+k239d", "a0X]COKq1", options1, ":O6&-a lW-Dv3uFN");
      helpFormatter1.rtrim("");
      MockFile mockFile0 = new MockFile(" ", "!zI/uL");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "a0X]COKq1");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // a0X]COKq1
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "@jz");
      Option option0 = new Option("", "", true, "-");
      options1.addOption("arg", "@jz", false, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "org.apache.commons.cli.HelpFormatter$1", "", options0, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      helpFormatter0.renderWrappedText(stringBuffer0, 900, 224, "   ");
      Options options0 = new Options();
      Option option0 = new Option("", "");
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption("", true, "");
      helpFormatter0.printHelp("   ", "   ", options3, "", true);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      helpFormatter0.renderWrappedText(stringBuffer0, 224, 900, "   ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, (String) null);
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("", "-", false, "N");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "N", options3, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      stringBuffer0.append((CharSequence) "usage: ");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 74, 1, "6rBIJ,0lo$HR!");
      helpFormatter0.renderWrappedText(stringBuffer1, 1, 74, "\n");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "arg");
      Option option0 = new Option("", "", true, " ");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp("5,<N0pj", options2, false);
      options0.addOption((String) null, false, "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options1.addOption("", "", true, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.Options", "--", options2, "arg", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(65);
      stringBuffer0.append((Object) null);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2827), (Options) null, 54, 54);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("d", "d");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-520), (String) null, "*(!1O'z}o", options2, (-952), (-1810), "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      stringBuffer0.append(true);
      helpFormatter0.renderWrappedText(stringBuffer0, 2748, 3, "");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "<", "line.separator", options0, "");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = false;
      Options options1 = options0.addOption("arg", false, "@jz");
      String string0 = "[";
      Option option0 = new Option("", "", true, "[");
      Options options2 = options1.addOption("arg", "@jz", false, "arg");
      options2.getOptions();
      helpFormatter0.printHelp("5,<N0pj", options2, false);
      options0.addOption((String) null, false, "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 40;
      MockFile mockFile0 = new MockFile((File) null, "");
      String string1 = "{M;`^b~OMSzP*;";
      options1.getOptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 63, "rmf_", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      int int0 = (-24);
      Options options0 = new Options();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparator0).toString();
      String string0 = "";
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.renderOptions(stringBuffer0, (-24), options0, 44, 1750);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLeftPadding();
      helpFormatter0.printHelp("--", options0);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getNewLine();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 74, 1, "6rBIJ,0lo$HR!");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, (-1), 224, "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.getOptPrefix();
      helpFormatter0.setOptPrefix(" | ");
      helpFormatter0.setArgName("-");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultDescPad = (-646);
      helpFormatter0.setLongOptPrefix("W?jcz)_^<otS=3J");
      helpFormatter0.setWidth((-646));
      helpFormatter0.getArgName();
      helpFormatter0.setNewLine("-");
      helpFormatter0.setWidth(1);
      helpFormatter0.getOptPrefix();
      helpFormatter0.setOptionComparator((Comparator) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "W?jcz)_^<otS=3J");
      helpFormatter0.printUsage(printWriter0, 74, "-");
      helpFormatter0.setNewLine((String) null);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "y7zeCNQFb))>,]R_";
      helpFormatter0.setOptPrefix("y7zeCNQFb))>,]R_");
      helpFormatter0.defaultNewLine = "y7zeCNQFb))>,]R_";
      helpFormatter0.defaultWidth = 10;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      options0.hasOption("arg");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("line.separator", "usage: ", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'line.separator' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.getOptPrefix();
      helpFormatter0.setOptPrefix(" | ");
      helpFormatter0.setArgName("-");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.createPadding(0);
      helpFormatter0.defaultDescPad = (-646);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      helpFormatter0.setLongOptPrefix("W?jcz)_^<otS=3J");
      helpFormatter0.setWidth(0);
      helpFormatter0.getArgName();
      helpFormatter0.setNewLine("-");
      helpFormatter0.setWidth(1);
      helpFormatter0.getOptPrefix();
      helpFormatter0.setOptionComparator((Comparator) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "W?jcz)_^<otS=3J");
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "-");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 74, 74, "usage: ");
      helpFormatter0.renderWrappedText(stringBuffer1, 74, 900, "h@r<IaRne{P!}G#");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("2", "-");
      options0.addOption(option0);
      StringBuffer stringBuffer0 = new StringBuffer(1059);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1059, 1059, "");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, (-1358), 285, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1, 224, "   ");
      helpFormatter0.renderWrappedText(stringBuffer1, 2, 224, "   ");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      helpFormatter0.renderWrappedText(stringBuffer0, 2748, 3, "");
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "5,<N0pj");
      StringBuffer stringBuffer2 = helpFormatter0.renderOptions(stringBuffer1, 1225, options0, 74, 1);
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer2, 3, (-4337), "$]F+w+aOZ6tjN$\"&\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("2@U4XI64N!GG");
      helpFormatter0.rtrim("MB;h&:>5P$NHQs");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("arg", "-");
      OptionGroup optionGroup0 = new OptionGroup();
      option0.clone();
      helpFormatter0.setWidth(2337);
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setNewLine("line.separator");
      helpFormatter0.createPadding(6);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("2", "-");
      options0.addOption(option0);
      String string0 = "arg";
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 2, options0, (-2), 426);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 900, 224, "   ");
      helpFormatter0.renderWrappedText(stringBuffer1, 2, 224, "   ");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("2", "-");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", "<", false, "");
      helpFormatter0.printHelp(" ", "", options2, " ", false);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "@jz");
      boolean boolean0 = true;
      Option option0 = new Option("", "", true, "[");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp("5,<N0pj", options2, false);
      String string0 = null;
      Options options3 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "<0Q,*k10F~p$X _N0$", (Options) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "gu_IG{KU~C}b9\\<lq";
      int int0 = 1733;
      Options options0 = new Options();
      helpFormatter0.printHelp(1733, "gu_IG{KU~C}b9<lq", "gu_IG{KU~C}b9<lq", options0, "gu_IG{KU~C}b9<lq", false);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = null;
      helpFormatter0.printHelp("%2+bIbi5;9)O_", "DrD>R 2j^/Y2&E/", options0, (String) null);
      MockFile mockFile0 = new MockFile("DrD>R 2j^/Y2&E/", "%HiP");
      MockFile mockFile1 = new MockFile(mockFile0, "V;cVwrN./r,");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile1, "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getOptPrefix();
      String string0 = " | ";
      helpFormatter0.setOptPrefix(" | ");
      helpFormatter0.setArgName("");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultDescPad = (-646);
      helpFormatter0.setLongOptPrefix("W?jcz)_^<otS=3J");
      helpFormatter0.setWidth(0);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setNewLine("");
      helpFormatter0.setWidth(1);
      helpFormatter0.getOptPrefix();
      helpFormatter0.setOptionComparator((Comparator) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "W?jcz)_^<otS=3J");
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, " ");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "<0Q,*k10F~p$X _N0$", (Options) null, "<0Q,*k10F~p$X _N0$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 224, 900, "   ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 0, 1263, "QFx!#!Oc");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("2", "-");
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("E2b7^1", (String) null, (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 31;
      String string0 = "";
      Options options0 = new Options();
      String string1 = "";
      boolean boolean0 = true;
      Options options1 = options0.addOption("", true, "");
      String string2 = "-";
      Option option0 = new Option("arg", "-");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("NO_ARGS_ALLOWED", "qE@Y7@)$GX0Um", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options4 = options3.addOptionGroup(optionGroup0);
      options4.hasOption("usage: ");
      option0.clone();
      String string3 = "NO_ARGS_ALLOWED";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(31, "", "", options4, "NO_ARGS_ALLOWED");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      Options options1 = options0.addOption("", true, "");
      Option option0 = new Option("arg", "-");
      Options options2 = options1.addOption(option0);
      String string1 = "\\qE@Y7@)$GX0Um";
      Options options3 = options2.addOption("NO_ARGS_ALLOWED", "qE@Y7@)$GX0Um", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options4 = options3.addOptionGroup(optionGroup0);
      option0.clone();
      String string2 = "NO_ARGS_ALLOWED";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(31, "", "", options4, "NO_ARGS_ALLOWED");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[ARG...]";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string1 = null;
      Options options2 = options1.addOption((String) null, true, "\n");
      String string2 = "";
      String string3 = "2r<\\}zyU88/";
      String string4 = ".n4i5e";
      Option option0 = new Option("", "2r<}zyU88/", false, ".n4i5e");
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("ZdexUN%HJ{%PJz a", "[ARG...]", options3, ".n4i5e");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      helpFormatter0.printWrapped(printWriter0, 2267, 2267, "org.apache.commons.cli.Option");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("2", "-");
      Options options1 = options0.addOption(option0);
      options0.addOption("arg", false, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Object object0 = new Object();
      option0.setType(object0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-79), "line.separator", "--", options1, (-3734), 74, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("2", "-");
      options0.addOption(option0);
      options0.addOption("arg", false, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 40, "--", "-", options0, 1, (-1), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("|c:,})cr=V?");
      Options options1 = options0.addOption("", true, "<}Tpo'>X@&wip[Zk1+r");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "arg", true, "O2v.n8eoNIC,v");
      helpFormatter0.defaultOptPrefix = null;
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      optionGroup1.setRequired(true);
      Options options2 = options1.addOptionGroup(optionGroup1);
      options2.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-3834), "p .EGs`r{", "", options2, (-1), 862, "p .EGs`r{");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      int int0 = 3858;
      helpFormatter0.setDescPadding(3858);
      StringBuffer stringBuffer0 = new StringBuffer("");
      // Undeclared exception!
      try { 
        stringBuffer0.insert(3858, 'k');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("hSK&");
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1774));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "<0Q,*k10F~p$X _N0$", (Options) null, "<0Q,*k10F~p$X _N0$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.setLeftPadding(1588);
      helpFormatter0.defaultOptPrefix = "},G!%8vJ w2}g^H$f";
      helpFormatter0.setWidth(1588);
      String string0 = "sg'Dk9'P";
      helpFormatter0.defaultArgName = "sg'Dk9'P";
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("sg'Dk9'P", (-2676), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getNewLine();
      String string0 = helpFormatter0.createPadding(4806);
      String string1 = "";
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.getNewLine();
      helpFormatter0.findWrapPos(string0, 4806, (-3732));
      PrintWriter printWriter0 = null;
      String string2 = "JW6gZQVlE(";
      helpFormatter0.setWidth(4806);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1654, "JW6gZQVlE(");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      helpFormatter0.renderWrappedText(stringBuffer0, 224, 900, "   ");
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 2, ":O6&-a lW-Dv3uFN");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("gu_IG{KU~C}b9<lq");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer(0);
      int int1 = (-2);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options1.addOption("[", "[", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setLongOptPrefix((String) null);
      MockFile mockFile0 = new MockFile("-");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("\n", "-", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("8yNIHN*;gnO#)uL");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-1), "8yNIHN*;gnO#)uL");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("2", "-");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", "<", false, "");
      helpFormatter0.printHelp("org.apache.commons.cli.OptionGroup", "", options2, "org.apache.commons.cli.OptionGroup", false);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-", "org.apache.commons.cli.HelpFormatter$OptionComparator");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = 0;
      String string0 = "rGWyVDi6";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, int0, string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 900, 224, "   ");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer1, 0, 224, "   ");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptPrefix("C%**5LeJYvHxAu0>Qo");
      helpFormatter0.setWidth((-646));
      helpFormatter0.getArgName();
      helpFormatter0.setNewLine("T");
      helpFormatter0.setWidth((-646));
      helpFormatter0.setOptionComparator((Comparator) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("W?jcz)_^<otS=3J");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      mockPrintWriter1.append((CharSequence) " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-646), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.getOptPrefix();
      String string0 = " | ";
      helpFormatter0.setOptPrefix(" | ");
      helpFormatter0.setArgName("-");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultDescPad = (-646);
      helpFormatter0.setLongOptPrefix("W?jcz)_^<otS=3J");
      helpFormatter0.setWidth(0);
      helpFormatter0.getArgName();
      helpFormatter0.setNewLine("-");
      helpFormatter0.setWidth(1);
      helpFormatter0.getOptPrefix();
      helpFormatter0.setOptionComparator((Comparator) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "W?jcz)_^<otS=3J");
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "-");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = (-2);
      options0.toString();
      options0.getOption("[");
      helpFormatter0.defaultSyntaxPrefix = "[";
      options0.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 0, options0, (-2), 32);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName((String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "-";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      mockPrintWriter1.format("usage: ", objectArray0);
      int int0 = (-2);
      String string0 = "*VoN|Axuw3|J:4Pb:}S";
      String string1 = "line.separator";
      Options options0 = new Options();
      String string2 = ", ";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption(", ", false, "*VoN|Axuw3|J:4Pb:}S");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ', ' contains an illegal character : ','
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "5HK8[-RiQF3.6 ";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 1722, 1722, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.setOptPrefix("6H6+v][-?J@L.~~~9lN");
      helpFormatter0.setLeftPadding(2535);
      assertEquals(2535, helpFormatter0.defaultLeftPad);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = (-1768);
      String string0 = "D";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1768), "D");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      String string0 = "pl*Sx\"";
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("pl*Sx\"", false, "org.apache.commons.cli.HelpFormatter$1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'pl*Sx\"' contains an illegal character : '*'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setWidth(0);
      helpFormatter0.getDescPadding();
      PrintWriter printWriter0 = null;
      String string0 = "[5";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("--", true, "RmZiYhCBIGU4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.getWidth();
      String string0 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(" ", "org.apache.commons.cli.HelpFormatter$OptionComparator");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // org.apache.commons.cli.HelpFormatter$OptionComparator
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("2", "-");
      helpFormatter0.printHelp(" ", "", options0, " ", false);
      int int0 = helpFormatter0.getWidth();
      assertEquals(74, int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      int int0 = (-1);
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("--", "usage: ", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
