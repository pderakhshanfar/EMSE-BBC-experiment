/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 20:24:25 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "`m U%F1.<Qgy\u0001Uj";
      helpFormatter0.setDescPadding(1);
      helpFormatter0.defaultArgName = "r;TIf>l.B[CK*u=V;";
      helpFormatter0.setWidth(1);
      Options options0 = new Options();
      options0.helpOptions();
      options0.hasLongOption(" ] [ long ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      options0.addOption("", true, "r;TIf>l.B[CK*u=V;");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-47);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options0 = new Options();
      options0.helpOptions();
      options0.addOption((String) null, true, (String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", options0, true);
      helpFormatter0.getLeftPadding();
      helpFormatter1.defaultArgName = null;
      helpFormatter1.getArgName();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(1, " ", "-", options0, "usage: ");
      helpFormatter0.getArgName();
      helpFormatter0.findWrapPos(" ]", 0, 0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "[");
      optionGroup0.addOption(option0);
      Option option1 = new Option("arg", true, "\n");
      optionGroup0.addOption(option1);
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2), "-", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("`4q6}wM]YX>nO!{");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" `yhzb");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "#!7uI]C@ZUP$");
      options1.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 1, options1, 103, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      Options options2 = new Options();
      helpFormatter0.setSyntaxPrefix("");
      MockFile mockFile0 = new MockFile("-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append('o');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      mockPrintWriter0.println();
      PrintWriter printWriter0 = mockPrintWriter0.append('\\');
      helpFormatter0.printUsage(printWriter0, 63, "", options0);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.rtrim("A?ly{ V");
      helpFormatter0.findWrapPos("A?ly{ V", 8, (-2));
      helpFormatter0.createPadding(8);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.optionComparator = null;
      helpFormatter0.rtrim("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "";
      Option option0 = new Option("", true, "cmdLineSyntax not provided");
      optionGroup0.addOption(option0);
      Option option1 = new Option("arg", true, "\n");
      optionGroup0.addOption(option1);
      option1.getValues();
      options0.addOptionGroup(optionGroup0);
      option1.setArgName("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "arg", "arg", options0, "usage: ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1));
      helpFormatter0.defaultNewLine = "org.apache.commons.cli.ParseException";
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.defaultNewLine = "org.apache.commons.cli.ParseException";
      helpFormatter0.getDescPadding();
      helpFormatter0.defaultSyntaxPrefix = "uBsBPE!]dw`";
      helpFormatter0.getLeftPadding();
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 32;
      helpFormatter1.setWidth(1);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(" ", " ", options1, "@t8xxHDhFs'", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.defaultNewLine = null;
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("-", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      String string0 = "&ZMbKdvtT3^cE(]o'";
      helpFormatter0.setSyntaxPrefix("&ZMbKdvtT3^cE(]o'");
      helpFormatter0.printHelp(74, "arg", "arg", options0, "arg", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1, "\n", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 101, "-", (String) null, options0, 101, 101, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("\n");
      helpFormatter0.defaultLeftPad = (-546);
      helpFormatter0.getDescPadding();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 7;
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.setSyntaxPrefix("&ZMbKdvtT3^cE(]o'");
      boolean boolean0 = true;
      String string0 = "GMz/1qt";
      helpFormatter0.printHelp(7, "GMz/1qt", "GMz/1qt", options0, "GMz/1qt", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 7, "\n", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "|H");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("AN`}@=~}9uDe4\"9E(XJ");
      helpFormatter0.setLongOptPrefix("AN`}@=~}9uDe4\"9E(XJ");
      options0.addOption("arg", "arg", true, "\n");
      helpFormatter0.printHelp(37, " ", "arg", options0, "arg");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-2462));
      helpFormatter0.getWidth();
      String string0 = "N{SYE9x'}9";
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("N{SYE9x'}9", (-2462), 10);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Q+)rg0l>");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "Q+)rg0l>";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("usage: ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 234, "org.apache.commons.cli.HelpFormatter$1", options0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "Q+)rg0l>", options0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      option0.setArgName("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "org.apache.commons.cli.HelpFormatter", "org.apache.commons.cli.HelpFormatter", options0, "iOA7E#$q;", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "lmq[";
      PrintWriter printWriter0 = mockPrintWriter0.format("lmq[", objectArray0);
      helpFormatter0.printHelp(printWriter0, 2111, "(uo", "(uo", options0, 2111, 2111, "-", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, (-740), options0, 34, 34);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer1, 0, 1, "Lr+wO; K$ixy");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Option option0 = new Option((String) null, true, "\n");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2718), options1, 10, 14);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding(1);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("`15z0*Pi", "--", (Options) null, "`15z0*Pi", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth(0);
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, 0, "asXa");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf(" ", objectArray0);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "-rp5_}SwZ(");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = ", ";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", ");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getLongOptPrefix();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "Ttk~");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      option0.setArgName("--");
      String string0 = "8%OA:oo*S+n=+";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "Ttk~", "8%OA:oo*S+n=+", options0, "org.apache.commons.cli.HelpFormatter", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1121), "has already been selected: '");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      int int0 = (-2518);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, (-27), "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("G9/'C\"b5N/@z", "G9/'C\"b5N/@z", (Options) null, "G9/'C\"b5N/@z");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix((String) null);
      int int0 = (-3475);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-3475), "GM1<qtm", "", options0, "org.apache.commons.cli.OptionGroup", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "]");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 19);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-1), "", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      Options options0 = new Options();
      helpFormatter0.rtrim("m");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.defaultOptPrefix = "M~: 0 MT&bCidFK[*<";
      Option option0 = new Option("", true, "]");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      options0.addOptionGroup(optionGroup1);
      Options options1 = options0.addOption("arg", true, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(8, "=h\fn!*-dP*\".Gj", "", options1, "=h\fn!*-dP*\".Gj", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "]");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(8, "=h\fn!*-dP*\".Gj", "", options2, "=h\fn!*-dP*\".Gj", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("0/yxlKLQCDi");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 30;
      String string0 = null;
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, "!nO(kYs67ON1<*z");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "'&[DbTT)pmHF6a*u";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("'&[DbTT)pmHF6a*u");
      int int0 = (-696);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-696), "o0M9.rlgMGLt-=O'", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.toString();
      int int0 = 12;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", " ", options0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.rtrim(" ");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Rp\\H";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3704, "RpH", "=|?trwU$AnDe", options0, 3704, 3704, "", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 3967, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "I{)1)>)vB2sn0T%", "/dIOI58^", options0, 283, 1, "", false);
      helpFormatter0.getLeftPadding();
      helpFormatter0.createPadding(23);
      helpFormatter1.printOptions(mockPrintWriter0, 74, options0, 23, 1079);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.renderOptions(stringBuffer0, 34, options0, 283, 3);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("has already been selected: '");
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "<l";
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) "has already been selected: '";
      objectArray0[5] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[6] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "<l", objectArray0);
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "fhtQjO66Np*J", "5AJHCC_-|(voYX{Oj(", options0, (-571), 543, "fhtQjO66Np*J", true);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.defaultOptPrefix = "V(-+d#1B";
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[ARG...]", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", true, "");
      options0.addOption(option0);
      option0.setArgName("");
      helpFormatter0.printHelp(99, "[ option: ", "[ option: ", options0, "[ option: ");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(7, "-", "org.apache.commons.cli.HelpFormatter", options0, "org.apache.commons.cli.HelpFormatter", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = (-3778);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "usage: ", "", options0, (String) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(33, "3s", "dn?z.F!KVMT", options0, "Ph|Fa^^j(Kcx=w");
      StringBuffer stringBuffer0 = new StringBuffer("2NHOeSh_c#&");
      helpFormatter0.renderOptions(stringBuffer0, (-786), options0, 74, 13);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 13, "Ph|Fa^^j(Kcx=w", "Ph|Fa^^j(Kcx=w", options0, 74, 124, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n", "-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.format((Locale) null, "usage: ", (Object[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      mockPrintWriter0.print(false);
      mockPrintWriter0.format("--", (Object[]) null);
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 427, 10, "");
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.rtrim(" ");
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2124));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, "--", "$'!lCSYAc,K$Q?]S-", options1, "\n");
      helpFormatter0.renderOptions((StringBuffer) null, (-453), options1, 74, 910);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("--", "\n");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) "-";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) options0;
      objectArray0[5] = (Object) mockPrintStream0;
      mockPrintStream0.format((Locale) null, "-", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      PrintWriter printWriter0 = mockPrintWriter0.format("usage: ", (Object[]) null);
      helpFormatter0.printHelp(printWriter0, 10, "gD>0^Z", (String) null, options0, 10, 1376, ".B }A^OwG&%/", true);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = " ";
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) pipedOutputStream0;
      objectArray0[1] = (Object) "Ec+T}9~Y 2";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) "asXa";
      PrintWriter printWriter0 = mockPrintWriter0.format("Ec+T}9~Y 2", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("dYfoot", "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 731, "asXa", "Ec+T}9~Y 2", options2, 32, (-2), "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockFile mockFile0 = new MockFile("I", "s>'!7N9)6&n96)");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.format((Locale) null, "\n", (Object[]) null);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.format("gD0RdmGyO$V{RPv5x:K", (Object[]) null);
      helpFormatter0.printHelp(printWriter0, 43, "[", "[", options0, 509, 0, "I", false);
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2, "   ", "", options0, 3924, 3924, "gD0RdmGyO$V{RPv5x:K", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 44, (String) null, (String) null, options0, 64, 11, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 11, " ", " ", options0, 1162, 11, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("\n", "-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.format((Locale) null, "usage: ", (Object[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      mockPrintWriter0.format("--", (Object[]) null);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 509, "gD>0^Z", "org.apache.commons.cli.ParseException", options0, 10, 43, ">", false);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.rtrim("L9Z<@");
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos((String) null, (-672), 1896);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("i~xM>j2fFP0");
      PrintWriter printWriter0 = mockPrintWriter0.append('J');
      Options options0 = new Options();
      helpFormatter0.printOptions(printWriter0, 3845, options0, 3845, 9);
      helpFormatter0.defaultOptPrefix = "+~w9#E3OZ";
      Options options1 = new Options();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-2167), "", "", options0, 11, 2756, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getLeftPadding();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      int int0 = (-1391);
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1391), (String) null, options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(3, "-", (String) null, options0, " ");
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      PrintStream printStream0 = mockPrintStream0.format((Locale) null, "-", (Object[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      PrintWriter printWriter0 = mockPrintWriter0.format("/", (Object[]) null);
      helpFormatter1.printHelp(printWriter0, 3, "-", "\n", options1, 59, 709, "arg", false);
      helpFormatter2.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      MockFile mockFile0 = new MockFile(" ");
      MockFile mockFile1 = new MockFile(mockFile0, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      mockFile0.setLastModified(1);
      PrintWriter printWriter0 = mockPrintWriter0.append('5');
      mockFile1.toURI();
      Options options0 = new Options();
      options0.hasOption("--");
      helpFormatter0.printUsage(printWriter0, 3, "'", options0);
      Options options1 = options0.addOption("", false, "usage: ");
      Option option0 = new Option("arg", "usage: ");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp(16, "cmdLineSyntax not provided", "", options2, "-", true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1702, "", options1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      MockFile mockFile0 = new MockFile(" ");
      MockFile mockFile1 = new MockFile(mockFile0, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      PrintWriter printWriter0 = mockPrintWriter0.append('5');
      mockFile1.toURI();
      Options options0 = new Options();
      options0.hasOption("--");
      helpFormatter0.printUsage(printWriter0, 3, "'", options0);
      int int0 = 16;
      String string0 = "cmdLineSyntax not provided";
      String string1 = "";
      options0.addOption("", false, "usage: ");
      Option option0 = null;
      try {
        option0 = new Option("FaIS }|+R", "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'FaIS }|+R' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("-");
      Option option0 = new Option("", true, "");
      Options options1 = options0.addOption(option0);
      option0.setArgName("arg");
      helpFormatter0.printHelp(3924, ", ", "has already been selected: '", options1, "oO;IaAn-vC``3Y))");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, "P ]sGI}+qqgc", "usage: ", options1, "");
      MockFile mockFile0 = new MockFile(" ", "EXDLe@Z{");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, "-");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 3924;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 3924, 3924, "asXa");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options2 = new Options();
      helpFormatter1.printHelp(15, "t", "\n", options2, ":8t2AO<y");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "8";
      helpFormatter0.rtrim("8");
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getDescPadding();
      File file0 = MockFile.createTempFile("arg", "u*xWgQw0VkPEp&");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(file0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("f4bBOC&I");
      Options options1 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 64, "has already been selected: '", "arg", options1, 1243, 1243, ", ");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options2 = options1.addOption("b", "", true, "S6a9C($Jt7)&0J7.");
      helpFormatter0.printHelp("\n", options2, true);
      helpFormatter1.getLeftPadding();
      helpFormatter1.getArgName();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("-", "Ek%d");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // Ek%d
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(34);
      options0.toString();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 1481, options0, 44, 34);
      helpFormatter0.renderOptions(stringBuffer1, (-137), options1, 2849, 3924);
      options1.toString();
      Options options2 = new Options();
      int int0 = (-1431);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1431), "ql@)3X|6T[K'IF<1", "arg", options0, "arg", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3924, "tIOO1#(ote9cga+7`Y3", "asXa", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("m8Qg eR!ok/");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 0, ">", "m8Qg eR!ok/", options0, 0, 71, "asXa");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = " ";
      helpFormatter0.setDescPadding(2876);
      helpFormatter0.defaultArgName = "r;TIf>l.B[CK*u=V;";
      helpFormatter0.setWidth(2876);
      Options options0 = new Options();
      options0.helpOptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      options0.addOption("", false, "-");
      helpFormatter0.printHelp("-", options0);
      helpFormatter0.rtrim("r;TIf>l.B[CK*u=V;");
      Options options1 = new Options();
      helpFormatter0.printHelp("Y\"Rx*hi,EL=", "", options1, (String) null);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.createPadding(2876);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setDescPadding((-2));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((int) (byte)37, "' was specified but an option from this group ", "8OY4=;ZD;0R+M0SD", options0, ";U(49y[C#oc!uEo:", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(8, "asXa", "P ]sGI}+qqgc", options0, "vCQyak*D^z+XmFw");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = " ";
      helpFormatter0.setDescPadding(2876);
      helpFormatter0.defaultArgName = "r;TIf>l.B[CK*u=V;";
      helpFormatter0.setWidth(2876);
      Options options0 = new Options();
      options0.helpOptions();
      options0.addOption("", false, "-");
      helpFormatter0.printHelp("-", options0);
      helpFormatter0.rtrim("r;TIf>l.B[CK*u=V;");
      Options options1 = new Options();
      helpFormatter0.printHelp("Y\"Rx*hi,EL=", "", options1, (String) null);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)13;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "9s", false, " :: ");
      options1.helpOptions();
      options1.addOption("arg", false, "");
      helpFormatter0.printHelp("4`/PD+d_sqE|5b?ctZ5", options1, false);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("usage: ", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-47);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options0 = new Options();
      options0.helpOptions();
      options0.addOption((String) null, true, (String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", options0, true);
      helpFormatter0.getLeftPadding();
      helpFormatter1.getArgName();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("arg", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = " ";
      helpFormatter0.defaultLeftPad = 568;
      helpFormatter0.setDescPadding(2876);
      helpFormatter0.defaultArgName = "r;TIf>l.B[CK*u=V;";
      helpFormatter0.setWidth(2876);
      Options options0 = new Options();
      options0.helpOptions();
      Options options1 = options0.addOption("", false, "-");
      helpFormatter0.printHelp("-", options0);
      helpFormatter0.rtrim("$.DF");
      helpFormatter0.printHelp(2876, "$.DF", "", options1, "", false);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setArgName("-");
      String string0 = "g.:xd.9";
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("0: (:b; 8<(Sc", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '0: (:b; 8<(Sc' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-100);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((int) (byte)1, "8OY4=;ZD;0R+M0SD", ";U(49y[C#oc!uEo:", options0, "5O!:tZ|HBG", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "%2N&=%5Zvo";
      int int0 = 692;
      Options options0 = new Options();
      options0.hasOption("");
      int int1 = (-1127);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1127), "%2N&=%5Zvo", "", options0, ">$#C9 SE");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultNewLine = "A CloneNotSupportedException was thrown: ";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, "\n", "-", options0, "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      options0.toString();
      String string0 = null;
      options0.helpOptions();
      options0.addOption((String) null, true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("line.separator", 272, 3);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.rtrim("line.separator");
      helpFormatter0.getOptionComparator();
      helpFormatter0.defaultLeftPad = (-2093);
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      helpFormatter0.printHelp("line.separator", options1, false);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)21;
      byteArray0[7] = (byte)58;
      byteArray0[8] = (byte)3;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options0 = new Options();
      options0.helpOptions();
      Options options1 = options0.addOption((String) null, true, "");
      helpFormatter0.printHelp("9s", options1, true);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("arg", "c(RRy;S");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // c(RRy;S
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.printHelp(3, "\n", "", options0, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 57, "", (String) null, options0, 57, 643, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-1637), (String) null, (String) null, options0, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      String string0 = "tIU]|L(lX";
      StringBuffer stringBuffer1 = new StringBuffer();
      Options options0 = new Options();
      String string1 = null;
      boolean boolean0 = true;
      Options options1 = options0.addOption((String) null, true, "arg");
      int int0 = 1;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, (-470), options1, (-470), 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "`m U%F1.<Qgy\u0001Uj";
      helpFormatter0.setDescPadding(2876);
      helpFormatter0.defaultArgName = "r;TIf>l.B[CK*u=V;";
      helpFormatter0.setWidth(2876);
      Options options0 = new Options();
      options0.helpOptions();
      options0.addOption("", true, "-");
      helpFormatter0.printHelp("-", options0);
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getNewLine();
      helpFormatter0.setDescPadding(2876);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("H~B ffg$HiM+/e");
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      options0.toString();
      Options options1 = options0.addOption((String) null, true, "\n");
      helpFormatter0.printHelp("[ARG...]", options1);
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getNewLine();
      helpFormatter0.setDescPadding(3877);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[ARG...]";
      StringBuffer stringBuffer0 = new StringBuffer("[ARG...]");
      int int0 = 3877;
      Options options0 = null;
      int int1 = 1;
      StringBuffer stringBuffer1 = new StringBuffer(74);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "", "(#", options1, "(#", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = " ";
      helpFormatter0.setDescPadding(2876);
      helpFormatter0.defaultArgName = "usage: ";
      helpFormatter0.setWidth(2876);
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2064), "r;TIf>l.B[CK*u=V;", "pE)2anu+FyM]", options0, (-358), 1665, " :: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = " ";
      helpFormatter0.setDescPadding(2876);
      helpFormatter0.defaultArgName = "r;TIf>l.B[CK*u=V;";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
      StringWriter stringWriter0 = new StringWriter(1665);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "`m U%F1.<Qgy\u0001Uj", " ", options0, (-2064), 1380, "pK:WZ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine(">$#C9 SE");
      helpFormatter0.setOptPrefix(">$#C9 SE");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-3206), ">$#C9 SE", ">$#C9 SE", options0, (-2064), (-3206), ">$#C9 SE");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      String string0 = " ]";
      helpFormatter0.renderWrappedText(stringBuffer0, 955, 10, " ]");
      int int0 = 0;
      helpFormatter0.setDescPadding((-1234));
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setWidth(10);
      String string1 = "w-~6XM'},#5P;\"8]zQ)";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("\n", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "asXa", "asXa", options0, (String) null);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 955, 10, " ]");
      helpFormatter0.setDescPadding((-1234));
      stringBuffer1.insert(3, "");
      helpFormatter0.renderWrappedText(stringBuffer1, 955, 0, "^h~$S/iz");
      Options options0 = new Options();
      options0.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Q+", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("   ", "org.apache.commons.cli.AlreadySelectedException");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("AYt42K`bu");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = " [ARG]";
      Option option0 = new Option((String) null, " [ARG]", false, "");
      Options options2 = options1.addOption(option0);
      helpFormatter1.renderOptions(stringBuffer0, 3, options2, 2379, 2828);
      int int0 = (-2333);
      // Undeclared exception!
      try { 
        options0.addOption("AYt42K`bu", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'AYt42K`bu' contains an illegal character : '`'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 12;
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Cannot add value, list full.");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 3, 1, "Cannot add value, list full.");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">:3");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) ">:3";
      objectArray0[2] = (Object) ">:3";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) ">:3";
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("arg", objectArray0);
      helpFormatter0.printUsage(printWriter0, 2403, ">:3");
      Options options0 = new Options();
      helpFormatter0.printHelp("xs@)6j3,$", ">:3", options0, "xs@)6j3,$", true);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine(">$#C9 SE");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.setOptPrefix(">$#C9 SE");
      helpFormatter0.setLongOptPrefix(">$#C9 SE");
      helpFormatter0.setLongOptSeparator("1lA=U9~Zsip");
      helpFormatter0.setDescPadding((-2770));
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(">$#C9 SE", "}\"0RDrWs", options0, "cQLjP#~8", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("");
      helpFormatter0.printHelp(692, "   ", "%2N&=%5Zvo", options0, "   ");
      Options options1 = new Options();
      options1.hasOption((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 177, (-1), "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = ">$#C9 SE";
      Options options0 = new Options();
      options0.hasOption("--");
      helpFormatter0.printHelp(692, "7sj", "", options0, ">$#C9 SE");
      int int0 = (-1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 27, 110, ">$#C9 SE");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      int int0 = 0;
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.defaultNewLine = "%2N&=%Zvo";
      helpFormatter0.optionComparator = comparator0;
      int int1 = 31;
      int int2 = 692;
      String string0 = "";
      Options options0 = new Options();
      options0.hasOption("%2N&=%Zvo");
      helpFormatter0.printHelp(692, "%2N&=%Zvo", "", options0, "");
      PrintWriter printWriter0 = null;
      int int3 = 10;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1), 10, "%2N&=%Zvo");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "`m U%F1.<Qgy\\1Uj";
      helpFormatter0.defaultArgName = "`m U%F1.<Qgy\u0001Uj";
      helpFormatter0.setDescPadding(2876);
      helpFormatter0.defaultArgName = "r;TIf>l.B[CK*u=V;";
      helpFormatter0.setWidth(2876);
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.setLongOptSeparator("r;TIf>l.B[CK*u=V;");
      helpFormatter0.printHelp("`m U%F1.<Qgy\u0001Uj", options0);
      helpFormatter0.setNewLine("[");
      options0.addOption("", "usage: ", false, "r;TIf>l.B[CK*u=V;");
      options0.getMatchingOptions("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 10, 1, "_<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(false);
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string1 = "";
      String string2 = "Y<Cn_V)";
      helpFormatter0.setSyntaxPrefix("{R{@");
      Option option0 = new Option("", "", false, "Y<Cn_V)");
      Options options2 = options1.addOption(option0);
      option0.toString();
      // Undeclared exception!
      try { 
        options2.addOption("t&", " ", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 't&' contains an illegal character : '&'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      int int0 = (-470);
      String string0 = "tIU]|L(lX";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-470), (-470), "tIU]|L(lX");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">:3");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) ">:3";
      objectArray0[2] = (Object) ">:3";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) ">:3";
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("arg", objectArray0);
      helpFormatter0.printUsage(printWriter0, 2403, ">:3");
      helpFormatter0.defaultLeftPad = 2403;
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 955, 10, " ]");
      helpFormatter0.setDescPadding((-1234));
      stringBuffer1.insert(3, "");
      helpFormatter0.renderWrappedText(stringBuffer1, 955, 0, "^h~$S/iz");
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "*1_>nHlT$wR", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3924, "", "asXa", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 2637, ">kx\"':_YC0Id");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 32, options0, 32, 32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      int int0 = 1;
      Options options0 = new Options();
      stringBuffer0.append(2104.1F);
      options0.helpOptions();
      // Undeclared exception!
      try { 
        options0.addOption("org.apache.commons.cli.ParseException", "   ", false, ":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.ParseException' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("   ", "org.apache.commons.cli.AlreadySelectedException");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format("   ", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      Locale locale0 = Locale.GERMAN;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "   ", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 2296, 2296, "   ");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-668));
      String string0 = "gCy^s(YUuDNu&3E+^";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("gCy^s(YUuDNu&3E+^", "usage: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // usage: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      PrintWriter printWriter0 = null;
      int int0 = 31;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options1.addOption(" ", "UKVQk_gK<? HUI", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setLeftPadding(922);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setWidth(922);
      String string0 = "";
      String string1 = " ";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("XJ(6IGxboMrV|eO.n?-", options0);
      helpFormatter0.getDescPadding();
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.setLongOptPrefix("rXo%DZG");
      helpFormatter0.setLongOptSeparator("rXo%DZG");
      helpFormatter0.setDescPadding(3);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("[ARG...]");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 3877, (Options) null, 351, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "MzE1mp9!RDl9ON-8", "MzE1mp9!RDl9ON-8", options0, "MzE1mp9!RDl9ON-8", false);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-1261));
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("Io<", "", false, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'Io<' contains an illegal character : '<'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 3086;
      helpFormatter0.setWidth(3086);
      String string0 = "";
      String string1 = "Y8t$Q+Yi84e";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("--", false, "Y8t$Q+Yi84e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      options0.hasLongOption(">,moS");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      int int0 = 0;
      String string0 = "W ifC-e06U`N%BxoI";
      String string1 = "oH`= </97EY1N$,E";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "line.separator";
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("line.separator", (-3209), 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine(">$#C9 SE");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.setOptPrefix(">$#C9 SE");
      helpFormatter0.setLongOptPrefix(">$#C9 SE");
      helpFormatter0.setLongOptSeparator("1lA=U9~Zsip");
      helpFormatter0.setDescPadding((-2770));
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setWidth((-2770));
      helpFormatter0.setOptionComparator((Comparator) null);
      assertEquals("1lA=U9~Zsip", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      PipedInputStream pipedInputStream0 = null;
      PipedOutputStream pipedOutputStream0 = null;
      try {
        pipedOutputStream0 = new PipedOutputStream((PipedInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)21;
      byteArray0[7] = (byte)58;
      byteArray0[8] = (byte)3;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.printHelp("9s", options0);
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setWidth(533);
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals(533, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      int int0 = (-1);
      helpFormatter0.defaultNewLine = "";
      Options options0 = new Options();
      options0.getOptions();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      int int1 = 263;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter1, (-1), options0, (-1), 263);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      String string0 = "&=2wq3Y;-";
      String string1 = "|}";
      MockFile mockFile0 = new MockFile("|}");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      String string2 = "";
      Locale locale0 = Locale.forLanguageTag("");
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.println();
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "--", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "arg", false, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 0, options1, (-1473), (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }
}
