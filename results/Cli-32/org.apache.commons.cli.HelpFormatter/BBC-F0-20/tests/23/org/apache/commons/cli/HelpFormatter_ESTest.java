/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 20:30:11 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.findWrapPos(" ", 0, 0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.defaultLongOptPrefix = null;
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", "\n", options0, "\n");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-2108);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("(S4|F)jqmH0", options1, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("A2", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.defaultArgName = "A2";
      optionGroup0.addOption(option0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.cli.ParseException");
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.defaultWidth = (-1);
      Options options3 = options2.addOption((String) null, "org.apache.commons.cli.ParseException", true, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("cmdLineSyntax not provided", options3, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix(".");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setOptPrefix(".");
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.optionComparator = null;
      helpFormatter0.defaultSyntaxPrefix = ".";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getDescPadding();
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "HsJ;Vb*X4hM", false, "RU=k3dF@DJcqd");
      Options options2 = options1.addOption("", false, "t2b");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "", "RU=k3dF@DJcqd", options2, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", " ", options0, "KVl;E#l.[-h`%L8Z%5");
      helpFormatter0.findWrapPos("Xi W^v`iAww,sNBnB8o", 1, 1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      Option option0 = new Option((String) null, false, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(true);
      helpFormatter0.setWidth(112);
      optionGroup0.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 112, "[--null  ]", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, " ", true, "?*(Q+A0I|6xaw");
      helpFormatter0.printHelp("eb_Bv}F|^0", "N`txZ|(rG_ksG", options1, "", true);
      options0.helpOptions();
      StringBuffer stringBuffer0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 56, 56, "y");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("arg", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("\"");
      helpFormatter0.renderOptions((StringBuffer) null, 1, options0, 3, 63);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-4066), 3, " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("+))8,0b2d2^0]xZ]i");
      mockPrintWriter0.println('~');
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1977, 74, "[ Options: [ short ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setWidth((-715));
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 117, "org.apache.commons.cli.OptionValidator");
      int int0 = HelpFormatter.DEFAULT_WIDTH;
      helpFormatter2.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer("&TnvGx");
      StringBuffer stringBuffer1 = helpFormatter2.renderWrappedText(stringBuffer0, 74, 36, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, (-3297), 0, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("f]B:phtOF@}V&>43\"", "--", (Options) null, "arg", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-3524);
      helpFormatter0.setLeftPadding((-3524));
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getArgName();
      File file0 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("yzT~_)Sm$S-5c\":&");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "yzT~_)Sm$S-5c\":&";
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) "yzT~_)Sm$S-5c\":&";
      Object object0 = new Object();
      objectArray0[8] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format("arg", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.setWidth(112);
      optionGroup1.toString();
      Options options2 = options1.addOption("", false, "");
      helpFormatter0.printUsage(printWriter0, 33, "yzT~_)Sm$S-5c\":&", options2);
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 112, 2302, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, 112, options0, (-5213), 74);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, (String) null, true, "");
      Options options3 = options2.addOption(option0);
      Options options4 = options3.addOption((String) null, "--", false, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator1;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, 39, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Py7k1tp`1%5SHKg");
      Options options0 = new Options();
      char[] charArray0 = new char[1];
      charArray0[0] = 'i';
      mockPrintWriter0.write(charArray0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "MS!LQ@H8S!O", "arg", options0, 44, 13, (String) null, false);
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-4146);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", "", options0, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "", false, "-");
      options1.helpOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, "usage: ", "-", options1, "Qwso&h", true);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      String string0 = ")XBGWx2|eyQ!T";
      Options options0 = new Options();
      helpFormatter0.findWrapPos(">}zu@=-O*", 6, 88);
      Option option0 = new Option("arg", (String) null);
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 35, "Cnq1_{Wbn;", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 3, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.defaultDescPad = 13;
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 210, "]", (String) null, options0, 210, 210, "]", false);
      helpFormatter0.getDescPadding();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Options options1 = new Options();
      String string0 = null;
      String string1 = "";
      options1.addOption((String) null, "", false, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer0 = new StringBuffer("-");
      int int0 = 33;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1410), options1, 32, 33);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockFile mockFile0 = new MockFile("-");
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 44, "jQfl;wQvV", "]", options0, 2, 44, "]");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "--", options1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 210, "]", (String) null, options0, 2600, 210, "]", false);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = false;
      helpFormatter0.printHelp("org.apache.commons.cli.Options", options0, false);
      StringBuffer stringBuffer0 = new StringBuffer(9);
      options0.hasShortOption("usage: ");
      options0.hasOption("Z9dH'");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 9, options0, 9, 9);
      stringBuffer1.append(0.0);
      stringBuffer0.append((-3624.330057986588));
      int int0 = 111;
      helpFormatter0.renderOptions(stringBuffer1, 3130, options0, 4236, 111);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "--", 3, 13);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(14);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 32, (Options) null, 32, 14);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(false);
      options1.hasLongOption("xh10#*]Gt&16");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      stringBuffer0.append(" ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 74, "\n");
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 74, options1, 463, 74);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(379, " [ARG]", "", options2, " [ARG]");
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.renderWrappedText(stringBuffer0, 10, (-1070), "");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp("8K=", "DYsy-(GhtFT]udY#", options0, "8K=");
      int int0 = 34;
      Options options1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(34, "|~N", "|~N", (Options) null, "|~N", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(false);
      options1.hasLongOption("xh10#*]Gt&16");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      stringBuffer0.append("--");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 74, "\n");
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(2);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\"", "arg", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      char[] charArray0 = new char[8];
      charArray0[0] = 'B';
      charArray0[1] = '\\';
      charArray0[2] = 'z';
      charArray0[3] = 'R';
      charArray0[4] = ')';
      charArray0[5] = 'h';
      charArray0[6] = 'C';
      charArray0[7] = 'w';
      Options options0 = new Options();
      helpFormatter0.printHelp("Lo^4p-H(Y", (String) null, options0, (String) null);
      Options options1 = options0.addOption("arg", "|F8S>L", true, "|F8S>L");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "   ", "&(w{^$8z,ZjTx'[C", options1, "8Rt@2f2qAg7rrcE_", true);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      MockFile mockFile0 = new MockFile("37j<j|=KgAq0Kx-qyfy");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3526, "]", "\"|9G0v''>Py Ru=K0", options0, 3526, 3526, "", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("The option '", "[ option: ", options0, ">Y((pU");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", (String) null, false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("arg", (String) null, options0, "D14sy-(GhFT]udY#");
      helpFormatter0.printHelp(74, "~|F8S>L", "   ", options1, "&(w{^$8z,ZjTx'[C", true);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = "Cannot add value, list full.";
      Options options2 = options1.addOption("arg", "arg", false, "Cannot add value, list full.");
      helpFormatter0.printHelp("Cannot add value, list full.", "", options2, "TD#cn9TtU !!9;G7TJ#");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, " ", "", options1, "TD#cn9TtU !!9;G7TJ#", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append('i');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2);
      mockPrintWriter0.print(0.0F);
      helpFormatter0.printOptions(mockPrintWriter0, 1, options1, 1801, 10);
      helpFormatter1.printHelp(10, "usage: ", (String) null, options1, "--");
      helpFormatter1.printHelp("w", (String) null, options0, (String) null);
      String string0 = helpFormatter1.defaultSyntaxPrefix;
      helpFormatter1.getArgName();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "arg", "", (Options) null, 3, 3, "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 58, 0, "OZONSH3I4");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", " | ", options0, "line.separator", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      OptionGroup optionGroup1 = new OptionGroup();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.createPadding(1);
      helpFormatter1.createPadding(1);
      helpFormatter2.rtrim("+I+R$4>R8{~cU$|");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockFile mockFile0 = new MockFile("-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 21, "");
      helpFormatter0.getOptionComparator();
      Options options1 = new Options();
      OptionGroup optionGroup1 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 21, "V9(f0AxVnpW%gV-", options0);
      helpFormatter0.getDescPadding();
      Options options3 = options2.addOption("NO_ARGS_ALLOWED", false, "V9(f0AxVnpW%gV-");
      helpFormatter0.printHelp("PUo", "", options3, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("srDq]-i[!,n<+", options3, false);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      char[] charArray0 = new char[4];
      charArray0[0] = 'Z';
      mockPrintWriter0.print((float) 1);
      charArray0[1] = 'Z';
      charArray0[2] = '}';
      charArray0[3] = '3';
      mockPrintWriter0.println(charArray0);
      int int0 = 0;
      int int1 = 4;
      String string0 = "V9(f0AxVnpW%gV-";
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "org.apache.commons.cli.HelpFormatter$OptionComparator", "V9(f0AxVnpW%gV-", options0, "T)E6I!;");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("<", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "zrEsEMn", "", (Options) null, 10, 1858, "3d`^~!NTu^;");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("Al4%f@zU` 1#Ach<9&0", 58, (-2319));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockFile mockFile0 = new MockFile("-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      String string0 = "]";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, (String) null, "]", options0, 9, 9, "b3Mor", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile((File) null, "A3mV=u#");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.defaultSyntaxPrefix = "usage: ";
      Options options0 = new Options();
      Options options1 = options0.addOption("", (String) null, true, "--");
      helpFormatter0.printHelp("~l", (String) null, options0, "DYsy-(GhtFT]udY#");
      helpFormatter0.printHelp(74, "|F8S>L", "   ", options1, "&(w{^$8z,ZjTx'[C", true);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      int int0 = 64;
      String string0 = ";9BaJqp(nRf4}";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 64, ";9BaJqp(nRf4}", "", (Options) null, 5, 5, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth(124);
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      MockFile mockFile0 = new MockFile((File) null, "A3mV=u#");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("9be", "AMkxT$A", options0, "Cannot add value, list full.");
      helpFormatter0.printHelp("-", "9be", options0, "@X4I7(5_~\"h;hc");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockFile mockFile0 = new MockFile("-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3526, "]", "", options0, 3526, 3526, "]", true);
      helpFormatter0.printHelp(" ZBzO{~\"!L'yt", " ZBzO{~\"!L'yt", options0, "0w");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "}Iyof&t##a GZH";
      String string1 = "";
      MockFile mockFile0 = new MockFile("}Iyof&t##a GZH", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      char[] charArray0 = new char[0];
      mockFile0.mkdirs();
      mockPrintWriter0.println(charArray0);
      helpFormatter0.getWidth();
      mockFile0.setExecutable(true, true);
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.createPadding(44);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.findWrapPos("F~GF:Qa^bB-", 3, 74);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("(S4|F)jqmH0", options1, false);
      Options options2 = new Options();
      helpFormatter0.printHelp("veW\"ij}~0GW} S", "K@p0)9n$", options0, "BN3N{qiz='F?{f2");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("'I1-r", "X34*]*kVJuw", (Options) null, "uN+*(H_I{X9l)456Oo");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      MockFile mockFile0 = new MockFile((File) null, "A3mV=u#");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("9be", "AMkxT$A", options0, "Cannot add value, list full.");
      helpFormatter0.printHelp("\n", "org.apache.commons.cli.HelpFormatter$1", options0, "Cannot add value, list full.");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "&d5jOtF-";
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "&d5jOtF-", "", (Options) null, 3, 0, "&d5jOtF-");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "}Iyof&t##a GZH";
      MockFile mockFile0 = new MockFile("}Iyof&t##a GZH", "KN");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "KN");
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "}Iyof&t##a GZH", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockFile mockFile0 = new MockFile("usage: ", "-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      String string0 = "]";
      String string1 = "line.separator";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1211, "GR(QX_", "", options0, 1211, (-1715), "line.separator", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("}Iyof&t##a GZH", "KN");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockFile mockFile1 = new MockFile(mockFile0, "arg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = new Options();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("}Iyof&t##a GZH/KN");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Option option0 = new Option("arg", true, "--");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      options2.addOption((String) null, "2P$n;", true, "arg");
      helpFormatter1.printHelp("]X(h[*@d:W{", (String) null, options0, "");
      helpFormatter2.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-2149), options1, 74, 33);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("}Iyof&t##a GZH", "KN");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockFile mockFile1 = new MockFile(mockFile0, "arg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "--");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.getMatchingOptions("org.apache.commons.cli.HelpFormatter$1");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2033, "--", "KN", options1, (-316), 2033, "arg");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      helpFormatter0.getSyntaxPrefix();
      String string0 = "c<I1!L+s;";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("c<I1!L+s;", "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 26, "}a@}Tlo8ZQcYo0", "-", options0, 617, 617, "-", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      int int0 = (-3140);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-3140), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("}Iyof&t##a GZH", "KN");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockFile mockFile1 = new MockFile(mockFile0, "arg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "--");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      options2.addOption((String) null, "2P$n;", true, "arg");
      helpFormatter1.printHelp("]X(h[*@d:W{", (String) null, options0, "");
      helpFormatter2.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("w", (String) null, options0, (String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 3, options0, 3, (-671));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 31, "}Iyof&t##a GZH");
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 31, "KN", options1);
      helpFormatter0.getDescPadding();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.printHelp("<", "cmdLineSyntax not provided", options1, "eAg`b VTFAS");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 81, "");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.createPadding(44);
      helpFormatter0.printHelp("8K=", "", options1, "");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      MockFile mockFile0 = new MockFile((File) null, "A3mV=u#");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options1 = options0.addOption("", "--", true, "--");
      helpFormatter2.printHelp("0MZVWK67O<Xb@x&)>X.", "4h<=YM'", options1, "[ARG...]");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-207), "[ Options: [ short ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(false);
      options1.hasLongOption("xh10#*]Gt&16");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 19, options1, (-222), 19);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      String string0 = "YL'x??";
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1620, 321, "YL'x??");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "zP N4ddFo;5dcw>I");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("zP N4ddFo;5dcw>I");
      MockFile mockFile0 = new MockFile("arg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      int int0 = (-839);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("GYtf[fn =fZn", "arg", false, "l;,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'GYtf[fn =fZn' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.toString();
      optionGroup0.toString();
      helpFormatter0.printHelp("X|mk*h|7K?-3r)", "", options1, (String) null);
      helpFormatter0.printHelp("g?=X", options0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 506;
      helpFormatter0.defaultLeftPad = 506;
      helpFormatter0.rtrim("");
      String string0 = null;
      File file0 = MockFile.createTempFile("usage: ", "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3304, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      MockFile mockFile0 = new MockFile((File) null, "A3mV=u#");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(10, "usage: ", (String) null, options1, "--");
      helpFormatter1.printHelp("w", (String) null, options0, (String) null);
      helpFormatter0.getLongOptSeparator();
      helpFormatter1.getArgName();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("}Iyof&t##a GZH", "KN");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3854, "uM");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)88;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLeftPadding();
      mockPrintWriter0.print((double) 1);
      helpFormatter0.setSyntaxPrefix("KN");
      Options options0 = new Options();
      options0.getOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2549, 2549, "");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(";1A", "W[b&?orX?O70]6s9");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLeftPadding();
      mockPrintWriter0.print((double) 74);
      helpFormatter0.setSyntaxPrefix((String) null);
      int int0 = 0;
      Options options0 = new Options();
      options0.getOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = "";
      options1.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "", (String) null, options0, (-4159), 0, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, (-604), options0, 59, 1157);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, "-", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      StringBuffer stringBuffer0 = new StringBuffer("--");
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-1844), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", (String) null, (Options) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(";1A", "W[b&?orX?O70]6s9");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3854, ";1A");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLeftPadding();
      mockPrintWriter0.print((double) 3854);
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.Option");
      Options options0 = new Options();
      options0.getOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, (-460), "pL@;0qF");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = null;
      int int0 = (-269);
      String string1 = "dp'I\\]y";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-269), "dp'I]y", "w", (Options) null, "~.wAaIUcaDX\r");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(3);
      Options options0 = new Options();
      options0.addOption("", true, "usage: ");
      helpFormatter0.setArgName("usage: ");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      String string0 = "Q.I[yX|+*%q";
      int int0 = 2968;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 2968, "Q.I[yX|+*%q");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      helpFormatter0.defaultLeftPad = 32;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(248, "n,6;Q", "2{U&fb4Cb1", (Options) null, "2{U&fb4Cb1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("}Iyof&t##a GZH", "KN");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = 0;
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLeftPadding();
      mockPrintWriter0.print(0.0);
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.HelpFormatter$1");
      Options options0 = new Options();
      options0.getOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "pL@;0qF", "KN", options0, 0, (-1), "pL@;0qF", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.HelpFormatter$1");
      Options options0 = new Options();
      options0.getOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptPrefix();
      String string0 = null;
      Options options0 = new Options();
      options0.getMatchingOptions("IO>1_)QJ?u?O");
      URI uRI0 = MockURI.aHttpURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("[");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("-", "--");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) comparator0;
      objectArray0[6] = (Object) mockFile0;
      objectArray0[7] = (Object) locale0;
      objectArray0[8] = (Object) comparator0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "--", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 74, "uzk9uOPUEEgs]^t\"E");
      helpFormatter0.createPadding(74);
      int int0 = (-319);
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = null;
      try {
        option0 = new Option("usage: ", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      String string0 = null;
      Options options0 = new Options();
      String string1 = "usage: ";
      Options options1 = options0.addOption("", true, "usage: ");
      Options options2 = options1.addOption("arg", "", true, " ");
      options2.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options2, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 506;
      helpFormatter0.defaultLeftPad = 506;
      helpFormatter0.rtrim("");
      String string0 = null;
      // Undeclared exception!
      try { 
        MockFile.createTempFile((String) null, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "jI8hY$e:#7W~,";
      helpFormatter0.setSyntaxPrefix("jI8hY$e:#7W~,");
      helpFormatter0.setLongOptSeparator("jI8hY$e:#7W~,");
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = options0.addOption("arg", "]", true, "\n");
      String string1 = null;
      // Undeclared exception!
      try { 
        options1.addOption("`AY})RI6y3.0I", true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '`AY})RI6y3.0I' contains an illegal character : '`'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "";
      Options options0 = null;
      String string1 = "~.wAaIUcaDX\\r";
      helpFormatter0.defaultSyntaxPrefix = "+7KW'";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "", (Options) null, "~.wAaIUcaDX\r");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 10;
      String string0 = "org.apache.commons.cli.OptionGroup";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "org.apache.commons.cli.OptionGroup");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, ")XBkGWx2|eyQ!T", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 0, "Q.I[yX|+*%q");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, (-1), 1, "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      int int0 = (-168);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-168), "0i4i)[U +I$~)\"A=");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "4|n,{@%NR;TFH[jg\\";
      helpFormatter0.defaultSyntaxPrefix = "4|n,{@%NR;TFH[jg";
      helpFormatter0.setLeftPadding(31);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("Y!>opw", " ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setOptPrefix((String) null);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "\n", false, (String) null);
      String string1 = "7{%c{";
      options1.getMatchingOptions("R>|Vvm>`etR");
      boolean boolean0 = true;
      helpFormatter0.defaultSyntaxPrefix = "7{%c{";
      // Undeclared exception!
      try { 
        options1.addOption("7{%c{", true, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '7{%c{' contains an illegal character : '{'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator(" ");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      int int0 = 1270;
      String string0 = "pu0[a-";
      helpFormatter0.renderWrappedText(stringBuffer0, 1270, 1270, "pu0[a-");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("-", false, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.format("arg", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      Locale locale0 = Locale.FRENCH;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "/Vn}e&0*v;)#&", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 1, "/Vn}e&0*v;)#&", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.setNewLine("wir><#X8'h");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "AMkxT$A";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      MockFile mockFile0 = new MockFile((File) null, "A3mV=u#");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 32, "A3mV=u#", "]", options1, 3526, 32, "AMkxT$A", true);
      options1.addOption("g", true, "}Qm?lj E-[x]TF");
      Option option0 = null;
      try {
        option0 = new Option("\n", "p0;Kpzj-Cn/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "[ Options: [ short ");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "KN";
      MockFile mockFile0 = new MockFile("}Iyof&t##a GZH", "KN");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "KN");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "usage: ");
      options1.addOption("arg", "", true, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "usage: ", options1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, (String) null, "", (Options) null, 9, 9, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.createPadding(1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(";i#Uh*`--", "DW@JJ?lK", (Options) null, "A CloneNotSupportedException was thrown: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("X|mk*h|7K?-3r)", "", options1, (String) null);
      assertEquals("arg", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ">";
      StringBuffer stringBuffer0 = new StringBuffer(">");
      int int0 = (-2542);
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("-", true, ">");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "u^\"]=";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("u^\"]=", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "lg1_cr~\"J8Lq p.Y";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("lg1_cr~\"J8Lq p.Y", "h#R&H?51i]ow^%daVw$", options1, "lg1_cr~\"J8Lq p.Y", true);
      String string1 = "";
      helpFormatter0.defaultDescPad = (-1120);
      options1.toString();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1120), "", "lg1_cr~\"J8Lq p.Y", options1, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.createPadding(1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (String) null, (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }
}
