/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 20:26:44 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.ObjectOutputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Comparator;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-1094);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("R|R>0#2`\"|]x/ThL", "R|R>0#2`\"|]x/ThL", options0, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-233);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setLongOptPrefix("kb");
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.defaultNewLine = "e_w,E";
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, " ");
      // Undeclared exception!
      helpFormatter0.printHelp("-", "-", options1, "-", true);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      helpFormatter0.rtrim("");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = helpFormatter0.defaultNewLine;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 1, "\n");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "arg", options0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1756));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "arg", "arg", options0, "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = null;
      helpFormatter0.setDescPadding((-877));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      String string0 = "fPO~ZYws3a1.5=)g`v";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("fPO~ZYws3a1.5=)g`v", "fPO~ZYws3a1.5=)g`v", (Options) null, "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(" ", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      Option option0 = new Option("", false, "TP%#}./A`");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      helpFormatter0.printOptions(printWriter0, 0, options2, 1002, 7);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      helpFormatter0.setLeftPadding(33);
      Options options0 = new Options();
      String string0 = "8&Y{D&LxL3b1A(0";
      // Undeclared exception!
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", "", options0, "8&Y{D&LxL3b1A(0");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "144aGk3x";
      helpFormatter0.defaultArgName = "144aGk3x";
      helpFormatter0.rtrim("144aGk3x");
      Options options0 = null;
      helpFormatter0.defaultWidth = (-148);
      String string1 = "\"FUm.z!d_";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("144aGk3x", "144aGk3x", (Options) null, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-906), (Options) null, 34, (-906));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.cli.OptionValidator");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-1);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.rtrim("");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "arg", 74, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(" ");
      helpFormatter0.findWrapPos(" :: ", 0, 0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "~}7pA7/~D", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 1595, "_UA", "ug(l5O>t:O#l.e.@*y", options0, 1, 1130, (String) null, false);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1777), " ] [ long ", "", (Options) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.findWrapPos("usage: ", 3, 1);
      Options options0 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      helpFormatter0.setArgName("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 6, "[", "", options0, 9, 9, "", true);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultNewLine;
      String string1 = "org.apache.commons.cli.HelpFormatter$1";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter$1");
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = helpFormatter0.defaultNewLine;
      options0.getOption("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 1, "\n");
      mockPrintWriter0.println("G`6<7xw;P^,[");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 30, "\n", "[", options0, 9, 30, "[", true);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "G`6<7xw;P^,[", (String) null, options0, 30, 9, "", false);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "14aG3x";
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "NO_ARGS_ALLOWED", "usage: ", (Options) null, "", false);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("arg", "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "5<\"7");
      Options options2 = options1.addOption("Y", "usage: ", false, "Rp]yIQMz}HNAs");
      options1.getOption("\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("--", "Rp]yIQMz}HNAs", options3, "0?>'6Ny82/`pY7", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Locale locale0 = Locale.ITALIAN;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "'";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) options1;
      objectArray0[3] = (Object) options1;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "Rp]yIQMz}HNAs";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "'", objectArray0);
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "arg", ">WpxEh", options0, 0, (-2179), (String) null);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = helpFormatter0.defaultNewLine;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 1, "\n");
      helpFormatter0.printHelp("\n", "\n", options0, "\n", false);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 55, (-222), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      String string0 = ".T1D(|DZT&\"V_IRY\\^";
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 32, 32, ".T1D(|DZT&\"V_IRY^");
      helpFormatter0.findWrapPos("", 747, 74);
      Options options0 = new Options();
      String string1 = "--";
      Option option0 = new Option("arg", true, "--");
      Options options1 = options0.addOption(option0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)115;
      byte byte0 = (byte)0;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, (-3863), options1, 86, 747);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = helpFormatter0.defaultNewLine;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("%vs)#sOGyb/h!a{=");
      int int0 = 58;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 58, (-883), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = helpFormatter0.defaultNewLine;
      Options options1 = new Options();
      Option option0 = new Option("", true, "g5}^~G}y]`%TC");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.toString();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options2 = options0.addOptionGroup(optionGroup1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-213), "\n", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-2125));
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.findWrapPos("usage: ", 0, 0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      String string0 = "]";
      helpFormatter0.defaultArgName = "]";
      String string1 = "7B<ESQ";
      File file0 = MockFile.createTempFile("7B<ESQ", "#");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      helpFormatter0.printOptions(mockPrintWriter0, 31, options0, 10, 3);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "uZEP=9<W?&l");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getNewLine();
      String string2 = "M`.;*%^[";
      helpFormatter0.rtrim("M`.;*%^[");
      helpFormatter0.renderOptions((StringBuffer) null, 10, options0, 31, 5);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-4027));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = helpFormatter0.defaultNewLine;
      Options options1 = new Options();
      Option option0 = new Option("", true, "g5}^~G}y]`%TC");
      OptionGroup optionGroup0 = new OptionGroup();
      option0.toString();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("ImkDVDkaSD=;;zjY", "", options0, "\n", true);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("I=bOi):Al114G[AS!z");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "I=bOi):Al114G[AS!z";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, 3654, " I*=*>`pSr");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
      StringBuffer stringBuffer0 = new StringBuffer("--");
      helpFormatter0.renderWrappedText(stringBuffer0, 32, 32, ".T1D(|DZT&\"V_IRY^");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.findWrapPos("", 747, 74);
      Options options1 = new Options();
      Option option0 = new Option("arg", true, "--");
      options1.addOption(option0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-", false);
      option0.clearValues();
      Options options2 = options1.addOption("", "usage: ", false, "~ #tJor}m~G_");
      Options options3 = options2.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Locale locale0 = Locale.forLanguageTag("Y#tESo");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) options3;
      objectArray0[1] = (Object) "~ #tJor}m~G_";
      objectArray0[2] = (Object) options2;
      objectArray0[3] = (Object) "~ #tJor}m~G_";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, " ", objectArray0);
      helpFormatter1.printUsage(printWriter0, 74, "-", options1);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = new Option("", "usage: ", true, " ");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-854), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Options options0 = new Options();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options1 = new Options();
      Option option0 = new Option("", false, (String) null);
      Options options2 = options1.addOption(option0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.printHelp("--", "", options2, "--");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      mockPrintWriter0.close();
      int int0 = 3060;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3060, 3060, "");
      Options options0 = new Options();
      Option option0 = new Option((String) null, false, (String) null);
      option0.getValues();
      option0.clearValues();
      options0.addOption(option0);
      options0.toString();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, "arg");
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer1, (-2), options0, 2193, 2193);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.findWrapPos("usage: ", 3, 1);
      Options options0 = new Options();
      Option option0 = new Option("", true, "MF_5J]9eZWiUk(f");
      Options options1 = options0.addOption(option0);
      String string0 = ">";
      helpFormatter0.printHelp("usage: ", "-", options1, ">", true);
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-96);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 59, options0, (-96), (-2067));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.findWrapPos("usage: ", 3, 1);
      Options options0 = new Options();
      Option option0 = new Option("", true, "MF_5J]9eZWiUk(f");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("usage: ", "WE{sV", options1, ">", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("XH");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter2, 0, "MF_5J]9eZWiUk(f", "XH", options0, 0, (-1), "rw9ZmLlInDkM BXH", true);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getDescPadding();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.defaultArgName = "gg3^";
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptPrefix();
      helpFormatter0.rtrim(" ");
      int int0 = (-2465);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Options options0 = new Options();
      options0.hasOption("arg");
      options0.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2465), "org.apache.commons.cli.Util", " ", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("f.crY");
      helpFormatter0.defaultArgName = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("f.crY", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object object0 = new Object();
      mockPrintWriter0.close();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3060, 3060, "N'.Kt:");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getSyntaxPrefix();
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "");
      option0.clearValues();
      Options options1 = options0.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "JpARt", options0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      mockPrintWriter1.print((Object) optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "--", "cmdLineSyntax not provided", options1, (-1), 4170, (String) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(42);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setNewLine("U]%L(JI?qKs]'pp");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(42, " ", (String) null, options0, (String) null, false);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1);
      mockPrintWriter0.print(1.0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "ity", "ity", (Options) null, (-4312), (-222), "[ Options: [ short ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("}");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "V)?\"I:D}x8";
      objectArray0[1] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "V)?\"I:D}x8";
      mockPrintWriter0.close();
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "V)?\"I:D}x8";
      PrintWriter printWriter0 = mockPrintWriter0.format("V)?\"I:D}x8", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 1791, 1791, "V)?\"I:D}x8");
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      Option option0 = new Option("PxD", false, "-");
      option0.clearValues();
      Options options1 = options0.addOption(option0);
      helpFormatter0.printUsage(printWriter0, 1791, "}", options1);
      helpFormatter0.rtrim("");
      helpFormatter0.printHelp("org.apache.commons.cli.ParseException", "d^#A", options1, "LbaSZ,8u#Yl$Ka}JJW", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-503), "zQe'e*$TI<,", "", options0, "Y0", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = helpFormatter0.defaultNewLine;
      Object object0 = new Object();
      Options options1 = new Options();
      helpFormatter0.printHelp("\n", "--", options1, " ", true);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.createPadding(2230);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3683, "", "", options1, (-2513), 3683, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = helpFormatter0.defaultNewLine;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      mockPrintWriter0.printf("", (Object[]) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("\n", "--", "hdI", "--").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options1 = new Options();
      helpFormatter0.printHelp("hdI", "hdI", options1, "7w", false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 91, "org.apache.commons.cli.HelpFormatter$1", options1);
      helpFormatter0.rtrim("");
      options1.addOption((String) null, true, "[");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 166, "'<>:B/Z{cKL", "--", options1, 64, 2742, "", true);
      helpFormatter1.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockFile.createTempFile("usage: ", "usage: ", (File) mockFile0);
      Object object0 = new Object();
      Option option0 = new Option((String) null, true, "Y(=;B2We'");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "1Kbe&/7PTV,W}");
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("%kVHH1", "Y(=;B2We'", options2, "|", true);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " | ";
      StringBuffer stringBuffer0 = new StringBuffer(" | ");
      Options options0 = null;
      int int0 = 99;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1281, (Options) null, 36, 99);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.findWrapPos("usage: ", 3, 1);
      Options options0 = new Options();
      String string0 = "'";
      helpFormatter0.rtrim((String) null);
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", true, "WE{sV");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = helpFormatter0.defaultNewLine;
      Options options1 = new Options();
      Option option0 = new Option("", true, "g5}^~G}y]`%TC");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options0.addOptionGroup(optionGroup1);
      options2.addOption(option0);
      Options options3 = options2.addOption("h", true, "MF_5J]9eZWiUk(f");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", "", options3, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = helpFormatter0.defaultNewLine;
      Options options1 = new Options();
      boolean boolean0 = true;
      Option option0 = new Option("", true, "g5}^~G}y]`%TC");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options0.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption(option0);
      Options options4 = options2.addOption("h", true, "MF_5J]9eZWiUk(f");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", "", options4, (String) null, true);
      helpFormatter0.getArgName();
      int int0 = (-2314);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2314), "", "", options3, "MF_5J]9eZWiUk(f", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-", "arg");
      Object object0 = new Object();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.optionComparator = comparator0;
      objectArray0[2] = (Object) options0;
      objectArray0[0] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 3, (String) null, "<", options0, 3, 2, "--", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@5GC");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("@5GC");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.defaultLongOptPrefix = "cg";
      helpFormatter0.defaultWidth = (-1084);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 13, options0, 34, 2785);
      options0.getOptions();
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 13, 2785, "c|27@&");
      helpFormatter0.renderOptions(stringBuffer2, 34, options0, 34, 34);
      helpFormatter0.defaultLongOptPrefix = "Yx\"u*^n5!*E";
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptPrefix();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos(";=4UO8nn;'4s%G%", (-1084), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 10, "[", "--", options0, 10, (-867), "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("}");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "V)?\"I:D}x8";
      objectArray0[1] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "V)?\"I:D}x8";
      PrintWriter printWriter0 = mockPrintWriter0.format("V)?\"I:D}x8", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 1791, 1791, "V)?\"I:D}x8");
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      helpFormatter0.printOptions(mockPrintWriter0, (-1482), options0, 1791, 1791);
      Option option0 = new Option("PxD", false, "");
      option0.clearValues();
      options0.addOption(option0);
      Options options1 = new Options();
      helpFormatter0.printHelp("usage: ", "V)?\"I:D}x8", options0, "", true);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("Illegal option name '", (-1), (-301));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter0.print(3786.1848F);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 300, (String) null, (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.setLongOptSeparator("");
      Options options1 = options0.addOption("", true, "\n");
      int int0 = 56;
      options1.getMatchingOptions("usage: ");
      helpFormatter0.defaultWidth = 56;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "14aG3x";
      helpFormatter0.defaultArgName = "14aG3x";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("14aG3x", false);
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      mockPrintWriter0.printf("org.apache.commons.cli.HelpFormatter$OptionComparator", (Object[]) null);
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 47, (Options) null, 47, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = helpFormatter0.defaultNewLine;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      PrintWriter printWriter0 = mockPrintWriter0.printf("", (Object[]) null);
      helpFormatter0.printWrapped(printWriter0, 8, 8, "\n");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("\n", "--", (String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options1 = new Options();
      helpFormatter0.printHelp("E)M?", "", options1, "", false);
      helpFormatter0.rtrim("'");
      Options options2 = options0.addOption("", false, "");
      helpFormatter0.printHelp(153, "'", "", options2, "'");
      helpFormatter0.getOptionComparator();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3779, "'", "\n", options2, 8, 79, "\n", false);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = helpFormatter0.defaultNewLine;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      PrintWriter printWriter0 = mockPrintWriter0.printf("", (Object[]) null);
      helpFormatter0.printWrapped(printWriter0, 8, 8, "\n");
      helpFormatter0.setNewLine("");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("\n", "").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options1 = new Options();
      helpFormatter0.printHelp("E)M?", "", options1, "", false);
      MockFile mockFile0 = new MockFile("", "Y)[kbakP3[#P;-:0");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.findWrapPos("", 3852, (-677));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 8, "`^(7vx<", "", options0, 3852, (-677), "ceb>,p", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "}";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("}");
      String string1 = "V)?\"I:D}x8";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1548, "V)?\"I:D}x8", "Hs", options0, 24, (-650), "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      PrintWriter printWriter0 = mockPrintWriter0.printf("", (Object[]) null);
      helpFormatter0.printWrapped(printWriter0, 8, 8, "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]");
      helpFormatter0.setNewLine("");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("usage: ", (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options1 = new Options();
      helpFormatter0.printHelp("E)M?", "", options1, "", false);
      StringBuffer stringBuffer0 = new StringBuffer(44);
      helpFormatter0.renderOptions(stringBuffer0, 8, options1, 44, 44);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.setLongOptSeparator((String) null);
      PrintWriter printWriter0 = mockPrintWriter0.printf("", (Object[]) null);
      helpFormatter0.printWrapped(printWriter0, 8, 8, "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]");
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 2, (-778));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1246);
      String string0 = "org.apache.commons.cli.HelpFormatter";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "14aG3x";
      assertEquals(3, helpFormatter0.getDescPadding());
      
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.getSyntaxPrefix();
      int int0 = helpFormatter0.findWrapPos("usage: ", 0, 0);
      assertEquals(6, int0);
      
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "14aG3x";
      helpFormatter0.defaultDescPad = 0;
      Options options0 = new Options();
      helpFormatter0.printHelp("14aG3x", "14aG3x", options0, "14aG3x", false);
      helpFormatter0.createPadding(0);
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("14aG3x", 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-", "arg");
      MockFile.createTempFile("usage: ", "usage: ", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("a)[(eE@!G>LboC");
      mockPrintWriter0.close();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "a)[(eE@!G>LboC";
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockFile0;
      objectArray0[5] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("usage: ", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 1791, 1791, "WM-");
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      Option option0 = new Option("", false, "");
      option0.clearValues();
      options0.addOption(option0);
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1791, "", "'", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = helpFormatter0.defaultNewLine;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      PrintWriter printWriter0 = mockPrintWriter0.printf("", (Object[]) null);
      helpFormatter0.printWrapped(printWriter0, 8, 8, "\n");
      helpFormatter0.setNewLine("");
      Options options1 = new Options();
      helpFormatter0.printHelp("E)M?", "", options1, "", false);
      MockFile mockFile0 = new MockFile("", "Y)[kbakP3[#P;-:0");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      mockPrintWriter1.println((Object) "\n");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 1937, "'", options0);
      helpFormatter0.rtrim("'");
      options0.addOption("", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 1, "rc<Q7$B;b^0", "rc<Q7$B;b^0", options0, (-183), (-183), "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printHelp("[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", "", options0, "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", false);
      MockFile mockFile0 = new MockFile("\n", "");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1, "arg", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Illegal option name '", "[ Options: [ short ", (Options) null, "ko,v#r??F#:UhR", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "b|Tu(L(dH)W";
      Options options0 = new Options();
      helpFormatter0.printHelp("b|Tu(L(dH)W", options0, true);
      String string1 = "";
      MockFile mockFile0 = new MockFile("");
      String string2 = "gk|{TMWX=jdP}";
      MockFile mockFile1 = new MockFile(mockFile0, "gk|{TMWX=jdP}");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      int int0 = 0;
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "", 0, 0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 701, "", "Etj>bZj~:%7gA0lO}", options0, 701, 0, "UK(_p'aPzh>KwoE$`", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      PrintWriter printWriter0 = mockPrintWriter0.printf("", (Object[]) null);
      helpFormatter0.printWrapped(printWriter0, 8, 8, "\n");
      helpFormatter0.setNewLine("");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Options options1 = new Options();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "q[p~ZFm.");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          HelpFormatter helpFormatter0 = new HelpFormatter();
          Options options0 = new Options();
          String string0 = helpFormatter0.defaultNewLine;
          boolean boolean0 = false;
          Options options1 = new Options();
          Option option0 = new Option("", true, "g5}^~G}y]`%TC");
          OptionGroup optionGroup0 = new OptionGroup();
          OptionGroup optionGroup1 = optionGroup0.addOption(option0);
          optionGroup1.toString();
          Options options2 = options0.addOptionGroup(optionGroup1);
          options2.addOption(option0);
          String string1 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
          Options options3 = options2.addOption("h", false, "MF_5J]9eZWiUk(f");
          helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", "", options3, (String) null, true);
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.GeneratedConstructorAccessor71.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:234)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:189)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.findWrapPos("usage: ", 0, 1);
      Options options0 = new Options();
      Option option0 = new Option("", true, "MF_5J]9eZWiUk(f");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("usage: ", "WE{sV", options1, ">", true);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = helpFormatter0.defaultNewLine;
      Object object0 = new Object();
      Options options1 = new Options();
      Options options2 = options1.addOption("", "' contains an illegal character : '", true, "");
      helpFormatter0.printHelp(" ", "X", options2, "]", false);
      String string1 = HelpFormatter.DEFAULT_OPT_PREFIX;
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("}");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "V)?\"I:D}x8";
      objectArray0[1] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "V)?\"I:D}x8";
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "V)?\"I:D}x8";
      PrintWriter printWriter0 = mockPrintWriter0.format("V)?\"I:D}x8", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 1791, 1791, "V)?\"I:D}x8");
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      Option option0 = new Option("PxD", false, "");
      option0.clearValues();
      Options options1 = options0.addOption(option0);
      helpFormatter0.printUsage(printWriter0, 1791, "}", options1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(pipedOutputStream0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 74, "V)?\"I:D}x8", "J", options1, 101, 1791, "usage: ");
      helpFormatter0.setNewLine("usage: ");
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, (-619), "mU[~CuBvlN");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = helpFormatter0.defaultNewLine;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      PrintWriter printWriter0 = mockPrintWriter0.printf("", (Object[]) null);
      helpFormatter0.printWrapped(printWriter0, 8, 8, "\n");
      helpFormatter0.setNewLine("");
      mockPrintWriter0.printf("", (Object[]) null);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 8, 8, "");
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", 25, (-778));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = helpFormatter0.defaultNewLine;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      PrintWriter printWriter0 = mockPrintWriter0.printf("", (Object[]) null);
      helpFormatter0.printWrapped(printWriter0, 8, 8, "\n");
      helpFormatter0.setNewLine("");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("\n", (String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options1 = new Options();
      helpFormatter0.printHelp("E)M?", "", options1, "", false);
      MockFile mockFile0 = new MockFile("", "Y)[kbakP3[#P;-:0");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 1937, "'", options0);
      helpFormatter0.rtrim("'");
      Options options2 = options0.addOption("", false, "");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 117, "\n", "", options2, 2470, 25, "_(", false);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "14aG3x";
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "NO_ARGS_ALLOWED", "usage: ", (Options) null, "", false);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "14aG3x";
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 701, 701);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(" ");
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.findWrapPos("arg", 1615, 3);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "14aG3x";
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.findWrapPos("usage: ", 0, 0);
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 6, "");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("}");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "V)?\"I:D}x8";
      objectArray0[1] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "V)?\"I:D}x8";
      mockPrintWriter0.close();
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "V)?\"I:D}x8";
      PrintWriter printWriter0 = mockPrintWriter0.format("V)?\"I:D}x8", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 1791, 1791, "V)?\"I:D}x8");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setNewLine("PxD");
      helpFormatter0.getOptionComparator();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2182, "6|kA RtaW=QXoF=");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "b|Tu(L(dH)W";
      Options options0 = new Options();
      helpFormatter0.printHelp("b|Tu(L(dH)W", options0, true);
      String string1 = " ";
      MockFile mockFile0 = new MockFile(" ");
      String string2 = "gk|{TMWX=jdP},";
      MockFile mockFile1 = new MockFile(mockFile0, "gk|{TMWX=jdP},");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      int int0 = 0;
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ", 0, 0);
      String string3 = "Etj>bZj~:%7gA0lO}";
      helpFormatter0.printHelp(printWriter0, 701, " ", "Etj>bZj~:%7gA0lO}", options0, 701, 0, "UK(_p'aPzh>KwoE$`", false);
      printWriter0.print((float) 1);
      mockFile1.setExecutable(true, true);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("Y(ZDRX<", options1);
      Option option0 = null;
      try {
        option0 = new Option("gbTZIt#jT-O, _#]v", true, "Y(ZDRX<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'gbTZIt#jT-O, _#]v' contains an illegal character : '#'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "14aG3x";
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "b|Tu(L(dH)W";
      Options options0 = new Options();
      helpFormatter0.printHelp("b|Tu(L(dH)W", options0, true);
      String string1 = " ";
      MockFile mockFile0 = new MockFile(" ");
      MockFile mockFile1 = new MockFile(mockFile0, "gk|{TMWX=jdP},");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockFile0.createNewFile();
      int int0 = 0;
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ", 0, 0);
      helpFormatter0.printHelp(printWriter0, 701, " ", "Etj>bZj~:%7gA0lO}", options0, 701, 0, "UK(_p'aPzh>KwoE$`", false);
      mockFile1.setExecutable(true, false);
      String string2 = "Y(ZDRX<";
      helpFormatter0.getLeftPadding();
      helpFormatter0.printHelp("Im", "", options0, " ");
      Option option0 = null;
      try {
        option0 = new Option("gk|{TMWX=jdP},", false, "Y(ZDRX<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'gk|{TMWX=jdP},' contains an illegal character : '|'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      PrintWriter printWriter0 = mockPrintWriter0.printf("", (Object[]) null);
      helpFormatter0.printWrapped(printWriter0, 8, 8, "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]");
      helpFormatter0.setNewLine("");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options1 = new Options();
      helpFormatter0.printHelp("E)M?", "", options1, "", false);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      PrintWriter printWriter0 = mockPrintWriter0.printf("", (Object[]) null);
      helpFormatter0.printWrapped(printWriter0, 8, 8, "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]");
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("usage: ", 2, (-778));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("}");
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "V)?\"I:D}x8";
      mockPrintWriter0.close();
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "V)?\"I:D}x8";
      PrintWriter printWriter0 = mockPrintWriter0.format("V)?\"I:D}x8", objectArray0);
      int int0 = 1791;
      helpFormatter0.printWrapped(printWriter0, 1791, 1791, "V)?\"I:D}x8");
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("}");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "V)?\"I:D}x8";
      objectArray0[1] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "V)?\"I:D}x8";
      mockPrintWriter0.close();
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "V)?\"I:D}x8";
      PrintWriter printWriter0 = mockPrintWriter0.format("V)?\"I:D}x8", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 1791, 1791, "V)?\"I:D}x8");
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      String string0 = "PxD";
      Option option0 = new Option("PxD", false, "");
      option0.clearValues();
      Options options1 = options0.addOption(option0);
      helpFormatter0.printUsage(printWriter0, 1791, "}", options1);
      int int0 = 2182;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1), "#R7", "J", options0, 2182, 63, "V)?\"I:D}x8");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-4214), "t=6|1", "mU:n", (Options) null, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("}");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "V)?\"I:D}x8";
      objectArray0[1] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "V)?\"I:D}x8";
      mockPrintWriter0.close();
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "V)?\"I:D}x8";
      PrintWriter printWriter0 = mockPrintWriter0.format("V)?\"I:D}x8", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 1791, 1791, "V)?\"I:D}x8");
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      Option option0 = new Option("PxD", false, "");
      option0.clearValues();
      options0.addOption(option0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.printHelp(18, "V)?\"I:D}x8", "}", options0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "<";
      Options options0 = new Options();
      options0.toString();
      String string1 = null;
      options0.addOption("", "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", false, "org.apache.commons.cli.AlreadySelectedException");
      options0.addOption("arg", false, "yQG(*(>");
      Options options1 = options0.addOption((String) null, true, "arg");
      helpFormatter0.setNewLine("yQG(*(>");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "<", "n7zM^D&*", options1, "<");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("yQG(*(>");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      helpFormatter0.printHelp("<", "<", options0, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(" ");
      helpFormatter0.setNewLine("");
      MockFile mockFile0 = new MockFile("-", "");
      File file0 = MockFile.createTempFile("arg", "", (File) mockFile0);
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter0.format(" ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      int int0 = 1443;
      String string0 = "\\KZPD";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("s5 <8}(%P", "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 's5 <8}(%P' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1057);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("\n", "usage: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // usage: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("<", 391, (-2809));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = helpFormatter0.defaultNewLine;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("\n", (-2464), (-2464));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.defaultWidth = 0;
      String string0 = ")UYb8d^.Nf";
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, ")UYb8d^.Nf", "Cannot add value, list full.", options0, "Cannot add value, list full.");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.defaultWidth = 0;
      String string0 = ")UYb8d^.Nf";
      String string1 = "Cannot add value, list full.";
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, ")UYb8d^.Nf", "Cannot add value, list full.", options0, "Cannot add value, list full.");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "14aG3x";
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "14aG3x", (Options) null, "14aG3x", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("PuWxJs");
      helpFormatter0.defaultArgName = "14aG3x";
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.findWrapPos("usage: ", 32, 0);
      helpFormatter0.getOptPrefix();
      assertEquals("PuWxJs", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.getWidth();
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, int0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      String string0 = "ad\"~=o$|#Wsjq\\fq,";
      String string1 = "CI7Q~:xX";
      helpFormatter0.setOptPrefix("CI7Q~:xX");
      helpFormatter0.setSyntaxPrefix("ad\"~=o$|#Wsjq\fq,");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string2 = "";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("=l>B7/Lp", "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '=l>B7/Lp' contains an illegal character : '='
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "cmdLineSyntax not provided";
      helpFormatter0.setArgName("cmdLineSyntax not provided");
      helpFormatter0.setLongOptPrefix("cmdLineSyntax not provided");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.defaultArgName = ";1msBx";
      String string1 = "";
      String string2 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = null;
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setSyntaxPrefix(" ");
      String string0 = "b'";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, "b'");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // b'
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.findWrapPos("usage: ", 3, 1);
      Options options0 = new Options();
      options0.getMatchingOptions("\n");
      Option option0 = new Option("", true, "MF_5J]9eZWiUk(f");
      options0.addOption(option0);
      helpFormatter0.setNewLine("MF_5J]9eZWiUk(f");
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 117, "WE{sV");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
      int int0 = 349;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 349, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.rtrim("arg");
      helpFormatter0.setNewLine("arg");
      int int0 = 0;
      String string0 = "";
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) " ", 1, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = null;
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setNewLine("-");
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) " ", 1, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "14aG3x";
      String string0 = "8$2O7$p!JcW";
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("NO_ARGS_ALLOWED", "NO_ARGS_ALLOWED", (Options) null, "8$2O7$p!JcW");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "<3Pg^<Z";
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 0, 0, "Gr-oV0IW1[^)S");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2597;
      String string0 = "";
      MockFile mockFile0 = new MockFile("-", "-");
      File file0 = MockFile.createTempFile("arg", "", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append('P');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      PrintWriter printWriter1 = mockPrintWriter1.append((CharSequence) "--");
      helpFormatter0.printUsage(printWriter1, 2597, "");
      String string1 = "-o-}R";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 2597, 2597, "-o-}R");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(2582);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 2582, 2582, "S;`&yBTDAcu@");
      String string0 = "K@|\"^$iTc?8\\wdDyb5";
      File file0 = MockFile.createTempFile("arg", "K@|\"^$iTc?8wdDyb5");
      String string1 = "Xf_#7\\=>8MR.bqwJ";
      MockFile mockFile0 = new MockFile(file0, "Xf_#7=>8MR.bqwJ");
      mockFile0.toPath();
      String string2 = "MCP >,u6l@`H$acaPd";
      helpFormatter0.setArgName("ie$12;qt");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "MCP >,u6l@`H$acaPd");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // MCP >,u6l@`H$acaPd
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getNewLine();
      String string0 = "The option '";
      String string1 = "Rp]yIQMz}HNAs";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("\n", true, "5<\"7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      boolean boolean0 = true;
      String string0 = "y\\QG(*(>";
      options0.addOption("", "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", true, "org.apache.commons.cli.AlreadySelectedException");
      options0.addOption("arg", true, "yQG(*(>");
      Options options1 = options0.addOption((String) null, false, "arg");
      helpFormatter0.setNewLine("yQG(*(>");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(391, "<", "n7zM^D&*", options1, "<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "<";
      Options options0 = new Options();
      options0.toString();
      String string1 = null;
      options0.addOption("", "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", true, "org.apache.commons.cli.AlreadySelectedException");
      options0.addOption("arg", true, "yQG(*(>");
      Options options1 = options0.addOption((String) null, false, "arg");
      helpFormatter0.setNewLine("yQG(*(>");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(391, "<", "n7zM^D&*", options1, "<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("1GYhKK(gI,-", options1, false);
      helpFormatter0.setLongOptSeparator("1GYhKK(gI,-");
      helpFormatter0.getLongOptSeparator();
      assertEquals("1GYhKK(gI,-", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getLongOptSeparator();
      int int0 = (-1930);
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("--", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1246);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1246));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "aA.%EmsI\"";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("aA.%EmsI\"");
      helpFormatter0.setLongOptSeparator((String) null);
      Locale locale0 = Locale.CANADA;
      mockPrintWriter0.printf(locale0, "-", (Object[]) null);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1633, "xvGhZ%Iy{\"");
      StringBuffer stringBuffer0 = new StringBuffer("-");
      int int0 = 0;
      Options options0 = new Options();
      Option option0 = new Option("arg", "j^bpU 29");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      String string0 = null;
      // Undeclared exception!
      try { 
        options2.addOption("+h8Rb{JW*(U", "+h8Rb{JW*(U", false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '+h8Rb{JW*(U' contains an illegal character : '+'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      String string0 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      String string1 = "";
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 331;
      helpFormatter0.createPadding(331);
      helpFormatter0.setWidth(192);
      MockFile mockFile0 = new MockFile("arg", "usage: ");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "x88lUlu U4#$^tY");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // x88lUlu U4#$^tY
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1152);
      String string0 = "]";
      helpFormatter0.setLongOptPrefix("]");
      helpFormatter0.defaultDescPad = (-1152);
      String string1 = "";
      helpFormatter0.setNewLine("");
      helpFormatter0.setArgName("");
      helpFormatter0.setArgName("-");
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1152), (-1152), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "b|Tu(L(dH)W";
      Options options0 = new Options();
      helpFormatter0.printHelp("b|Tu(L(dH)W", options0, true);
      String string1 = " ";
      MockFile mockFile0 = new MockFile(" ");
      String string2 = "gk|{TMWX=jdP},";
      MockFile mockFile1 = new MockFile(mockFile0, "gk|{TMWX=jdP},");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      int int0 = 0;
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ", 0, 0);
      String string3 = "Etj>bZj~:%7gA0lO}";
      helpFormatter0.printHelp(printWriter0, 701, " ", "Etj>bZj~:%7gA0lO}", options0, 701, 0, "UK(_p'aPzh>KwoE$`", false);
      mockFile1.setExecutable(true, true);
      Option option0 = null;
      try {
        option0 = new Option("gbTZIt#jT-O, _#]v", true, "Y(ZDRX<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'gbTZIt#jT-O, _#]v' contains an illegal character : '#'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 232;
      helpFormatter0.defaultLeftPad = 232;
      String string0 = "";
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 423, 0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "}";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("}");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "V)?\"I:D}x8";
      objectArray0[1] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "V)?\"I:D}x8";
      mockPrintWriter0.close();
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "V)?\"I:D}x8";
      PrintWriter printWriter0 = mockPrintWriter0.format("V)?\"I:D}x8", objectArray0);
      int int0 = 1791;
      helpFormatter0.printWrapped(printWriter0, 1791, 1791, "V)?\"I:D}x8");
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      Option option0 = new Option("PxD", false, "");
      option0.clearValues();
      Options options1 = options0.addOption(option0);
      helpFormatter0.printUsage(printWriter0, 1791, "}", options1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "PxD", options0, "V)?\"I:D}x8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }
}
