/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 20:26:14 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("org.apache.commons.cli.HelpFormatter$OptionComparator");
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setOptPrefix("org.apache.commons.cli.HelpFormatter$OptionComparator");
      int int0 = 5;
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "y[a:tsBttmUzqPA/>e";
      String string1 = ".";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1832, "y[a:tsBttmUzqPA/>e", ".", (Options) null, "y[a:tsBttmUzqPA/>e");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "", false, "The option '");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 32, "has already been selected: '", "", options2, 32, 32, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-1060));
      helpFormatter0.getWidth();
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) null;
      Object object0 = new Object();
      objectArray0[6] = object0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "arg", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      int int0 = 76;
      String string0 = "-";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("/uQMW", "/uQMW", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '/uQMW' contains an illegal character : '/'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      helpFormatter0.defaultWidth = 97;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 111, "Hg*B:HTf.nR6@#eIbK", (String) null, options0, 117, 1979, "Hg*B:HTf.nR6@#eIbK", true);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      Comparator<OptionGroup> comparator0 = null;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("QF&/=Sb9bDbY", "bbqVZJiPxw`R", (Options) null, "NO_ARGS_ALLOWED");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("");
      helpFormatter0.setLongOptPrefix("");
      options0.hasShortOption("usage: ");
      helpFormatter0.setArgName("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, ">c-b_*?!pq]X@|ee", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-1);
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 1230, (-1484), "arg");
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1230, "[i-}9", " ", options0, "dP_F-kn$_58B&(h}d");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-677));
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setNewLine("lZ3l$ilb\"`q9");
      Options options0 = new Options();
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      options0.hasShortOption("org.apache.commons.cli.HelpFormatter$1");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Illegal option name '", options0, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      Option option0 = new Option("", true, "-");
      options0.addOption(option0);
      option0.setArgName("");
      MockFile mockFile0 = new MockFile("7G00,k$)");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      helpFormatter0.defaultLeftPad = (-214);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1);
      PrintWriter printWriter0 = mockPrintWriter2.format(" ", (Object[]) null);
      helpFormatter0.printUsage(printWriter0, 13, "", options0);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = (-265);
      helpFormatter0.rtrim("/1TrvM*Jb t");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("/1TrvM*Jb t", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(74);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options2 = options1.addOption("", true, "");
      Options options3 = options2.addOption("", "/<6\"EWw:ln94ywy\u0002.G", false, "o");
      Option option0 = new Option("arg", "\n");
      Options options4 = options3.addOption(option0);
      Options options5 = options4.addOption(option0);
      helpFormatter0.printHelp("o", "/<6\"EWw:ln94ywy\u0002.G", options5, "", false);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 1088;
      Options options0 = new Options();
      options0.helpOptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 1088, options0, 1088, 31);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Options options1 = options0.addOption("arg", "+@q&=Z5d7", false, "usage: ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 29, "!b8}d{ j80$vJG*", "<", options1, 33, 4, "o4WY.", false);
      helpFormatter0.createPadding(2007);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 44, (-2978), "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.createPadding(590);
      helpFormatter0.rtrim("");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", objectArray0);
      helpFormatter0.printHelp(printWriter0, 590, "Illegal option name '", "4xO0,~T_7Wi~5P=D*", options0, 74, 27, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "", true, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "usage: ");
      Options options2 = options1.addOptionGroup(optionGroup1);
      OptionGroup optionGroup2 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup2);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("dg[c$R~F-EedR(dl6SP", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Locale locale0 = Locale.ENGLISH;
      locale0.stripExtensions();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "kOR", options3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(10);
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.createPadding(0);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 10, "&kBq~Utf<O([_yX");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("[kNXx1");
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append('j');
      stringWriter0.write("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      mockPrintWriter0.checkError();
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", (Object[]) null);
      locale0.stripExtensions();
      stringWriter1.append((CharSequence) "\n");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[C~g-sR:TXTfmQUuL ");
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.printUsage(printWriter0, 1866, "[kNXx1");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.rtrim("");
      // Undeclared exception!
      helpFormatter0.printHelp("[kNXx1", (Options) null);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      Option option0 = new Option("arg", "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Locale locale0 = Locale.ENGLISH;
      locale0.stripExtensions();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "usage: ", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "-";
      Options options0 = new Options();
      options0.getOptionGroups();
      Option option0 = new Option("", false, "--");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("-", "", options1, "arg", false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("hO/mEZ=E13M4_VO{", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter1, (-1005), options1, 44, 63);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.rtrim("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("?'~KLBuM`");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) helpFormatter1;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) helpFormatter1;
      PrintWriter printWriter0 = mockPrintWriter0.format("arg", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 74, "@(,DC", ";\"Y!4>>J.o{iy", options0, 74, (-3115), "n!zti(6lQ`-s][");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, ">lXf6@yf[j3ij", ">lXf6@yf[j3ij", options0, 34, 114, ">lXf6@yf[j3ij", true);
      mockPrintWriter0.print((double) 3);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, ">lXf6@yf[j3ij", "", options0, 600, 0, "");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", true, "usage: ");
      options0.addOption(option0);
      option0.setArgName("\n");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("w-!uEG,", "$v", options1, "[", true);
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3, (-1), "");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, (-1168), 3, "[");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, "org.apache.commons.cli.AlreadySelectedException");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Locale locale0 = Locale.ENGLISH;
      locale0.stripExtensions();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), ";XyX)ITmB8", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Options options1 = options0.addOption("NO_ARGS_ALLOWED", "\n", true, "NO_ARGS_ALLOWED");
      String string0 = "";
      String string1 = "<";
      Options options2 = options1.addOption("", true, "<");
      int int0 = 44;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (-2195), options2, 44, 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.addOption("arg", "--", false, "3qU1P<ug");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      int int0 = 0;
      // Undeclared exception!
      helpFormatter3.renderOptions(stringBuffer0, 0, options0, 3, 1791);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, "org.apache.commons.cli.AlreadySelectedException");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, ">lXf6@f[j3ij", ">lXf6@f[j3ij", options0, 6, 114, ">lXf6@f[j3ij", true);
      helpFormatter0.printHelp(">lXf6@f[j3ij", (String) null, options0, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      helpFormatter2.renderOptions(stringBuffer0, 5199, options0, 126, 74);
      StringBuffer stringBuffer1 = new StringBuffer("\n");
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer1, 3, (-1435), "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "--");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      helpFormatter0.setWidth(381);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 14, 626, "d(th)u_O!_XFZ?");
      helpFormatter0.printOptions(mockPrintWriter0, 8, options0, 626, 34);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 16, "wtf", options0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", " ", true, "usage: ");
      Option option0 = new Option((String) null, "", false, "'6A");
      Options options3 = options2.addOption(option0);
      helpFormatter0.printHelp("org.apache.commons.cli.ParseException", options3, true);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(74);
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "--", false, "usage: ");
      Option option0 = new Option("", true, "arg");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("arg", "", options3, "p!@+31A!", true);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "--");
      options0.getOptionGroups();
      option0.setDescription("-");
      option0.setArgs(1);
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("arg", "usage: ", options1, "arg", false);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "-";
      Options options0 = new Options();
      String string0 = "";
      Option option0 = new Option("", true, "--");
      Options options1 = options0.addOption(option0);
      option0.setArgName("");
      helpFormatter0.printHelp("-", "", options1, "", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) option0;
      objectArray0[1] = (Object) "-";
      objectArray0[2] = (Object) "-";
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "-", 1301, 49);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = new Option("", true, "-");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      helpFormatter0.renderOptions((StringBuffer) null, 878, options0, 106, 878);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 2063, (-643), "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-981);
      Options options0 = new Options();
      String string0 = null;
      Options options1 = options0.addOption((String) null, " ", false, (String) null);
      options1.getOption("GXoh;Zn5}IbJ&K");
      options1.hasOption("org.apache.commons.cli.AlreadySelectedException");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      options0.hasLongOption("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(">", options1, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, ">lXf6@f[j3ij", ">lXf6@f[j3ij", options0, 6, 74, ">lXf6@f[j3ij", true);
      helpFormatter0.printHelp(">lXf6@f[j3ij", ">lXf6@f[j3ij", options0, "V(xi;:^|s=\"XzJ#\"T", true);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, (-231), "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      String string0 = "WKS\"rbCEB`ktV}F:i#";
      helpFormatter0.defaultArgName = "WKS\"rbCEB`ktV}F:i#";
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.createPadding(10);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("org.apache.commons.cli.HelpFormatter$OptionComparator", "-", true, "~TjF<Wk00uT~|Xhh");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.HelpFormatter$OptionComparator' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1524), "\n", "\n", (Options) null, "1WH\"c\"\"oC<pu%:Kw", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(393);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      byteArrayOutputStream0.write(74);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1101, "arg", "", options0, 4507, 571, "arg", false);
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      helpFormatter0.renderWrappedText(stringBuffer0, 1101, 74, "bqJU]-");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      Options options0 = new Options();
      Option option0 = new Option("arg", false, (String) null);
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("R6", true, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Illegal option name '");
      helpFormatter0.renderOptions(stringBuffer0, 1, options3, 74, 74);
      helpFormatter2.renderWrappedText(stringBuffer0, 276, (-2), "}CawRuS)l");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      byteArrayOutputStream0.write(74);
      mockPrintWriter0.println();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(byteArrayOutputStream0);
      mockPrintWriter1.append('R');
      String string0 = "[eY9L5F~[F~\"8r,O][7";
      byteArrayOutputStream0.write((-1117));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 74, "[eY9L5F~[F~\"8r,O][7", ">", options0, 74, (-288), "[eY9L5F~[F~\"8r,O][7", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      objectArray0[3] = (Object) byteArrayOutputStream0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "8`nT_}q5Z9", objectArray0);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "org.apache.commons.cli.HelpFormatter$1", options0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte)16;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format("-", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 1570, "usage: ");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", true, "-");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      int int0 = 6;
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) option0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-2019), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      mockPrintWriter0.println();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(byteArrayOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('=');
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printHelp(printWriter0, 2520, ">", "]", options0, 1019, 1019, "", false);
      StringBuffer stringBuffer0 = new StringBuffer("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("(jYtr*)#1'BhG,Xi|", options0, true);
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 74, 74, "WBD&Pa'yr(V]9W~>1<");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter2.printWrapped((PrintWriter) mockPrintWriter0, 74, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 2, (String) null, "--", options0, 2, 165, "Lej^nunS$0.u5", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      byteArrayOutputStream0.write(855);
      mockPrintWriter0.println();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(byteArrayOutputStream0);
      mockPrintWriter1.append('x');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("[C*7;xDLVqpap'5x*Ln");
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, 98, (Options) null, 758, 1791);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "_`\"v[-hp|\"H;J9/_R";
      Options options0 = new Options();
      String string0 = "";
      Option option0 = new Option("", false, "");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (-1), options0, (-2), (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "' was specified but an option from this group ");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("f3~HXwR5Fr]}j`");
      helpFormatter0.defaultLeftPad = 113;
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getNewLine();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getArgName();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getWidth();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", ">", true, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 101, options2, 2347, 0);
      helpFormatter0.renderOptions(stringBuffer1, 101, options0, 306, 1751);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.append((CharSequence) "arg", 1, 1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "gh]=cn41|8Vx+!]K");
      stringWriter0.getBuffer();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "usage: ", true, "--");
      option0.setArgs(42);
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("gHCC8%VQ<TvIT.", " ", options0, "org.apache.commons.cli.HelpFormatter$1", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("tGOAOMr,");
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, (-2), "", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("}CawRuS)l");
      StringBuffer stringBuffer1 = helpFormatter3.renderOptions(stringBuffer0, 0, options0, 0, 1791);
      // Undeclared exception!
      helpFormatter2.renderWrappedText(stringBuffer1, 0, 3, " ");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setDescPadding((-1782));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(393);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      byteArrayOutputStream0.write(74);
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockPrintWriter0.println();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(byteArrayOutputStream0);
      mockPrintWriter1.append('R');
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1019, "!b}gdd{ j80$SJG*", ">", options0, 1019, 0, "!b}gdd{ j80$SJG*", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(">", "", options0, "arg", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", true, "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 74, 6, " ");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.append((CharSequence) "arg", 1, 1);
      stringWriter0.getBuffer();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "usage: ", true, "--");
      option0.setArgs(42);
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine((String) null);
      helpFormatter1.printHelp("NO_ARGS_ALLOWED", "\n", options0, "usage: ", true);
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos((String) null, (-9), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(393);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      byteArrayOutputStream0.write(74);
      mockPrintWriter0.println();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(byteArrayOutputStream0);
      mockPrintWriter1.append('R');
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1019, "!b}gdd{ j80$SJG*", ">", options0, 1019, 0, "!b}gdd{ j80$SJG*", false);
      helpFormatter0.defaultArgName = null;
      helpFormatter0.printHelp("O r]N4", ")xp{EWmS5hWgxw)", options0, "!b}gdd{ j80$SJG*", false);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(10, "-", (String) null, (Options) null, "-", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", false, "usage: ");
      Options options1 = options0.addOption(option0);
      options0.getOption("usage: ");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.printHelp("Bq<dqgm", options1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 25, "zIx$mN", "\n", options1, 115, 13, "<");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "--");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("<", "+0(;/E!", options1, "<", false);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("<.NCAO0`}", (-1), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp(910, "3+h", "[ Options: [ short ", options0, "", false);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("\n", "-", options0, " :: ", true);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp("_BErVX/MKrbq7EQ", ">", options0, "'&nxKy~VzH?", false);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 10, options0, 92, 83);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp(101, "usage: ", "org.apache.commons.cli.ParseException", options0, "#owhPt.9B*a=[ gWLE;");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = helpFormatter0.defaultSyntaxPrefix;
      String string1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2, (String) null, ":", options0, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 13;
      helpFormatter0.createPadding(13);
      String string0 = null;
      helpFormatter0.setSyntaxPrefix((String) null);
      int int1 = 19;
      helpFormatter0.createPadding(19);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-493), (String) null, (String) null, (Options) null, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "_`\"v[-hp|\"H;J9/_R";
      Options options0 = new Options();
      String string0 = "!b\\}gdd{\\ j80$SJ\\G*";
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1190);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      byteArrayOutputStream0.write(16);
      PrintWriter printWriter0 = mockPrintWriter0.append('R');
      boolean boolean0 = false;
      helpFormatter0.printHelp(printWriter0, 1190, "!b}gdd{ j80$SJG*", "+0(;/E!", options0, 1190, 2, "_`\"v[-hp|\"H;J9/_R", false);
      Option option0 = new Option("", true, "-");
      option0.setArgs(3);
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", true, "usage: ");
      Option option1 = new Option("", "arg", true, "^LM{Khe#<IMwo");
      option1.setArgs(1);
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("\n", "--", options0, "   ", true);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.append((CharSequence) "arg", 1, 1);
      stringWriter0.getBuffer();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "usage: ", true, "--");
      option0.setArgs(42);
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("NO_ARGS_ALLOWED", "\n", options0, "usage: ", true);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "_<3HOHp43Ko,F6Y1";
      helpFormatter0.defaultNewLine = "_<3HOHp43Ko,F6Y1";
      int int0 = 839;
      helpFormatter0.findWrapPos("arg", 839, 839);
      helpFormatter0.rtrim("arg");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("-", "_<3HOHp43Ko,F6Y1");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // _<3HOHp43Ko,F6Y1
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(2106);
      Options options0 = new Options();
      options0.hasShortOption("]l+GtV,*)]6^Wv><");
      helpFormatter0.printHelp("-", "]l+GtV,*)]6^Wv><", options0, "-");
      StringBuffer stringBuffer0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 2106, 655, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, false, "w>)u.q7!SOk]V3Zt");
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultWidth = 13;
      options0.getOption("");
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("arg", "", options1, (String) null, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.append((CharSequence) "arg", 1, 1);
      stringWriter0.getBuffer();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "usage: ", true, "--");
      option0.setArgs(42);
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(" ", "usage: ", options0, "", false);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) stringWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("IG}peRKISVB*jA`#", objectArray0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3254, "~!>u']");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(byteArrayOutputStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-1684), 1752, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "-");
      option0.setArgs(1771);
      options0.addOption(option0);
      Options options1 = new Options();
      helpFormatter0.printHelp("+0(;/E!", "+0(;/E!", options1, "+0(;/E!", false);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 1771, 350, "");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "_`\"v[-hp|\"H;J9/_R";
      Options options0 = new Options();
      Option option0 = new Option("", false, "");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("q}z\"", "+0(;/E!", options1, "", true);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "2_!|\\DiowMH_'";
      Options options0 = new Options();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 31, "2_!|DiowMH_'", "k", options0, (-2479), (-1), "+0(;/E!", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "--");
      option0.toString();
      option0.setArgs(1654);
      MockFile mockFile0 = new MockFile("arg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 74, 2897, "T9t:_W2U1iv");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", true, "-");
      option0.setDescription("\n");
      options1.addOption(option0);
      StringBuffer stringBuffer0 = new StringBuffer(31);
      helpFormatter0.renderWrappedText(stringBuffer0, 108, 108, "");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      PrintWriter printWriter0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 2, "!b}gdd{ j80$SJG*", "-", options0, 1, 3, "Lej9n@^nS$0.u5", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
      Option option0 = new Option("arg", false, "--");
      helpFormatter0.setWidth((-2));
      int int0 = 31;
      String string0 = "3~J6wOV;+1,";
      helpFormatter0.defaultOptPrefix = "3~J6wOV;+1,";
      String string1 = null;
      PrintWriter printWriter1 = printWriter0.printf("3~J6wOV;+1,", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "KfMu;mUzz/n].&;", true, "\n");
      Options options2 = options1.addOption((String) null, false, "$V2)92_g9");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      Options options4 = options3.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter1, 1350, "", "l`!3", options4, 1350, 1259, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      String string0 = ", ";
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockFileOutputStream0;
      helpFormatter0.getLongOptPrefix();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" :: ", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", true, "usage: ");
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.getOption("usage: ");
      helpFormatter1.printHelp("6.'_J=_X", "", options0, "usage: ", true);
      helpFormatter1.getLongOptPrefix();
      helpFormatter1.printHelp("BR<dgm", options1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 25, "zIx$mN", "\n", options1, 115, 13, "org.apache.commons.cli.ParseException");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(3);
      String string0 = null;
      helpFormatter0.setLongOptSeparator("arg");
      String string1 = "6{R5:!";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("--", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = false;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) "!b}gdd{ j80$SJG*";
      objectArray0[3] = (Object) helpFormatter1;
      objectArray0[4] = (Object) options0;
      objectArray0[5] = (Object) options0;
      objectArray0[6] = (Object) "I";
      objectArray0[7] = (Object) helpFormatter0;
      objectArray0[8] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf("I", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      PrintWriter printWriter0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 98;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 16, "[1-J8nv9nK5%GkLU", "--", options0, 98, (-1), "arg", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("N", true, " R=Lcf/>#U3O");
      options0.addOption(option0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp("q}z\"", "q", options0, ";d_tNw$OnP", true);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "_`\"v[-hp|\"H;J9/_R";
      String string0 = "+0(;/E!";
      Options options0 = new Options();
      int int0 = 31;
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 31, "k", "_`\"v[-hp|\"H;J9/_R", options0, 6, 74, "k", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "--");
      option0.setArgs(1654);
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("<", "+0(;/E!", options1, "<", false);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "--");
      option0.setLongOpt("u!");
      option0.toString();
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("<", "+0(;/E!", options1, "<", false);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "2_!|\\DiowMH_'";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("2_!|DiowMH_'", false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockFileOutputStream0;
      objectArray0[2] = (Object) ", ";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth((-2));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-2), "org.apache.commons.cli.OptionValidator", "--", options0, 1, 74, " ", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "usage: ", 0, 3);
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      int int0 = (-2);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) stringWriter2;
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) bufferedOutputStream0;
      objectArray0[5] = (Object) stringWriter2;
      objectArray0[6] = (Object) stringBuffer0;
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-2), 0, "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1014));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "_`\"v[-hp|\"H;J9/_R";
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = new Option("", false, "");
      Options options1 = options0.addOption(option0);
      options1.hasOption("usage: ");
      options1.addOption(option0);
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "+0(;/E!", options0, "r;H_ N0lEH5F'R", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "usage: ", 0, 3);
      stringWriter2.getBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("~~CC", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "u2S5aJ#iov[EBxv");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.hasShortOption((String) null);
      helpFormatter0.printHelp("u2S5aJ#iov[EBxv", options1, true);
      options0.getOption("-");
      helpFormatter0.getLeftPadding();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getArgName();
      helpFormatter0.printHelp("u2S5aJ#iov[EBxv", "arg", options1, "(}C");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "_`\"v[-hp|\"H;J9/_R";
      Options options0 = new Options();
      Option option0 = new Option("", false, "");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("q}z\"", "+0(;/E!", options1, "", false);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, false, "arg");
      option0.setDescription("arg");
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "arg", "@w)&|kda&&Xj.DR", options0, "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "--");
      Options options1 = options0.addOption(option0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) locale0;
      options1.helpOptions();
      objectArray0[3] = (Object) options1;
      objectArray0[4] = (Object) "+0(;/E!";
      objectArray0[5] = (Object) options1;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "usage: ", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      mockPrintWriter0.println();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 34, 34, "+0(;/E!");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) locale0;
      mockPrintWriter0.printf(locale0, "arg", objectArray0);
      Options options0 = new Options();
      helpFormatter0.setWidth((-2));
      helpFormatter0.defaultOptPrefix = "3~J6wOV;+1,";
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.setWidth(0);
      helpFormatter0.setArgName("3~J6wOV;+1,");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 31, "3~J6wOV;+1,");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getArgName();
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(". 2Dh");
      mockPrintWriter0.close();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1, "]DH2~5");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "_`\"v[-hv|\"H;J9/_R";
      helpFormatter0.createPadding(31);
      helpFormatter0.getOptionComparator();
      MockFile mockFile0 = new MockFile("IPitN%Q0E$'|w$L", "IJ5X 7~SDGh$0");
      MockFile mockFile1 = new MockFile(mockFile0, "x");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("D#J1D]eKd!o{D", "PHwS", (Options) null, "PU", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "<";
      String string1 = "+0(;/E!";
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2361));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "_`\"v[-hv|\"H;J9/_R";
      helpFormatter0.createPadding(31);
      helpFormatter0.getOptionComparator();
      MockFile mockFile0 = new MockFile("IPitN%Q0E$'|w$L", "IJ5X 7~SDGh$0");
      MockFile mockFile1 = new MockFile(mockFile0, "x");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 31, "PHwS", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", true, "-");
      option0.setDescription("\n");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "Xc#!J4:8de4.N/)iv", options2, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options0 = new Options();
      Option option0 = new Option("cw260v", (String) null, false, "-");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("L", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-420);
      helpFormatter0.setWidth((-420));
      String string0 = null;
      helpFormatter0.setLongOptSeparator((String) null);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("6{R5:!", (Options) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      String string1 = "GK#CQzH{.v2Uf";
      options0.hasLongOption("GK#CQzH{.v2Uf");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.defaultLeftPad = 691;
      String string0 = "&Q6^7voIk%^~T]eI";
      stringBuffer0.append("&Q6^7voIk%^~T]eI");
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 0, "");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.rtrim("LX_");
      helpFormatter0.setLongOptPrefix("cmdLineSyntax not provided");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("LX_", "a8=fn~R");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // a8=fn~R
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "usage: ", 0, 3);
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      int int0 = 0;
      String string1 = "1:sDz'n+]";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "1:sDz'n+]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "u2S5aJ#iov[EBxv");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("u2S5aJ#iov[EBxv", options1, true);
      helpFormatter0.getLeftPadding();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      mockPrintWriter0.append('{');
      String string0 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1021), "org.apache.commons.cli.HelpFormatter$OptionComparator");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 2083;
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      int int0 = 427;
      String string0 = null;
      helpFormatter0.setOptionComparator(comparator0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter1, (-212), (Options) null, 0, (-1419));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("[kNXx1");
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append('j');
      stringWriter0.write("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      mockPrintWriter0.checkError();
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", (Object[]) null);
      locale0.stripExtensions();
      stringWriter1.append((CharSequence) "\n");
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.printUsage(printWriter0, 1866, "[kNXx1");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("2_!|DiowMH_'", false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockFileOutputStream0;
      objectArray0[2] = (Object) ", ";
      PrintWriter printWriter0 = mockPrintWriter0.printf(", ", objectArray0);
      int int0 = (-548);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-548), "=yHzM/u$dIt&SOPhh");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "DTS$|nlmHzm(Q8GtY#i";
      helpFormatter0.setSyntaxPrefix("DTS$|nlmHzm(Q8GtY#i");
      helpFormatter0.setArgName("Q?");
      helpFormatter0.getSyntaxPrefix();
      File file0 = MockFile.createTempFile("usage: ", "-");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(file0, " ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "--");
      options0.helpOptions();
      Options options1 = options0.addOption(option0);
      helpFormatter0.setWidth((-2));
      int int0 = 31;
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "-#bO!w[]8x-Ca#G5+", "-#bO!w[]8x-Ca#G5+", options1, 1259, 31, "-#bO!w[]8x-Ca#G5+", false);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "/fnh";
      helpFormatter0.setOptPrefix("/fnh");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      Options options0 = new Options();
      helpFormatter0.printHelp("Mza:7q@C-(%8!{t|", options0, false);
      options0.getMatchingOptions("-k}@{s");
      String string0 = "aBuFUf";
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("\n", "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      String string0 = ", ";
      Options options0 = new Options();
      String string1 = "=<hb)";
      // Undeclared exception!
      helpFormatter0.printHelp(0, ", ", "", options0, "=<hb)");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Locale locale0 = new Locale("arg", "arg", "'");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) stringWriter0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 0, "", "", options1, (-1), 0, "gL3W?8w", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.defaultArgName = "]DH2~5";
      helpFormatter0.getArgName();
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      mockPrintWriter0.close();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "");
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("arg", helpFormatter0.getArgName());
      
      helpFormatter0.setArgName((String) null);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setLeftPadding((-1724));
      helpFormatter0.setWidth((-2270));
      Options options0 = new Options();
      helpFormatter0.defaultSyntaxPrefix = "org.apache.commons.cli.Options";
      options0.hasShortOption("UO_c40aGUF");
      options0.hasLongOption("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getWidth();
      int int0 = 0;
      String string1 = "org.apache.commons.cli.AlreadySelectedException";
      String string2 = "4mdz%";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("-", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      String string0 = "";
      helpFormatter0.setNewLine("");
      helpFormatter0.setWidth(10);
      String string1 = "";
      MockFile mockFile0 = new MockFile("", "");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        MockURI.parseServerAuthority((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }
}
