* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-100
* Going to generate test cases for class: org.apache.commons.cli.HelpFormatter
* Starting Client-0
* Connecting to master process on port 21162
* Analyzing classpath: 
  - subjects/buggy-versions/Cli-32/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.cli.HelpFormatter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1151
* Using seed 1731086933
* Starting evolution
bbc usage percentage is: 100%
* Initial Number of Goals in DynaMOSA = 400 / 1151
[MASTER] 18:00:09.033 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
* Search finished after 603s and 146 generations, 59037 statements, best individual has fitness: 139.0
* Minimizing test suite
[MASTER] 18:11:25.680 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 99%
* Total number of goals: 203
* Number of covered goals: 201
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 91%
* Total number of goals: 157
* Number of covered goals: 143
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 51
* Number of covered goals: 51
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 93%
* Total number of goals: 508
* Number of covered goals: 471
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 54%
* Total number of goals: 46
* Number of covered goals: 25
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 98%
* Total number of goals: 40
* Number of covered goals: 39
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 98%
* Total number of goals: 40
* Number of covered goals: 39
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 91%
* Total number of goals: 157
* Number of covered goals: 143
* Generated 125 tests with total length 1657
* Resulting test suite's coverage: 84% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 18:12:07.836 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6678833333333334% of time used, but only 25/125 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 11%
* Compiling and checking tests
[MASTER] 18:12:41.278 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:12:41.369 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:12:41.448 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:12:41.546 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:12:41.618 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:12:41.669 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:12:42.109 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_139_tmp__ESTest.test0(HelpFormatter_139_tmp__ESTest.java:27)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 18:12:42.110 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
FileDescriptor fileDescriptor0 = new FileDescriptor();
MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
MockFile mockFile0 = new MockFile("arg");
Options options0 = new Options();
HelpFormatter helpFormatter1 = new HelpFormatter();
helpFormatter1.printHelp(" ", "-", options0, "", false);
HelpFormatter helpFormatter2 = new HelpFormatter();
HelpFormatter helpFormatter3 = new HelpFormatter();
helpFormatter3.getLongOptPrefix();
Comparator comparator0 = helpFormatter3.getOptionComparator();
helpFormatter0.setOptPrefix("");
helpFormatter0.getLongOptPrefix();
helpFormatter1.setOptionComparator(comparator0);
assertEquals("arg", helpFormatter1.getArgName());


[MASTER] 18:12:45.609 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_149_tmp__ESTest.test0(HelpFormatter_149_tmp__ESTest.java:27)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 18:12:45.609 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
FileDescriptor fileDescriptor0 = new FileDescriptor();
MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 0, 0, "8U$~F*B$1V");

[MASTER] 18:12:48.870 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_154_tmp__ESTest.test0(HelpFormatter_154_tmp__ESTest.java:46)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 18:12:48.871 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertNotNull(helpFormatter0);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
assertNotNull(mockPrintWriter0);

MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
assertNotNull(mockPrintWriter1);

helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 74, (-1757), "");
assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertFalse(fileDescriptor0.valid());
assertNotSame(mockPrintWriter0, mockPrintWriter1);
assertNotSame(mockPrintWriter1, mockPrintWriter0);


[MASTER] 18:12:52.000 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_156_tmp__ESTest.test0(HelpFormatter_156_tmp__ESTest.java:50)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 18:12:52.004 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertNotNull(helpFormatter0);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

MockFile mockFile0 = new MockFile("arg");
assertNotNull(mockFile0);

Options options0 = new Options();
assertNotNull(options0);

StringWriter stringWriter0 = new StringWriter(1);
assertEquals("", stringWriter0.toString());
assertNotNull(stringWriter0);

StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
assertEquals("-", stringWriter0.toString());
assertEquals("-", stringWriter1.toString());
assertNotNull(stringWriter1);
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);

StringWriter stringWriter2 = stringWriter1.append(';');
assertEquals("-;", stringWriter0.toString());
assertEquals("-;", stringWriter1.toString());
assertEquals("-;", stringWriter2.toString());
assertNotNull(stringWriter2);
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter0, stringWriter2);
assertSame(stringWriter1, stringWriter2);
assertSame(stringWriter1, stringWriter0);
assertSame(stringWriter2, stringWriter0);
assertSame(stringWriter2, stringWriter1);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
assertNotNull(mockPrintWriter0);

PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
assertEquals("-;usage: ", stringWriter0.toString());
assertEquals("-;usage: ", stringWriter1.toString());
assertNotNull(printWriter0);
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter0, stringWriter2);
assertSame(stringWriter1, stringWriter2);
assertSame(stringWriter1, stringWriter0);
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);

Options options1 = new Options();
assertFalse(options1.equals((Object)options0));
assertNotNull(options1);

Option option0 = new Option("", "NO_ARGS_ALLOWED", true, "NO_ARGS_ALLOWED");
assertEquals((-2), Option.UNLIMITED_VALUES);
assertEquals((-1), Option.UNINITIALIZED);
assertFalse(option0.hasOptionalArg());
assertEquals("", option0.getOpt());
assertFalse(option0.isRequired());
assertNull(option0.getValue());
assertTrue(option0.hasLongOpt());
assertEquals(1, option0.getArgs());
assertFalse(option0.hasValueSeparator());
assertFalse(option0.hasArgName());
assertTrue(option0.hasArg());
assertEquals("NO_ARGS_ALLOWED", option0.getLongOpt());
assertEquals('\u0000', option0.getValueSeparator());
assertFalse(option0.hasArgs());
assertEquals("NO_ARGS_ALLOWED", option0.getDescription());
assertNull(option0.getArgName());
assertNotNull(option0);

Options options2 = options1.addOption(option0);
assertFalse(options1.equals((Object)options0));
assertFalse(options2.equals((Object)options0));
assertEquals((-2), Option.UNLIMITED_VALUES);
assertEquals((-1), Option.UNINITIALIZED);
assertFalse(option0.hasOptionalArg());
assertEquals("", option0.getOpt());
assertFalse(option0.isRequired());
assertNull(option0.getValue());
assertTrue(option0.hasLongOpt());
assertEquals(1, option0.getArgs());
assertFalse(option0.hasValueSeparator());
assertFalse(option0.hasArgName());
assertTrue(option0.hasArg());
assertEquals("NO_ARGS_ALLOWED", option0.getLongOpt());
assertEquals('\u0000', option0.getValueSeparator());
assertFalse(option0.hasArgs());
assertEquals("NO_ARGS_ALLOWED", option0.getDescription());
assertNull(option0.getArgName());
assertNotNull(options2);
assertSame(options1, options2);
assertNotSame(options1, options0);
assertSame(options2, options1);
assertNotSame(options2, options0);

helpFormatter0.printUsage(printWriter0, 63, "NO_ARGS_ALLOWED", options2);
assertFalse(options1.equals((Object)options0));
assertFalse(options2.equals((Object)options0));
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals((-2), Option.UNLIMITED_VALUES);
assertEquals((-1), Option.UNINITIALIZED);
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("-;usage: usage: NO_ARGS_ALLOWED [- <arg>]\n", stringWriter0.toString());
assertEquals("-;usage: usage: NO_ARGS_ALLOWED [- <arg>]\n", stringWriter1.toString());
assertFalse(option0.hasOptionalArg());
assertEquals("", option0.getOpt());
assertFalse(option0.isRequired());
assertNull(option0.getValue());
assertTrue(option0.hasLongOpt());
assertEquals(1, option0.getArgs());
assertFalse(option0.hasValueSeparator());
assertFalse(option0.hasArgName());
assertTrue(option0.hasArg());
assertEquals("NO_ARGS_ALLOWED", option0.getLongOpt());
assertEquals('\u0000', option0.getValueSeparator());
assertFalse(option0.hasArgs());
assertEquals("NO_ARGS_ALLOWED", option0.getDescription());
assertNull(option0.getArgName());
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter0, stringWriter2);
assertSame(stringWriter1, stringWriter2);
assertSame(stringWriter1, stringWriter0);
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);
assertSame(options1, options2);
assertNotSame(options1, options0);
assertSame(options2, options1);
assertNotSame(options2, options0);

helpFormatter0.setSyntaxPrefix((String) null);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("\n", helpFormatter0.getNewLine());
assertNull(helpFormatter0.getSyntaxPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("--", helpFormatter0.getLongOptPrefix());

String string0 = helpFormatter0.getSyntaxPrefix();
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("\n", helpFormatter0.getNewLine());
assertNull(helpFormatter0.getSyntaxPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertNull(string0);

HelpFormatter helpFormatter1 = new HelpFormatter();
assertFalse(helpFormatter1.equals((Object)helpFormatter0));
assertEquals(3, helpFormatter1.defaultDescPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, helpFormatter1.defaultLeftPad);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, helpFormatter1.defaultWidth);
assertEquals(1, helpFormatter1.getLeftPadding());
assertEquals(" ", helpFormatter1.getLongOptSeparator());
assertEquals("-", helpFormatter1.getOptPrefix());
assertEquals("\n", helpFormatter1.getNewLine());
assertEquals(74, helpFormatter1.getWidth());
assertEquals(3, helpFormatter1.getDescPadding());
assertEquals("arg", helpFormatter1.getArgName());
assertEquals("--", helpFormatter1.getLongOptPrefix());
assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
assertNotNull(helpFormatter1);

helpFormatter0.setDescPadding(1213);
assertFalse(helpFormatter0.equals((Object)helpFormatter1));
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1213, helpFormatter0.defaultDescPad);
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("\n", helpFormatter0.getNewLine());
assertNull(helpFormatter0.getSyntaxPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(1213, helpFormatter0.getDescPadding());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertNotSame(helpFormatter0, helpFormatter1);

helpFormatter1.printWrapped(printWriter0, 3, 10, "--");
assertFalse(helpFormatter1.equals((Object)helpFormatter0));
assertEquals(3, helpFormatter1.defaultDescPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, helpFormatter1.defaultLeftPad);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, helpFormatter1.defaultWidth);
assertEquals(1, helpFormatter1.getLeftPadding());
assertEquals(" ", helpFormatter1.getLongOptSeparator());
assertEquals("-", helpFormatter1.getOptPrefix());
assertEquals("\n", helpFormatter1.getNewLine());
assertEquals(74, helpFormatter1.getWidth());
assertEquals(3, helpFormatter1.getDescPadding());
assertEquals("arg", helpFormatter1.getArgName());
assertEquals("--", helpFormatter1.getLongOptPrefix());
assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
assertEquals("-;usage: usage: NO_ARGS_ALLOWED [- <arg>]\n--\n", stringWriter0.toString());
assertEquals("-;usage: usage: NO_ARGS_ALLOWED [- <arg>]\n--\n", stringWriter1.toString());
assertNotSame(helpFormatter1, helpFormatter0);
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter0, stringWriter2);
assertSame(stringWriter1, stringWriter2);
assertSame(stringWriter1, stringWriter0);
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);


[MASTER] 18:12:55.222 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_159_tmp__ESTest.test0(HelpFormatter_159_tmp__ESTest.java:48)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 18:12:55.223 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("\n", helpFormatter0.getNewLine());
assertNotNull(helpFormatter0);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
assertNotNull(mockPrintWriter0);

MockFile mockFile0 = new MockFile("arg");
assertNotNull(mockFile0);

Options options0 = new Options();
assertNotNull(options0);

helpFormatter0.printHelp(" [ARG]", "Y9?:Q%Qr>-pc:fa", options0, " [ARG]", false);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("\n", helpFormatter0.getNewLine());

helpFormatter0.setLongOptPrefix((String) null);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(74, helpFormatter0.getWidth());
assertNull(helpFormatter0.getLongOptPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("\n", helpFormatter0.getNewLine());

HelpFormatter helpFormatter1 = new HelpFormatter();
assertFalse(helpFormatter1.equals((Object)helpFormatter0));
assertEquals(74, helpFormatter1.defaultWidth);
assertEquals(3, helpFormatter1.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(1, helpFormatter1.defaultLeftPad);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(74, helpFormatter1.getWidth());
assertEquals("--", helpFormatter1.getLongOptPrefix());
assertEquals(3, helpFormatter1.getDescPadding());
assertEquals("arg", helpFormatter1.getArgName());
assertEquals("\n", helpFormatter1.getNewLine());
assertEquals("-", helpFormatter1.getOptPrefix());
assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
assertEquals(1, helpFormatter1.getLeftPadding());
assertEquals(" ", helpFormatter1.getLongOptSeparator());
assertNotNull(helpFormatter1);

helpFormatter1.printHelp(3, (String) null, "-", options0, "nJ]V_PV3ENlp");

[MASTER] 18:12:58.962 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_169_tmp__ESTest.test0(HelpFormatter_169_tmp__ESTest.java:48)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 18:12:58.965 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(1, helpFormatter0.getLeftPadding());
assertNotNull(helpFormatter0);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
assertNotNull(mockPrintWriter0);

MockFile mockFile0 = new MockFile("arg");
assertNotNull(mockFile0);

Options options0 = new Options();
assertNotNull(options0);

helpFormatter0.printHelp(" [ARG]", "Y9?:Q%Qr>-pc:fa", options0, " [ARG]", false);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(1, helpFormatter0.getLeftPadding());

HelpFormatter helpFormatter1 = new HelpFormatter();
assertFalse(helpFormatter1.equals((Object)helpFormatter0));
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter1.defaultLeftPad);
assertEquals(74, helpFormatter1.defaultWidth);
assertEquals(3, helpFormatter1.defaultDescPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter1.getDescPadding());
assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
assertEquals(" ", helpFormatter1.getLongOptSeparator());
assertEquals(74, helpFormatter1.getWidth());
assertEquals("--", helpFormatter1.getLongOptPrefix());
assertEquals("arg", helpFormatter1.getArgName());
assertEquals("-", helpFormatter1.getOptPrefix());
assertEquals("\n", helpFormatter1.getNewLine());
assertEquals(1, helpFormatter1.getLeftPadding());
assertNotNull(helpFormatter1);

String string0 = helpFormatter0.getLongOptPrefix();
assertFalse(helpFormatter0.equals((Object)helpFormatter1));
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("--", string0);
assertNotNull(string0);
assertNotSame(helpFormatter0, helpFormatter1);

Comparator comparator0 = helpFormatter1.getOptionComparator();
assertFalse(helpFormatter1.equals((Object)helpFormatter0));
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter1.defaultLeftPad);
assertEquals(74, helpFormatter1.defaultWidth);
assertEquals(3, helpFormatter1.defaultDescPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter1.getDescPadding());
assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
assertEquals(" ", helpFormatter1.getLongOptSeparator());
assertEquals(74, helpFormatter1.getWidth());
assertEquals("--", helpFormatter1.getLongOptPrefix());
assertEquals("arg", helpFormatter1.getArgName());
assertEquals("-", helpFormatter1.getOptPrefix());
assertEquals("\n", helpFormatter1.getNewLine());
assertEquals(1, helpFormatter1.getLeftPadding());
assertNotNull(comparator0);
assertNotSame(helpFormatter1, helpFormatter0);

helpFormatter0.setOptPrefix("arg");
assertFalse(helpFormatter0.equals((Object)helpFormatter1));
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("arg", helpFormatter0.getOptPrefix());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(1, helpFormatter0.getLeftPadding());
assertNotSame(helpFormatter0, helpFormatter1);

String string1 = helpFormatter0.getLongOptPrefix();
assertFalse(helpFormatter0.equals((Object)helpFormatter1));
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("arg", helpFormatter0.getOptPrefix());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("--", string1);
assertNotNull(string1);
assertNotSame(helpFormatter0, helpFormatter1);


[MASTER] 18:13:02.009 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.util.concurrent.ExecutionException: java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_170_tmp__ESTest$1.run(HelpFormatter_170_tmp__ESTest.java:52)
java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
java.lang.Thread.run(Thread.java:748)

[MASTER] 18:13:02.012 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertNotNull(helpFormatter0);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
assertNotNull(mockPrintWriter0);

MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
assertNotNull(mockPrintWriter1);

helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 85, 85, "?Mz>Pe");
assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertFalse(fileDescriptor0.valid());
assertNotSame(mockPrintWriter0, mockPrintWriter1);
assertNotSame(mockPrintWriter1, mockPrintWriter0);

helpFormatter0.setOptPrefix((String) null);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(1, helpFormatter0.getLeftPadding());
assertNull(helpFormatter0.getOptPrefix());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("--", helpFormatter0.getLongOptPrefix());

String string0 = helpFormatter0.getSyntaxPrefix();
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(1, helpFormatter0.getLeftPadding());
assertNull(helpFormatter0.getOptPrefix());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("usage: ", string0);
assertNotNull(string0);

String string1 = helpFormatter0.createPadding(85);
assertFalse(string1.equals((Object)string0));
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(1, helpFormatter0.getLeftPadding());
assertNull(helpFormatter0.getOptPrefix());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("                                                                                     ", string1);
assertNotNull(string1);

helpFormatter0.setLeftPadding(85);
assertEquals(85, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(85, helpFormatter0.getLeftPadding());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("\n", helpFormatter0.getNewLine());
assertNull(helpFormatter0.getOptPrefix());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("--", helpFormatter0.getLongOptPrefix());


[MASTER] 18:13:05.448 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_178_tmp__ESTest.test0(HelpFormatter_178_tmp__ESTest.java:47)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 18:13:05.453 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertNotNull(helpFormatter0);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

MockFile mockFile0 = new MockFile("arg");
assertNotNull(mockFile0);

Options options0 = new Options();
assertNotNull(options0);

HelpFormatter helpFormatter1 = new HelpFormatter();
assertFalse(helpFormatter1.equals((Object)helpFormatter0));
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, helpFormatter1.defaultWidth);
assertEquals(3, helpFormatter1.defaultDescPad);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter1.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals("-", helpFormatter1.getOptPrefix());
assertEquals(3, helpFormatter1.getDescPadding());
assertEquals(" ", helpFormatter1.getLongOptSeparator());
assertEquals("\n", helpFormatter1.getNewLine());
assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
assertEquals(74, helpFormatter1.getWidth());
assertEquals("arg", helpFormatter1.getArgName());
assertEquals(1, helpFormatter1.getLeftPadding());
assertEquals("--", helpFormatter1.getLongOptPrefix());
assertNotNull(helpFormatter1);

helpFormatter1.printHelp(" ", "-", options0, "", false);
assertFalse(helpFormatter1.equals((Object)helpFormatter0));
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, helpFormatter1.defaultWidth);
assertEquals(3, helpFormatter1.defaultDescPad);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter1.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals("-", helpFormatter1.getOptPrefix());
assertEquals(3, helpFormatter1.getDescPadding());
assertEquals(" ", helpFormatter1.getLongOptSeparator());
assertEquals("\n", helpFormatter1.getNewLine());
assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
assertEquals(74, helpFormatter1.getWidth());
assertEquals("arg", helpFormatter1.getArgName());
assertEquals(1, helpFormatter1.getLeftPadding());
assertEquals("--", helpFormatter1.getLongOptPrefix());
assertNotSame(helpFormatter1, helpFormatter0);

HelpFormatter helpFormatter2 = new HelpFormatter();
assertFalse(helpFormatter2.equals((Object)helpFormatter0));
assertFalse(helpFormatter2.equals((Object)helpFormatter1));
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter2.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(1, helpFormatter2.defaultLeftPad);
assertEquals(74, helpFormatter2.defaultWidth);
assertEquals("-", helpFormatter2.getOptPrefix());
assertEquals(1, helpFormatter2.getLeftPadding());
assertEquals(" ", helpFormatter2.getLongOptSeparator());
assertEquals("\n", helpFormatter2.getNewLine());
assertEquals(3, helpFormatter2.getDescPadding());
assertEquals("arg", helpFormatter2.getArgName());
assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
assertEquals("--", helpFormatter2.getLongOptPrefix());
assertEquals(74, helpFormatter2.getWidth());
assertNotNull(helpFormatter2);

HelpFormatter helpFormatter3 = new HelpFormatter();
assertFalse(helpFormatter3.equals((Object)helpFormatter1));
assertFalse(helpFormatter3.equals((Object)helpFormatter0));
assertFalse(helpFormatter3.equals((Object)helpFormatter2));
assertEquals(1, helpFormatter3.defaultLeftPad);
assertEquals(74, helpFormatter3.defaultWidth);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter3.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals("\n", helpFormatter3.getNewLine());
assertEquals("usage: ", helpFormatter3.getSyntaxPrefix());
assertEquals(74, helpFormatter3.getWidth());
assertEquals("--", helpFormatter3.getLongOptPrefix());
assertEquals("arg", helpFormatter3.getArgName());
assertEquals(1, helpFormatter3.getLeftPadding());
assertEquals("-", helpFormatter3.getOptPrefix());
assertEquals(3, helpFormatter3.getDescPadding());
assertEquals(" ", helpFormatter3.getLongOptSeparator());
assertNotNull(helpFormatter3);

String string0 = helpFormatter3.getLongOptPrefix();
assertFalse(helpFormatter3.equals((Object)helpFormatter1));
assertFalse(helpFormatter3.equals((Object)helpFormatter0));
assertFalse(helpFormatter3.equals((Object)helpFormatter2));
assertEquals(1, helpFormatter3.defaultLeftPad);
assertEquals(74, helpFormatter3.defaultWidth);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter3.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals("\n", helpFormatter3.getNewLine());
assertEquals("usage: ", helpFormatter3.getSyntaxPrefix());
assertEquals(74, helpFormatter3.getWidth());
assertEquals("--", helpFormatter3.getLongOptPrefix());
assertEquals("arg", helpFormatter3.getArgName());
assertEquals(1, helpFormatter3.getLeftPadding());
assertEquals("-", helpFormatter3.getOptPrefix());
assertEquals(3, helpFormatter3.getDescPadding());
assertEquals(" ", helpFormatter3.getLongOptSeparator());
assertEquals("--", string0);
assertNotNull(string0);
assertNotSame(helpFormatter3, helpFormatter1);
assertNotSame(helpFormatter3, helpFormatter0);
assertNotSame(helpFormatter3, helpFormatter2);

Comparator comparator0 = helpFormatter3.getOptionComparator();
assertFalse(helpFormatter3.equals((Object)helpFormatter1));
assertFalse(helpFormatter3.equals((Object)helpFormatter0));
assertFalse(helpFormatter3.equals((Object)helpFormatter2));
assertEquals(1, helpFormatter3.defaultLeftPad);
assertEquals(74, helpFormatter3.defaultWidth);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter3.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals("\n", helpFormatter3.getNewLine());
assertEquals("usage: ", helpFormatter3.getSyntaxPrefix());
assertEquals(74, helpFormatter3.getWidth());
assertEquals("--", helpFormatter3.getLongOptPrefix());
assertEquals("arg", helpFormatter3.getArgName());
assertEquals(1, helpFormatter3.getLeftPadding());
assertEquals("-", helpFormatter3.getOptPrefix());
assertEquals(3, helpFormatter3.getDescPadding());
assertEquals(" ", helpFormatter3.getLongOptSeparator());
assertNotNull(comparator0);
assertNotSame(helpFormatter3, helpFormatter1);
assertNotSame(helpFormatter3, helpFormatter0);
assertNotSame(helpFormatter3, helpFormatter2);

HelpFormatter helpFormatter4 = new HelpFormatter();
assertFalse(helpFormatter4.equals((Object)helpFormatter1));
assertFalse(helpFormatter4.equals((Object)helpFormatter3));
assertFalse(helpFormatter4.equals((Object)helpFormatter0));
assertFalse(helpFormatter4.equals((Object)helpFormatter2));
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, helpFormatter4.defaultWidth);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter4.defaultDescPad);
assertEquals(1, helpFormatter4.defaultLeftPad);
assertEquals(74, helpFormatter4.getWidth());
assertEquals("--", helpFormatter4.getLongOptPrefix());
assertEquals(3, helpFormatter4.getDescPadding());
assertEquals("arg", helpFormatter4.getArgName());
assertEquals("usage: ", helpFormatter4.getSyntaxPrefix());
assertEquals(" ", helpFormatter4.getLongOptSeparator());
assertEquals(1, helpFormatter4.getLeftPadding());
assertEquals("-", helpFormatter4.getOptPrefix());
assertEquals("\n", helpFormatter4.getNewLine());
assertNotNull(helpFormatter4);

helpFormatter4.setOptPrefix("");
assertFalse(helpFormatter4.equals((Object)helpFormatter1));
assertFalse(helpFormatter4.equals((Object)helpFormatter3));
assertFalse(helpFormatter4.equals((Object)helpFormatter0));
assertFalse(helpFormatter4.equals((Object)helpFormatter2));
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, helpFormatter4.defaultWidth);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter4.defaultDescPad);
assertEquals(1, helpFormatter4.defaultLeftPad);
assertEquals(74, helpFormatter4.getWidth());
assertEquals("--", helpFormatter4.getLongOptPrefix());
assertEquals(3, helpFormatter4.getDescPadding());
assertEquals("arg", helpFormatter4.getArgName());
assertEquals("", helpFormatter4.getOptPrefix());
assertEquals("usage: ", helpFormatter4.getSyntaxPrefix());
assertEquals(" ", helpFormatter4.getLongOptSeparator());
assertEquals(1, helpFormatter4.getLeftPadding());
assertEquals("\n", helpFormatter4.getNewLine());
assertNotSame(helpFormatter4, helpFormatter1);
assertNotSame(helpFormatter4, helpFormatter3);
assertNotSame(helpFormatter4, helpFormatter0);
assertNotSame(helpFormatter4, helpFormatter2);

String string1 = helpFormatter0.getLongOptPrefix();
assertFalse(helpFormatter0.equals((Object)helpFormatter1));
assertFalse(helpFormatter0.equals((Object)helpFormatter4));
assertFalse(helpFormatter0.equals((Object)helpFormatter2));
assertFalse(helpFormatter0.equals((Object)helpFormatter3));
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("--", string1);
assertNotNull(string1);
assertNotSame(helpFormatter0, helpFormatter1);
assertNotSame(helpFormatter0, helpFormatter4);
assertNotSame(helpFormatter0, helpFormatter2);
assertNotSame(helpFormatter0, helpFormatter3);


[MASTER] 18:13:08.659 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_182_tmp__ESTest.test0(HelpFormatter_182_tmp__ESTest.java:48)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 18:13:08.660 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(3, helpFormatter0.getDescPadding());
assertNotNull(helpFormatter0);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
assertNotNull(mockPrintWriter0);

MockFile mockFile0 = new MockFile("fj,]@b<d");
assertNotNull(mockFile0);

Options options0 = new Options();
assertNotNull(options0);

helpFormatter0.printHelp("", "5", options0, (String) null, false);

[MASTER] 18:13:11.756 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_184_tmp__ESTest.test0(HelpFormatter_184_tmp__ESTest.java:50)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 18:13:11.760 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, helpFormatter0.getWidth());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertNotNull(helpFormatter0);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
assertFalse(boolean0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
assertNotNull(mockPrintWriter0);

Locale locale0 = Locale.ROOT;
assertEquals("", locale0.getISO3Country());
assertEquals("", locale0.getLanguage());
assertEquals("", locale0.toString());
assertEquals("", locale0.getCountry());
assertEquals("", locale0.getVariant());
assertEquals("", locale0.getISO3Language());
assertNotNull(locale0);

Object[] objectArray0 = new Object[6];
objectArray0[0] = (Object) fileDescriptor0;
objectArray0[1] = (Object) mockFileOutputStream0;
objectArray0[2] = (Object) locale0;
objectArray0[3] = (Object) null;
objectArray0[4] = (Object) fileDescriptor0;
objectArray0[5] = (Object) helpFormatter0;
PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
assertFalse(fileDescriptor0.valid());
assertEquals("", locale0.getISO3Country());
assertEquals("", locale0.getLanguage());
assertEquals("", locale0.toString());
assertEquals("", locale0.getCountry());
assertEquals("", locale0.getVariant());
assertEquals("", locale0.getISO3Language());
assertNotNull(printWriter0);
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);
assertEquals(6, objectArray0.length);

MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
assertFalse(mockPrintWriter1.equals((Object)printWriter0));
assertNotNull(mockPrintWriter1);
assertEquals(6, objectArray0.length);

HelpFormatter helpFormatter1 = new HelpFormatter();
assertFalse(helpFormatter1.equals((Object)helpFormatter0));
assertEquals(3, helpFormatter1.defaultDescPad);
assertEquals(1, helpFormatter1.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter1.defaultWidth);
assertEquals(" ", helpFormatter1.getLongOptSeparator());
assertEquals(3, helpFormatter1.getDescPadding());
assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
assertEquals(74, helpFormatter1.getWidth());
assertEquals("--", helpFormatter1.getLongOptPrefix());
assertEquals("arg", helpFormatter1.getArgName());
assertEquals("-", helpFormatter1.getOptPrefix());
assertEquals("\n", helpFormatter1.getNewLine());
assertEquals(1, helpFormatter1.getLeftPadding());
assertNotNull(helpFormatter1);

helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 74, 3, "--");
assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
assertFalse(helpFormatter1.equals((Object)helpFormatter0));
assertEquals(3, helpFormatter1.defaultDescPad);
assertEquals(1, helpFormatter1.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter1.defaultWidth);
assertFalse(fileDescriptor0.valid());
assertEquals(" ", helpFormatter1.getLongOptSeparator());
assertEquals(3, helpFormatter1.getDescPadding());
assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
assertEquals(74, helpFormatter1.getWidth());
assertEquals("--", helpFormatter1.getLongOptPrefix());
assertEquals("arg", helpFormatter1.getArgName());
assertEquals("-", helpFormatter1.getOptPrefix());
assertEquals("\n", helpFormatter1.getNewLine());
assertEquals(1, helpFormatter1.getLeftPadding());
assertNotSame(mockPrintWriter0, mockPrintWriter1);
assertSame(mockPrintWriter0, printWriter0);
assertNotSame(helpFormatter1, helpFormatter0);

int int0 = helpFormatter1.getWidth();
assertFalse(helpFormatter1.equals((Object)helpFormatter0));
assertEquals(3, helpFormatter1.defaultDescPad);
assertEquals(1, helpFormatter1.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter1.defaultWidth);
assertEquals(" ", helpFormatter1.getLongOptSeparator());
assertEquals(3, helpFormatter1.getDescPadding());
assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
assertEquals(74, helpFormatter1.getWidth());
assertEquals("--", helpFormatter1.getLongOptPrefix());
assertEquals("arg", helpFormatter1.getArgName());
assertEquals("-", helpFormatter1.getOptPrefix());
assertEquals("\n", helpFormatter1.getNewLine());
assertEquals(1, helpFormatter1.getLeftPadding());
assertEquals(74, int0);
assertNotSame(helpFormatter1, helpFormatter0);

Options options0 = new Options();
assertNotNull(options0);

helpFormatter1.printHelp(" ", "vvJm,J!xRqlRPJ|Rl", options0, "wVj*?Up\"S#E");
assertFalse(helpFormatter1.equals((Object)helpFormatter0));
assertEquals(3, helpFormatter1.defaultDescPad);
assertEquals(1, helpFormatter1.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter1.defaultWidth);
assertEquals(" ", helpFormatter1.getLongOptSeparator());
assertEquals(3, helpFormatter1.getDescPadding());
assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
assertEquals(74, helpFormatter1.getWidth());
assertEquals("--", helpFormatter1.getLongOptPrefix());
assertEquals("arg", helpFormatter1.getArgName());
assertEquals("-", helpFormatter1.getOptPrefix());
assertEquals("\n", helpFormatter1.getNewLine());
assertEquals(1, helpFormatter1.getLeftPadding());
assertNotSame(helpFormatter1, helpFormatter0);


[MASTER] 18:13:15.092 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_189_tmp__ESTest.test0(HelpFormatter_189_tmp__ESTest.java:48)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 18:13:15.099 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(1, helpFormatter0.getLeftPadding());
assertNotNull(helpFormatter0);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

MockFile mockFile0 = new MockFile("arg");
assertNotNull(mockFile0);

Options options0 = new Options();
assertNotNull(options0);

HelpFormatter helpFormatter1 = new HelpFormatter();
assertFalse(helpFormatter1.equals((Object)helpFormatter0));
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(3, helpFormatter1.defaultDescPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, helpFormatter1.defaultLeftPad);
assertEquals(74, helpFormatter1.defaultWidth);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, helpFormatter1.getWidth());
assertEquals(3, helpFormatter1.getDescPadding());
assertEquals("arg", helpFormatter1.getArgName());
assertEquals("--", helpFormatter1.getLongOptPrefix());
assertEquals("-", helpFormatter1.getOptPrefix());
assertEquals("\n", helpFormatter1.getNewLine());
assertEquals(1, helpFormatter1.getLeftPadding());
assertEquals(" ", helpFormatter1.getLongOptSeparator());
assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
assertNotNull(helpFormatter1);

helpFormatter1.printHelp(" ", "-", options0, "", false);
assertFalse(helpFormatter1.equals((Object)helpFormatter0));
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(3, helpFormatter1.defaultDescPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, helpFormatter1.defaultLeftPad);
assertEquals(74, helpFormatter1.defaultWidth);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, helpFormatter1.getWidth());
assertEquals(3, helpFormatter1.getDescPadding());
assertEquals("arg", helpFormatter1.getArgName());
assertEquals("--", helpFormatter1.getLongOptPrefix());
assertEquals("-", helpFormatter1.getOptPrefix());
assertEquals("\n", helpFormatter1.getNewLine());
assertEquals(1, helpFormatter1.getLeftPadding());
assertEquals(" ", helpFormatter1.getLongOptSeparator());
assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
assertNotSame(helpFormatter1, helpFormatter0);

HelpFormatter helpFormatter2 = new HelpFormatter();
assertFalse(helpFormatter2.equals((Object)helpFormatter1));
assertFalse(helpFormatter2.equals((Object)helpFormatter0));
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter2.defaultWidth);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(3, helpFormatter2.defaultDescPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, helpFormatter2.defaultLeftPad);
assertEquals(74, helpFormatter2.getWidth());
assertEquals(3, helpFormatter2.getDescPadding());
assertEquals("arg", helpFormatter2.getArgName());
assertEquals("--", helpFormatter2.getLongOptPrefix());
assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
assertEquals(1, helpFormatter2.getLeftPadding());
assertEquals(" ", helpFormatter2.getLongOptSeparator());
assertEquals("-", helpFormatter2.getOptPrefix());
assertEquals("\n", helpFormatter2.getNewLine());
assertNotNull(helpFormatter2);

HelpFormatter helpFormatter3 = new HelpFormatter();
assertFalse(helpFormatter3.equals((Object)helpFormatter0));
assertFalse(helpFormatter3.equals((Object)helpFormatter2));
assertFalse(helpFormatter3.equals((Object)helpFormatter1));
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter3.defaultDescPad);
assertEquals(1, helpFormatter3.defaultLeftPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter3.defaultWidth);
assertEquals("usage: ", helpFormatter3.getSyntaxPrefix());
assertEquals(3, helpFormatter3.getDescPadding());
assertEquals(" ", helpFormatter3.getLongOptSeparator());
assertEquals("--", helpFormatter3.getLongOptPrefix());
assertEquals(74, helpFormatter3.getWidth());
assertEquals("\n", helpFormatter3.getNewLine());
assertEquals("-", helpFormatter3.getOptPrefix());
assertEquals("arg", helpFormatter3.getArgName());
assertEquals(1, helpFormatter3.getLeftPadding());
assertNotNull(helpFormatter3);

String string0 = helpFormatter3.getLongOptPrefix();
assertFalse(helpFormatter3.equals((Object)helpFormatter0));
assertFalse(helpFormatter3.equals((Object)helpFormatter2));
assertFalse(helpFormatter3.equals((Object)helpFormatter1));
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter3.defaultDescPad);
assertEquals(1, helpFormatter3.defaultLeftPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter3.defaultWidth);
assertEquals("usage: ", helpFormatter3.getSyntaxPrefix());
assertEquals(3, helpFormatter3.getDescPadding());
assertEquals(" ", helpFormatter3.getLongOptSeparator());
assertEquals("--", helpFormatter3.getLongOptPrefix());
assertEquals(74, helpFormatter3.getWidth());
assertEquals("\n", helpFormatter3.getNewLine());
assertEquals("-", helpFormatter3.getOptPrefix());
assertEquals("arg", helpFormatter3.getArgName());
assertEquals(1, helpFormatter3.getLeftPadding());
assertEquals("--", string0);
assertNotNull(string0);
assertNotSame(helpFormatter3, helpFormatter0);
assertNotSame(helpFormatter3, helpFormatter2);
assertNotSame(helpFormatter3, helpFormatter1);

Comparator comparator0 = helpFormatter3.getOptionComparator();
assertFalse(helpFormatter3.equals((Object)helpFormatter0));
assertFalse(helpFormatter3.equals((Object)helpFormatter2));
assertFalse(helpFormatter3.equals((Object)helpFormatter1));
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter3.defaultDescPad);
assertEquals(1, helpFormatter3.defaultLeftPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter3.defaultWidth);
assertEquals("usage: ", helpFormatter3.getSyntaxPrefix());
assertEquals(3, helpFormatter3.getDescPadding());
assertEquals(" ", helpFormatter3.getLongOptSeparator());
assertEquals("--", helpFormatter3.getLongOptPrefix());
assertEquals(74, helpFormatter3.getWidth());
assertEquals("\n", helpFormatter3.getNewLine());
assertEquals("-", helpFormatter3.getOptPrefix());
assertEquals("arg", helpFormatter3.getArgName());
assertEquals(1, helpFormatter3.getLeftPadding());
assertNotNull(comparator0);
assertNotSame(helpFormatter3, helpFormatter0);
assertNotSame(helpFormatter3, helpFormatter2);
assertNotSame(helpFormatter3, helpFormatter1);

HelpFormatter helpFormatter4 = new HelpFormatter();
assertFalse(helpFormatter4.equals((Object)helpFormatter1));
assertFalse(helpFormatter4.equals((Object)helpFormatter2));
assertFalse(helpFormatter4.equals((Object)helpFormatter3));
assertFalse(helpFormatter4.equals((Object)helpFormatter0));
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter4.defaultWidth);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(1, helpFormatter4.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter4.defaultDescPad);
assertEquals(74, helpFormatter4.getWidth());
assertEquals("--", helpFormatter4.getLongOptPrefix());
assertEquals("\n", helpFormatter4.getNewLine());
assertEquals("-", helpFormatter4.getOptPrefix());
assertEquals("arg", helpFormatter4.getArgName());
assertEquals(1, helpFormatter4.getLeftPadding());
assertEquals(" ", helpFormatter4.getLongOptSeparator());
assertEquals(3, helpFormatter4.getDescPadding());
assertEquals("usage: ", helpFormatter4.getSyntaxPrefix());
assertNotNull(helpFormatter4);

helpFormatter4.setOptPrefix("");
assertFalse(helpFormatter4.equals((Object)helpFormatter1));
assertFalse(helpFormatter4.equals((Object)helpFormatter2));
assertFalse(helpFormatter4.equals((Object)helpFormatter3));
assertFalse(helpFormatter4.equals((Object)helpFormatter0));
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter4.defaultWidth);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(1, helpFormatter4.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter4.defaultDescPad);
assertEquals(74, helpFormatter4.getWidth());
assertEquals("--", helpFormatter4.getLongOptPrefix());
assertEquals("\n", helpFormatter4.getNewLine());
assertEquals("arg", helpFormatter4.getArgName());
assertEquals(1, helpFormatter4.getLeftPadding());
assertEquals("", helpFormatter4.getOptPrefix());
assertEquals(" ", helpFormatter4.getLongOptSeparator());
assertEquals(3, helpFormatter4.getDescPadding());
assertEquals("usage: ", helpFormatter4.getSyntaxPrefix());
assertNotSame(helpFormatter4, helpFormatter1);
assertNotSame(helpFormatter4, helpFormatter2);
assertNotSame(helpFormatter4, helpFormatter3);
assertNotSame(helpFormatter4, helpFormatter0);

String string1 = helpFormatter0.getLongOptPrefix();
assertFalse(helpFormatter0.equals((Object)helpFormatter4));
assertFalse(helpFormatter0.equals((Object)helpFormatter3));
assertFalse(helpFormatter0.equals((Object)helpFormatter2));
assertFalse(helpFormatter0.equals((Object)helpFormatter1));
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("--", string1);
assertNotNull(string1);
assertNotSame(helpFormatter0, helpFormatter4);
assertNotSame(helpFormatter0, helpFormatter3);
assertNotSame(helpFormatter0, helpFormatter2);
assertNotSame(helpFormatter0, helpFormatter1);

helpFormatter2.printHelp((String) null, options0);

[MASTER] 18:13:18.271 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_192_tmp__ESTest.test0(HelpFormatter_192_tmp__ESTest.java:51)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 18:13:18.275 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals(74, helpFormatter0.getWidth());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertNotNull(helpFormatter0);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

MockFile mockFile0 = new MockFile("arg");
assertNotNull(mockFile0);

Options options0 = new Options();
assertNotNull(options0);

StringWriter stringWriter0 = new StringWriter(1);
assertEquals("", stringWriter0.toString());
assertNotNull(stringWriter0);

StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
assertEquals("-", stringWriter0.toString());
assertEquals("-", stringWriter1.toString());
assertNotNull(stringWriter1);
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);

StringWriter stringWriter2 = stringWriter1.append(';');
assertEquals("-;", stringWriter0.toString());
assertEquals("-;", stringWriter1.toString());
assertEquals("-;", stringWriter2.toString());
assertNotNull(stringWriter2);
assertSame(stringWriter0, stringWriter2);
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter2);
assertSame(stringWriter1, stringWriter0);
assertSame(stringWriter2, stringWriter1);
assertSame(stringWriter2, stringWriter0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
assertNotNull(mockPrintWriter0);

PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
assertEquals("-;usage: ", stringWriter0.toString());
assertEquals("-;usage: ", stringWriter1.toString());
assertNotNull(printWriter0);
assertSame(stringWriter0, stringWriter2);
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter2);
assertSame(stringWriter1, stringWriter0);
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);

Options options1 = new Options();
assertFalse(options1.equals((Object)options0));
assertNotNull(options1);

Option option0 = new Option("", "--", true, "--");
assertEquals((-2), Option.UNLIMITED_VALUES);
assertEquals((-1), Option.UNINITIALIZED);
assertTrue(option0.hasLongOpt());
assertEquals("--", option0.getLongOpt());
assertEquals('\u0000', option0.getValueSeparator());
assertEquals("--", option0.getDescription());
assertNull(option0.getArgName());
assertTrue(option0.hasArg());
assertFalse(option0.hasOptionalArg());
assertFalse(option0.hasArgName());
assertFalse(option0.isRequired());
assertEquals("", option0.getOpt());
assertNull(option0.getValue());
assertFalse(option0.hasArgs());
assertEquals(1, option0.getArgs());
assertFalse(option0.hasValueSeparator());
assertNotNull(option0);

Options options2 = options1.addOption(option0);
assertFalse(options1.equals((Object)options0));
assertFalse(options2.equals((Object)options0));
assertEquals((-2), Option.UNLIMITED_VALUES);
assertEquals((-1), Option.UNINITIALIZED);
assertTrue(option0.hasLongOpt());
assertEquals("--", option0.getLongOpt());
assertEquals('\u0000', option0.getValueSeparator());
assertEquals("--", option0.getDescription());
assertNull(option0.getArgName());
assertTrue(option0.hasArg());
assertFalse(option0.hasOptionalArg());
assertFalse(option0.hasArgName());
assertFalse(option0.isRequired());
assertEquals("", option0.getOpt());
assertNull(option0.getValue());
assertFalse(option0.hasArgs());
assertEquals(1, option0.getArgs());
assertFalse(option0.hasValueSeparator());
assertNotNull(options2);
assertNotSame(options1, options0);
assertSame(options1, options2);
assertSame(options2, options1);
assertNotSame(options2, options0);

helpFormatter0.printUsage(printWriter0, 63, "usage: ", options2);
assertFalse(options1.equals((Object)options0));
assertFalse(options2.equals((Object)options0));
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals((-2), Option.UNLIMITED_VALUES);
assertEquals((-1), Option.UNINITIALIZED);
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals(74, helpFormatter0.getWidth());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("-;usage: usage: usage:  [- <arg>]\n", stringWriter0.toString());
assertEquals("-;usage: usage: usage:  [- <arg>]\n", stringWriter1.toString());
assertTrue(option0.hasLongOpt());
assertEquals("--", option0.getLongOpt());
assertEquals('\u0000', option0.getValueSeparator());
assertEquals("--", option0.getDescription());
assertNull(option0.getArgName());
assertTrue(option0.hasArg());
assertFalse(option0.hasOptionalArg());
assertFalse(option0.hasArgName());
assertFalse(option0.isRequired());
assertEquals("", option0.getOpt());
assertNull(option0.getValue());
assertFalse(option0.hasArgs());
assertEquals(1, option0.getArgs());
assertFalse(option0.hasValueSeparator());
assertSame(stringWriter0, stringWriter2);
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter2);
assertSame(stringWriter1, stringWriter0);
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);
assertNotSame(options1, options0);
assertSame(options1, options2);
assertSame(options2, options1);
assertNotSame(options2, options0);

MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
assertFalse(mockPrintWriter1.equals((Object)printWriter0));
assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
assertNotNull(mockPrintWriter1);

helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 3181, (-2), "|+oVmxX0IqQ|^");
assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
assertFalse(mockPrintWriter1.equals((Object)printWriter0));
assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals(74, helpFormatter0.getWidth());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("-;usage: usage: usage:  [- <arg>]\n|+oVmxX0IqQ|^\n", stringWriter0.toString());
assertEquals("-;usage: usage: usage:  [- <arg>]\n|+oVmxX0IqQ|^\n", stringWriter1.toString());
assertSame(stringWriter0, stringWriter2);
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter2);
assertSame(stringWriter1, stringWriter0);
assertNotSame(mockPrintWriter0, mockPrintWriter1);
assertSame(mockPrintWriter0, printWriter0);
assertNotSame(mockPrintWriter1, printWriter0);
assertNotSame(mockPrintWriter1, mockPrintWriter0);

helpFormatter0.printHelp(3181, "", (String) null, options0, "", false);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 12
* Writing tests to file
* Writing JUnit test case 'HelpFormatter_ESTest' to results/Cli-32/org.apache.commons.cli.HelpFormatter/BBC-F0-opt-100/tests/4
* Done!

* Computation finished
