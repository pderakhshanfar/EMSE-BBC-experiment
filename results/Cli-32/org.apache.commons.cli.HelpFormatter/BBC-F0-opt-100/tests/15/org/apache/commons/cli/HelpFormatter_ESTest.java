/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 05:04:39 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.ObjectOutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.URI;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 0;
      Options options0 = new Options();
      Option option0 = new Option("", "--");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      helpFormatter0.printHelp("m~d=%\"0`Pr#", "m~d=%\"0`Pr#", options1, "", true);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedInputStream pipedInputStream0 = new PipedInputStream(1285);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, " ", false, "-");
      // Undeclared exception!
      helpFormatter0.printOptions(printWriter0, 0, options1, 3810, 13);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setArgName((String) null);
      options0.hasShortOption("--");
      helpFormatter0.defaultDescPad = (-1308);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.Util", "'AhKrA0cZ\"``x", options0, "org.apache.commons.cli.Util");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "Af'z*D";
      helpFormatter0.defaultWidth = 0;
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp("\n", "\n", options0, "\n");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      helpFormatter0.defaultSyntaxPrefix = "";
      Options options0 = new Options();
      options0.getOptions();
      // Undeclared exception!
      helpFormatter0.printHelp("\n", "\n", options0, "\n");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 97;
      helpFormatter0.defaultLeftPad = 4874;
      helpFormatter0.setLongOptPrefix("$aB");
      helpFormatter0.setWidth(97);
      helpFormatter0.getOptionComparator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")&xm}");
      helpFormatter0.rtrim("");
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getArgName();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getDescPadding();
      helpFormatter0.rtrim("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.rtrim("fLA)$zFlAm$`WFI");
      helpFormatter0.getOptPrefix();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ", 1, 1);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      int int0 = 707;
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 707, (-506), "8O]IAs$D9X-SbQ\"I;^");
      stringBuffer1.append((float) 1);
      stringBuffer1.setCharAt(10, 'v');
      int int1 = 9;
      char[] charArray0 = new char[1];
      charArray0[0] = 'v';
      // Undeclared exception!
      try { 
        stringWriter0.write(charArray0, (-506), 17);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 0;
      Options options0 = new Options();
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      String string1 = " ]";
      String string2 = "org.apache.commons.cli.AlreadySelectedException";
      // Undeclared exception!
      helpFormatter0.printHelp(0, "org.apache.commons.cli.HelpFormatter$1", " ]", options0, "org.apache.commons.cli.AlreadySelectedException");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("/M*R}d/2++:TwS6D");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) "-";
      objectArray0[4] = (Object) "/M*R}d/2++:TwS6D";
      Object object0 = new Object();
      objectArray0[5] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "arg", false, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, (-1142), options2, 2112, 2112);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos(" ", 1, (-1));
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      int int0 = 64;
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Option option0 = null;
      try {
        option0 = new Option("usage: ", "m.\"$/9", true, "[HjWDNx]S:WA");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1095);
      helpFormatter0.defaultWidth = (-1095);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("ZW;O5G{~9&oS.BFK6", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.getArgName();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.rtrim("");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      mockPrintStream0.append('l');
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("\n");
      int int0 = (-2733);
      String string0 = "";
      String string1 = "sr%R^(1O+.Z0aTo[{H";
      StringBuffer stringBuffer0 = new StringBuffer(117);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 117, (-817), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "";
      String string1 = "/";
      optionGroup0.setRequired(true);
      Option option0 = new Option("", "/");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), "/", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1513;
      StringBuffer stringBuffer0 = new StringBuffer(1513);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "--", false, " ]");
      String string0 = "]-l%mrNcU";
      Options options2 = options1.addOption("", false, "]-l%mrNcU");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, options2, 1513, 150);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "", options1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("\n");
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1088, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.setNewLine("org.apache.commons.cli.Option");
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.Option");
      helpFormatter0.getArgName();
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 70, (Options) null, 35, 70);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "";
      boolean boolean0 = true;
      Option option0 = new Option("", "--", true, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Option option1 = new Option("arg", "usage: ");
      optionGroup1.addOption(option1);
      options0.addOptionGroup(optionGroup0);
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1104, "", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 1901, " :: ");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultWidth = 0;
      options0.helpOptions();
      // Undeclared exception!
      helpFormatter0.printHelp(".VCvJ)yTmZ.^Xh!Q ", ".VCvJ)yTmZ.^Xh!Q ", options0, "q(4S^GP*Jc]oPahNH");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "=KR/cXy");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      options2.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2), "=KR/cXy", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ] [ long ";
      int int0 = (-504);
      helpFormatter0.defaultLeftPad = (-504);
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.setArgName(" ] [ long ");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ] [ long ", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "/");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), "", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(31);
      Options options0 = new Options();
      options0.addOption("arg", "", false, "\n");
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "+4d:2q;Y*9_^");
      options0.addOption(option0);
      Options options2 = options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ", "");
      MockFile mockFile1 = new MockFile(mockFile0, "RlEg@F%r");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "", options2);
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions(mockPrintWriter0, 187, options1, 63, (-591));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultOptPrefix;
      helpFormatter0.getLongOptSeparator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile mockFile0 = new MockFile("--", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "\n");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 75, "-", "pwQ", options1, 9, 13, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1705));
      helpFormatter0.rtrim("\n");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.rtrim("Jbq5mOTZHa^w[");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockFile mockFile0 = new MockFile("--", "v~|");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 37, "v~|", (String) null, options0, 37, 1463, "", true);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 2678, options0, 2678, 2678);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 15, 33, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", "QDxKa+!WY", false, (String) null);
      helpFormatter0.printHelp(30, "pewL)=E.oM*dplV2mA", "S-", options0, ":SG66gvtzlgK", true);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = helpFormatter0.defaultOptPrefix;
      MockFile mockFile0 = new MockFile((String) null, "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("$]~N");
      mockPrintWriter0.println('=');
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 37, "g2m A\"NO#Vr1ZE7", "$]~N", options0, 1132, 4104, "", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("usage: ");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = helpFormatter0.defaultOptPrefix;
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "gQ+_fI=T\"7ihF", "Syqj0\\ S&W7", options0, 0, 0, "cmdLineSyntax not provided", true);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getNewLine();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      int int0 = 1934;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 11, 1934, "x.rNjCNA'1q");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(3);
      Options options0 = new Options();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("W2ctG\"?pzL/Pj;Pte9|", (String) null, options0, "Pk$mC");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      int int0 = 8;
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 8, 1126, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(1235, "arg", "--", options0, "");
      String string0 = helpFormatter1.defaultOptPrefix;
      helpFormatter0.getLongOptSeparator();
      Options options1 = new Options();
      MockFile mockFile0 = new MockFile("", "w8;K$``BwwTu");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "Illegal option name '", "", options1, (-1402), 32, ".g.5a.+vp8DY", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ] [ long ");
      helpFormatter0.printOptions(mockPrintWriter0, 3, options0, 74, 74);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "&sI!v1\"YY2HSg( W8", "W2ctG\"?pzL/Pj;Pte9|", options0, "-", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(7, "[ZZ3xg57]-P", "", options0, "[ZZ3xg57]-P");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 9, (String) null, "&sI!v1\"YY2HSg( W8", options0, 9, 12, "-", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("f,P");
      Locale locale0 = Locale.forLanguageTag("f,P");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "f,P";
      objectArray0[2] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 74, "f,P", "B\"s#T(T-vO", options0, (-1850), 2193, " ", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "W2ctG\"?pzL/Pj;Pte9|";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-587), "$z:,7?T@'", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 9, "&sI!v1\"YY2HSg( W8", "-iSm.f~)I_9!'4/_;", options0, 12, 9, "P{W1-t^`bWDbq0PO", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultOptPrefix;
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile(">");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2870, "", "QDxKa+!WY", options0, 2557, 37, "' contains an illegal character : '", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(37);
      helpFormatter0.setNewLine("m6.,x(Pa1dwTIE;");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("JE>sa");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 24, "4O", "JE>sa", (Options) null, 116, 0, "'i{tIf;@oAOFH.I|zc");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.setLeftPadding(1);
      helpFormatter0.setNewLine("m6.,x(Pa1dwTIE;");
      Options options0 = new Options();
      options0.addOption((String) null, "m6.,x(Pa1dwTIE;", false, "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(1999, "-", (String) null, options0, "arg", true);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3, "W2ctG\"?pzL/Pj;Pte9|", "&sI!v1\"YY2HSg( W8", options0, 9, 3, "C<&a)4N_{", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ]");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1026), " ]", "has already been select.d: '", options0, 1, (-3466), "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "9C", "has already been select.d: '", options0, "usage: ");
      String string0 = helpFormatter0.defaultOptPrefix;
      helpFormatter0.getLongOptSeparator();
      Options options1 = new Options();
      MockFile mockFile0 = new MockFile("$]~N", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 37, "9C", "oXYz/i2", options1, 37, 37, "C<&a)4N_{", false);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultOptPrefix;
      Options options0 = new Options();
      options0.addOption((String) null, "", true, "M?U'iEq1>0");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "-", "Ra.[g]=f+Gvy>imx:/", options0, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", "~BZHmqYQ}8+}/KgH", (Options) null, "cmdLineSyntax not provided", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.getWidth();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, int0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      Locale locale0 = Locale.CANADA_FRENCH;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) locale0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      objectArray0[1] = (Object) mockFileOutputStream0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "";
      bufferedOutputStream0.write((-3571));
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) bufferedOutputStream0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) mockPrintWriter0;
      objectArray0[8] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      helpFormatter0.printUsage(printWriter0, 1, "");
      bufferedOutputStream0.write((-2106));
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "-", false, "usage: ");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-3217), "", "", options1, 74, (-3571), "org.apache.commons.cli.Options");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setNewLine("m6.,x(Pa1dwTIE;");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("`L");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "m6.,x(Pa1dwTIE;", "", options0, 1, (-2308), "9gG\"m~Pd{b%P*C[7Q");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(31);
      Options options0 = new Options();
      options0.addOption("", " [ARG]", true, "C#0h<2]");
      helpFormatter0.printHelp(31, "                               ", "                               ", options0, "                               ", true);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("JcjA_=^B");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, " ", "nT_", options0, 74, 74, "");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      String string0 = "";
      helpFormatter0.rtrim("");
      int int0 = 9;
      String string1 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options1.addOption("L*", "arg", true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'L*' contains an illegal character : '*'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultOptPrefix;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(37, "L3&+W^yNrg+vmv\"", "W2ctG\"?pzL/Pj;Pte9|", (Options) null, "?i3vh,:7vMysgL]m");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "rC", "has already been selected: '", options0, "L3&+WF^yNrg+vmv\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(31);
      helpFormatter0.setNewLine(">/3>y {\"g*t~Tt5v");
      Options options0 = new Options();
      helpFormatter0.printHelp(31, "cmdLineSyntax not provided", "                               ", options0, "", true);
      helpFormatter0.findWrapPos("", 31, 31);
      helpFormatter0.printHelp(31, "yGv]wouIulgxGg", "yGv]wouIulgxGg", options0, "");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      mockPrintStream0.append('l');
      Options options0 = new Options();
      int int0 = (-2733);
      String string0 = "sr%R^(1O+.Z0aTo[{H";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2733), "", "", options0, "sr%R^(1O+.Z0aTo[{H");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultOptPrefix;
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "", false, "\n");
      helpFormatter0.printHelp(37, "W2ctG\"?pzL/Pj;Pte9|", "", options1, "-", true);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 37, 147, "");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, 32, options0, (-237), 32);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultOptPrefix;
      String string1 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-702), options0, 44, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultOptPrefix;
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "", false, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "vDpS", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(37, "W2ctG\"?pzL/Pj;Pte9|", "", options1, "-", true);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      mockPrintStream0.append('l');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      mockPrintWriter0.println((float) 74);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 746, "\n");
      StringBuffer stringBuffer0 = new StringBuffer();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.findWrapPos("", (-1497), 2558);
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1749), "rC", "has already been selected: '", options0, "L3&+WF^yNrg+vmv\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("' was specified but an option from this group ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 37, "W2ctG\"?pzL/Pj;Pte9|", "A0`q[1zN`.472`wJV", options0, 2796, (-2212), "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      Locale locale0 = Locale.CANADA_FRENCH;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      StringBuffer stringBuffer0 = new StringBuffer(193);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.findWrapPos("\n", 3, (-1497));
      helpFormatter1.setLongOptSeparator("\n");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "arg", 3, 3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2);
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, "W2ctG\"?pzL/Pj;Pte9|");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append(':');
      String string0 = " ] [ long ";
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, " ] [ long ");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultOptPrefix;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "&sI!v1\"YY2HSg( W8", "W2ctG\"?pzL/Pj;Pte9|", options0, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = helpFormatter1.defaultOptPrefix;
      Options options0 = new Options();
      options0.addOption("", "", false, "--");
      Options options1 = new Options();
      helpFormatter0.printHelp(74, " ] [ long ", " ", options1, "", true);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultOptPrefix;
      Options options0 = new Options();
      Options options1 = options0.addOption("", "QDxKa+WY", true, "\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(42, "arg", "-", options1, "`{", false);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      mockPrintStream0.append('l');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      mockPrintWriter0.println((-1.0F));
      mockPrintWriter0.println((float) 74);
      mockPrintWriter0.println(false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 746, "\n");
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderWrappedText(stringBuffer0, 746, 746, "I/|y PvI5szkr");
      helpFormatter0.setLongOptPrefix("I/|y PvI5szkr");
      String string0 = "NO_ARGS_ALLOWED";
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = new Option("NO_ARGS_ALLOWED", "--", false, "usage: ");
      options0.addOption(option0);
      String string1 = "q/i<TE~+=f<`+g q";
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 746, options0, 746, (-2004));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 74);
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      Locale locale0 = Locale.CANADA_FRENCH;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) mockFileOutputStream0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) bufferedOutputStream0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) mockPrintWriter0;
      objectArray0[8] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      helpFormatter0.printUsage(printWriter0, 1, "");
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 13, 74);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1);
      helpFormatter0.setNewLine("6.,x(Pa1dwTIE;");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "6.,x(Pa1dwTIE;");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOption("arg", true, "usage: ");
      helpFormatter0.printHelp(">h+yOy$`hwh9F*;", "| [7wjCw20CQ", options1, "~gC#Z?G`H6G;&d/");
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      char[] charArray0 = new char[3];
      charArray0[0] = '}';
      charArray0[1] = 'f';
      charArray0[2] = '}';
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("67K,M,H:S", "| [7wjCw20CQ", (Options) null, "67K,M,H:S");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-36);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.createPadding(15);
      Options options0 = new Options();
      Options options1 = new Options();
      Options options2 = options1.addOption("O", "5g7R,ApZf}#", false, "\n");
      options2.hasOption("[");
      helpFormatter0.printHelp(34, "               ", "r^kb3F<v.OX},93O(J6", options2, ", ", false);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultOptPrefix;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 124, "-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(31);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("%U~i+VZYu1");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", "arg", options0, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      mockPrintStream0.append('l');
      helpFormatter0.setLongOptPrefix("I/|y PvI5szkr");
      Options options0 = new Options();
      Option option0 = new Option("NO_ARGS_ALLOWED", "--", false, "usage: ");
      Options options1 = options0.addOption(option0);
      options1.addOption("arg", "V*G:V>.m", false, "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(63, "arg", "arg", options0, "I/|y PvI5szkr", false);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.setLeftPadding(1);
      String string0 = "m6.,x(Pa1dwTIE;";
      helpFormatter0.setNewLine("m6.,x(Pa1dwTIE;");
      String string1 = "ZS";
      Options options0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(35, "rpKy%N$6]+M!`jA", "ZS", (Options) null, "OgA+->", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.findWrapPos("", 0, 0);
      helpFormatter0.setLongOptSeparator("\n");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(" [ARG]", "arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // arg
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      mockPrintStream0.append('l');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      mockPrintWriter0.println((float) 74);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 746, "\n");
      StringBuffer stringBuffer0 = new StringBuffer(3);
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.findWrapPos("", (-1497), 2558);
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockFile mockFile0 = new MockFile("--", "\n");
      boolean boolean0 = true;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      int int0 = 2687;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      // Undeclared exception!
      try { 
        mockPrintWriter1.append((CharSequence) "arg", 74, 2687);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n", false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, false);
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockFileOutputStream0;
      objectArray0[3] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printUsage(printWriter0, 1000, "", options1);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(31);
      Options options0 = new Options();
      helpFormatter0.printHelp("                               ", options0);
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("org.apache.commons.cli.ParseException", "org.apache.commons.cli.ParseException", options1, "2c,K:U#jT,");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(31);
      Options options0 = new Options();
      options0.addOption("arg", "", false, "\n");
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ", "");
      MockFile mockFile1 = new MockFile(mockFile0, "RlEg@F%r");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "", options2);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.setLeftPadding(1);
      helpFormatter0.setNewLine("m6.,x(Pa1dwTIE;");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "m6.,x(Pa1dwTIE;");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options0.addOption("arg", false, "usage: ");
      options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("/U#lUg_e'B", "| [7wjCw20CQ", options1, "| [7wjCw20CQ");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.setLongOptPrefix("usage: ");
      int int0 = (-342);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1000, (-342), "usage: ");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2), 1000, "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      mockPrintStream0.append('l');
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderWrappedText(stringBuffer0, 746, 746, "I/|y PvI5szkr");
      helpFormatter0.setLongOptPrefix("I/|y PvI5szkr");
      Options options0 = new Options();
      Option option0 = new Option("NO_ARGS_ALLOWED", "--", false, "usage: ");
      Options options1 = options0.addOption(option0);
      helpFormatter0.setArgName("I/|y PvI5szkr");
      helpFormatter0.printHelp("KnqsKZ:g7(eI5", "*,jFr", options0, "NO_ARGS_ALLOWED", false);
      helpFormatter0.printHelp("/f", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      int int0 = 1;
      helpFormatter0.setLeftPadding(1);
      String string0 = "m6.,x(Pa1dwTIE;";
      helpFormatter0.setNewLine("m6.,x(Pa1dwTIE;");
      String string1 = "ZS";
      Options options0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "rpKy%N$6]+M!`jA", "ZS", (Options) null, "OgA+->", false);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(31);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "", false, "\n");
      helpFormatter0.printHelp(31, "\n", "", options1, (String) null, true);
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 20, options0, (-1073), 31);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n", false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, false);
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockFileOutputStream0;
      objectArray0[3] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printUsage(printWriter0, 1000, "", options1);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 1000, options1, 1000, 1000);
      String string0 = helpFormatter0.getArgName();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", string0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 31;
      helpFormatter0.createPadding(31);
      helpFormatter0.setNewLine(">/3>y {\"g*t~Tt5v");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.createPadding(31);
      assertEquals("                               ", string0);
      
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "", false, "\n");
      helpFormatter0.printHelp(31, "W2ctG\"?pzL/Pj;Pte9|", "", options1, (String) null, true);
      assertEquals(3, helpFormatter0.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("has already been selected: '");
      helpFormatter0.findWrapPos("&sI!v1\"YY2HSg( W8", 25, 3);
      StringWriter stringWriter0 = new StringWriter(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("arg");
      assertEquals("arg", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      int int0 = 2497;
      StringBuffer stringBuffer0 = new StringBuffer(2497);
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 93, 690, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String string0 = "[";
      helpFormatter0.setArgName("[");
      helpFormatter0.defaultArgName = "[";
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getArgName();
      helpFormatter0.getNewLine();
      helpFormatter0.setOptPrefix("[");
      String string1 = " ";
      helpFormatter0.setSyntaxPrefix(" ");
      helpFormatter0.getArgName();
      helpFormatter0.getOptPrefix();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", "[");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2046;
      String string0 = "I&B\\L5";
      String string1 = "Z~cRds ]hBo~8_FI^";
      Options options0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Z~cRds ]hBo~8_FI^", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.rtrim((String) null);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertNull(string0);
      assertEquals(3, helpFormatter0.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("org.apache.commons.cli.AlreadySelectedException");
      helpFormatter0.setWidth(1);
      Options options0 = new Options();
      int int0 = 0;
      helpFormatter0.renderOptions(stringBuffer0, 31, options0, 31, 0);
      stringBuffer0.append((-2411.25));
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("--", "arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // arg
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      Options options0 = new Options();
      helpFormatter0.setNewLine("LGP.=");
      helpFormatter0.printHelp("LGP.=", options0, false);
      helpFormatter0.setLeftPadding(3288);
      assertEquals("LGP.=", helpFormatter0.getNewLine());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "", options2, "/U#lUg_e'B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "org.apache.commons.cli.ParseException";
      helpFormatter0.defaultArgName = "org.apache.commons.cli.ParseException";
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      String string0 = "";
      options0.helpOptions();
      boolean boolean0 = false;
      Option option0 = new Option("", false, "usage: ");
      Options options1 = options0.addOption(option0);
      options0.getOptionGroups();
      StringBuffer stringBuffer0 = new StringBuffer("org.apache.commons.cli.ParseException");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.renderWrappedText(stringBuffer0, 555, (-2152), "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-3157), "org.apache.commons.cli.ParseException", "org.apache.commons.cli.ParseException", options0, "org.apache.commons.cli.ParseException", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("Ral5&41*j9\"c&ABaj");
      int int0 = (-2220);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-2220));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1987);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 1987, 1987, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(803);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      stringBuffer0.ensureCapacity(3);
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      String string0 = "";
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", "", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getSyntaxPrefix();
      String string0 = "";
      helpFormatter0.setArgName("");
      String string1 = "'i|Ek*'c*2W%7";
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = options0.addOption("$Eq", true, "--");
      String string2 = ">";
      // Undeclared exception!
      try { 
        options1.addOption(string2, string0, boolean0, string2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '>'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setOptPrefix((String) null);
      String string1 = "J9;_I5hCojI9 9l1YZ{";
      helpFormatter0.setOptPrefix("J9;_I5hCojI9 9l1YZ{");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2529);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2529));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      mockPrintStream0.checkError();
      mockPrintStream0.print((Object) helpFormatter0);
      mockPrintStream0.append(';');
      StringBuffer stringBuffer0 = new StringBuffer(1450);
      helpFormatter0.setOptionComparator((Comparator) null);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", (-1623), 13);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 0;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", (-2040), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      int int0 = (-1130);
      helpFormatter0.defaultDescPad = (-1130);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      char[] charArray0 = new char[9];
      charArray0[0] = '}';
      charArray0[1] = 'b';
      charArray0[2] = 'f';
      charArray0[3] = 'w';
      charArray0[4] = 'J';
      charArray0[5] = '7';
      charArray0[6] = 'q';
      charArray0[7] = '`';
      charArray0[8] = '9';
      mockPrintWriter0.println(charArray0);
      int int1 = 1;
      String string0 = "-";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 1, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      mockPrintStream0.append('l');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      mockPrintWriter0.println((float) 74);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 746, "\n");
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderWrappedText(stringBuffer0, 746, 746, "I/|y PvI5szkr");
      helpFormatter0.setLongOptPrefix("I/|y PvI5szkr");
      String string0 = "NO_ARGS_ALLOWED";
      Options options0 = new Options();
      Option option0 = new Option("NO_ARGS_ALLOWED", "--", false, "usage: ");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        options1.addOption("q/i<TE~+=f<`+g q", false, "KnqsKZ:g7(eI5");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'q/i<TE~+=f<`+g q' contains an illegal character : '/'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2);
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "", "", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " :: ";
      helpFormatter0.setLongOptSeparator(" :: ");
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos(" :: ", (-106), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
