/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 15:02:19 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.setArgName("");
      helpFormatter0.setDescPadding(3);
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setWidth(444);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "Po0107R0o!");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "usage: ", "usage: ", options0, 0, 0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.createPadding(783);
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      int int0 = 64;
      Locale locale0 = Locale.GERMANY;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "";
      mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      Options options0 = new Options();
      String string0 = "H;!q5{YuD";
      // Undeclared exception!
      try { 
        options0.addOption("H;!q5{YuD", true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'H;!q5{YuD' contains an illegal character : ';'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.createPadding(41);
      helpFormatter0.setDescPadding((-2));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(41, ");I~]tm4*62HqTQ3", "", (Options) null, "RkaGM{yGlA{J<Z;_To");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      options0.addOption(option0);
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.setWidth(0);
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getSyntaxPrefix();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      int int0 = 34;
      helpFormatter0.createPadding(34);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getWidth();
      helpFormatter0.getOptPrefix();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 34, 74, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "eDecB");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), "eDecB", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ".d?3}y\"+}9.2M";
      MockPrintStream mockPrintStream0 = new MockPrintStream(".d?3}y\"+}9.2M");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('r');
      int int0 = 2110;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintStream0;
      helpFormatter0.defaultArgName = "S8!19>`eHXmz-(_pd";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "S8!19>`eHXmz-(_pd");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      objectArray0[1] = (Object) ".d?3}y\"+}9.2M";
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) printStream0;
      mockPrintStream0.printf("S8!19>`eHXmz-(_pd", objectArray0);
      Options options0 = new Options();
      int int1 = (-4670);
      int int2 = 3408;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 2110, ".d?3}y\"+}9.2M", ".d?3}y\"+}9.2M", options0, (-4670), 3408, ".d?3}y\"+}9.2M");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("y", "$9R");
      Options options1 = options0.addOption("y", true, " ");
      options0.addOption("arg", false, "/[Ic");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("org.apache.commons.cli.AlreadySelectedException", "arg", options1, "\n");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "$9R";
      objectArray0[2] = (Object) "y";
      objectArray0[3] = (Object) "org.apache.commons.cli.AlreadySelectedException";
      objectArray0[4] = (Object) "org.apache.commons.cli.AlreadySelectedException";
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) option0;
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "=yK|QI$G?M>HzA", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 22, (-803), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultArgName = null;
      options0.addOption("arg", true, (String) null);
      helpFormatter0.printHelp("jRi ", "usage: ", options0, (String) null);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("4Q?]{N r%", 3, 3);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setDescPadding((-2941));
      String string0 = ":}o-__|f'T";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(":}o-__|f'T", ":}o-__|f'T", options0, ":}o-__|f'T", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("U\"|hO5,O/m&]d");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2137, "U\"|hO5,O/m&]d", "U\"|hO5,O/m&]d", options0, 2137, 2137, (String) null, false);
      helpFormatter0.createPadding(2137);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth(0);
      // Undeclared exception!
      helpFormatter0.printHelp("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "arg", options0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.rtrim(" ");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", " ", false, "--");
      Options options3 = options2.addOption("", false, "");
      options3.helpOptions();
      helpFormatter0.printHelp(" ]", " ]", options3, "");
      helpFormatter0.setLeftPadding((-2288));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.Util", options1, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      options0.addOption("arg", true, "-");
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions((PrintWriter) null, 1, options0, 1778, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "0:");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1596);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      helpFormatter0.setSyntaxPrefix("0:");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 34, (Options) null, 34, 34);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptionComparator();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.setWidth((-469));
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 423, (Options) null, 32, 93);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultWidth = (-1667);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", "--", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", (String) null);
      option0.clone();
      options0.addOptionGroup(optionGroup0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2137, "usage: ", "usage: ", options0, 3, 1, "-", true);
      int int0 = helpFormatter0.defaultDescPad;
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      boolean boolean0 = true;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 1752, "gLfT%ik", "cigy.", options0, 3, (-3287), "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 64;
      Options options0 = new Options();
      Options options1 = options0.addOption("", "o#'", true, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-1539);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.defaultSyntaxPrefix = "Y[\"S";
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1539));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", "arg");
      helpFormatter0.findWrapPos("", (-2), 3);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "N^:7l |.", "'", (Options) null, "-", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption((String) null, true, "j 52(mY");
      options0.hasLongOption((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 53, "", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.defaultSyntaxPrefix = null;
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.getDescPadding();
      helpFormatter0.setOptionComparator(comparator0);
      String string1 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Iw`+mu$I+xBBVgxb ");
      int int0 = (-1281);
      helpFormatter0.defaultLeftPad = (-1281);
      int int1 = 3;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 3, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("NO_ARGS_ALLOWED", "--");
      options0.hasLongOption("UmN45Mpa");
      Options options1 = options0.addOption((String) null, (String) null, false, "");
      options1.hasOption((String) null);
      helpFormatter0.printHelp("k6*|1zl_", "tAAE2LTnR", options1, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      options0.hasShortOption("");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 914, 74, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      MockFile mockFile0 = new MockFile("--", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "#K4WT(SO");
      Option option0 = new Option("qh", "\n", true, "");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("arg", "", true, "org.apache.commons.cli.ParseException");
      Options options4 = options3.addOption("", true, "");
      options4.hasLongOption("");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 116, "", options4);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "-");
      options1.hasLongOption("-");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "usage: ", options1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      options0.helpOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 1, (-1), " ] [ long ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "-");
      options1.hasLongOption("-");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "usage: ", options1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(22, "", "", options0, "--", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("NO_ARGS_ALLOWED", "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.addOption(option0);
      option0.setRequired(false);
      options0.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 74, "-", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.setNewLine("");
      helpFormatter0.printHelp(769, "' was specified but an option from this group ", "b/*2PGCc", options0, "' was specified but an option from this group ");
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Option option0 = new Option("", "fD");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", true, "--");
      Options options2 = options1.addOption("PN1", false, "PN1");
      Options options3 = options2.addOptionGroup(optionGroup0);
      options3.addOption("arg", false, "PN1");
      helpFormatter0.printHelp("fD", " :: ", options0, "Tp^6EH]@<8}!");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 1081, options0, 917, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("org.apache.commons.cli.HelpFormatter$OptionComparator", 32, 5);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      Option option0 = new Option("arg", "");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", "Illegal option name '", false, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 31, "\n", "", options2, (-3574), 32, "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      options0.helpOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 236, "NPHvncu8-$]Lekh.");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Locale locale0 = Locale.CANADA_FRENCH;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "f=a2_rlB533:>LI!";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", objectArray0);
      helpFormatter2.printUsage(printWriter0, 3706, "usage: ", options0);
      helpFormatter2.printWrapped(printWriter0, 3706, " ");
      helpFormatter1.getOptPrefix();
      helpFormatter2.getNewLine();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getNewLine();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 79;
      helpFormatter0.setDescPadding(79);
      helpFormatter0.getWidth();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringBuffer stringBuffer0 = new StringBuffer("E>E3`pk\"U&h`9n");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 74, 79, "E>E3`pk\"U&h`9n");
      stringBuffer1.setLength(1);
      stringBuffer0.codePoints();
      int int1 = (-2395);
      helpFormatter0.defaultDescPad = (-2395);
      helpFormatter0.renderWrappedText(stringBuffer1, 79, 79, " ");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("NO_ARGS_ALLOWED", "arg");
      optionGroup0.addOption(option0);
      options0.addOption(option0);
      option0.setRequired(false);
      options0.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 2002, "f=a2_rlB533:>LI!", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("NO_ARGS_ALLOWED", "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      option0.setRequired(true);
      options2.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "]";
      String string1 = null;
      int int0 = 482;
      int int1 = 2002;
      String string2 = "";
      options1.helpOptions();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 1, "", "d_}Y<ck+E&2s+(^u{[0", options2, 0, 1, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("NO_ARGS_ALLOWED", "--");
      optionGroup0.addOption(option0);
      Options options1 = new Options();
      options1.addOption(option0);
      option0.setRequired(true);
      Collection collection0 = new LinkedList<Integer>();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 3, "]", (String) null, options1, 482, 2002, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("NO_ARGS_ALLOWED", "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      option0.setRequired(true);
      options2.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer0, 0, 0, "`il[I6Gjw= W\"~4Wu87");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("-", "arg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.print((long) 74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      int int0 = 44;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "f):", " ", options0, "org.apache.commons.cli.Option", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("NO_ARGS_ALLOWED", "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      option0.setRequired(true);
      options2.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 3, "]", (String) null, options1, 482, 2002, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      Options options1 = options0.addOption("", false, " ");
      helpFormatter0.printHelp("-", "arg", options1, "");
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, 1, "cmdLineSyntax not provided");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.getBuffer();
      int int0 = (-1212);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = "w6\" m3T8-XFoc)\\v";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1212), "w6\" m3T8-XFoc)v", "w6\" m3T8-XFoc)v", options1, (-285), 34, " ] [ long ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getNewLine();
      helpFormatter0.getWidth();
      helpFormatter0.rtrim("\n");
      MockPrintStream mockPrintStream0 = new MockPrintStream("d<JlTKaF^Q");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintStream1;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) options0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) locale0;
      PrintStream printStream0 = mockPrintStream1.printf(locale0, "\n", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1793, (String) null, "", options0, (-1109), 5744, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      Options options1 = options0.addOption("", false, " ");
      helpFormatter0.printHelp("-", "Ykv/^K[~ege!iphmGu", options1, "");
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      Option option0 = new Option("", "arg");
      options0.helpOptions();
      StringBuffer stringBuffer0 = new StringBuffer();
      String string1 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("   ", "W7/79xB@KT", options0, (String) null);
      helpFormatter0.setLeftPadding(587);
      File file0 = MockFile.createTempFile("org.apache.commons.cli.HelpFormatter$1", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("}PkI>wA", objectArray0);
      helpFormatter0.printOptions(printWriter0, (-108), options0, 44, 44);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      mockPrintWriter0.append((CharSequence) "usage: ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2137, "l");
      helpFormatter0.getNewLine();
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      String string1 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2137, "\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(32);
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter1.renderOptions(stringBuffer0, 1, options0, 1, 3411);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option1 = new Option("", "<");
      Options options1 = options0.addOption(option1);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.getOptionGroups();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter1.printHelp("usage: ", "arg", options2, " | ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 31, "arg", "j}|O%\u0002", options2, 18, 25, "--");
      helpFormatter1.getDescPadding();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      options0.helpOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter1.renderWrappedText(stringBuffer0, 1, (-1), " ");
      helpFormatter1.setLeftPadding(53);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, "\n", "]2z%l", options0, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setNewLine((String) null);
      Option option0 = new Option("", "");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getNewLine();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "");
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2137, "=h)s4 `:.o", "", options0, 3771, (-1), "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "-";
      Option option0 = new Option("", "-");
      Options options1 = options0.addOption(option0);
      helpFormatter0.setDescPadding((-1));
      Options options2 = options1.addOption(option0);
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ]", ">", options2, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.renderWrappedText(stringBuffer0, 1530, 3, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("-", "arg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.print((long) 74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      helpFormatter0.printHelp(80, "f):", " ", options0, "org.apache.commons.cli.Option", true);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("]", "", options0, "", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(63, "$b13fjHo%nK+Nt}Qzv", "G0Fyb/_{h]Z2<nY", (Options) null, "Ar");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("usage: ");
      options0.hasShortOption("GcfB/qzQHXwm");
      options0.hasOption("--");
      helpFormatter0.printHelp("h/ qDY0}enH|v5XeSA", "h/ qDY0}enH|v5XeSA", options0, "h/ qDY0}enH|v5XeSA", false);
      helpFormatter0.setDescPadding(32);
      StringBuffer stringBuffer0 = new StringBuffer(32);
      helpFormatter0.renderWrappedText(stringBuffer0, 32, 2584, "usage: ");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = ">$j,I6j]thT\\P}}";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">$j,I6j]thTP}}");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string1 = "";
      int int0 = (-851);
      helpFormatter0.setLeftPadding((-851));
      helpFormatter0.findWrapPos("", 4487, 4487);
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), ">$j,I6j]thTP}}");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 10;
      String string0 = "BRwc";
      String string1 = "K~9$RA/<(CcLxu\"Jij";
      Options options0 = new Options();
      int int1 = 305;
      String string2 = "jKZpJ#6";
      helpFormatter0.renderOptions((StringBuffer) null, (-1162), options0, 305, 10);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 1, 10, "jKZpJ#6");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "line.separator");
      OptionGroup optionGroup0 = new OptionGroup();
      MockFile mockFile0 = new MockFile("arg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2487), "~e},", "-", options0, (-1754), (-1), "Pyt_<HWkxN", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      int int0 = 9;
      String string0 = "M@>xBTSMyZo\"]Z";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("M@>xBTSMyZo\"]Z", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      Options options0 = new Options();
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printHelp("\n", options0, true);
      helpFormatter0.createPadding(0);
      helpFormatter0.setWidth((-1));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      OptionGroup optionGroup0 = new OptionGroup();
      MockFile mockFile0 = new MockFile("-", " ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 351, "oGq3V9;2vB,:", (String) null, options0, 8, 2137, "&", false);
      helpFormatter0.getDescPadding();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "\n");
      mockFile0.delete();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Options options0 = new Options();
      Option option0 = new Option((String) null, false, (String) null);
      options0.addOption(option0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-1), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", "org.apache.commons.cli.AlreadySelectedException", (Options) null, "org.apache.commons.cli.AlreadySelectedException");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MockFile mockFile0 = new MockFile("--", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      mockPrintWriter0.print(0.0);
      objectArray0[3] = (Object) "]";
      objectArray0[4] = (Object) "]";
      objectArray0[5] = (Object) comparator0;
      objectArray0[6] = (Object) mockPrintWriter0;
      mockPrintWriter0.format("]", objectArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, 3677, "org.apache.commons.cli.OptionValidator");
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      File file0 = MockFile.createTempFile("usage: ", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "--");
      helpFormatter0.printWrapped(printWriter0, 1804, "");
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, (int) (byte)0, "\n");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      OptionGroup optionGroup0 = new OptionGroup();
      MockFile mockFile0 = new MockFile("-", " ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 44, "", "", options0, 2137, 44, "f):", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      OptionGroup optionGroup0 = new OptionGroup();
      MockFile mockFile0 = new MockFile("-", " ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 351, "oGq3V9;2vB,:", (String) null, options0, 8, 2137, "", false);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", " ", true, "--");
      options2.addOption("", true, "");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2267, 2267, "");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, (-2), options1, 1279, 727);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      Options options1 = options0.addOption(option0);
      option0.toString();
      Options options2 = options1.addOption("", " ", true, "--");
      options0.helpOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", "", options1, "", false);
      StringBuffer stringBuffer0 = new StringBuffer(13);
      helpFormatter0.renderOptions(stringBuffer0, 390, options2, 74, 123);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      Options options1 = options0.addOption(option0);
      option0.toString();
      options1.addOption("", " ", true, "--");
      helpFormatter0.printHelp(1324, "J{~(\"0>p", ">", options1, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ]";
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", " ", false, "--");
      Options options3 = options2.addOption("", false, "");
      helpFormatter0.printHelp(" ]", " ]", options3, "");
      helpFormatter0.setLeftPadding((-2288));
      helpFormatter0.getDescPadding();
      int int0 = 31;
      String string1 = "vE}\"E-\"yr>Ch";
      // Undeclared exception!
      try { 
        options3.addOption("-", "   ", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", "-");
      MockFile mockFile0 = new MockFile("-", " ");
      option0.toString();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      OptionGroup optionGroup0 = new OptionGroup();
      MockFile mockFile0 = new MockFile("-", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) mockFileOutputStream0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) (byte)0;
      PrintStream printStream0 = mockPrintStream1.format("NT,n%xRT+F_]6yrd,", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (int) (byte)0, "Ykv/^K[~ege!iphmGu", "Ykv/^K[~ege!iphmGu", options0, (int) (byte)0, (-2526), "=w)7pD q4Xtj{yP'v+", false);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ]");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 34;
      helpFormatter0.getArgName();
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.printHelp("arg", options0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      Options options1 = options0.addOption(option0);
      option0.toString();
      options1.addOption("", " ", true, "--");
      options0.helpOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(" ]", "arg", options1, "", false);
      helpFormatter0.rtrim("--");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", " ", true, "--");
      Options options3 = options2.addOption("", true, "");
      helpFormatter0.printHelp(" ]", " ]", options3, "");
      helpFormatter0.setLeftPadding(34);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-228), options1, (-228), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      OptionGroup optionGroup0 = new OptionGroup();
      MockFile mockFile0 = new MockFile("-", " ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 44, "f):", "-", options0, 2137, (-2), "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1543, "`", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1254);
      Options options0 = new Options();
      options0.addOption("", "8f#'mf", false, "Ddr;l&oZ");
      options0.addOption("", false, "H%?vD6{yR,mk|AIYZ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "BRwc");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      Options options0 = null;
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", "", (Options) null, "org.apache.commons.cli.Options", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", " ", false, "--");
      Options options3 = options2.addOption("", false, "");
      helpFormatter0.printHelp(" ]", " ]", options3, "");
      helpFormatter0.setLeftPadding((-2288));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-87);
      mockFileOutputStream0.write(byteArray0, 0, 1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) dataOutputStream0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) dataOutputStream0;
      objectArray0[3] = (Object) dataOutputStream0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) mockFileOutputStream0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) mockPrintWriter0;
      objectArray0[8] = (Object) dataOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      PrintWriter printWriter1 = mockPrintWriter1.append((CharSequence) "-");
      int int0 = 0;
      helpFormatter0.printWrapped(printWriter1, 0, "");
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter1, (int) (byte) (-87), "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      Options options0 = null;
      Options options1 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.Options", "^W63ad?", options1, "", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, ">", "J{~(\"0>p", (Options) null, "RBW]H(eNKx1");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      helpFormatter0.printHelp("^W63ad?", "", options0, "org.apache.commons.cli.OptionValidator", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-554), ">", "", (Options) null, "o{*/oQ1r");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getNewLine();
      Writer writer0 = null;
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("Qosqwd6");
      Options options0 = new Options();
      helpFormatter1.printHelp("usage: ", options0, false);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) options0;
      helpFormatter1.setSyntaxPrefix("w");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("Qosqwd6");
      Options options0 = new Options();
      helpFormatter1.printHelp("usage: ", options0, false);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("y", "arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // arg
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("n|zZ!5x[");
      Options options0 = new Options();
      helpFormatter0.printHelp("(dR>B3s_O", options0, false);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("usage: ", "5xRwvOY(k;2N:D");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 5xRwvOY(k;2N:D
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", " ", true, "--");
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "", " ]", options3, "Ss:~F~\"tB8sP#_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.Options", "^W63ad?", options0, "", true);
      // Undeclared exception!
      helpFormatter0.printHelp(0, ">", "J{~(\"0>p", (Options) null, "RBW]H(eNKx1");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-1716));
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLeftPadding(10);
      String string0 = "line.separator";
      int int0 = 1;
      helpFormatter0.createPadding(1);
      helpFormatter0.setLongOptSeparator("line.separator");
      String string1 = "";
      helpFormatter0.setArgName("");
      String string2 = "--";
      Options options0 = new Options();
      boolean boolean0 = true;
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        options0.addOption("`Tw`n7wI6#9", " ", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '`Tw`n7wI6#9' contains an illegal character : '`'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      File file0 = MockFile.createTempFile("usage: ", "arg", (File) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.print((-3011.2683F));
      int int0 = 32;
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "-", 32, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("-", "arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // arg
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "/5(SHlg:Xkmj\\]G1";
      String string1 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("/5(SHlg:Xkmj]G1", "", options1, "/5(SHlg:Xkmj]G1");
      Option option0 = null;
      try {
        option0 = new Option("\n", " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) helpFormatter0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      Object object2 = new Object();
      objectArray0[4] = object2;
      objectArray0[5] = (Object) "arg";
      PrintWriter printWriter0 = mockPrintWriter0.printf("nxASANci`';8G5|hL;<", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      Locale locale0 = Locale.CHINA;
      PrintWriter printWriter1 = mockPrintWriter1.format(locale0, "usage: ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter1, (-865), (-865), "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 10;
      helpFormatter0.setOptPrefix("(?LFJ]DQvlfK");
      helpFormatter0.setNewLine("(?LFJ]DQvlfK");
      assertEquals("(?LFJ]DQvlfK", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLeftPadding(10);
      String string0 = "line.separator";
      int int0 = 1;
      helpFormatter0.createPadding(1);
      helpFormatter0.setLongOptSeparator("line.separator");
      String string1 = "";
      helpFormatter0.setArgName("");
      String string2 = "--";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("`Tw`n7wI6#9", " ", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '`Tw`n7wI6#9' contains an illegal character : '`'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      OptionGroup optionGroup0 = new OptionGroup();
      MockFile mockFile0 = new MockFile("-", " ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Options options1 = options0.addOption("", false, " ");
      helpFormatter0.setArgName("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "-", options1, "[ARG...]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("F|.KU,M");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "org.apache.commons.cli.HelpFormatter$1";
      Object object0 = new Object();
      Locale locale1 = locale0.stripExtensions();
      locale0.getDisplayVariant(locale1);
      objectArray0[1] = object0;
      mockPrintWriter0.print(true);
      objectArray0[2] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "org.apache.commons.cli.HelpFormatter$1", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      mockPrintWriter1.println();
      int int0 = (-3506);
      String string0 = "-";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-3506), "-", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setLongOptPrefix("J");
      assertEquals("J", helpFormatter0.getLongOptPrefix());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("--", "", true, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "G0Fyb/_{h]Z2<nY", (Options) null, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      helpFormatter0.setOptionComparator((Comparator) null);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.defaultLeftPad);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 10;
      String string0 = "BRwc";
      String string1 = "K~9$RA/<(CcLxu\"Jij";
      Options options0 = new Options();
      int int1 = 305;
      options0.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 10, "BRwc", "K~9$RA/<(CcLxu\"Jij", options0, 305, 10, "jKZpJ#6", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", " ", true, "--");
      Options options3 = options2.addOption("", true, "");
      helpFormatter0.printHelp(" ]", " ]", options3, "");
      helpFormatter0.setLeftPadding((-2288));
      assertEquals((-2288), helpFormatter0.defaultLeftPad);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("DUm,RdN4zjlfL#e2", true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'DUm,RdN4zjlfL#e2' contains an illegal character : ','
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1586;
      helpFormatter0.defaultLeftPad = 1586;
      helpFormatter0.defaultNewLine = null;
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      String string0 = "";
      try { 
        MockURI.URI("usage: ", (String) null, "usage: ");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in opaque part at index 6: usage: :#usage:%20
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2498, options0, 2498, 2498);
      int int0 = 850;
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 2498, 850, "bEm}RDi>GJ5.:4h");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer2, (-3046), options0, 850, (-3046));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      int int0 = (-857);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-857), 2111, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.resolve(uRI0, uRI0);
      MockFile mockFile0 = new MockFile(uRI1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.forLanguageTag("-");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) uRI0;
      objectArray0[2] = (Object) "-";
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) uRI0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) uRI0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 0, "?Z!`)*Vj", "-", (Options) null, (-3321), (-3321), "-", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("NCB", "tglFbD?O", options0, "tglFbD?O", false);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-87);
      mockFileOutputStream0.write(byteArray0, 0, 1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) dataOutputStream0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) dataOutputStream0;
      objectArray0[3] = (Object) dataOutputStream0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) mockFileOutputStream0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) mockPrintWriter0;
      objectArray0[8] = (Object) dataOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      PrintWriter printWriter1 = mockPrintWriter1.append((CharSequence) "-");
      helpFormatter0.printWrapped(printWriter1, 0, "");
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      helpFormatter0.printWrapped(printWriter1, 32, "\n");
      helpFormatter0.setWidth(0);
      assertEquals(0, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      int int0 = 0;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, true, "");
      stringBuffer0.chars();
      optionGroup0.addOption(option0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup0.setRequired(true);
      options0.hasOption("");
      options0.addOptionGroup(optionGroup1);
      int int1 = 211;
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption((String) null, false, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, options2, (-1), (-2588));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "T";
      String string1 = "[";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("-", "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }
}
