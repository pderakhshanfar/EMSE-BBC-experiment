/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 05:18:14 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "r";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("r", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 889, "lZ>ld", "-", options0, (-208), 889, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 515, "kV]Q!:`j3|P", "kV]Q!:`j3|P", options0, 2316, 515, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2927, "cmdLineSyntax not provided", "cmdLineSyntax not provided", (Options) null, "*Ai; ]_ZL|gPJ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("6", false, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Option option1 = new Option("arg", false, "\n");
      optionGroup1.addOption(option1);
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = ")<)LJZ";
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 109, ")<)LJZ", options2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      options0.addOptionGroup(optionGroup1);
      String string0 = "-_X~rbP4l";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 13, "-_X~rbP4l", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("RN^]#m");
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "\n", "\n", options0, "\n");
      helpFormatter0.printHelp("5E_b/vw)X%5:X", options0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 13, "", "", (Options) null, 977, 35, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption(" ");
      String string0 = "";
      helpFormatter0.printHelp(1006, "arg", "Tg<WD$k)hT64G", options0, "");
      int int0 = 0;
      helpFormatter0.createPadding(0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "\n", ":I'@AyaAsYw@p V", options0, "\n");
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 10, 87, "");
      helpFormatter1.renderOptions(stringBuffer1, 74, options0, 42, 10);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      Options options0 = new Options();
      Options options1 = options0.addOption("", " ", true, "4O;u4fn]");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(10, "1%hf'P?-ptfWs,632c", "", options1, "1%hf'P?-ptfWs,632c");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, true, "arg");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), "-_X~rbPl", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.close();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("\n");
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-7));
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.append('C');
      Options options1 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 34, "-,.u 5u87aw", (String) null, options0, 55, 34, "a[", false);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, " ", false, "arg");
      Option option0 = new Option("arg", false, "--");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("arg", false, "usage: ");
      options0.hasLongOption("usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      Options options4 = options3.addOptionGroup(optionGroup1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1609, (String) null, options4);
      helpFormatter0.getOptionComparator();
      options2.addOption((String) null, false, "-");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1609, (-2), "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2), "", "S,lYQ-jjU7E[LVp", options3, 135, (-1), ":W9 EIz#5ALi", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 10;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(117, "", (String) null, options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      StringBuffer stringBuffer0 = new StringBuffer(3);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption((String) null, true, (String) null);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 878, options2, 64, 245);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 245, 2159, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName((String) null);
      helpFormatter0.getArgName();
      Options options0 = new Options();
      options0.toString();
      options0.toString();
      helpFormatter0.renderOptions((StringBuffer) null, 853, options0, 1, 2914);
      MockFile mockFile0 = new MockFile("The option '", "org.apache.commons.cli.OptionValidator");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-2265), (Options) null, 74, 3562);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getNewLine();
      MockFile mockFile0 = new MockFile("arg", "!?ZLLTf7qMN");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "*]NF\u0017", true, "*]NF\u0017");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(">", options2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      PrintWriter printWriter0 = mockPrintWriter0.printf(" ", (Object[]) null);
      Options options0 = new Options();
      mockPrintWriter0.append('b');
      helpFormatter0.printHelp(9, "\n", "--", options0, "--");
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(printWriter0, 9, "usage: ", "arg", options1, 375, 375, (String) null, false);
      helpFormatter1.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('J');
      int int0 = (-250);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 1, (-250), "cmdLineSyntax not provided");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "?? +J", true, "?? +J");
      Option option0 = new Option("arg", false, "");
      Options options2 = options1.addOption(option0);
      options1.addOption((String) null, false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      options2.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("NmLF8", true, "usage: ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Illegal option name '");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) options1;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) options0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) mockFileOutputStream0;
      objectArray0[7] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf("\"", objectArray0);
      helpFormatter0.printHelp(printWriter0, 9, "Illegal option name '", "", options1, 117, 3, "NmLF8", true);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.close();
      helpFormatter0.setLongOptSeparator("arg");
      mockFileOutputStream0.release();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 583, " ");
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      options0.getOption("\n");
      Options options1 = options0.addOption("", "arg", false, "[ option: ");
      helpFormatter0.printHelp(1401, "org.apache.commons.cli.Util", "--", options1, "-");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.append('5');
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "--", " ", options0, 3, 3689, " ", false);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("--");
      helpFormatter0.printHelp(9, "arg", "", options0, "");
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter0.renderOptions(stringBuffer0, 10, options0, 1241, 10);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "NK0WUq!", "", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 559;
      helpFormatter0.setLeftPadding(12);
      helpFormatter0.setLeftPadding(559);
      String string0 = "has already been selected: '";
      helpFormatter0.setNewLine("has already been selected: '");
      helpFormatter0.setSyntaxPrefix((String) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      helpFormatter0.setLongOptPrefix((String) null);
      String string1 = "<";
      helpFormatter0.rtrim("<");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
      helpFormatter0.getWidth();
      helpFormatter0.getWidth();
      int int1 = (-541);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-541));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter0.setLongOptSeparator("arg");
      mockFileOutputStream0.release();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(19, ":", "N,RPV3T.P", (Options) null, ", ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.close();
      helpFormatter0.setLongOptSeparator("arg");
      int int0 = 583;
      mockFileOutputStream0.release();
      String string0 = " ";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 583, " ");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 583, "");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string1 = "D-l3);";
      Option option0 = null;
      try {
        option0 = new Option("-", false, "D-l3);");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, " ", false, "arg");
      Option option0 = new Option("arg", false, "--");
      Options options2 = options1.addOption(option0);
      options2.addOption("arg", false, "usage: ");
      mockPrintWriter0.close();
      mockPrintWriter0.append('r');
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 4149, (-4081), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      PrintWriter printWriter0 = mockPrintWriter0.printf(" ", (Object[]) null);
      Options options0 = new Options();
      mockPrintWriter0.close();
      mockPrintWriter0.append('b');
      int int0 = 9;
      String string0 = "";
      Options options1 = new Options();
      helpFormatter0.printHelp(9, "\n", "", options1, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-4081), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('|');
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) mockFileOutputStream0;
      objectArray0[6] = (Object) printWriter0;
      objectArray0[7] = (Object) printWriter0;
      objectArray0[8] = (Object) locale0;
      PrintWriter printWriter1 = mockPrintWriter0.printf(locale0, "", objectArray0);
      Options options0 = new Options();
      options0.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter1, (-1), ";((i`Hu^Hgv[4N,>(", ";((i`Hu^Hgv[4N,>(", options0, 2, (-4081), "x)Ms");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("usage: ");
      mockPrintWriter1.close();
      mockPrintWriter0.append('b');
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, " ");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.close();
      mockPrintWriter0.append('5');
      Options options0 = new Options();
      Options options1 = options0.addOption("NmLF8", true, "usage: ");
      helpFormatter0.printHelp(9, "+~wIz/<X@MAp", "]16qbY:x", options1, "   ");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("usage: ");
      mockPrintWriter1.close();
      PrintWriter printWriter0 = mockPrintWriter0.append('b');
      helpFormatter0.printHelp(289, "loY'SA|>'!vi(G.N", "usage: ", options0, "");
      helpFormatter0.printHelp(printWriter0, 289, "loY'SA|>'!vi(G.N", "+]@VTP&D", options0, 289, 2385, "loY'SA|>'!vi(G.N");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("z}_qrdzi4.n+,L_Lh", options0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options0 = new Options();
      helpFormatter0.printHelp(1080, "org.apache.commons.cli.OptionValidator", "", options0, "");
      helpFormatter0.printOptions(mockPrintWriter0, 19, options0, 1080, 3469);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.close();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.defaultLeftPad = (-1907);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(7, "<'!aOp,Na@", "", (Options) null, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      String string0 = "";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("arg");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      int int0 = (-4081);
      String string1 = null;
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, " ", false, "arg");
      Option option0 = new Option("arg", false, "@a;RH");
      Options options2 = options1.addOption(option0);
      options2.addOption("arg", false, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      helpFormatter0.printHelp("|ys`*@/", "5VY+*Bt", options2, (String) null, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), (String) null, "?&hh#5", options2, (-1), (-4081), "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options1 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "org.apache.commons.cli.AlreadySelectedException", "", options1, "org.apache.commons.cli.AlreadySelectedException");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.close();
      Options options0 = new Options();
      options0.hasShortOption("");
      helpFormatter0.printHelp(101, "5?%puxS8~v=h;(7wC4", "", options0, "njc+o");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "njc+o", options0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      helpFormatter0.rtrim((String) null);
      helpFormatter0.setLongOptSeparator("TrJ@>a9^pac`Mb");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 0, 1879);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.close();
      helpFormatter0.setLongOptSeparator("");
      mockFileOutputStream0.release();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 583, "");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      options0.hasOption("arg");
      helpFormatter0.printHelp(583, "--", "V>.0R;$L<ce!C^", options0, "", false);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", false, "");
      Options options2 = options1.addOption("", false, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", false, "");
      Options options4 = options3.addOption(option0);
      helpFormatter0.renderOptions(stringBuffer0, 15, options4, 32, 32);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("usage: ", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("k+D8!3[S8h");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 78, "k+D8!3[S8h", options0);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("L \".Q}", "L \".Q}", (Options) null, "y4y", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (Options) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      String string1 = " ";
      helpFormatter0.setArgName(" ");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (Options) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      String string0 = "";
      mockPrintWriter0.printf("", (Object[]) null);
      String string1 = "\"";
      Options options0 = new Options();
      options0.hasOption("--");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", false);
      mockFileOutputStream0.release();
      StringBuffer stringBuffer0 = new StringBuffer(1425);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1), options0, (-1), 28);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 103, options0, 103, 103);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-4258), 9, "loY'SA|>'!vi(G.N");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, true, "cmdLineSyntax not provided");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.hasOption("--");
      helpFormatter0.printHelp(22, "5?%puxS8~v=h;(7wC4", "+MZ$N{Y@@8", options1, "cmdLineSyntax not provided");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("");
      helpFormatter0.printHelp(10, "W01}G", "--", options0, "");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 504;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 504, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("{b6o0S");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) locale0;
      mockPrintWriter0.format(locale0, "--", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, (String) null, "\"!Cf>`4!nwrI", options0, 0, 0, "--", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Locale locale0 = Locale.CANADA_FRENCH;
      String string0 = "";
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) "";
      mockPrintWriter0.format("\n", objectArray0);
      Object object0 = new Object();
      objectArray0[7] = object0;
      objectArray0[8] = (Object) helpFormatter0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string1 = null;
      int int0 = (-5053);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Locale locale0 = Locale.CANADA_FRENCH;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte)26;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) "";
      Object object0 = new Object();
      objectArray0[7] = object0;
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 669, "s", "", options0, 669, 2, "BC>T%>", true);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Locale locale0 = Locale.CANADA_FRENCH;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) "";
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-602), "", "", options0, (-1), 3, "-", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = "";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      String string1 = "org.apache.commons.cli.OptionGroup";
      options0.hasLongOption("org.apache.commons.cli.OptionGroup");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "*", options0, "*", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      String string0 = "\\";
      helpFormatter0.defaultOptPrefix = " ";
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setLeftPadding(31);
      Options options0 = new Options();
      options0.helpOptions();
      StringBuffer stringBuffer0 = new StringBuffer(32);
      helpFormatter0.renderWrappedText(stringBuffer0, 31, 1279, "ya<3|F]");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1279, "", " ", options0, "ya<3|F]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      String string0 = "\\";
      helpFormatter0.setLeftPadding(74);
      Options options0 = new Options();
      options0.helpOptions();
      String string1 = "-";
      String string2 = "ya<3|F]";
      StringBuffer stringBuffer0 = new StringBuffer(32);
      int int0 = 1279;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, 1279, "ya<3|F]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Z_ZkSy+K-X.{W";
      helpFormatter0.setLongOptSeparator("Z_ZkSy+K-X.{W");
      helpFormatter0.defaultDescPad = (-527);
      helpFormatter0.defaultNewLine = "Z_ZkSy+K-X.{W";
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Z_ZkSy+K-X.{W", options0, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1);
      PrintWriter printWriter0 = null;
      String string0 = " [ARG]";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-602), " [ARG]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Locale locale0 = Locale.CANADA_FRENCH;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "-";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) mockPrintWriter0;
      String string0 = " | ";
      Options options0 = null;
      int int0 = (-1744);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2972, " | ", " | ", (Options) null, (-1744), 34, "NO_ARGS_ALLOWED", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "--";
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1874));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      int int0 = 0;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 276, (-1126), "K^0+{^\"L:b");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String string0 = "";
      Options options0 = null;
      String string1 = "0F.e`NjN/%OxZF<,8*";
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, 0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      String string0 = "\\";
      helpFormatter0.defaultOptPrefix = " ";
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setLeftPadding(31);
      Options options0 = new Options();
      options0.helpOptions();
      boolean boolean0 = true;
      helpFormatter0.getOptionComparator();
      helpFormatter0.createPadding(31);
      // Undeclared exception!
      try { 
        options0.addOption("-", "ya<3|F]", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("dFOh:H!pqA%3Yi", "", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      String string0 = "6gT;";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, "6gT;");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Locale locale0 = Locale.CANADA_FRENCH;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) "";
      Object object0 = new Object();
      objectArray0[7] = object0;
      objectArray0[8] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", 0, (-794));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-862), "{b6o0S", "org.apache.commons.cli.HelpFormatter", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 0;
      String string0 = "cmdLineSyntax not provided";
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) null, 0, "cmdLineSyntax not provided");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(10, "W01}G", "org.apache.commons.cli.HelpFormatter", options0, "5?%puxS8~v=h;(7wC4");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ] [ long ");
      int int0 = 0;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 21, "6gT;");
      helpFormatter0.getSyntaxPrefix();
      int int1 = (-1860);
      Options options0 = new Options();
      String string0 = "";
      String string1 = null;
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, " ] [ long ", "", options0, 0, 984, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      helpFormatter0.defaultDescPad = 1879;
      helpFormatter0.rtrim("");
      helpFormatter0.setLongOptSeparator("");
      int int0 = helpFormatter0.findWrapPos("", 1879, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix((String) null);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-2), options0, (-2), (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(32);
      String string0 = "Z]u5z\\=q{[Dt";
      String string1 = "[";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("[", " ", true, "]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      String string0 = "\\";
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setLeftPadding(31);
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("-", "ya<3|F]", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      int int0 = 0;
      String string0 = "6gT;";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "6gT;");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "<";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "<", "<", options0, "<", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-844);
      Options options0 = new Options();
      options0.getOptions();
      options0.hasOption((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-844), "--", "--", options0, "--", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("w{ZmEJlD)C:>2WJj");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      helpFormatter0.renderWrappedText(stringBuffer0, 583, (-1), "w{ZmEJlD)C:>2WJj");
      helpFormatter0.setDescPadding(1);
      assertEquals("w{ZmEJlD)C:>2WJj", helpFormatter0.getLongOptPrefix());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.getDescPadding();
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, int0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      String string0 = "";
      PrintWriter printWriter0 = mockPrintWriter0.printf("", (Object[]) null);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, " ", false, "arg");
      Option option0 = new Option("arg", false, "@a;RH");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("arg", false, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options4 = options3.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-4081), (String) null, options4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "6";
      String string1 = "";
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setNewLine("6");
      MockFile mockFile0 = new MockFile("^`^csOT", "");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "org.apache.commons.cli.HelpFormatter");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // org.apache.commons.cli.HelpFormatter
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Locale locale0 = Locale.CANADA_FRENCH;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) "";
      Object object0 = new Object();
      objectArray0[7] = object0;
      objectArray0[8] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 1444, "Cannot add value, list full.", "", options0, (-2), 0, "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      int int0 = (-574);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-574), (Options) null, 10, 32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      char[] charArray0 = new char[8];
      charArray0[0] = '=';
      charArray0[1] = 'J';
      charArray0[2] = 'i';
      charArray0[3] = '4';
      charArray0[4] = '_';
      charArray0[5] = 'w';
      charArray0[6] = 'h';
      charArray0[7] = '<';
      mockPrintWriter0.println(charArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 4850, 0, " ]");
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("arg", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = (-1534);
      Locale locale0 = Locale.ENGLISH;
      locale0.getExtensionKeys();
      locale0.getScript();
      locale0.getDisplayScript();
      mockPrintWriter0.format(locale0, "NO_ARGS_ALLOWED", (Object[]) null);
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      mockPrintWriter0.println((Object) helpFormatter0);
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) helpFormatter0;
      helpFormatter0.setArgName("");
      objectArray0[6] = (Object) mockPrintWriter0;
      mockPrintWriter0.format("arg", objectArray0);
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1534), (-616), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.defaultDescPad = 0;
      String string0 = ">i2sl";
      helpFormatter0.rtrim(">i2sl");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, "arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // arg
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("cmdLineSyntax not provided");
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      helpFormatter0.printHelp("cmdLineSyntax not provided", options0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((String) null, (String) null, options0, "hk");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("9)fU]194Fr:e");
      Options options0 = new Options();
      options0.hasOption("{b6o0S");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1845, (String) null, "9)fU]194Fr:e", options0, "org.apache.commons.cli.Options");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      String string0 = "";
      mockPrintWriter0.printf("", (Object[]) null);
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      Options options1 = options0.addOption("", "-", false, "]");
      options1.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options1, "7cv\",#rvEu");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("Z_ZkSy+K-X.{W");
      helpFormatter0.defaultNewLine = "Z_ZkSy+K-X.{W";
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      helpFormatter0.printHelp("Z_ZkSy+K-X.{W", options0, true);
      helpFormatter0.printHelp("Z_ZkSy+K-X.{W", " I, ", options0, "Z_ZkSy+K-X.{W");
      helpFormatter0.setArgName("Z_ZkSy+K-X.{W");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      options0.toString();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        pipedInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.getNewLine();
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      String string1 = "--";
      Options options0 = new Options();
      Option option0 = new Option("wX", "usage: ", true, "--");
      Options options1 = options0.addOption(option0);
      String string2 = "y~";
      Options options2 = options1.addOption("", true, "y~");
      // Undeclared exception!
      try { 
        options2.addOption("[ARG...]", "NO_ARGS_ALLOWED", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '[ARG...]' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
