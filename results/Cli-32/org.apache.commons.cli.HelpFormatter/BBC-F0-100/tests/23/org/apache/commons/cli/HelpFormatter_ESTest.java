/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 12:26:24 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(35);
      helpFormatter0.getNewLine();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "arg", true, "-");
      options1.hasShortOption("                                   ");
      Option option0 = new Option((String) null, "[", true, "arg");
      FileSystemHandling.shouldAllThrowIOExceptions();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setSelected(option0);
      helpFormatter0.defaultWidth = (-1);
      option0.clearValues();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ] [O long ", "                                   ", options1, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      String string0 = "Illegal option name '";
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, 0, "Illegal option name '");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(35);
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "                                   ";
      Options options1 = options0.addOption("arg", "arg", true, "                                   ");
      options1.hasShortOption("                                   ");
      Option option0 = new Option((String) null, "\n", true, "arg");
      options0.hasLongOption("--");
      Options options2 = options1.addOption("", "                                   ", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setSelected(option0);
      option0.clearValues();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options2.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(" ] [ long ", "                                   ", options1, "", false);
      helpFormatter0.printHelp("\n", "", options0, "i]G{'x", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      int int0 = 63;
      helpFormatter0.defaultDescPad = 63;
      int int1 = 0;
      String string0 = "sjpk";
      Options options0 = null;
      String string1 = "_U[3_?LbmJJR=n";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("sjpk", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-840));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 9, "\n");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "-", "arg", options0, 9, 74, "arg", true);
      String string0 = ">;KObzW_!k(";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, ">;KObzW_!k(", "\n", options0, "usage: ", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Locale locale0 = Locale.TAIWAN;
      pipedOutputStream0.flush();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) pipedOutputStream0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) pipedOutputStream0;
      objectArray0[3] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, " ", objectArray0);
      helpFormatter0.printUsage(printWriter0, 613, "HG-Aq^!YK<S");
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 613, "L", "L", (Options) null, 34, 34, "' contains an illegal character : '");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.setLeftPadding(10);
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      options0.getMatchingOptions((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-4), (String) null, (String) null, options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLongOptPrefix("AX&O[");
      helpFormatter0.createPadding(1);
      helpFormatter0.getOptPrefix();
      helpFormatter0.setNewLine("-");
      helpFormatter0.defaultOptPrefix = "xez}0Sj Q|$=";
      helpFormatter0.createPadding(2173);
      helpFormatter0.getOptPrefix();
      helpFormatter0.findWrapPos("xez}0Sj Q|$=", 1, 1);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(35);
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "-");
      options1.hasShortOption("                                   ");
      Option option0 = new Option((String) null, "[", true, "arg");
      options0.hasLongOption("--");
      options1.addOption("", "                                   ", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setSelected(option0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, (-1573), "", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      helpFormatter0.setOptPrefix("");
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "\n");
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" | ");
      Options options0 = new Options();
      String string1 = helpFormatter0.defaultNewLine;
      helpFormatter0.getOptPrefix();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 44, " | ");
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setOptPrefix("[");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.rtrim("");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 9, "\n");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "1PAp)&", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options0, 9, 1633, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", true);
      helpFormatter0.renderOptions(stringBuffer0, 3, options0, 74, 74);
      options0.hasShortOption("N");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1633, "t]9M{.", options0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "");
      helpFormatter0.getNewLine();
      helpFormatter0.printHelp("\n", options0, true);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "1PAp)&", "\n", options0, 0, 1, "ZDq#aRjSB1B1kB");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "";
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter1.defaultLeftPad = (-2444);
      helpFormatter0.createPadding(74);
      Option option0 = new Option("arg", "arg");
      FileSystemHandling.shouldAllThrowIOExceptions();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "usage: ", false, " ");
      Options options2 = options1.addOption(option0);
      options2.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("\n", "arg", options0, "s", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.defaultLeftPad = 1960;
      StringBuffer stringBuffer0 = new StringBuffer(1960);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 9, "\n");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "arg", "", options0, 3, 44, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("1Q|4WKcZ-EifUdDa");
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      Options options1 = new Options();
      helpFormatter0.printHelp("ASfxbg_L DH", options1, false);
      helpFormatter0.getDescPadding();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      int int0 = 63;
      helpFormatter0.defaultDescPad = 63;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "sjpk", "sjpk", (Options) null, "_U[3_?LbmJJR=n", false);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      helpFormatter0.createPadding(3);
      Option option0 = new Option("", "Cannot add value, list full.");
      FileSystemHandling.shouldAllThrowIOExceptions();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("--", "--", options0, "", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp("--", "--", options0, "", true);
      helpFormatter0.getOptPrefix();
      options0.getOptions();
      helpFormatter0.renderOptions((StringBuffer) null, 11, options0, 67, 6);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("1Q|4WKcZ-EifUdDa");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("-");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 3, options0, 74, 62);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 3, (-41), "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      boolean boolean0 = true;
      helpFormatter0.setWidth((-2203));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", "--", options0, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "Cannot add value, list full.", false, "U|zX!C;P|^55Q:v");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("--", "--", options0, "", true);
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("usage: ", " ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "oiWRe[OcwNE");
      Option option0 = new Option("", "", true, ")UxuHgM/t6n6o[");
      Options options1 = options0.addOption(option0);
      Option option1 = new Option("UY", "UY");
      Options options2 = options0.addOption(option1);
      helpFormatter0.printHelp(")UxuHgM/t6n6o[", options2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format("-", objectArray0);
      helpFormatter0.printUsage(printWriter0, 74, "usage: ", options1);
      helpFormatter0.printHelp("aD_+;y_.", options1, true);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(45, "", "usage: ", options1, "l7", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("--");
      boolean boolean0 = false;
      Options options1 = options0.addOption((String) null, true, " ");
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions((PrintWriter) null, 66, options1, 1, 411);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(35);
      helpFormatter0.getNewLine();
      int int0 = (-10);
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "-");
      options1.hasShortOption("                                   ");
      Option option0 = new Option((String) null, "[", true, "arg");
      Options options2 = options1.addOption(option0);
      option0.addValueForProcessing("]");
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-10), "\n", (String) null, options2, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", false, "");
      Options options2 = options1.addOption("arg", false, "");
      helpFormatter0.renderOptions(stringBuffer0, 2, options2, 31, 31);
      Options options3 = new Options();
      helpFormatter0.setSyntaxPrefix("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options3, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 1, 1, "\n");
      Options options0 = new Options();
      options0.addOption("arg", true, " ");
      helpFormatter0.printHelp(" ", options0, true);
      MockFile mockFile0 = new MockFile("--");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "usage: ");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer1, 0, 33, " ");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      options0.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("1Q|FWKcZ-EifUdD`");
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3874, "\":qV^[#c'4(9A-", (String) null, options0, (-4937), 35, "LLH];FLSE> E3", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Z< J0qn";
      String string1 = "b.@)pc$<v8X3";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Z< J0qn", "Z< J0qn", (Options) null, "b.@)pc$<v8X3", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 0;
      helpFormatter0.defaultArgName = " [ARG]";
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, " [ARG]");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(";[vsELUC");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 13, "usage: ");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, ".P6N.+ t/TxHN[N^", "", options0, 74, 70, "", false);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      StringBuffer stringBuffer0 = new StringBuffer(3);
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "-", options0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      option0.setArgs(63);
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.hasShortOption("DFzt");
      helpFormatter2.printHelp(34, " ", "--", options2, "--");
      helpFormatter0.printHelp(74, "usage: ", " ", options1, "");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getWidth();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 0, options0, (-1), 1548);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      StringBuffer stringBuffer0 = new StringBuffer(1);
      StringBuffer stringBuffer1 = new StringBuffer(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLongOptPrefix("--");
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 9, "\n");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "arg");
      Options options0 = new Options();
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 386, "\n", "\n", options0, 74, 3, "usage: ");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption(option0);
      OptionGroup optionGroup1 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(74, "usage: ", (String) null, options2, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1150), "", "6C<eR<IO|l)!N;7", options2, "org.apache.commons.cli.HelpFormatter$1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) helpFormatter1;
      objectArray0[6] = (Object) helpFormatter1;
      objectArray0[7] = (Object) helpFormatter1;
      objectArray0[8] = (Object) stringWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", objectArray0);
      helpFormatter1.printUsage(printWriter0, 32, "");
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      helpFormatter0.renderOptions(stringBuffer0, 74, options0, 74, 1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.setLongOptPrefix("Sd6r=7K]ZTqm");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      mockPrintWriter0.print("arg");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1973, (-3181), "");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(795);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 34, 34, "}pMXH<A 5Q'");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      mockPrintWriter0.append(':');
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "-");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, "", "0Sq", options0, 386, 91, "2#6LZk*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption((String) null, "arg", false, "");
      helpFormatter1.printHelp("-", options1, true);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(";[vsELUC");
      mockPrintWriter0.print(1);
      Options options0 = new Options();
      PrintWriter printWriter0 = mockPrintWriter0.append(';');
      int int0 = 745;
      helpFormatter0.printUsage(printWriter0, 745, ";[vsELUC");
      int int1 = 32;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-3206), "zhZ Y,YICwa[:", "", options0, 32, (-3206), "zhZ Y,YICwa[:");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 151, 151, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("(WXb");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      mockPrintWriter0.append('p');
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2535, "");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 103, "--", "arg", options0, 74, (-3206), "arg");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter2.printHelp(0, "' contains an illegal character : '", " ] [ long ", options0, "\n");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1);
      helpFormatter0.defaultDescPad = (-1);
      int int1 = (-4642);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-4642));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "usage: ";
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      Option option0 = new Option("arg", "ceQAp'", false, "");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("usage: ", options1);
      helpFormatter0.findWrapPos("usage: ", 2876, (-1414));
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1414), "", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("1Q|ZWKcZ-EifUdD`");
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      options0.addOption("", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 63, "j>6,-5/0rz5N", options1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("1Q|ZWKcZ-EifUdD`");
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options1 = new Options();
      helpFormatter0.createPadding(0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, ";X590F}<E*.}", ";X590F}<E*.}", options0, 3, 9, "n(~1c X0(Wy", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      helpFormatter0.rtrim("\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      int int0 = 63;
      // Undeclared exception!
      try { 
        helpFormatter3.printUsage((PrintWriter) null, 2516, "IU3'WFF2ws]Z9p", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.rtrim(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(32);
      helpFormatter0.renderWrappedText(stringBuffer0, 760, 74, "");
      Options options2 = new Options();
      helpFormatter1.setArgName((String) null);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      StringBuffer stringBuffer0 = new StringBuffer(3);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "U%kl-=aHt9IPg";
      int int0 = 9;
      int int1 = 31;
      helpFormatter0.defaultWidth = (-2748);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 2, options0, 2, 1529);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter2.printHelp(34, " ", "--", options2, "--");
      helpFormatter0.printHelp(74, "usage: ", " ", options1, "");
      helpFormatter1.getSyntaxPrefix();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter0.printHelp(64, "\n", "", options2, "\n", true);
      helpFormatter0.createPadding(34);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(";[vsELUC");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1, "");
      helpFormatter0.getDescPadding();
      helpFormatter1.findWrapPos("+LaqkM/pqY", 3, 74);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("1Q|FWKcZ-EifUdD`");
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      options0.addOption("", true, "--");
      int int0 = 31;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, ";X590F}<E*.}", ";X590F}<E*.}", options0, 31, 9, "n(~1c X0(Wy", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Locale locale0 = Locale.ENGLISH;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "p,K[e=5af:n5+|;";
      mockPrintWriter0.format(locale0, "p,K[e=5af:n5+|;", objectArray0);
      int int0 = (-2999);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2999), "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      StringBuffer stringBuffer0 = new StringBuffer("8PWQk/rP<f\"pI");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      mockPrintWriter0.append((CharSequence) "-");
      helpFormatter1.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos((String) null, 1, 74);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "u /E");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      String string0 = "6sub6h%m_X$V?~,Hj0";
      StringBuffer stringBuffer0 = new StringBuffer("6sub6h%m_X$V?~,Hj0");
      StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 74, 74, "6sub6h%m_X$V?~,Hj0");
      helpFormatter0.getWidth();
      stringBuffer2.append('V');
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer2, 3021, (Options) null, 3, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append('m');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Locale locale0 = Locale.GERMANY;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "org.apache.commons.cli.HelpFormatter";
      objectArray0[1] = (Object) mockPrintWriter0;
      Locale locale1 = Locale.forLanguageTag("usage: ");
      locale0.getDisplayScript(locale1);
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) "org.apache.commons.cli.HelpFormatter";
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) options0;
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "org.apache.commons.cli.HelpFormatter", objectArray0);
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "org.apache.commons.cli.HelpFormatter", "", options0, (-2), 0, "", true);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(";[vsELUC");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "-", false, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 31, options1, 103, (-1250));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      StringBuffer stringBuffer0 = new StringBuffer(1);
      StringBuffer stringBuffer1 = new StringBuffer(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLongOptPrefix("--");
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 9, "\n");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "arg");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", true, "FF{?;G0Xe:{");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter2.renderOptions(stringBuffer0, 9, options2, 31, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("1Q|FWKcZ-EifUdD`");
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp("org.apache.commons.cli.Option", options0, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 178, "1Q|FWKcZ-EifUdD`", options0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1), (-2938), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, " ", "\n", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("1Q|FWKcZ-EifUdD`");
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp(63, "]", "v,", options0, "eFI#a+o9");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Options options0 = new Options();
      helpFormatter0.printHelp("[", "", options0, "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 74, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      char[] charArray0 = new char[1];
      stringBuffer0.setLength(9);
      charArray0[0] = 'C';
      stringBuffer0.append(charArray0);
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 74, " ");
      String string0 = "eyhP";
      String string1 = "v,";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("uDJ5X;NR;m]ES(", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'uDJ5X;NR;m]ES(' contains an illegal character : ';'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setSyntaxPrefix("-");
      helpFormatter0.rtrim("org.apache.commons.cli.Option");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", options0, true);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.rtrim("org.apache.commons.cli.Option");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1833), "arg", "jc", options0, "org.apache.commons.cli.Option");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.defaultLeftPad = 1960;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 9, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("LA b0EgG", "", (Options) null, "LA b0EgG");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1636, "usage: ", "", (Options) null, (-2334), (-2461), "Z^M!T3n;", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "arg", "usage: ", (Options) null, (-3789), 2, "--", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("1Q|FWKcZ-EifUdD`");
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3874, "1Q|FWKcZ-EifUdD`", "org.apache.commons.cli.Option", options0, 3874, 3874, "1Q|FWKcZ-EifUdD`", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 10, "=4Nz*.=Vq~");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 87, "--");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("1Q|FWKcZ-EifUdD`");
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 86, "=4Nz*.=Vq~", "=4Nz*.=Vq~", options0, 124, (-455), "=4Nz*.=Vq~", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("a!24j><@`+;");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 2705, (String) null, "--", (Options) null, 81, 31, "ww>y'?/b&NWwD@PM", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultDescPad = 13;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, "arg", "arg", options0, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = null;
      int int0 = 2157;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("8`}f WX");
      int int1 = 9;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "", "", (Options) null, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("1Q|FWKcZ-EifUdD`");
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 10, "=4Nz*.=Vq~");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 2705, "", "", (Options) null, (-3789), 74, "\n", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(false);
      Option option0 = new Option((String) null, "usage: ", false, "trsbA~f+ o3 6");
      optionGroup0.addOption(option0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 11, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(11, "HG-Asq^!a[<wS", "-", (Options) null, "trsbA~f+ o3 6", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      helpFormatter0.printHelp("7r}", options0);
      helpFormatter0.setArgName("Np_Sm");
      helpFormatter0.rtrim("' was specified but an option from this group ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("-");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      char[] charArray0 = new char[1];
      stringBuffer0.setLength(9);
      charArray0[0] = 'C';
      stringBuffer0.append(charArray0);
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 74, " ");
      Options options0 = new Options();
      String string0 = "86X$8";
      options0.hasShortOption("86X$8");
      helpFormatter0.printHelp(" ", (String) null, options0, " ", true);
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\n");
      Options options0 = new Options();
      helpFormatter0.printHelp("b/PYi", options0, true);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 4831, 4831, "");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("HG-Asq^!a[<wS", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", options0, true);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = " :: ";
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 22, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("1Q|FWKcZ-EifUdD`");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "", "org.apache.commons.cli.HelpFormatter", (Options) null, (-2027), 9, "m@MADa", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      String string0 = "-";
      helpFormatter0.setLongOptPrefix("-");
      helpFormatter0.setOptPrefix("org.apache.commons.cli.Util");
      int int0 = 2012;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 2012, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("!tIk`!i ");
      helpFormatter0.defaultLeftPad = (-1);
      helpFormatter0.defaultLongOptPrefix = "@9[1p(]b";
      helpFormatter0.defaultArgName = "@9[1p(]b";
      helpFormatter0.setArgName(" | ");
      helpFormatter0.setNewLine("pE:TJ;C_");
      helpFormatter0.defaultLongOptPrefix = "org.apache.commons.cli.AlreadySelectedException";
      int int0 = 0;
      String string0 = "' was specified but an option from this group ";
      Options options0 = new Options();
      options0.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("' was specified but an option from this group ", options0, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ";
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      char[] charArray0 = new char[1];
      stringBuffer0.setLength(9);
      charArray0[0] = 'C';
      stringBuffer0.append(charArray0);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1), (-1), " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      String string0 = "N";
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("N", (-2), (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 13;
      helpFormatter0.setLongOptPrefix("-");
      helpFormatter0.setOptPrefix("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 13, "1Q|FWKcZ-EifUdD`");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 1;
      helpFormatter0.defaultLongOptPrefix = "[";
      helpFormatter0.defaultLongOptPrefix = "[";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", (Options) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 1;
      helpFormatter0.defaultLongOptPrefix = "[";
      Options options0 = null;
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      Option option0 = new Option("", "org.apache.commons.cli.HelpFormatter$OptionComparator");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("", "[k.%I\"rviSnyqFGq~", true, "\n");
      options3.hasLongOption(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options3, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      int int0 = 1;
      String string0 = " :: ";
      Options options0 = new Options();
      options0.hasShortOption("-");
      boolean boolean0 = false;
      String string1 = "";
      Options options1 = options0.addOption((String) null, "", false, "");
      // Undeclared exception!
      try { 
        options1.addOption("]", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ']'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = " :: ";
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 536;
      helpFormatter0.createPadding(536);
      StringWriter stringWriter0 = new StringWriter(74);
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      String string0 = "";
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "", 74, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), (String) null, "\"_6ZvY0 +%?0MuQv}", options0, "\"_6ZvY0 +%?0MuQv}", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("usage: ", "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("line.separator");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      int int0 = 1;
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("--", "-", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.setOptionComparator((Comparator) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setSyntaxPrefix("usage: ");
      int int0 = 1;
      String string0 = "Y}!`;$2u447";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption(",s", "[ option: ", true, "Y}!`;$2u447");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ',s' contains an illegal character : ','
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "HG-Asq^!a[<wS");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("!tIk`!i ");
      helpFormatter0.defaultLeftPad = (-1);
      helpFormatter0.defaultLongOptPrefix = "@9[1p(]b";
      helpFormatter0.defaultArgName = "@9[1p(]b";
      helpFormatter0.setArgName(" | ");
      helpFormatter0.setNewLine("pE:TJ;C_");
      helpFormatter0.defaultLongOptPrefix = "org.apache.commons.cli.AlreadySelectedException";
      int int0 = 0;
      helpFormatter0.setWidth(0);
      String string0 = "' was specified but an option from this group ";
      Options options0 = new Options();
      options0.helpOptions();
      // Undeclared exception!
      helpFormatter0.printHelp("' was specified but an option from this group ", options0, false);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      char[] charArray0 = new char[4];
      charArray0[0] = 't';
      charArray0[1] = '4';
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      bufferedOutputStream0.write(byteArray0);
      charArray0[2] = '{';
      charArray0[3] = '}';
      mockPrintWriter0.println((Object) null);
      mockPrintWriter1.print(charArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-1389), "v$ x.iCiywB=yqh&V,");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.defaultWidth = 295;
      helpFormatter0.setWidth(295);
      String string0 = "F.]+_k}b?pyp}Yn>";
      helpFormatter0.setOptPrefix("F.]+_k}b?pyp}Yn>");
      int int0 = 0;
      helpFormatter0.setLeftPadding(0);
      String string1 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("F.]+_k}b?pyp}Yn>", true, "F.]+_k}b?pyp}Yn>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'F.]+_k}b?pyp}Yn>' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "3";
      helpFormatter0.setLongOptSeparator("3");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setSyntaxPrefix("3");
      String string1 = "";
      Options options0 = new Options();
      String string2 = "";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("=D0[Nk'", "", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '=D0[Nk'' contains an illegal character : '='
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "9O3|4";
      int int0 = (-706);
      helpFormatter0.setLeftPadding((-706));
      int int1 = 0;
      helpFormatter0.setDescPadding(0);
      StringBuffer stringBuffer0 = null;
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg");
      Options options1 = options0.addOption(option0);
      String string0 = "OQ[PlV2]\\;o%N;H3";
      boolean boolean0 = true;
      String string1 = "MTM";
      // Undeclared exception!
      try { 
        options1.addOption("-", "OQ[PlV2];o%N;H3", true, "MTM");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("(S");
      String string0 = "rvpIMt ";
      Options options0 = new Options();
      String string1 = "j\\I}<u?F,8&*";
      String string2 = ";9J.dM";
      // Undeclared exception!
      try { 
        options0.addOption("-", "jI}<u?F,8&*", false, ";9J.dM");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('3');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      mockPrintWriter0.println((double) 1);
      mockPrintWriter0.print(false);
      PrintWriter printWriter0 = mockPrintWriter0.append('3');
      int int0 = 792;
      helpFormatter0.setLeftPadding(198);
      Options options0 = new Options();
      int int1 = 398;
      helpFormatter0.printOptions(printWriter0, 792, options0, 792, 398);
      int int2 = (-1718);
      String string0 = "9I<<r8AenY[<)k-3E4#";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-1718), "9I<<r8AenY[<)k-3E4#");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      PrintWriter printWriter0 = null;
      int int0 = (-512);
      String string1 = "-";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-512), "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("ZO3lER`?q[bi(? t?%");
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptionComparator();
      assertEquals("ZO3lER`?q[bi(? t?%", helpFormatter0.getNewLine());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.getWidth();
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }
}
